   1              		.file	"update_word_list.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text._ZnwmPv,"axG",@progbits,_ZnwmPv,comdat
   5              		.weak	_ZnwmPv
   7              	_ZnwmPv:
   8              	.LASANPC38:
   9              	.LFB38:
  10              		.file 1 "/usr/include/c++/9/new"
   1:/usr/include/c++/9/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/include/c++/9/new **** 
   3:/usr/include/c++/9/new **** // Copyright (C) 1994-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/new **** 
   5:/usr/include/c++/9/new **** // This file is part of GCC.
   6:/usr/include/c++/9/new **** //
   7:/usr/include/c++/9/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/9/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/c++/9/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/9/new **** // any later version.
  11:/usr/include/c++/9/new **** // 
  12:/usr/include/c++/9/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/9/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/9/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/9/new **** // GNU General Public License for more details.
  16:/usr/include/c++/9/new **** // 
  17:/usr/include/c++/9/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/9/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/9/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/9/new **** 
  21:/usr/include/c++/9/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/9/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/9/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/9/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/9/new **** 
  26:/usr/include/c++/9/new **** /** @file new
  27:/usr/include/c++/9/new ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/9/new ****  *
  29:/usr/include/c++/9/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/include/c++/9/new ****  *  handling memory allocation errors; see
  31:/usr/include/c++/9/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/usr/include/c++/9/new ****  */
  33:/usr/include/c++/9/new **** 
  34:/usr/include/c++/9/new **** #ifndef _NEW
  35:/usr/include/c++/9/new **** #define _NEW
  36:/usr/include/c++/9/new **** 
  37:/usr/include/c++/9/new **** #pragma GCC system_header
  38:/usr/include/c++/9/new **** 
  39:/usr/include/c++/9/new **** #include <bits/c++config.h>
  40:/usr/include/c++/9/new **** #include <exception>
  41:/usr/include/c++/9/new **** 
  42:/usr/include/c++/9/new **** #pragma GCC visibility push(default)
  43:/usr/include/c++/9/new **** 
  44:/usr/include/c++/9/new **** extern "C++" {
  45:/usr/include/c++/9/new **** 
  46:/usr/include/c++/9/new **** namespace std 
  47:/usr/include/c++/9/new **** {
  48:/usr/include/c++/9/new ****   /**
  49:/usr/include/c++/9/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/usr/include/c++/9/new ****    *  @ingroup exceptions
  51:/usr/include/c++/9/new ****    *
  52:/usr/include/c++/9/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/usr/include/c++/9/new ****    *  errors from the throwing forms of @c new.  */
  54:/usr/include/c++/9/new ****   class bad_alloc : public exception 
  55:/usr/include/c++/9/new ****   {
  56:/usr/include/c++/9/new ****   public:
  57:/usr/include/c++/9/new ****     bad_alloc() throw() { }
  58:/usr/include/c++/9/new **** 
  59:/usr/include/c++/9/new **** #if __cplusplus >= 201103L
  60:/usr/include/c++/9/new ****     bad_alloc(const bad_alloc&) = default;
  61:/usr/include/c++/9/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  62:/usr/include/c++/9/new **** #endif
  63:/usr/include/c++/9/new **** 
  64:/usr/include/c++/9/new ****     // This declaration is not useless:
  65:/usr/include/c++/9/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  66:/usr/include/c++/9/new ****     virtual ~bad_alloc() throw();
  67:/usr/include/c++/9/new **** 
  68:/usr/include/c++/9/new ****     // See comment in eh_exception.cc.
  69:/usr/include/c++/9/new ****     virtual const char* what() const throw();
  70:/usr/include/c++/9/new ****   };
  71:/usr/include/c++/9/new **** 
  72:/usr/include/c++/9/new **** #if __cplusplus >= 201103L
  73:/usr/include/c++/9/new ****   class bad_array_new_length : public bad_alloc
  74:/usr/include/c++/9/new ****   {
  75:/usr/include/c++/9/new ****   public:
  76:/usr/include/c++/9/new ****     bad_array_new_length() throw() { }
  77:/usr/include/c++/9/new **** 
  78:/usr/include/c++/9/new ****     // This declaration is not useless:
  79:/usr/include/c++/9/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  80:/usr/include/c++/9/new ****     virtual ~bad_array_new_length() throw();
  81:/usr/include/c++/9/new **** 
  82:/usr/include/c++/9/new ****     // See comment in eh_exception.cc.
  83:/usr/include/c++/9/new ****     virtual const char* what() const throw();
  84:/usr/include/c++/9/new ****   };
  85:/usr/include/c++/9/new **** #endif
  86:/usr/include/c++/9/new **** 
  87:/usr/include/c++/9/new **** #if __cpp_aligned_new
  88:/usr/include/c++/9/new ****   enum class align_val_t: size_t {};
  89:/usr/include/c++/9/new **** #endif
  90:/usr/include/c++/9/new **** 
  91:/usr/include/c++/9/new ****   struct nothrow_t
  92:/usr/include/c++/9/new ****   {
  93:/usr/include/c++/9/new **** #if __cplusplus >= 201103L
  94:/usr/include/c++/9/new ****     explicit nothrow_t() = default;
  95:/usr/include/c++/9/new **** #endif
  96:/usr/include/c++/9/new ****   };
  97:/usr/include/c++/9/new **** 
  98:/usr/include/c++/9/new ****   extern const nothrow_t nothrow;
  99:/usr/include/c++/9/new **** 
 100:/usr/include/c++/9/new ****   /** If you write your own error handler to be called by @c new, it must
 101:/usr/include/c++/9/new ****    *  be of this type.  */
 102:/usr/include/c++/9/new ****   typedef void (*new_handler)();
 103:/usr/include/c++/9/new **** 
 104:/usr/include/c++/9/new ****   /// Takes a replacement handler as the argument, returns the
 105:/usr/include/c++/9/new ****   /// previous handler.
 106:/usr/include/c++/9/new ****   new_handler set_new_handler(new_handler) throw();
 107:/usr/include/c++/9/new **** 
 108:/usr/include/c++/9/new **** #if __cplusplus >= 201103L
 109:/usr/include/c++/9/new ****   /// Return the current new handler.
 110:/usr/include/c++/9/new ****   new_handler get_new_handler() noexcept;
 111:/usr/include/c++/9/new **** #endif
 112:/usr/include/c++/9/new **** } // namespace std
 113:/usr/include/c++/9/new **** 
 114:/usr/include/c++/9/new **** //@{
 115:/usr/include/c++/9/new **** /** These are replaceable signatures:
 116:/usr/include/c++/9/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 117:/usr/include/c++/9/new ****  *  - normal array new and delete (same)
 118:/usr/include/c++/9/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 119:/usr/include/c++/9/new ****  *    @c NULL on error)
 120:/usr/include/c++/9/new ****  *  - @c nothrow array new and delete (same)
 121:/usr/include/c++/9/new ****  *
 122:/usr/include/c++/9/new ****  *  Placement new and delete signatures (take a memory address argument,
 123:/usr/include/c++/9/new ****  *  does nothing) may not be replaced by a user's program.
 124:/usr/include/c++/9/new **** */
 125:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 126:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 127:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 128:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 129:/usr/include/c++/9/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 130:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 131:/usr/include/c++/9/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 132:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 133:/usr/include/c++/9/new **** #if __cpp_sized_deallocation
 134:/usr/include/c++/9/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 135:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 136:/usr/include/c++/9/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 137:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 138:/usr/include/c++/9/new **** #endif
 139:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 140:/usr/include/c++/9/new ****   __attribute__((__externally_visible__, __malloc__));
 141:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 142:/usr/include/c++/9/new ****   __attribute__((__externally_visible__, __malloc__));
 143:/usr/include/c++/9/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 144:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 145:/usr/include/c++/9/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 146:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 147:/usr/include/c++/9/new **** #if __cpp_aligned_new
 148:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 149:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 150:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 151:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 152:/usr/include/c++/9/new **** void operator delete(void*, std::align_val_t)
 153:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 154:/usr/include/c++/9/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 155:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 156:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 157:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 158:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 159:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 160:/usr/include/c++/9/new **** void operator delete[](void*, std::align_val_t)
 161:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 162:/usr/include/c++/9/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 163:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 164:/usr/include/c++/9/new **** #if __cpp_sized_deallocation
 165:/usr/include/c++/9/new **** void operator delete(void*, std::size_t, std::align_val_t)
 166:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 167:/usr/include/c++/9/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 168:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 169:/usr/include/c++/9/new **** #endif // __cpp_sized_deallocation
 170:/usr/include/c++/9/new **** #endif // __cpp_aligned_new
 171:/usr/include/c++/9/new **** 
 172:/usr/include/c++/9/new **** // Default placement versions of operator new.
 173:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 174:/usr/include/c++/9/new **** { return __p; }
  11              		.loc 1 174 1
  12              		.cfi_startproc
  13 0000 F30F1EFA 		endbr64
  14 0004 55       		pushq	%rbp
  15              		.cfi_def_cfa_offset 16
  16              		.cfi_offset 6, -16
  17 0005 4889E5   		movq	%rsp, %rbp
  18              		.cfi_def_cfa_register 6
  19 0008 48897DF8 		movq	%rdi, -8(%rbp)
  20 000c 488975F0 		movq	%rsi, -16(%rbp)
  21              		.loc 1 174 10
  22 0010 488B45F0 		movq	-16(%rbp), %rax
  23              		.loc 1 174 15
  24 0014 5D       		popq	%rbp
  25              		.cfi_def_cfa 7, 8
  26 0015 C3       		ret
  27              		.cfi_endproc
  28              	.LFE38:
  30              		.section	.text._ZdlPvS_,"axG",@progbits,_ZdlPvS_,comdat
  31              		.weak	_ZdlPvS_
  33              	_ZdlPvS_:
  34              	.LASANPC40:
  35              	.LFB40:
 175:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 176:/usr/include/c++/9/new **** { return __p; }
 177:/usr/include/c++/9/new **** 
 178:/usr/include/c++/9/new **** // Default placement versions of operator delete.
 179:/usr/include/c++/9/new **** inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  36              		.loc 1 179 67
  37              		.cfi_startproc
  38 0000 F30F1EFA 		endbr64
  39 0004 55       		pushq	%rbp
  40              		.cfi_def_cfa_offset 16
  41              		.cfi_offset 6, -16
  42 0005 4889E5   		movq	%rsp, %rbp
  43              		.cfi_def_cfa_register 6
  44 0008 48897DF8 		movq	%rdi, -8(%rbp)
  45 000c 488975F0 		movq	%rsi, -16(%rbp)
  46              		.loc 1 179 69
  47 0010 90       		nop
  48 0011 5D       		popq	%rbp
  49              		.cfi_def_cfa 7, 8
  50 0012 C3       		ret
  51              		.cfi_endproc
  52              	.LFE40:
  54              		.section	.text._ZNSt11char_traitsIcE6lengthEPKc,"axG",@progbits,_ZNSt11char_traitsIcE6lengthEPKc,c
  55              		.weak	_ZNSt11char_traitsIcE6lengthEPKc
  57              	_ZNSt11char_traitsIcE6lengthEPKc:
  58              	.LASANPC402:
  59              	.LFB402:
  60              		.file 2 "/usr/include/c++/9/bits/char_traits.h"
   1:/usr/include/c++/9/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/c++/9/bits/char_traits.h **** 
   3:/usr/include/c++/9/bits/char_traits.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/char_traits.h **** //
   5:/usr/include/c++/9/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/char_traits.h **** // any later version.
  10:/usr/include/c++/9/bits/char_traits.h **** 
  11:/usr/include/c++/9/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/char_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/char_traits.h **** 
  16:/usr/include/c++/9/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/char_traits.h **** 
  20:/usr/include/c++/9/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/char_traits.h **** 
  25:/usr/include/c++/9/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/usr/include/c++/9/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/9/bits/char_traits.h ****  */
  29:/usr/include/c++/9/bits/char_traits.h **** 
  30:/usr/include/c++/9/bits/char_traits.h **** //
  31:/usr/include/c++/9/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/9/bits/char_traits.h **** //
  33:/usr/include/c++/9/bits/char_traits.h **** 
  34:/usr/include/c++/9/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/usr/include/c++/9/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/usr/include/c++/9/bits/char_traits.h **** 
  37:/usr/include/c++/9/bits/char_traits.h **** #pragma GCC system_header
  38:/usr/include/c++/9/bits/char_traits.h **** 
  39:/usr/include/c++/9/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/usr/include/c++/9/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/usr/include/c++/9/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/usr/include/c++/9/bits/char_traits.h **** 
  43:/usr/include/c++/9/bits/char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  44:/usr/include/c++/9/bits/char_traits.h **** # define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  45:/usr/include/c++/9/bits/char_traits.h **** #endif
  46:/usr/include/c++/9/bits/char_traits.h **** 
  47:/usr/include/c++/9/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  48:/usr/include/c++/9/bits/char_traits.h **** {
  49:/usr/include/c++/9/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/usr/include/c++/9/bits/char_traits.h **** 
  51:/usr/include/c++/9/bits/char_traits.h ****   /**
  52:/usr/include/c++/9/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  53:/usr/include/c++/9/bits/char_traits.h ****    *
  54:/usr/include/c++/9/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  55:/usr/include/c++/9/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  56:/usr/include/c++/9/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  57:/usr/include/c++/9/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  58:/usr/include/c++/9/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  59:/usr/include/c++/9/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  60:/usr/include/c++/9/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  61:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
  62:/usr/include/c++/9/bits/char_traits.h ****     struct _Char_types
  63:/usr/include/c++/9/bits/char_traits.h ****     {
  64:/usr/include/c++/9/bits/char_traits.h ****       typedef unsigned long   int_type;
  65:/usr/include/c++/9/bits/char_traits.h ****       typedef std::streampos  pos_type;
  66:/usr/include/c++/9/bits/char_traits.h ****       typedef std::streamoff  off_type;
  67:/usr/include/c++/9/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  68:/usr/include/c++/9/bits/char_traits.h ****     };
  69:/usr/include/c++/9/bits/char_traits.h **** 
  70:/usr/include/c++/9/bits/char_traits.h **** 
  71:/usr/include/c++/9/bits/char_traits.h ****   /**
  72:/usr/include/c++/9/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  73:/usr/include/c++/9/bits/char_traits.h ****    *
  74:/usr/include/c++/9/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  75:/usr/include/c++/9/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  76:/usr/include/c++/9/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  77:/usr/include/c++/9/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  78:/usr/include/c++/9/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  79:/usr/include/c++/9/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  80:/usr/include/c++/9/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  81:/usr/include/c++/9/bits/char_traits.h ****    *
  82:/usr/include/c++/9/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  83:/usr/include/c++/9/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  84:/usr/include/c++/9/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  85:/usr/include/c++/9/bits/char_traits.h ****    */
  86:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
  87:/usr/include/c++/9/bits/char_traits.h ****     struct char_traits
  88:/usr/include/c++/9/bits/char_traits.h ****     {
  89:/usr/include/c++/9/bits/char_traits.h ****       typedef _CharT                                    char_type;
  90:/usr/include/c++/9/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  91:/usr/include/c++/9/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  92:/usr/include/c++/9/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  93:/usr/include/c++/9/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  94:/usr/include/c++/9/bits/char_traits.h **** 
  95:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
  96:/usr/include/c++/9/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
  97:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
  98:/usr/include/c++/9/bits/char_traits.h **** 
  99:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 100:/usr/include/c++/9/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 101:/usr/include/c++/9/bits/char_traits.h ****       { return __c1 == __c2; }
 102:/usr/include/c++/9/bits/char_traits.h **** 
 103:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 104:/usr/include/c++/9/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 105:/usr/include/c++/9/bits/char_traits.h ****       { return __c1 < __c2; }
 106:/usr/include/c++/9/bits/char_traits.h **** 
 107:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 108:/usr/include/c++/9/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 109:/usr/include/c++/9/bits/char_traits.h **** 
 110:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 111:/usr/include/c++/9/bits/char_traits.h ****       length(const char_type* __s);
 112:/usr/include/c++/9/bits/char_traits.h **** 
 113:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 114:/usr/include/c++/9/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 115:/usr/include/c++/9/bits/char_traits.h **** 
 116:/usr/include/c++/9/bits/char_traits.h ****       static char_type*
 117:/usr/include/c++/9/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 118:/usr/include/c++/9/bits/char_traits.h **** 
 119:/usr/include/c++/9/bits/char_traits.h ****       static char_type*
 120:/usr/include/c++/9/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 121:/usr/include/c++/9/bits/char_traits.h **** 
 122:/usr/include/c++/9/bits/char_traits.h ****       static char_type*
 123:/usr/include/c++/9/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 124:/usr/include/c++/9/bits/char_traits.h **** 
 125:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 126:/usr/include/c++/9/bits/char_traits.h ****       to_char_type(const int_type& __c)
 127:/usr/include/c++/9/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 128:/usr/include/c++/9/bits/char_traits.h **** 
 129:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 130:/usr/include/c++/9/bits/char_traits.h ****       to_int_type(const char_type& __c)
 131:/usr/include/c++/9/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 132:/usr/include/c++/9/bits/char_traits.h **** 
 133:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 134:/usr/include/c++/9/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 135:/usr/include/c++/9/bits/char_traits.h ****       { return __c1 == __c2; }
 136:/usr/include/c++/9/bits/char_traits.h **** 
 137:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 138:/usr/include/c++/9/bits/char_traits.h ****       eof()
 139:/usr/include/c++/9/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 140:/usr/include/c++/9/bits/char_traits.h **** 
 141:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 142:/usr/include/c++/9/bits/char_traits.h ****       not_eof(const int_type& __c)
 143:/usr/include/c++/9/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 144:/usr/include/c++/9/bits/char_traits.h ****     };
 145:/usr/include/c++/9/bits/char_traits.h **** 
 146:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 147:/usr/include/c++/9/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 148:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 149:/usr/include/c++/9/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 150:/usr/include/c++/9/bits/char_traits.h ****     {
 151:/usr/include/c++/9/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 152:/usr/include/c++/9/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 153:/usr/include/c++/9/bits/char_traits.h **** 	  return -1;
 154:/usr/include/c++/9/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 155:/usr/include/c++/9/bits/char_traits.h **** 	  return 1;
 156:/usr/include/c++/9/bits/char_traits.h ****       return 0;
 157:/usr/include/c++/9/bits/char_traits.h ****     }
 158:/usr/include/c++/9/bits/char_traits.h **** 
 159:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 160:/usr/include/c++/9/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 161:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 162:/usr/include/c++/9/bits/char_traits.h ****     length(const char_type* __p)
 163:/usr/include/c++/9/bits/char_traits.h ****     {
 164:/usr/include/c++/9/bits/char_traits.h ****       std::size_t __i = 0;
 165:/usr/include/c++/9/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 166:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 167:/usr/include/c++/9/bits/char_traits.h ****       return __i;
 168:/usr/include/c++/9/bits/char_traits.h ****     }
 169:/usr/include/c++/9/bits/char_traits.h **** 
 170:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 171:/usr/include/c++/9/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 172:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 173:/usr/include/c++/9/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 174:/usr/include/c++/9/bits/char_traits.h ****     {
 175:/usr/include/c++/9/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 176:/usr/include/c++/9/bits/char_traits.h ****         if (eq(__s[__i], __a))
 177:/usr/include/c++/9/bits/char_traits.h ****           return __s + __i;
 178:/usr/include/c++/9/bits/char_traits.h ****       return 0;
 179:/usr/include/c++/9/bits/char_traits.h ****     }
 180:/usr/include/c++/9/bits/char_traits.h **** 
 181:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 182:/usr/include/c++/9/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 183:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 184:/usr/include/c++/9/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 185:/usr/include/c++/9/bits/char_traits.h ****     {
 186:/usr/include/c++/9/bits/char_traits.h ****       if (__n == 0)
 187:/usr/include/c++/9/bits/char_traits.h **** 	return __s1;
 188:/usr/include/c++/9/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 189:/usr/include/c++/9/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 190:/usr/include/c++/9/bits/char_traits.h ****     }
 191:/usr/include/c++/9/bits/char_traits.h **** 
 192:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 193:/usr/include/c++/9/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 194:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 195:/usr/include/c++/9/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 196:/usr/include/c++/9/bits/char_traits.h ****     {
 197:/usr/include/c++/9/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 198:/usr/include/c++/9/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 199:/usr/include/c++/9/bits/char_traits.h ****       return __s1;
 200:/usr/include/c++/9/bits/char_traits.h ****     }
 201:/usr/include/c++/9/bits/char_traits.h **** 
 202:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 203:/usr/include/c++/9/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 204:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 205:/usr/include/c++/9/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 206:/usr/include/c++/9/bits/char_traits.h ****     {
 207:/usr/include/c++/9/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 208:/usr/include/c++/9/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 209:/usr/include/c++/9/bits/char_traits.h ****       return __s;
 210:/usr/include/c++/9/bits/char_traits.h ****     }
 211:/usr/include/c++/9/bits/char_traits.h **** 
 212:/usr/include/c++/9/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 213:/usr/include/c++/9/bits/char_traits.h **** } // namespace
 214:/usr/include/c++/9/bits/char_traits.h **** 
 215:/usr/include/c++/9/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 216:/usr/include/c++/9/bits/char_traits.h **** {
 217:/usr/include/c++/9/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 218:/usr/include/c++/9/bits/char_traits.h **** 
 219:/usr/include/c++/9/bits/char_traits.h **** #if __cplusplus >= 201703L
 220:/usr/include/c++/9/bits/char_traits.h **** #define __cpp_lib_constexpr_char_traits 201611
 221:/usr/include/c++/9/bits/char_traits.h **** 
 222:/usr/include/c++/9/bits/char_traits.h ****   /**
 223:/usr/include/c++/9/bits/char_traits.h ****    *  @brief Determine whether the characters of a NULL-terminated
 224:/usr/include/c++/9/bits/char_traits.h ****    *  string are known at compile time.
 225:/usr/include/c++/9/bits/char_traits.h ****    *  @param  __s  The string.
 226:/usr/include/c++/9/bits/char_traits.h ****    *
 227:/usr/include/c++/9/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 228:/usr/include/c++/9/bits/char_traits.h ****    */
 229:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 230:/usr/include/c++/9/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 231:/usr/include/c++/9/bits/char_traits.h ****     __constant_string_p(const _CharT* __s)
 232:/usr/include/c++/9/bits/char_traits.h ****     {
 233:/usr/include/c++/9/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 234:/usr/include/c++/9/bits/char_traits.h ****       (void) __s;
 235:/usr/include/c++/9/bits/char_traits.h ****       // In constexpr contexts all strings should be constant.
 236:/usr/include/c++/9/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 237:/usr/include/c++/9/bits/char_traits.h **** #else
 238:/usr/include/c++/9/bits/char_traits.h ****       while (__builtin_constant_p(*__s) && *__s)
 239:/usr/include/c++/9/bits/char_traits.h **** 	__s++;
 240:/usr/include/c++/9/bits/char_traits.h ****       return __builtin_constant_p(*__s);
 241:/usr/include/c++/9/bits/char_traits.h **** #endif
 242:/usr/include/c++/9/bits/char_traits.h ****     }
 243:/usr/include/c++/9/bits/char_traits.h **** 
 244:/usr/include/c++/9/bits/char_traits.h ****   /**
 245:/usr/include/c++/9/bits/char_traits.h ****    *  @brief Determine whether the characters of a character array are
 246:/usr/include/c++/9/bits/char_traits.h ****    *  known at compile time.
 247:/usr/include/c++/9/bits/char_traits.h ****    *  @param  __a  The character array.
 248:/usr/include/c++/9/bits/char_traits.h ****    *  @param  __n  Number of characters.
 249:/usr/include/c++/9/bits/char_traits.h ****    *
 250:/usr/include/c++/9/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 251:/usr/include/c++/9/bits/char_traits.h ****    */
 252:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 253:/usr/include/c++/9/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 254:/usr/include/c++/9/bits/char_traits.h ****     __constant_char_array_p(const _CharT* __a, size_t __n)
 255:/usr/include/c++/9/bits/char_traits.h ****     {
 256:/usr/include/c++/9/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 257:/usr/include/c++/9/bits/char_traits.h ****       (void) __a;
 258:/usr/include/c++/9/bits/char_traits.h ****       (void) __n;
 259:/usr/include/c++/9/bits/char_traits.h ****       // In constexpr contexts all character arrays should be constant.
 260:/usr/include/c++/9/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 261:/usr/include/c++/9/bits/char_traits.h **** #else
 262:/usr/include/c++/9/bits/char_traits.h ****       size_t __i = 0;
 263:/usr/include/c++/9/bits/char_traits.h ****       while (__i < __n && __builtin_constant_p(__a[__i]))
 264:/usr/include/c++/9/bits/char_traits.h **** 	__i++;
 265:/usr/include/c++/9/bits/char_traits.h ****       return __i == __n;
 266:/usr/include/c++/9/bits/char_traits.h **** #endif
 267:/usr/include/c++/9/bits/char_traits.h ****     }
 268:/usr/include/c++/9/bits/char_traits.h **** #endif
 269:/usr/include/c++/9/bits/char_traits.h **** 
 270:/usr/include/c++/9/bits/char_traits.h ****   // 21.1
 271:/usr/include/c++/9/bits/char_traits.h ****   /**
 272:/usr/include/c++/9/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 273:/usr/include/c++/9/bits/char_traits.h ****    *
 274:/usr/include/c++/9/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 275:/usr/include/c++/9/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 276:/usr/include/c++/9/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 277:/usr/include/c++/9/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 278:/usr/include/c++/9/bits/char_traits.h ****    *
 279:/usr/include/c++/9/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 280:/usr/include/c++/9/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 281:/usr/include/c++/9/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 282:/usr/include/c++/9/bits/char_traits.h ****   */
 283:/usr/include/c++/9/bits/char_traits.h ****   template<class _CharT>
 284:/usr/include/c++/9/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 285:/usr/include/c++/9/bits/char_traits.h ****     { };
 286:/usr/include/c++/9/bits/char_traits.h **** 
 287:/usr/include/c++/9/bits/char_traits.h **** 
 288:/usr/include/c++/9/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 289:/usr/include/c++/9/bits/char_traits.h ****   template<>
 290:/usr/include/c++/9/bits/char_traits.h ****     struct char_traits<char>
 291:/usr/include/c++/9/bits/char_traits.h ****     {
 292:/usr/include/c++/9/bits/char_traits.h ****       typedef char              char_type;
 293:/usr/include/c++/9/bits/char_traits.h ****       typedef int               int_type;
 294:/usr/include/c++/9/bits/char_traits.h ****       typedef streampos         pos_type;
 295:/usr/include/c++/9/bits/char_traits.h ****       typedef streamoff         off_type;
 296:/usr/include/c++/9/bits/char_traits.h ****       typedef mbstate_t         state_type;
 297:/usr/include/c++/9/bits/char_traits.h **** 
 298:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 299:/usr/include/c++/9/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 300:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 301:/usr/include/c++/9/bits/char_traits.h **** 
 302:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 303:/usr/include/c++/9/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 304:/usr/include/c++/9/bits/char_traits.h ****       { return __c1 == __c2; }
 305:/usr/include/c++/9/bits/char_traits.h **** 
 306:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 307:/usr/include/c++/9/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 308:/usr/include/c++/9/bits/char_traits.h ****       {
 309:/usr/include/c++/9/bits/char_traits.h **** 	// LWG 467.
 310:/usr/include/c++/9/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 311:/usr/include/c++/9/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 312:/usr/include/c++/9/bits/char_traits.h ****       }
 313:/usr/include/c++/9/bits/char_traits.h **** 
 314:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
 315:/usr/include/c++/9/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 316:/usr/include/c++/9/bits/char_traits.h ****       {
 317:/usr/include/c++/9/bits/char_traits.h **** 	if (__n == 0)
 318:/usr/include/c++/9/bits/char_traits.h **** 	  return 0;
 319:/usr/include/c++/9/bits/char_traits.h **** #if __cplusplus >= 201703L
 320:/usr/include/c++/9/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 321:/usr/include/c++/9/bits/char_traits.h **** 	    && __constant_char_array_p(__s1, __n)
 322:/usr/include/c++/9/bits/char_traits.h **** 	    && __constant_char_array_p(__s2, __n))
 323:/usr/include/c++/9/bits/char_traits.h **** 	  {
 324:/usr/include/c++/9/bits/char_traits.h **** 	    for (size_t __i = 0; __i < __n; ++__i)
 325:/usr/include/c++/9/bits/char_traits.h **** 	      if (lt(__s1[__i], __s2[__i]))
 326:/usr/include/c++/9/bits/char_traits.h **** 		return -1;
 327:/usr/include/c++/9/bits/char_traits.h **** 	      else if (lt(__s2[__i], __s1[__i]))
 328:/usr/include/c++/9/bits/char_traits.h **** 		return 1;
 329:/usr/include/c++/9/bits/char_traits.h **** 	    return 0;
 330:/usr/include/c++/9/bits/char_traits.h **** 	  }
 331:/usr/include/c++/9/bits/char_traits.h **** #endif
 332:/usr/include/c++/9/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 333:/usr/include/c++/9/bits/char_traits.h ****       }
 334:/usr/include/c++/9/bits/char_traits.h **** 
 335:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
 336:/usr/include/c++/9/bits/char_traits.h ****       length(const char_type* __s)
  61              		.loc 2 336 7
  62              		.cfi_startproc
  63 0000 F30F1EFA 		endbr64
  64 0004 55       		pushq	%rbp
  65              		.cfi_def_cfa_offset 16
  66              		.cfi_offset 6, -16
  67 0005 4889E5   		movq	%rsp, %rbp
  68              		.cfi_def_cfa_register 6
  69 0008 4883EC20 		subq	$32, %rsp
  70 000c 48897DE8 		movq	%rdi, -24(%rbp)
  71 0010 488B45E8 		movq	-24(%rbp), %rax
  72 0014 488945F8 		movq	%rax, -8(%rbp)
  73              	.LBB4:
  74              	.LBB5:
 236:/usr/include/c++/9/bits/char_traits.h **** #else
  75              		.loc 2 236 46
  76 0018 B8000000 		movl	$0, %eax
  76      00
  77              	.LBE5:
  78              	.LBE4:
 337:/usr/include/c++/9/bits/char_traits.h ****       {
 338:/usr/include/c++/9/bits/char_traits.h **** #if __cplusplus >= 201703L
 339:/usr/include/c++/9/bits/char_traits.h **** 	if (__constant_string_p(__s))
  79              		.loc 2 339 2
  80 001d 84C0     		testb	%al, %al
  81 001f 740E     		je	.L6
 340:/usr/include/c++/9/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
  82              		.loc 2 340 52
  83 0021 488B45E8 		movq	-24(%rbp), %rax
  84 0025 4889C7   		movq	%rax, %rdi
  85 0028 E8000000 		call	_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc
  85      00
  86              		.loc 2 340 56
  87 002d EB20     		jmp	.L7
  88              	.L6:
 341:/usr/include/c++/9/bits/char_traits.h **** #endif
 342:/usr/include/c++/9/bits/char_traits.h **** 	return __builtin_strlen(__s);
  89              		.loc 2 342 25
  90 002f 48837DE8 		cmpq	$0, -24(%rbp)
  90      00
  91 0034 750C     		jne	.L8
  92 0036 488D3D00 		leaq	.Lubsan_data373(%rip), %rdi
  92      000000
  93 003d E8000000 		call	__ubsan_handle_nonnull_arg@PLT
  93      00
  94              	.L8:
  95 0042 488B45E8 		movq	-24(%rbp), %rax
  96 0046 4889C7   		movq	%rax, %rdi
  97 0049 E8000000 		call	strlen@PLT
  97      00
  98              		.loc 2 342 29
  99 004e 90       		nop
 100              	.L7:
 343:/usr/include/c++/9/bits/char_traits.h ****       }
 101              		.loc 2 343 7
 102 004f C9       		leave
 103              		.cfi_def_cfa 7, 8
 104 0050 C3       		ret
 105              		.cfi_endproc
 106              	.LFE402:
 108              		.data
 109              		.align 32
 112              	.Lubsan_type4:
 115 0004 2776616C 		.string	"'value_type'"
 115      75655F74 
 115      79706527 
 115      00
 116 0011 00000000 		.zero	47
 116      00000000 
 116      00000000 
 116      00000000 
 116      00000000 
 117              		.section	.rodata
 118              		.align 32
 119              	.LC0:
 120 0000 2F686F6D 		.string	"/home/arkel/c++/wordle/files/update_word_list.cpp"
 120      652F6172 
 120      6B656C2F 
 120      632B2B2F 
 120      776F7264 
 121 0032 00000000 		.zero	46
 121      00000000 
 121      00000000 
 121      00000000 
 121      00000000 
 122              		.section	.data.rel.local,"aw"
 123              		.align 32
 126              	.Lubsan_data374:
 127 0000 00000000 		.quad	.LC0
 127      00000000 
 128 0008 0A000000 		.long	10
 129 000c 11000000 		.long	17
 130 0010 00000000 		.quad	.Lubsan_type4
 130      00000000 
 131 0018 00       		.byte	0
 132 0019 00       		.byte	0
 133 001a 00000000 		.zero	6
 133      0000
 134 0020 00000000 		.zero	32
 134      00000000 
 134      00000000 
 134      00000000 
 134      00000000 
 135              		.align 32
 138              	.Lubsan_data375:
 139 0040 00000000 		.quad	.LC0
 139      00000000 
 140 0048 0B000000 		.long	11
 141 004c 21000000 		.long	33
 142 0050 00000000 		.zero	48
 142      00000000 
 142      00000000 
 142      00000000 
 142      00000000 
 143              		.align 32
 146              	.Lubsan_data376:
 147 0080 00000000 		.quad	.LC0
 147      00000000 
 148 0088 0B000000 		.long	11
 149 008c 21000000 		.long	33
 150 0090 00000000 		.zero	48
 150      00000000 
 150      00000000 
 150      00000000 
 150      00000000 
 151              		.data
 152              		.align 32
 155              	.Lubsan_type5:
 158 0044 27737472 		.string	"'struct basic_string'"
 158      75637420 
 158      62617369 
 158      635F7374 
 158      72696E67 
 159 005a 00000000 		.zero	38
 159      00000000 
 159      00000000 
 159      00000000 
 159      00000000 
 160              		.section	.data.rel.local
 161              		.align 32
 164              	.Lubsan_data377:
 165 00c0 00000000 		.quad	.LC0
 165      00000000 
 166 00c8 0B000000 		.long	11
 167 00cc 21000000 		.long	33
 168 00d0 00000000 		.quad	.Lubsan_type5
 168      00000000 
 169 00d8 03       		.byte	3
 170 00d9 04       		.byte	4
 171 00da 00000000 		.zero	6
 171      0000
 172 00e0 00000000 		.zero	32
 172      00000000 
 172      00000000 
 172      00000000 
 172      00000000 
 173              		.align 32
 176              	.Lubsan_data378:
 177 0100 00000000 		.quad	.LC0
 177      00000000 
 178 0108 0D000000 		.long	13
 179 010c 41000000 		.long	65
 180 0110 00000000 		.zero	48
 180      00000000 
 180      00000000 
 180      00000000 
 180      00000000 
 181              		.align 32
 184              	.Lubsan_data379:
 185 0140 00000000 		.quad	.LC0
 185      00000000 
 186 0148 0D000000 		.long	13
 187 014c 41000000 		.long	65
 188 0150 00000000 		.zero	48
 188      00000000 
 188      00000000 
 188      00000000 
 188      00000000 
 189              		.align 32
 192              	.Lubsan_data380:
 193 0180 00000000 		.quad	.LC0
 193      00000000 
 194 0188 0D000000 		.long	13
 195 018c 41000000 		.long	65
 196 0190 00000000 		.quad	.Lubsan_type5
 196      00000000 
 197 0198 03       		.byte	3
 198 0199 04       		.byte	4
 199 019a 00000000 		.zero	6
 199      0000
 200 01a0 00000000 		.zero	32
 200      00000000 
 200      00000000 
 200      00000000 
 200      00000000 
 201              		.align 32
 204              	.Lubsan_data381:
 205 01c0 00000000 		.quad	.LC0
 205      00000000 
 206 01c8 0B000000 		.long	11
 207 01cc 21000000 		.long	33
 208 01d0 00000000 		.zero	48
 208      00000000 
 208      00000000 
 208      00000000 
 208      00000000 
 209              		.align 32
 212              	.Lubsan_data382:
 213 0200 00000000 		.quad	.LC0
 213      00000000 
 214 0208 0B000000 		.long	11
 215 020c 21000000 		.long	33
 216 0210 00000000 		.zero	48
 216      00000000 
 216      00000000 
 216      00000000 
 216      00000000 
 217              		.align 32
 220              	.Lubsan_data383:
 221 0240 00000000 		.quad	.LC0
 221      00000000 
 222 0248 0B000000 		.long	11
 223 024c 21000000 		.long	33
 224 0250 00000000 		.quad	.Lubsan_type5
 224      00000000 
 225 0258 03       		.byte	3
 226 0259 04       		.byte	4
 227 025a 00000000 		.zero	6
 227      0000
 228 0260 00000000 		.zero	32
 228      00000000 
 228      00000000 
 228      00000000 
 228      00000000 
 229              		.align 32
 232              	.Lubsan_data384:
 233 0280 00000000 		.quad	.LC0
 233      00000000 
 234 0288 0D000000 		.long	13
 235 028c 41000000 		.long	65
 236 0290 00000000 		.zero	48
 236      00000000 
 236      00000000 
 236      00000000 
 236      00000000 
 237              		.align 32
 240              	.Lubsan_data385:
 241 02c0 00000000 		.quad	.LC0
 241      00000000 
 242 02c8 0D000000 		.long	13
 243 02cc 41000000 		.long	65
 244 02d0 00000000 		.zero	48
 244      00000000 
 244      00000000 
 244      00000000 
 244      00000000 
 245              		.align 32
 248              	.Lubsan_data386:
 249 0300 00000000 		.quad	.LC0
 249      00000000 
 250 0308 0D000000 		.long	13
 251 030c 41000000 		.long	65
 252 0310 00000000 		.quad	.Lubsan_type5
 252      00000000 
 253 0318 03       		.byte	3
 254 0319 04       		.byte	4
 255 031a 00000000 		.zero	6
 255      0000
 256 0320 00000000 		.zero	32
 256      00000000 
 256      00000000 
 256      00000000 
 256      00000000 
 257              		.globl	__asan_stack_malloc_3
 258              		.section	.rodata
 259              		.align 8
 260              	.LC1:
 261 0060 35203438 		.string	"5 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 64 9 <unknown> 192 64 9 <unknown>
 261      20312039 
 261      203C756E 
 261      6B6E6F77 
 261      6E3E2036 
 262 00ba 00000000 		.align 32
 262      0000
 263              	.LC2:
 264 00c0 00       		.string	""
 265 00c1 00000000 		.zero	63
 265      00000000 
 265      00000000 
 265      00000000 
 265      00000000 
 266              		.text
 267              		.globl	_Z10date_thingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 269              	_Z10date_thingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
 270              	.LASANPC2343:
 271              	.LFB2343:
 272              		.file 3 "/home/arkel/c++/wordle/files/update_word_list.cpp"
   1:/home/arkel/c++/wordle/files/update_word_list.cpp **** #include <fstream>
   2:/home/arkel/c++/wordle/files/update_word_list.cpp **** #include <string>
   3:/home/arkel/c++/wordle/files/update_word_list.cpp **** #include <vector>
   4:/home/arkel/c++/wordle/files/update_word_list.cpp **** 
   5:/home/arkel/c++/wordle/files/update_word_list.cpp **** // just put a * at the end of the word to be removed & it will be removed
   6:/home/arkel/c++/wordle/files/update_word_list.cpp **** 
   7:/home/arkel/c++/wordle/files/update_word_list.cpp **** std::vector<std::string> date_thing(std::string line) {
 273              		.loc 3 7 55
 274              		.cfi_startproc
 275              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 276              		.cfi_lsda 0x1b,.LLSDA2343
 277 0000 F30F1EFA 		endbr64
 278 0004 55       		pushq	%rbp
 279              		.cfi_def_cfa_offset 16
 280              		.cfi_offset 6, -16
 281 0005 4889E5   		movq	%rsp, %rbp
 282              		.cfi_def_cfa_register 6
 283 0008 4157     		pushq	%r15
 284 000a 4156     		pushq	%r14
 285 000c 4155     		pushq	%r13
 286 000e 4154     		pushq	%r12
 287 0010 53       		pushq	%rbx
 288 0011 4881EC88 		subq	$392, %rsp
 288      010000
 289              		.cfi_offset 15, -24
 290              		.cfi_offset 14, -32
 291              		.cfi_offset 13, -40
 292              		.cfi_offset 12, -48
 293              		.cfi_offset 3, -56
 294 0018 4889BD78 		movq	%rdi, -392(%rbp)
 294      FEFFFF
 295 001f 4889B570 		movq	%rsi, -400(%rbp)
 295      FEFFFF
 296 0026 4C8DAD90 		leaq	-368(%rbp), %r13
 296      FEFFFF
 297 002d 4C89AD60 		movq	%r13, -416(%rbp)
 297      FEFFFF
 298 0034 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 298      000000
 299 003b 7412     		je	.L9
 300 003d BF200100 		movl	$288, %edi
 300      00
 301 0042 E8000000 		call	__asan_stack_malloc_3@PLT
 301      00
 302              	.LVL0:
 303 0047 4885C0   		testq	%rax, %rax
 304 004a 7403     		je	.L9
 305 004c 4989C5   		movq	%rax, %r13
 306              	.L9:
 307 004f 498D8540 		leaq	320(%r13), %rax
 307      010000
 308 0056 4889C3   		movq	%rax, %rbx
 309 0059 49C74500 		movq	$1102416563, 0(%r13)
 309      B38AB541 
 310 0061 488D0500 		leaq	.LC1(%rip), %rax
 310      000000
 311 0068 49894508 		movq	%rax, 8(%r13)
 312 006c 488D058D 		leaq	.LASANPC2343(%rip), %rax
 312      FFFFFF
 313 0073 49894510 		movq	%rax, 16(%r13)
 314 0077 4D89EC   		movq	%r13, %r12
 315 007a 49C1EC03 		shrq	$3, %r12
 316 007e 41C78424 		movl	$-235802127, 2147450880(%r12)
 316      0080FF7F 
 316      F1F1F1F1 
 317 008a 41C78424 		movl	$-234753551, 2147450884(%r12)
 317      0480FF7F 
 317      F1F101F2 
 318 0096 41C78424 		movl	$-234753535, 2147450888(%r12)
 318      0880FF7F 
 318      01F201F2 
 319 00a2 41C78424 		movl	$-218959118, 2147450900(%r12)
 319      1480FF7F 
 319      F2F2F2F2 
 320 00ae 41C78424 		movl	$-202116109, 2147450912(%r12)
 320      2080FF7F 
 320      F3F3F3F3 
 321              		.loc 3 7 55
 322 00ba 64488B04 		movq	%fs:40, %rax
 322      25280000 
 322      00
 323 00c3 488945C8 		movq	%rax, -56(%rbp)
 324 00c7 31C0     		xorl	%eax, %eax
   8:/home/arkel/c++/wordle/files/update_word_list.cpp ****   size_t i = line.size() - 1;
 325              		.loc 3 8 23
 326 00c9 488B8570 		movq	-400(%rbp), %rax
 326      FEFFFF
 327 00d0 4889C7   		movq	%rax, %rdi
 328 00d3 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@PLT
 328      00
 329              		.loc 3 8 28
 330 00d8 4883E801 		subq	$1, %rax
 331 00dc 48898588 		movq	%rax, -376(%rbp)
 331      FEFFFF
 332              	.L25:
   9:/home/arkel/c++/wordle/files/update_word_list.cpp ****   for (;; --i) {
  10:/home/arkel/c++/wordle/files/update_word_list.cpp ****     if (line[i] == ' ') break;
 333              		.loc 3 10 15
 334 00e3 488B9588 		movq	-376(%rbp), %rdx
 334      FEFFFF
 335 00ea 488B8570 		movq	-400(%rbp), %rax
 335      FEFFFF
 336 00f1 4889D6   		movq	%rdx, %rsi
 337 00f4 4889C7   		movq	%rax, %rdi
 338              	.LEHB0:
 339 00f7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm@PLT
 339      00
 340 00fc 48898568 		movq	%rax, -408(%rbp)
 340      FEFFFF
 341              		.loc 3 10 17
 342 0103 4885C0   		testq	%rax, %rax
 343 0106 7511     		jne	.L13
 344 0108 BE000000 		movl	$0, %esi
 344      00
 345 010d 488D3D00 		leaq	.Lubsan_data374(%rip), %rdi
 345      000000
 346 0114 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 346      00
 347              	.L13:
 348 0119 488B8568 		movq	-408(%rbp), %rax
 348      FEFFFF
 349 0120 4889C2   		movq	%rax, %rdx
 350 0123 48C1EA03 		shrq	$3, %rdx
 351 0127 4881C200 		addq	$2147450880, %rdx
 351      80FF7F
 352 012e 0FB612   		movzbl	(%rdx), %edx
 353 0131 84D2     		testb	%dl, %dl
 354 0133 0F95C1   		setne	%cl
 355 0136 4889C6   		movq	%rax, %rsi
 356 0139 83E607   		andl	$7, %esi
 357 013c 4038D6   		cmpb	%dl, %sil
 358 013f 0F9DC2   		setge	%dl
 359 0142 21CA     		andl	%ecx, %edx
 360 0144 84D2     		testb	%dl, %dl
 361 0146 7408     		je	.L14
 362 0148 4889C7   		movq	%rax, %rdi
 363 014b E8000000 		call	__asan_report_load1@PLT
 363      00
 364              	.L14:
 365 0150 488B8568 		movq	-408(%rbp), %rax
 365      FEFFFF
 366 0157 0FB600   		movzbl	(%rax), %eax
 367 015a 3C20     		cmpb	$32, %al
 368 015c 0F94C0   		sete	%al
 369              		.loc 3 10 5
 370 015f 84C0     		testb	%al, %al
 371 0161 0F85A401 		jne	.L53
 371      0000
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****     if (i == 0) return {line, ""};
 372              		.loc 3 11 5
 373 0167 4883BD88 		cmpq	$0, -376(%rbp)
 373      FEFFFF00 
 374 016f 0F858901 		jne	.L17
 374      0000
 375              		.loc 3 11 33 discriminator 1
 376 0175 488B9570 		movq	-400(%rbp), %rdx
 376      FEFFFF
 377 017c 488D8320 		leaq	-224(%rbx), %rax
 377      FFFFFF
 378 0183 4889D6   		movq	%rdx, %rsi
 379 0186 4889C7   		movq	%rax, %rdi
 380 0189 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 380      00
 381              	.LEHE0:
 382 018e 488D83F0 		leaq	-272(%rbx), %rax
 382      FEFFFF
 383 0195 4889C7   		movq	%rax, %rdi
 384 0198 E8000000 		call	_ZNSaIcEC1Ev@PLT
 384      00
 385 019d 488D83F0 		leaq	-272(%rbx), %rax
 385      FEFFFF
 386 01a4 488D9320 		leaq	-224(%rbx), %rdx
 386      FFFFFF
 387 01ab 488D4A20 		leaq	32(%rdx), %rcx
 388 01af 4889C2   		movq	%rax, %rdx
 389 01b2 488D3500 		leaq	.LC2(%rip), %rsi
 389      000000
 390 01b9 4889CF   		movq	%rcx, %rdi
 391              	.LEHB1:
 392 01bc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 392      00
 393              	.LEHE1:
 394              		.loc 3 11 33 is_stmt 0 discriminator 3
 395 01c1 488D8320 		leaq	-224(%rbx), %rax
 395      FFFFFF
 396 01c8 48898550 		movq	%rax, -432(%rbp)
 396      FEFFFF
 397 01cf 48C78558 		movq	$2, -424(%rbp)
 397      FEFFFF02 
 397      000000
 398 01da 488D8300 		leaq	-256(%rbx), %rax
 398      FFFFFF
 399 01e1 4889C7   		movq	%rax, %rdi
 400 01e4 E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev
 400      00
 401 01e9 488D9300 		leaq	-256(%rbx), %rdx
 401      FFFFFF
 402 01f0 488BB550 		movq	-432(%rbp), %rsi
 402      FEFFFF
 403 01f7 488BBD58 		movq	-424(%rbp), %rdi
 403      FEFFFF
 404 01fe 4989F0   		movq	%rsi, %r8
 405 0201 4989F9   		movq	%rdi, %r9
 406 0204 488B8578 		movq	-392(%rbp), %rax
 406      FEFFFF
 407 020b 4889D1   		movq	%rdx, %rcx
 408 020e 4C89C6   		movq	%r8, %rsi
 409 0211 4889FA   		movq	%rdi, %rdx
 410 0214 4889C7   		movq	%rax, %rdi
 411              	.LEHB2:
 412 0217 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_l
 412      00
 413              	.LEHE2:
 414              		.loc 3 11 33
 415 021c 488D8300 		leaq	-256(%rbx), %rax
 415      FFFFFF
 416 0223 4889C7   		movq	%rax, %rdi
 417 0226 E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 417      00
 418 022b 488D8300 		leaq	-256(%rbx), %rax
 418      FFFFFF
 419 0232 48C1E803 		shrq	$3, %rax
 420 0236 48050080 		addq	$2147450880, %rax
 420      FF7F
 421 023c C600F8   		movb	$-8, (%rax)
 422 023f 488D8320 		leaq	-224(%rbx), %rax
 422      FFFFFF
 423 0246 488D5040 		leaq	64(%rax), %rdx
 424 024a 4883F8C0 		cmpq	$-64, %rax
 425 024e 7216     		jb	.L18
 426 0250 488D8320 		leaq	-224(%rbx), %rax
 426      FFFFFF
 427 0257 4889C6   		movq	%rax, %rsi
 428 025a 488D3D00 		leaq	.Lubsan_data375(%rip), %rdi
 428      000000
 429 0261 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 429      00
 430              	.L18:
 431 0266 4C8DB320 		leaq	-224(%rbx), %r14
 431      FFFFFF
 432 026d 4983C640 		addq	$64, %r14
 433              	.L23:
 434              		.loc 3 11 33 discriminator 9
 435 0271 488D8320 		leaq	-224(%rbx), %rax
 435      FFFFFF
 436 0278 4939C6   		cmpq	%rax, %r14
 437 027b 744F     		je	.L19
 438              		.loc 3 11 33 discriminator 8
 439 027d 4C89F2   		movq	%r14, %rdx
 440 0280 488D42E0 		leaq	-32(%rdx), %rax
 441 0284 4883FA20 		cmpq	$32, %rdx
 442 0288 7312     		jnb	.L20
 443              		.loc 3 11 33
 444 028a 4889C2   		movq	%rax, %rdx
 445 028d 4C89F6   		movq	%r14, %rsi
 446 0290 488D3D00 		leaq	.Lubsan_data376(%rip), %rdi
 446      000000
 447 0297 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 447      00
 448              	.L20:
 449              		.loc 3 11 33 discriminator 8
 450 029c 4983EE20 		subq	$32, %r14
 451 02a0 4C89F0   		movq	%r14, %rax
 452 02a3 4D85F6   		testq	%r14, %r14
 453 02a6 740B     		je	.L21
 454 02a8 4889C2   		movq	%rax, %rdx
 455 02ab 83E207   		andl	$7, %edx
 456 02ae 4885D2   		testq	%rdx, %rdx
 457 02b1 740F     		je	.L22
 458              	.L21:
 459              		.loc 3 11 33
 460 02b3 4889C6   		movq	%rax, %rsi
 461 02b6 488D3D00 		leaq	.Lubsan_data377(%rip), %rdi
 461      000000
 462 02bd E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 462      00
 463              	.L22:
 464              		.loc 3 11 33 discriminator 8
 465 02c2 4C89F7   		movq	%r14, %rdi
 466 02c5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 466      00
 467 02ca EBA5     		jmp	.L23
 468              	.L19:
 469              		.loc 3 11 33
 470 02cc 488D8320 		leaq	-224(%rbx), %rax
 470      FFFFFF
 471 02d3 48C1E803 		shrq	$3, %rax
 472 02d7 48050080 		addq	$2147450880, %rax
 472      FF7F
 473 02dd C700F8F8 		movl	$-117901064, (%rax)
 473      F8F8
 474 02e3 C74004F8 		movl	$-117901064, 4(%rax)
 474      F8F8F8
 475 02ea 488D83F0 		leaq	-272(%rbx), %rax
 475      FEFFFF
 476 02f1 4889C7   		movq	%rax, %rdi
 477 02f4 E8000000 		call	_ZNSaIcED1Ev@PLT
 477      00
 478 02f9 E9EE0300 		jmp	.L12
 478      00
 479              	.L17:
   9:/home/arkel/c++/wordle/files/update_word_list.cpp ****   for (;; --i) {
 480              		.loc 3 9 3 is_stmt 1
 481 02fe 4883AD88 		subq	$1, -376(%rbp)
 481      FEFFFF01 
  10:/home/arkel/c++/wordle/files/update_word_list.cpp ****     if (i == 0) return {line, ""};
 482              		.loc 3 10 5
 483 0306 E9D8FDFF 		jmp	.L25
 483      FF
 484              	.L53:
  10:/home/arkel/c++/wordle/files/update_word_list.cpp ****     if (i == 0) return {line, ""};
 485              		.loc 3 10 25
 486 030b 90       		nop
  12:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
  13:/home/arkel/c++/wordle/files/update_word_list.cpp ****   return {line.substr(0, i), line.substr(i + 1, line.size() - 1)};
 487              		.loc 3 13 65
 488 030c 488D4380 		leaq	-128(%rbx), %rax
 489 0310 4889C2   		movq	%rax, %rdx
 490 0313 48C1EA03 		shrq	$3, %rdx
 491 0317 4881C200 		addq	$2147450880, %rdx
 491      80FF7F
 492 031e 0FB612   		movzbl	(%rdx), %edx
 493 0321 84D2     		testb	%dl, %dl
 494 0323 0F95C1   		setne	%cl
 495 0326 84D2     		testb	%dl, %dl
 496 0328 0F9EC2   		setle	%dl
 497 032b 21D1     		andl	%edx, %ecx
 498 032d 89CF     		movl	%ecx, %edi
 499 032f BA200000 		movl	$32, %edx
 499      00
 500 0334 4883EA01 		subq	$1, %rdx
 501 0338 488D0C10 		leaq	(%rax,%rdx), %rcx
 502 033c 4889CA   		movq	%rcx, %rdx
 503 033f 48C1EA03 		shrq	$3, %rdx
 504 0343 4881C200 		addq	$2147450880, %rdx
 504      80FF7F
 505 034a 0FB612   		movzbl	(%rdx), %edx
 506 034d 84D2     		testb	%dl, %dl
 507 034f 400F95C6 		setne	%sil
 508 0353 83E107   		andl	$7, %ecx
 509 0356 38D1     		cmpb	%dl, %cl
 510 0358 0F9DC2   		setge	%dl
 511 035b 21F2     		andl	%esi, %edx
 512 035d 09FA     		orl	%edi, %edx
 513 035f 84D2     		testb	%dl, %dl
 514 0361 740D     		je	.L26
 515 0363 BE200000 		movl	$32, %esi
 515      00
 516 0368 4889C7   		movq	%rax, %rdi
 517 036b E8000000 		call	__asan_report_store_n@PLT
 517      00
 518              	.L26:
 519 0370 488D4380 		leaq	-128(%rbx), %rax
 520 0374 488B9588 		movq	-376(%rbp), %rdx
 520      FEFFFF
 521 037b 488BB570 		movq	-400(%rbp), %rsi
 521      FEFFFF
 522 0382 4889D1   		movq	%rdx, %rcx
 523 0385 BA000000 		movl	$0, %edx
 523      00
 524 038a 4889C7   		movq	%rax, %rdi
 525              	.LEHB3:
 526 038d E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@PLT
 526      00
 527              		.loc 3 13 58
 528 0392 488B8570 		movq	-400(%rbp), %rax
 528      FEFFFF
 529 0399 4889C7   		movq	%rax, %rdi
 530 039c E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@PLT
 530      00
 531              		.loc 3 13 65
 532 03a1 4C8D40FF 		leaq	-1(%rax), %r8
 533 03a5 488B8588 		movq	-376(%rbp), %rax
 533      FEFFFF
 534 03ac 488D7801 		leaq	1(%rax), %rdi
 535 03b0 488D4380 		leaq	-128(%rbx), %rax
 536 03b4 4883C020 		addq	$32, %rax
 537 03b8 4889C2   		movq	%rax, %rdx
 538 03bb 48C1EA03 		shrq	$3, %rdx
 539 03bf 4881C200 		addq	$2147450880, %rdx
 539      80FF7F
 540 03c6 0FB612   		movzbl	(%rdx), %edx
 541 03c9 84D2     		testb	%dl, %dl
 542 03cb 0F95C1   		setne	%cl
 543 03ce 84D2     		testb	%dl, %dl
 544 03d0 0F9EC2   		setle	%dl
 545 03d3 21D1     		andl	%edx, %ecx
 546 03d5 4189C9   		movl	%ecx, %r9d
 547 03d8 BA200000 		movl	$32, %edx
 547      00
 548 03dd 4883EA01 		subq	$1, %rdx
 549 03e1 488D0C10 		leaq	(%rax,%rdx), %rcx
 550 03e5 4889CA   		movq	%rcx, %rdx
 551 03e8 48C1EA03 		shrq	$3, %rdx
 552 03ec 4881C200 		addq	$2147450880, %rdx
 552      80FF7F
 553 03f3 0FB612   		movzbl	(%rdx), %edx
 554 03f6 84D2     		testb	%dl, %dl
 555 03f8 400F95C6 		setne	%sil
 556 03fc 83E107   		andl	$7, %ecx
 557 03ff 38D1     		cmpb	%dl, %cl
 558 0401 0F9DC2   		setge	%dl
 559 0404 21F2     		andl	%esi, %edx
 560 0406 4409CA   		orl	%r9d, %edx
 561 0409 84D2     		testb	%dl, %dl
 562 040b 740D     		je	.L27
 563 040d BE200000 		movl	$32, %esi
 563      00
 564 0412 4889C7   		movq	%rax, %rdi
 565 0415 E8000000 		call	__asan_report_store_n@PLT
 565      00
 566              	.L27:
 567 041a 488D43A0 		leaq	-96(%rbx), %rax
 568 041e 488BB570 		movq	-400(%rbp), %rsi
 568      FEFFFF
 569 0425 4C89C1   		movq	%r8, %rcx
 570 0428 4889FA   		movq	%rdi, %rdx
 571 042b 4889C7   		movq	%rax, %rdi
 572 042e E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@PLT
 572      00
 573              	.LEHE3:
 574 0433 488D4380 		leaq	-128(%rbx), %rax
 575 0437 4989C6   		movq	%rax, %r14
 576 043a 41BF0200 		movl	$2, %r15d
 576      0000
 577 0440 488D8310 		leaq	-240(%rbx), %rax
 577      FFFFFF
 578 0447 4889C7   		movq	%rax, %rdi
 579 044a E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev
 579      00
 580 044f 488D9310 		leaq	-240(%rbx), %rdx
 580      FFFFFF
 581 0456 4D89F0   		movq	%r14, %r8
 582 0459 4D89F9   		movq	%r15, %r9
 583 045c 4C89F6   		movq	%r14, %rsi
 584 045f 4C89FF   		movq	%r15, %rdi
 585 0462 488B8578 		movq	-392(%rbp), %rax
 585      FEFFFF
 586 0469 4889D1   		movq	%rdx, %rcx
 587 046c 4C89C6   		movq	%r8, %rsi
 588 046f 4889FA   		movq	%rdi, %rdx
 589 0472 4889C7   		movq	%rax, %rdi
 590              	.LEHB4:
 591 0475 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_l
 591      00
 592              	.LEHE4:
 593 047a 488D8310 		leaq	-240(%rbx), %rax
 593      FFFFFF
 594 0481 4889C7   		movq	%rax, %rdi
 595 0484 E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 595      00
 596 0489 488D8310 		leaq	-240(%rbx), %rax
 596      FFFFFF
 597 0490 48C1E803 		shrq	$3, %rax
 598 0494 48050080 		addq	$2147450880, %rax
 598      FF7F
 599 049a C600F8   		movb	$-8, (%rax)
 600 049d 488D4380 		leaq	-128(%rbx), %rax
 601 04a1 488D5040 		leaq	64(%rax), %rdx
 602 04a5 4883F8C0 		cmpq	$-64, %rax
 603 04a9 7213     		jb	.L28
 604 04ab 488D4380 		leaq	-128(%rbx), %rax
 605 04af 4889C6   		movq	%rax, %rsi
 606 04b2 488D3D00 		leaq	.Lubsan_data378(%rip), %rdi
 606      000000
 607 04b9 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 607      00
 608              	.L28:
 609 04be 4C8D7380 		leaq	-128(%rbx), %r14
 610 04c2 4983C640 		addq	$64, %r14
 611              	.L32:
 612              		.loc 3 13 65 is_stmt 0 discriminator 6
 613 04c6 488D4380 		leaq	-128(%rbx), %rax
 614 04ca 4939C6   		cmpq	%rax, %r14
 615 04cd 0F841902 		je	.L12
 615      0000
 616              		.loc 3 13 65 discriminator 5
 617 04d3 4C89F2   		movq	%r14, %rdx
 618 04d6 488D42E0 		leaq	-32(%rdx), %rax
 619 04da 4883FA20 		cmpq	$32, %rdx
 620 04de 7312     		jnb	.L29
 621              		.loc 3 13 65
 622 04e0 4889C2   		movq	%rax, %rdx
 623 04e3 4C89F6   		movq	%r14, %rsi
 624 04e6 488D3D00 		leaq	.Lubsan_data379(%rip), %rdi
 624      000000
 625 04ed E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 625      00
 626              	.L29:
 627              		.loc 3 13 65 discriminator 5
 628 04f2 4983EE20 		subq	$32, %r14
 629 04f6 4C89F0   		movq	%r14, %rax
 630 04f9 4D85F6   		testq	%r14, %r14
 631 04fc 740B     		je	.L30
 632 04fe 4889C2   		movq	%rax, %rdx
 633 0501 83E207   		andl	$7, %edx
 634 0504 4885D2   		testq	%rdx, %rdx
 635 0507 740F     		je	.L31
 636              	.L30:
 637              		.loc 3 13 65
 638 0509 4889C6   		movq	%rax, %rsi
 639 050c 488D3D00 		leaq	.Lubsan_data380(%rip), %rdi
 639      000000
 640 0513 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 640      00
 641              	.L31:
 642              		.loc 3 13 65 discriminator 5
 643 0518 4C89F7   		movq	%r14, %rdi
 644 051b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 644      00
 645 0520 EBA4     		jmp	.L32
 646              	.L50:
 647 0522 F30F1EFA 		endbr64
 648 0526 4989C4   		movq	%rax, %r12
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
 649              		.loc 3 11 33 is_stmt 1
 650 0529 488D8300 		leaq	-256(%rbx), %rax
 650      FFFFFF
 651 0530 4889C7   		movq	%rax, %rdi
 652 0533 E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 652      00
 653 0538 4C89E2   		movq	%r12, %rdx
 654 053b 488D8300 		leaq	-256(%rbx), %rax
 654      FFFFFF
 655 0542 48C1E803 		shrq	$3, %rax
 656 0546 48050080 		addq	$2147450880, %rax
 656      FF7F
 657 054c C600F8   		movb	$-8, (%rax)
 658 054f 4989D5   		movq	%rdx, %r13
 659 0552 488D8320 		leaq	-224(%rbx), %rax
 659      FFFFFF
 660 0559 488D5040 		leaq	64(%rax), %rdx
 661 055d 4883F8C0 		cmpq	$-64, %rax
 662 0561 7216     		jb	.L34
 663 0563 488D8320 		leaq	-224(%rbx), %rax
 663      FFFFFF
 664 056a 4889C6   		movq	%rax, %rsi
 665 056d 488D3D00 		leaq	.Lubsan_data381(%rip), %rdi
 665      000000
 666 0574 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 666      00
 667              	.L34:
 668 0579 4C8DA320 		leaq	-224(%rbx), %r12
 668      FFFFFF
 669 0580 4983C440 		addq	$64, %r12
 670              	.L39:
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
 671              		.loc 3 11 33 is_stmt 0 discriminator 14
 672 0584 488D8320 		leaq	-224(%rbx), %rax
 672      FFFFFF
 673 058b 4939C4   		cmpq	%rax, %r12
 674 058e 744F     		je	.L35
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
 675              		.loc 3 11 33 discriminator 13
 676 0590 4C89E2   		movq	%r12, %rdx
 677 0593 488D42E0 		leaq	-32(%rdx), %rax
 678 0597 4883FA20 		cmpq	$32, %rdx
 679 059b 7312     		jnb	.L36
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
 680              		.loc 3 11 33
 681 059d 4889C2   		movq	%rax, %rdx
 682 05a0 4C89E6   		movq	%r12, %rsi
 683 05a3 488D3D00 		leaq	.Lubsan_data382(%rip), %rdi
 683      000000
 684 05aa E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 684      00
 685              	.L36:
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
 686              		.loc 3 11 33 discriminator 13
 687 05af 4983EC20 		subq	$32, %r12
 688 05b3 4C89E0   		movq	%r12, %rax
 689 05b6 4D85E4   		testq	%r12, %r12
 690 05b9 740B     		je	.L37
 691 05bb 4889C2   		movq	%rax, %rdx
 692 05be 83E207   		andl	$7, %edx
 693 05c1 4885D2   		testq	%rdx, %rdx
 694 05c4 740F     		je	.L38
 695              	.L37:
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
 696              		.loc 3 11 33
 697 05c6 4889C6   		movq	%rax, %rsi
 698 05c9 488D3D00 		leaq	.Lubsan_data383(%rip), %rdi
 698      000000
 699 05d0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 699      00
 700              	.L38:
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
 701              		.loc 3 11 33 discriminator 13
 702 05d5 4C89E7   		movq	%r12, %rdi
 703 05d8 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 703      00
 704 05dd EBA5     		jmp	.L39
 705              	.L35:
 706 05df 4C89EA   		movq	%r13, %rdx
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
 707              		.loc 3 11 33
 708 05e2 488D8320 		leaq	-224(%rbx), %rax
 708      FFFFFF
 709 05e9 48C1E803 		shrq	$3, %rax
 710 05ed 48050080 		addq	$2147450880, %rax
 710      FF7F
 711 05f3 C700F8F8 		movl	$-117901064, (%rax)
 711      F8F8
 712 05f9 C74004F8 		movl	$-117901064, 4(%rax)
 712      F8F8F8
 713 0600 4989D4   		movq	%rdx, %r12
 714 0603 EB07     		jmp	.L40
 715              	.L49:
 716 0605 F30F1EFA 		endbr64
 717 0609 4989C4   		movq	%rax, %r12
 718              	.L40:
  11:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
 719              		.loc 3 11 33 discriminator 2
 720 060c 488D83F0 		leaq	-272(%rbx), %rax
 720      FEFFFF
 721 0613 4889C7   		movq	%rax, %rdi
 722 0616 E8000000 		call	_ZNSaIcED1Ev@PLT
 722      00
 723 061b 4C89E3   		movq	%r12, %rbx
 724 061e E8000000 		call	__asan_handle_no_return@PLT
 724      00
 725 0623 4889DF   		movq	%rbx, %rdi
 726              	.LEHB5:
 727 0626 E8000000 		call	_Unwind_Resume@PLT
 727      00
 728              	.L51:
 729 062b F30F1EFA 		endbr64
 730 062f 4989C4   		movq	%rax, %r12
 731              		.loc 3 13 65 is_stmt 1
 732 0632 488D8310 		leaq	-240(%rbx), %rax
 732      FFFFFF
 733 0639 4889C7   		movq	%rax, %rdi
 734 063c E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 734      00
 735 0641 4C89E2   		movq	%r12, %rdx
 736 0644 488D8310 		leaq	-240(%rbx), %rax
 736      FFFFFF
 737 064b 48C1E803 		shrq	$3, %rax
 738 064f 48050080 		addq	$2147450880, %rax
 738      FF7F
 739 0655 C600F8   		movb	$-8, (%rax)
 740 0658 4989D5   		movq	%rdx, %r13
 741 065b 488D4380 		leaq	-128(%rbx), %rax
 742 065f 488D5040 		leaq	64(%rax), %rdx
 743 0663 4883F8C0 		cmpq	$-64, %rax
 744 0667 7213     		jb	.L42
 745 0669 488D4380 		leaq	-128(%rbx), %rax
 746 066d 4889C6   		movq	%rax, %rsi
 747 0670 488D3D00 		leaq	.Lubsan_data384(%rip), %rdi
 747      000000
 748 0677 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 748      00
 749              	.L42:
 750 067c 4C8D6380 		leaq	-128(%rbx), %r12
 751 0680 4983C440 		addq	$64, %r12
 752              	.L47:
 753              		.loc 3 13 65 is_stmt 0 discriminator 9
 754 0684 488D4380 		leaq	-128(%rbx), %rax
 755 0688 4939C4   		cmpq	%rax, %r12
 756 068b 744F     		je	.L43
 757              		.loc 3 13 65 discriminator 8
 758 068d 4C89E2   		movq	%r12, %rdx
 759 0690 488D42E0 		leaq	-32(%rdx), %rax
 760 0694 4883FA20 		cmpq	$32, %rdx
 761 0698 7312     		jnb	.L44
 762              		.loc 3 13 65
 763 069a 4889C2   		movq	%rax, %rdx
 764 069d 4C89E6   		movq	%r12, %rsi
 765 06a0 488D3D00 		leaq	.Lubsan_data385(%rip), %rdi
 765      000000
 766 06a7 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 766      00
 767              	.L44:
 768              		.loc 3 13 65 discriminator 8
 769 06ac 4983EC20 		subq	$32, %r12
 770 06b0 4C89E0   		movq	%r12, %rax
 771 06b3 4D85E4   		testq	%r12, %r12
 772 06b6 740B     		je	.L45
 773 06b8 4889C2   		movq	%rax, %rdx
 774 06bb 83E207   		andl	$7, %edx
 775 06be 4885D2   		testq	%rdx, %rdx
 776 06c1 740F     		je	.L46
 777              	.L45:
 778              		.loc 3 13 65
 779 06c3 4889C6   		movq	%rax, %rsi
 780 06c6 488D3D00 		leaq	.Lubsan_data386(%rip), %rdi
 780      000000
 781 06cd E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 781      00
 782              	.L46:
 783              		.loc 3 13 65 discriminator 8
 784 06d2 4C89E7   		movq	%r12, %rdi
 785 06d5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 785      00
 786 06da EBA8     		jmp	.L47
 787              	.L43:
 788 06dc 4C89EB   		movq	%r13, %rbx
 789 06df E8000000 		call	__asan_handle_no_return@PLT
 789      00
 790 06e4 4889DF   		movq	%rbx, %rdi
 791 06e7 E8000000 		call	_Unwind_Resume@PLT
 791      00
 792              	.LEHE5:
 793              	.L12:
   7:/home/arkel/c++/wordle/files/update_word_list.cpp ****   size_t i = line.size() - 1;
 794              		.loc 3 7 55 is_stmt 1
 795 06ec 4C39AD60 		cmpq	%r13, -416(%rbp)
 795      FEFFFF
 796 06f3 7454     		je	.L10
 797 06f5 49C74500 		movq	$1172321806, 0(%r13)
 797      0E36E045 
 798 06fd 48B8F5F5 		movabsq	$-723401728380766731, %rax
 798      F5F5F5F5 
 798      F5F5
 799 0707 48BAF5F5 		movabsq	$-723401728380766731, %rdx
 799      F5F5F5F5 
 799      F5F5
 800 0711 49898424 		movq	%rax, 2147450880(%r12)
 800      0080FF7F 
 801 0719 49899424 		movq	%rdx, 2147450888(%r12)
 801      0880FF7F 
 802 0721 49898424 		movq	%rax, 2147450896(%r12)
 802      1080FF7F 
 803 0729 49899424 		movq	%rdx, 2147450904(%r12)
 803      1880FF7F 
 804 0731 41C78424 		movl	$-168430091, 2147450912(%r12)
 804      2080FF7F 
 804      F5F5F5F5 
 805 073d 498B85F8 		movq	504(%r13), %rax
 805      010000
 806 0744 C60000   		movb	$0, (%rax)
 807 0747 EB30     		jmp	.L11
 808              	.L10:
 809 0749 49C78424 		movq	$0, 2147450880(%r12)
 809      0080FF7F 
 809      00000000 
 810 0755 49C78424 		movq	$0, 2147450888(%r12)
 810      0880FF7F 
 810      00000000 
 811 0761 49C78424 		movq	$0, 2147450896(%r12)
 811      1080FF7F 
 811      00000000 
 812 076d 41C78424 		movl	$0, 2147450912(%r12)
 812      2080FF7F 
 812      00000000 
 813              	.L11:
  14:/home/arkel/c++/wordle/files/update_word_list.cpp **** }
 814              		.loc 3 14 1
 815 0779 488B45C8 		movq	-56(%rbp), %rax
 816 077d 64483304 		xorq	%fs:40, %rax
 816      25280000 
 816      00
 817 0786 7405     		je	.L48
 818 0788 E8000000 		call	__stack_chk_fail@PLT
 818      00
 819              	.L48:
 820 078d 488B8578 		movq	-392(%rbp), %rax
 820      FEFFFF
 821 0794 4881C488 		addq	$392, %rsp
 821      010000
 822 079b 5B       		popq	%rbx
 823 079c 415C     		popq	%r12
 824 079e 415D     		popq	%r13
 825 07a0 415E     		popq	%r14
 826 07a2 415F     		popq	%r15
 827 07a4 5D       		popq	%rbp
 828              		.cfi_def_cfa 7, 8
 829 07a5 C3       		ret
 830              		.cfi_endproc
 831              	.LFE2343:
 832              		.globl	__gxx_personality_v0
 833              		.section	.gcc_except_table,"a",@progbits
 834              	.LLSDA2343:
 835 0000 FF       		.byte	0xff
 836 0001 FF       		.byte	0xff
 837 0002 01       		.byte	0x1
 838 0003 24       		.uleb128 .LLSDACSE2343-.LLSDACSB2343
 839              	.LLSDACSB2343:
 840 0004 F701     		.uleb128 .LEHB0-.LFB2343
 841 0006 9701     		.uleb128 .LEHE0-.LEHB0
 842 0008 00       		.uleb128 0
 843 0009 00       		.uleb128 0
 844 000a BC03     		.uleb128 .LEHB1-.LFB2343
 845 000c 05       		.uleb128 .LEHE1-.LEHB1
 846 000d 850C     		.uleb128 .L49-.LFB2343
 847 000f 00       		.uleb128 0
 848 0010 9704     		.uleb128 .LEHB2-.LFB2343
 849 0012 05       		.uleb128 .LEHE2-.LEHB2
 850 0013 A20A     		.uleb128 .L50-.LFB2343
 851 0015 00       		.uleb128 0
 852 0016 8D07     		.uleb128 .LEHB3-.LFB2343
 853 0018 A601     		.uleb128 .LEHE3-.LEHB3
 854 001a 00       		.uleb128 0
 855 001b 00       		.uleb128 0
 856 001c F508     		.uleb128 .LEHB4-.LFB2343
 857 001e 05       		.uleb128 .LEHE4-.LEHB4
 858 001f AB0C     		.uleb128 .L51-.LFB2343
 859 0021 00       		.uleb128 0
 860 0022 A60C     		.uleb128 .LEHB5-.LFB2343
 861 0024 C601     		.uleb128 .LEHE5-.LEHB5
 862 0026 00       		.uleb128 0
 863 0027 00       		.uleb128 0
 864              	.LLSDACSE2343:
 865              		.text
 867              		.data
 868              		.align 32
 871              	.Lubsan_type6:
 874 0084 27737472 		.string	"'struct allocator'"
 874      75637420 
 874      616C6C6F 
 874      6361746F 
 874      722700
 875 0097 00000000 		.zero	41
 875      00000000 
 875      00000000 
 875      00000000 
 875      00000000 
 876              		.section	.rodata
 877              		.align 32
 878              	.LC3:
 879 0100 2F757372 		.string	"/usr/include/c++/9/bits/stl_vector.h"
 879      2F696E63 
 879      6C756465 
 879      2F632B2B 
 879      2F392F62 
 880 0125 00000000 		.zero	59
 880      00000000 
 880      00000000 
 880      00000000 
 880      00000000 
 881              		.section	.data.rel.local
 882              		.align 32
 885              	.Lubsan_data387:
 886 0340 00000000 		.quad	.LC3
 886      00000000 
 887 0348 7D000000 		.long	125
 888 034c 0E000000 		.long	14
 889 0350 00000000 		.quad	.Lubsan_type6
 889      00000000 
 890 0358 00       		.byte	0
 891 0359 04       		.byte	4
 892 035a 00000000 		.zero	6
 892      0000
 893 0360 00000000 		.zero	32
 893      00000000 
 893      00000000 
 893      00000000 
 893      00000000 
 894              		.data
 895              		.align 32
 898              	.Lubsan_type7:
 901 00c4 27737472 		.string	"'struct <unknown>'"
 901      75637420 
 901      3C756E6B 
 901      6E6F776E 
 901      3E2700
 902 00d7 00000000 		.zero	41
 902      00000000 
 902      00000000 
 902      00000000 
 902      00000000 
 903              		.section	.data.rel.local
 904              		.align 32
 907              	.Lubsan_data388:
 908 0380 00000000 		.quad	.LC3
 908      00000000 
 909 0388 7D000000 		.long	125
 910 038c 0E000000 		.long	14
 911 0390 00000000 		.quad	.Lubsan_type7
 911      00000000 
 912 0398 03       		.byte	3
 913 0399 02       		.byte	2
 914 039a 00000000 		.zero	6
 914      0000
 915 03a0 00000000 		.zero	32
 915      00000000 
 915      00000000 
 915      00000000 
 915      00000000 
 916              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_
 917              		.align 2
 918              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_im
 920              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD2Ev:
 921              	.LASANPC2348:
 922              	.LFB2348:
 923              		.file 4 "/usr/include/c++/9/bits/stl_vector.h"
   1:/usr/include/c++/9/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_vector.h **** 
   3:/usr/include/c++/9/bits/stl_vector.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_vector.h **** //
   5:/usr/include/c++/9/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_vector.h **** 
  11:/usr/include/c++/9/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_vector.h **** 
  16:/usr/include/c++/9/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_vector.h **** 
  20:/usr/include/c++/9/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_vector.h **** 
  25:/usr/include/c++/9/bits/stl_vector.h **** /*
  26:/usr/include/c++/9/bits/stl_vector.h ****  *
  27:/usr/include/c++/9/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_vector.h ****  *
  30:/usr/include/c++/9/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_vector.h ****  *
  38:/usr/include/c++/9/bits/stl_vector.h ****  *
  39:/usr/include/c++/9/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/9/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_vector.h ****  *
  42:/usr/include/c++/9/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/9/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_vector.h ****  */
  50:/usr/include/c++/9/bits/stl_vector.h **** 
  51:/usr/include/c++/9/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/9/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/9/bits/stl_vector.h ****  */
  55:/usr/include/c++/9/bits/stl_vector.h **** 
  56:/usr/include/c++/9/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/9/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/9/bits/stl_vector.h **** 
  59:/usr/include/c++/9/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/9/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/9/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/9/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/9/bits/stl_vector.h **** #endif
  65:/usr/include/c++/9/bits/stl_vector.h **** 
  66:/usr/include/c++/9/bits/stl_vector.h **** #include <debug/assertions.h>
  67:/usr/include/c++/9/bits/stl_vector.h **** 
  68:/usr/include/c++/9/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  69:/usr/include/c++/9/bits/stl_vector.h **** extern "C" void
  70:/usr/include/c++/9/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  71:/usr/include/c++/9/bits/stl_vector.h **** 					  const void*, const void*);
  72:/usr/include/c++/9/bits/stl_vector.h **** #endif
  73:/usr/include/c++/9/bits/stl_vector.h **** 
  74:/usr/include/c++/9/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  75:/usr/include/c++/9/bits/stl_vector.h **** {
  76:/usr/include/c++/9/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  77:/usr/include/c++/9/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  78:/usr/include/c++/9/bits/stl_vector.h **** 
  79:/usr/include/c++/9/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  80:/usr/include/c++/9/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  81:/usr/include/c++/9/bits/stl_vector.h ****     struct _Vector_base
  82:/usr/include/c++/9/bits/stl_vector.h ****     {
  83:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  84:/usr/include/c++/9/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  85:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  86:/usr/include/c++/9/bits/stl_vector.h ****        	pointer;
  87:/usr/include/c++/9/bits/stl_vector.h **** 
  88:/usr/include/c++/9/bits/stl_vector.h ****       struct _Vector_impl_data
  89:/usr/include/c++/9/bits/stl_vector.h ****       {
  90:/usr/include/c++/9/bits/stl_vector.h **** 	pointer _M_start;
  91:/usr/include/c++/9/bits/stl_vector.h **** 	pointer _M_finish;
  92:/usr/include/c++/9/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  93:/usr/include/c++/9/bits/stl_vector.h **** 
  94:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  95:/usr/include/c++/9/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  96:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
  97:/usr/include/c++/9/bits/stl_vector.h **** 
  98:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
  99:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 100:/usr/include/c++/9/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 101:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 102:/usr/include/c++/9/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 103:/usr/include/c++/9/bits/stl_vector.h **** #endif
 104:/usr/include/c++/9/bits/stl_vector.h **** 
 105:/usr/include/c++/9/bits/stl_vector.h **** 	void
 106:/usr/include/c++/9/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 107:/usr/include/c++/9/bits/stl_vector.h **** 	{
 108:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 109:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 110:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 111:/usr/include/c++/9/bits/stl_vector.h **** 	}
 112:/usr/include/c++/9/bits/stl_vector.h **** 
 113:/usr/include/c++/9/bits/stl_vector.h **** 	void
 114:/usr/include/c++/9/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 115:/usr/include/c++/9/bits/stl_vector.h **** 	{
 116:/usr/include/c++/9/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 117:/usr/include/c++/9/bits/stl_vector.h **** 	  // information used by TBAA.
 118:/usr/include/c++/9/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 119:/usr/include/c++/9/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 120:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_copy_data(__x);
 121:/usr/include/c++/9/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 122:/usr/include/c++/9/bits/stl_vector.h **** 	}
 123:/usr/include/c++/9/bits/stl_vector.h ****       };
 124:/usr/include/c++/9/bits/stl_vector.h **** 
 125:/usr/include/c++/9/bits/stl_vector.h ****       struct _Vector_impl
 924              		.loc 4 125 14
 925              		.cfi_startproc
 926 0000 F30F1EFA 		endbr64
 927 0004 55       		pushq	%rbp
 928              		.cfi_def_cfa_offset 16
 929              		.cfi_offset 6, -16
 930 0005 4889E5   		movq	%rsp, %rbp
 931              		.cfi_def_cfa_register 6
 932 0008 4883EC10 		subq	$16, %rsp
 933 000c 48897DF8 		movq	%rdi, -8(%rbp)
 934              	.LBB6:
 935              		.loc 4 125 14
 936 0010 48837DF8 		cmpq	$0, -8(%rbp)
 936      00
 937 0015 7511     		jne	.L55
 938 0017 BE000000 		movl	$0, %esi
 938      00
 939 001c 488D3D00 		leaq	.Lubsan_data387(%rip), %rdi
 939      000000
 940 0023 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 940      00
 941              	.L55:
 942 0028 488B45F8 		movq	-8(%rbp), %rax
 943 002c 4889C7   		movq	%rax, %rdi
 944 002f E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 944      00
 945 0034 488B45F8 		movq	-8(%rbp), %rax
 946 0038 48837DF8 		cmpq	$0, -8(%rbp)
 946      00
 947 003d 740B     		je	.L56
 948 003f 4889C2   		movq	%rax, %rdx
 949 0042 83E207   		andl	$7, %edx
 950 0045 4885D2   		testq	%rdx, %rdx
 951 0048 740F     		je	.L58
 952              	.L56:
 953 004a 4889C6   		movq	%rax, %rsi
 954 004d 488D3D00 		leaq	.Lubsan_data388(%rip), %rdi
 954      000000
 955 0054 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 955      00
 956              	.L58:
 957              	.LBE6:
 958 0059 90       		nop
 959 005a C9       		leave
 960              		.cfi_def_cfa 7, 8
 961 005b C3       		ret
 962              		.cfi_endproc
 963              	.LFE2348:
 965              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_im
 966              		.set	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_imp
 967              		.data
 968              		.align 32
 971              	.Lubsan_type8:
 974 0104 27737472 		.string	"'struct _Vector_base'"
 974      75637420 
 974      5F566563 
 974      746F725F 
 974      62617365 
 975 011a 00000000 		.zero	38
 975      00000000 
 975      00000000 
 975      00000000 
 975      00000000 
 976              		.section	.data.rel.local
 977              		.align 32
 980              	.Lubsan_data389:
 981 03c0 00000000 		.quad	.LC3
 981      00000000 
 982 03c8 1D010000 		.long	285
 983 03cc 07000000 		.long	7
 984 03d0 00000000 		.quad	.Lubsan_type8
 984      00000000 
 985 03d8 03       		.byte	3
 986 03d9 03       		.byte	3
 987 03da 00000000 		.zero	6
 987      0000
 988 03e0 00000000 		.zero	32
 988      00000000 
 988      00000000 
 988      00000000 
 988      00000000 
 989              		.data
 990              		.align 32
 993              	.Lubsan_type9:
 996 0144 27737472 		.string	"'struct _Vector_impl'"
 996      75637420 
 996      5F566563 
 996      746F725F 
 996      696D706C 
 997 015a 00000000 		.zero	38
 997      00000000 
 997      00000000 
 997      00000000 
 997      00000000 
 998              		.section	.data.rel.local
 999              		.align 32
 1002              	.Lubsan_data390:
 1003 0400 00000000 		.quad	.LC3
 1003      00000000 
 1004 0408 1D010000 		.long	285
 1005 040c 07000000 		.long	7
 1006 0410 00000000 		.quad	.Lubsan_type9
 1006      00000000 
 1007 0418 03       		.byte	3
 1008 0419 05       		.byte	5
 1009 041a 00000000 		.zero	6
 1009      0000
 1010 0420 00000000 		.zero	32
 1010      00000000 
 1010      00000000 
 1010      00000000 
 1010      00000000 
 1011              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2E
 1012              		.align 2
 1013              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2Ev
 1015              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2Ev:
 1016              	.LASANPC2350:
 1017              	.LFB2350:
 126:/usr/include/c++/9/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 127:/usr/include/c++/9/bits/stl_vector.h ****       {
 128:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 129:/usr/include/c++/9/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 130:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type()
 131:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 132:/usr/include/c++/9/bits/stl_vector.h **** 
 133:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 134:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 135:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 136:/usr/include/c++/9/bits/stl_vector.h **** 
 137:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 138:/usr/include/c++/9/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 139:/usr/include/c++/9/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 140:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 141:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 142:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 143:/usr/include/c++/9/bits/stl_vector.h **** 
 144:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 145:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 146:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 147:/usr/include/c++/9/bits/stl_vector.h **** 
 148:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 149:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 150:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 151:/usr/include/c++/9/bits/stl_vector.h **** #endif
 152:/usr/include/c++/9/bits/stl_vector.h **** 
 153:/usr/include/c++/9/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 154:/usr/include/c++/9/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 155:/usr/include/c++/9/bits/stl_vector.h **** 	  struct _Asan
 156:/usr/include/c++/9/bits/stl_vector.h **** 	  {
 157:/usr/include/c++/9/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 158:/usr/include/c++/9/bits/stl_vector.h **** 	      ::size_type size_type;
 159:/usr/include/c++/9/bits/stl_vector.h **** 
 160:/usr/include/c++/9/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 161:/usr/include/c++/9/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 162:/usr/include/c++/9/bits/stl_vector.h **** 
 163:/usr/include/c++/9/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 164:/usr/include/c++/9/bits/stl_vector.h **** 
 165:/usr/include/c++/9/bits/stl_vector.h **** 	    struct _Grow
 166:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 167:/usr/include/c++/9/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 168:/usr/include/c++/9/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 169:/usr/include/c++/9/bits/stl_vector.h **** 	    };
 170:/usr/include/c++/9/bits/stl_vector.h **** 	  };
 171:/usr/include/c++/9/bits/stl_vector.h **** 
 172:/usr/include/c++/9/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 173:/usr/include/c++/9/bits/stl_vector.h **** 	template<typename _Up>
 174:/usr/include/c++/9/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 175:/usr/include/c++/9/bits/stl_vector.h **** 	  {
 176:/usr/include/c++/9/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 177:/usr/include/c++/9/bits/stl_vector.h **** 	      ::size_type size_type;
 178:/usr/include/c++/9/bits/stl_vector.h **** 
 179:/usr/include/c++/9/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 180:/usr/include/c++/9/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 181:/usr/include/c++/9/bits/stl_vector.h **** 	    static void
 182:/usr/include/c++/9/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 183:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 184:/usr/include/c++/9/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 185:/usr/include/c++/9/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 186:/usr/include/c++/9/bits/stl_vector.h **** 	    }
 187:/usr/include/c++/9/bits/stl_vector.h **** 
 188:/usr/include/c++/9/bits/stl_vector.h **** 	    static void
 189:/usr/include/c++/9/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 190:/usr/include/c++/9/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 191:/usr/include/c++/9/bits/stl_vector.h **** 
 192:/usr/include/c++/9/bits/stl_vector.h **** 	    static void
 193:/usr/include/c++/9/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 194:/usr/include/c++/9/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 195:/usr/include/c++/9/bits/stl_vector.h **** 
 196:/usr/include/c++/9/bits/stl_vector.h **** 	    static void
 197:/usr/include/c++/9/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 198:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 199:/usr/include/c++/9/bits/stl_vector.h **** 	      if (__impl._M_start)
 200:/usr/include/c++/9/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 201:/usr/include/c++/9/bits/stl_vector.h **** 	    }
 202:/usr/include/c++/9/bits/stl_vector.h **** 
 203:/usr/include/c++/9/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 204:/usr/include/c++/9/bits/stl_vector.h **** 	    struct _Reinit
 205:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 206:/usr/include/c++/9/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 207:/usr/include/c++/9/bits/stl_vector.h **** 	      {
 208:/usr/include/c++/9/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 209:/usr/include/c++/9/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 210:/usr/include/c++/9/bits/stl_vector.h **** 	      }
 211:/usr/include/c++/9/bits/stl_vector.h **** 
 212:/usr/include/c++/9/bits/stl_vector.h **** 	      ~_Reinit()
 213:/usr/include/c++/9/bits/stl_vector.h **** 	      {
 214:/usr/include/c++/9/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 215:/usr/include/c++/9/bits/stl_vector.h **** 		if (_M_impl._M_start)
 216:/usr/include/c++/9/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 217:/usr/include/c++/9/bits/stl_vector.h **** 			    _M_impl._M_finish);
 218:/usr/include/c++/9/bits/stl_vector.h **** 	      }
 219:/usr/include/c++/9/bits/stl_vector.h **** 
 220:/usr/include/c++/9/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 221:/usr/include/c++/9/bits/stl_vector.h **** 
 222:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 223:/usr/include/c++/9/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 224:/usr/include/c++/9/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 225:/usr/include/c++/9/bits/stl_vector.h **** #endif
 226:/usr/include/c++/9/bits/stl_vector.h **** 	    };
 227:/usr/include/c++/9/bits/stl_vector.h **** 
 228:/usr/include/c++/9/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 229:/usr/include/c++/9/bits/stl_vector.h **** 	    struct _Grow
 230:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 231:/usr/include/c++/9/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 232:/usr/include/c++/9/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 233:/usr/include/c++/9/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 234:/usr/include/c++/9/bits/stl_vector.h **** 
 235:/usr/include/c++/9/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 236:/usr/include/c++/9/bits/stl_vector.h **** 
 237:/usr/include/c++/9/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 238:/usr/include/c++/9/bits/stl_vector.h **** 
 239:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 240:/usr/include/c++/9/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 241:/usr/include/c++/9/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 242:/usr/include/c++/9/bits/stl_vector.h **** #endif
 243:/usr/include/c++/9/bits/stl_vector.h **** 	    private:
 244:/usr/include/c++/9/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 245:/usr/include/c++/9/bits/stl_vector.h **** 	      size_type _M_n;
 246:/usr/include/c++/9/bits/stl_vector.h **** 	    };
 247:/usr/include/c++/9/bits/stl_vector.h **** 	  };
 248:/usr/include/c++/9/bits/stl_vector.h **** 
 249:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 250:/usr/include/c++/9/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 251:/usr/include/c++/9/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 252:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 253:/usr/include/c++/9/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 254:/usr/include/c++/9/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 255:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 256:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 257:/usr/include/c++/9/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 258:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 259:/usr/include/c++/9/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 260:/usr/include/c++/9/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 261:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 262:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 263:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 264:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 265:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 266:/usr/include/c++/9/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 267:/usr/include/c++/9/bits/stl_vector.h ****       };
 268:/usr/include/c++/9/bits/stl_vector.h **** 
 269:/usr/include/c++/9/bits/stl_vector.h ****     public:
 270:/usr/include/c++/9/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 271:/usr/include/c++/9/bits/stl_vector.h **** 
 272:/usr/include/c++/9/bits/stl_vector.h ****       _Tp_alloc_type&
 273:/usr/include/c++/9/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 274:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 275:/usr/include/c++/9/bits/stl_vector.h **** 
 276:/usr/include/c++/9/bits/stl_vector.h ****       const _Tp_alloc_type&
 277:/usr/include/c++/9/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 278:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 279:/usr/include/c++/9/bits/stl_vector.h **** 
 280:/usr/include/c++/9/bits/stl_vector.h ****       allocator_type
 281:/usr/include/c++/9/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 282:/usr/include/c++/9/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 283:/usr/include/c++/9/bits/stl_vector.h **** 
 284:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 285:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base() = default;
 1018              		.loc 4 285 7
 1019              		.cfi_startproc
 1020 0000 F30F1EFA 		endbr64
 1021 0004 55       		pushq	%rbp
 1022              		.cfi_def_cfa_offset 16
 1023              		.cfi_offset 6, -16
 1024 0005 4889E5   		movq	%rsp, %rbp
 1025              		.cfi_def_cfa_register 6
 1026 0008 53       		pushq	%rbx
 1027 0009 4883EC18 		subq	$24, %rsp
 1028              		.cfi_offset 3, -24
 1029 000d 48897DE8 		movq	%rdi, -24(%rbp)
 1030              	.LBB7:
 1031              		.loc 4 285 7
 1032 0011 488B45E8 		movq	-24(%rbp), %rax
 1033 0015 48837DE8 		cmpq	$0, -24(%rbp)
 1033      00
 1034 001a 740B     		je	.L60
 1035 001c 4889C2   		movq	%rax, %rdx
 1036 001f 83E207   		andl	$7, %edx
 1037 0022 4885D2   		testq	%rdx, %rdx
 1038 0025 740F     		je	.L61
 1039              	.L60:
 1040 0027 4889C6   		movq	%rax, %rsi
 1041 002a 488D3D00 		leaq	.Lubsan_data389(%rip), %rdi
 1041      000000
 1042 0031 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 1042      00
 1043              	.L61:
 1044 0036 488B5DE8 		movq	-24(%rbp), %rbx
 1045 003a 4889D8   		movq	%rbx, %rax
 1046 003d 4885DB   		testq	%rbx, %rbx
 1047 0040 740B     		je	.L62
 1048 0042 4889C2   		movq	%rax, %rdx
 1049 0045 83E207   		andl	$7, %edx
 1050 0048 4885D2   		testq	%rdx, %rdx
 1051 004b 740F     		je	.L63
 1052              	.L62:
 1053 004d 4889C6   		movq	%rax, %rsi
 1054 0050 488D3D00 		leaq	.Lubsan_data390(%rip), %rdi
 1054      000000
 1055 0057 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 1055      00
 1056              	.L63:
 1057 005c 4889DF   		movq	%rbx, %rdi
 1058 005f E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_imp
 1058      00
 1059              	.LBE7:
 1060 0064 90       		nop
 1061 0065 4883C418 		addq	$24, %rsp
 1062 0069 5B       		popq	%rbx
 1063 006a 5D       		popq	%rbp
 1064              		.cfi_def_cfa 7, 8
 1065 006b C3       		ret
 1066              		.cfi_endproc
 1067              	.LFE2350:
 1069              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev
 1070              		.set	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev,_ZNSt12_
 1071              		.data
 1072              		.align 32
 1075              	.Lubsan_type10:
 1078 0184 27737472 		.string	"'struct vector'"
 1078      75637420 
 1078      76656374 
 1078      6F722700 
 1079 0194 00000000 		.zero	44
 1079      00000000 
 1079      00000000 
 1079      00000000 
 1079      00000000 
 1080              		.section	.data.rel.local
 1081              		.align 32
 1084              	.Lubsan_data391:
 1085 0440 00000000 		.quad	.LC3
 1085      00000000 
 1086 0448 E4010000 		.long	484
 1087 044c 07000000 		.long	7
 1088 0450 00000000 		.quad	.Lubsan_type10
 1088      00000000 
 1089 0458 03       		.byte	3
 1090 0459 03       		.byte	3
 1091 045a 00000000 		.zero	6
 1091      0000
 1092 0460 00000000 		.zero	32
 1092      00000000 
 1092      00000000 
 1092      00000000 
 1092      00000000 
 1093              		.align 32
 1096              	.Lubsan_data392:
 1097 0480 00000000 		.quad	.LC3
 1097      00000000 
 1098 0488 E4010000 		.long	484
 1099 048c 07000000 		.long	7
 1100 0490 00000000 		.quad	.Lubsan_type8
 1100      00000000 
 1101 0498 03       		.byte	3
 1102 0499 05       		.byte	5
 1103 049a 00000000 		.zero	6
 1103      0000
 1104 04a0 00000000 		.zero	32
 1104      00000000 
 1104      00000000 
 1104      00000000 
 1104      00000000 
 1105              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2Ev,"axG"
 1106              		.align 2
 1107              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2Ev
 1109              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2Ev:
 1110              	.LASANPC2352:
 1111              	.LFB2352:
 286:/usr/include/c++/9/bits/stl_vector.h **** #else
 287:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base() { }
 288:/usr/include/c++/9/bits/stl_vector.h **** #endif
 289:/usr/include/c++/9/bits/stl_vector.h **** 
 290:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 291:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(__a) { }
 292:/usr/include/c++/9/bits/stl_vector.h **** 
 293:/usr/include/c++/9/bits/stl_vector.h ****       // Kept for ABI compatibility.
 294:/usr/include/c++/9/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 295:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(size_t __n)
 296:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl()
 297:/usr/include/c++/9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 298:/usr/include/c++/9/bits/stl_vector.h **** #endif
 299:/usr/include/c++/9/bits/stl_vector.h **** 
 300:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 301:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(__a)
 302:/usr/include/c++/9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 303:/usr/include/c++/9/bits/stl_vector.h **** 
 304:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 305:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 306:/usr/include/c++/9/bits/stl_vector.h **** 
 307:/usr/include/c++/9/bits/stl_vector.h ****       // Kept for ABI compatibility.
 308:/usr/include/c++/9/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 309:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 310:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 311:/usr/include/c++/9/bits/stl_vector.h **** 
 312:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 313:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(__a)
 314:/usr/include/c++/9/bits/stl_vector.h ****       {
 315:/usr/include/c++/9/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 316:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 317:/usr/include/c++/9/bits/stl_vector.h **** 	else
 318:/usr/include/c++/9/bits/stl_vector.h **** 	  {
 319:/usr/include/c++/9/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 320:/usr/include/c++/9/bits/stl_vector.h **** 	    _M_create_storage(__n);
 321:/usr/include/c++/9/bits/stl_vector.h **** 	  }
 322:/usr/include/c++/9/bits/stl_vector.h ****       }
 323:/usr/include/c++/9/bits/stl_vector.h **** # endif
 324:/usr/include/c++/9/bits/stl_vector.h **** 
 325:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 326:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 327:/usr/include/c++/9/bits/stl_vector.h ****       { }
 328:/usr/include/c++/9/bits/stl_vector.h **** #endif
 329:/usr/include/c++/9/bits/stl_vector.h **** 
 330:/usr/include/c++/9/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 331:/usr/include/c++/9/bits/stl_vector.h ****       {
 332:/usr/include/c++/9/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 333:/usr/include/c++/9/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 334:/usr/include/c++/9/bits/stl_vector.h ****       }
 335:/usr/include/c++/9/bits/stl_vector.h **** 
 336:/usr/include/c++/9/bits/stl_vector.h ****     public:
 337:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_impl _M_impl;
 338:/usr/include/c++/9/bits/stl_vector.h **** 
 339:/usr/include/c++/9/bits/stl_vector.h ****       pointer
 340:/usr/include/c++/9/bits/stl_vector.h ****       _M_allocate(size_t __n)
 341:/usr/include/c++/9/bits/stl_vector.h ****       {
 342:/usr/include/c++/9/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 343:/usr/include/c++/9/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 344:/usr/include/c++/9/bits/stl_vector.h ****       }
 345:/usr/include/c++/9/bits/stl_vector.h **** 
 346:/usr/include/c++/9/bits/stl_vector.h ****       void
 347:/usr/include/c++/9/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 348:/usr/include/c++/9/bits/stl_vector.h ****       {
 349:/usr/include/c++/9/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 350:/usr/include/c++/9/bits/stl_vector.h **** 	if (__p)
 351:/usr/include/c++/9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 352:/usr/include/c++/9/bits/stl_vector.h ****       }
 353:/usr/include/c++/9/bits/stl_vector.h **** 
 354:/usr/include/c++/9/bits/stl_vector.h ****     protected:
 355:/usr/include/c++/9/bits/stl_vector.h ****       void
 356:/usr/include/c++/9/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 357:/usr/include/c++/9/bits/stl_vector.h ****       {
 358:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 359:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 360:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 361:/usr/include/c++/9/bits/stl_vector.h ****       }
 362:/usr/include/c++/9/bits/stl_vector.h ****     };
 363:/usr/include/c++/9/bits/stl_vector.h **** 
 364:/usr/include/c++/9/bits/stl_vector.h ****   /**
 365:/usr/include/c++/9/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 366:/usr/include/c++/9/bits/stl_vector.h ****    *  individual elements in any order.
 367:/usr/include/c++/9/bits/stl_vector.h ****    *
 368:/usr/include/c++/9/bits/stl_vector.h ****    *  @ingroup sequences
 369:/usr/include/c++/9/bits/stl_vector.h ****    *
 370:/usr/include/c++/9/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 371:/usr/include/c++/9/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 372:/usr/include/c++/9/bits/stl_vector.h ****    *
 373:/usr/include/c++/9/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 374:/usr/include/c++/9/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 375:/usr/include/c++/9/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 376:/usr/include/c++/9/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 377:/usr/include/c++/9/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 378:/usr/include/c++/9/bits/stl_vector.h ****    *
 379:/usr/include/c++/9/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 380:/usr/include/c++/9/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 381:/usr/include/c++/9/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 382:/usr/include/c++/9/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 383:/usr/include/c++/9/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 384:/usr/include/c++/9/bits/stl_vector.h ****   */
 385:/usr/include/c++/9/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 386:/usr/include/c++/9/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 387:/usr/include/c++/9/bits/stl_vector.h ****     {
 388:/usr/include/c++/9/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 389:/usr/include/c++/9/bits/stl_vector.h ****       // Concept requirements.
 390:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 391:/usr/include/c++/9/bits/stl_vector.h **** # if __cplusplus < 201103L
 392:/usr/include/c++/9/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 393:/usr/include/c++/9/bits/stl_vector.h **** # endif
 394:/usr/include/c++/9/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 395:/usr/include/c++/9/bits/stl_vector.h **** #endif
 396:/usr/include/c++/9/bits/stl_vector.h **** 
 397:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 398:/usr/include/c++/9/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 399:/usr/include/c++/9/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 400:/usr/include/c++/9/bits/stl_vector.h **** # ifdef __STRICT_ANSI__
 401:/usr/include/c++/9/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 402:/usr/include/c++/9/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 403:/usr/include/c++/9/bits/stl_vector.h **** # endif
 404:/usr/include/c++/9/bits/stl_vector.h **** #endif
 405:/usr/include/c++/9/bits/stl_vector.h **** 
 406:/usr/include/c++/9/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 407:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 408:/usr/include/c++/9/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 409:/usr/include/c++/9/bits/stl_vector.h **** 
 410:/usr/include/c++/9/bits/stl_vector.h ****     public:
 411:/usr/include/c++/9/bits/stl_vector.h ****       typedef _Tp					value_type;
 412:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 413:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 414:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 415:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 416:/usr/include/c++/9/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 417:/usr/include/c++/9/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 418:/usr/include/c++/9/bits/stl_vector.h ****       const_iterator;
 419:/usr/include/c++/9/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 420:/usr/include/c++/9/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 421:/usr/include/c++/9/bits/stl_vector.h ****       typedef size_t					size_type;
 422:/usr/include/c++/9/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 423:/usr/include/c++/9/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 424:/usr/include/c++/9/bits/stl_vector.h **** 
 425:/usr/include/c++/9/bits/stl_vector.h ****     private:
 426:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 427:/usr/include/c++/9/bits/stl_vector.h ****       static constexpr bool
 428:/usr/include/c++/9/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 429:/usr/include/c++/9/bits/stl_vector.h ****       {
 430:/usr/include/c++/9/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 431:/usr/include/c++/9/bits/stl_vector.h **** 					  std::declval<pointer>(),
 432:/usr/include/c++/9/bits/stl_vector.h **** 					  std::declval<pointer>(),
 433:/usr/include/c++/9/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 434:/usr/include/c++/9/bits/stl_vector.h ****       }
 435:/usr/include/c++/9/bits/stl_vector.h **** 
 436:/usr/include/c++/9/bits/stl_vector.h ****       static constexpr bool
 437:/usr/include/c++/9/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 438:/usr/include/c++/9/bits/stl_vector.h ****       { return false; }
 439:/usr/include/c++/9/bits/stl_vector.h **** 
 440:/usr/include/c++/9/bits/stl_vector.h ****       static constexpr bool
 441:/usr/include/c++/9/bits/stl_vector.h ****       _S_use_relocate()
 442:/usr/include/c++/9/bits/stl_vector.h ****       {
 443:/usr/include/c++/9/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 444:/usr/include/c++/9/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 445:/usr/include/c++/9/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 446:/usr/include/c++/9/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 447:/usr/include/c++/9/bits/stl_vector.h ****       }
 448:/usr/include/c++/9/bits/stl_vector.h **** 
 449:/usr/include/c++/9/bits/stl_vector.h ****       static pointer
 450:/usr/include/c++/9/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 451:/usr/include/c++/9/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 452:/usr/include/c++/9/bits/stl_vector.h ****       {
 453:/usr/include/c++/9/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 454:/usr/include/c++/9/bits/stl_vector.h ****       }
 455:/usr/include/c++/9/bits/stl_vector.h **** 
 456:/usr/include/c++/9/bits/stl_vector.h ****       static pointer
 457:/usr/include/c++/9/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 458:/usr/include/c++/9/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 459:/usr/include/c++/9/bits/stl_vector.h ****       { return __result; }
 460:/usr/include/c++/9/bits/stl_vector.h **** 
 461:/usr/include/c++/9/bits/stl_vector.h ****       static pointer
 462:/usr/include/c++/9/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 463:/usr/include/c++/9/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 464:/usr/include/c++/9/bits/stl_vector.h ****       {
 465:/usr/include/c++/9/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 466:/usr/include/c++/9/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 467:/usr/include/c++/9/bits/stl_vector.h ****       }
 468:/usr/include/c++/9/bits/stl_vector.h **** #endif // C++11
 469:/usr/include/c++/9/bits/stl_vector.h **** 
 470:/usr/include/c++/9/bits/stl_vector.h ****     protected:
 471:/usr/include/c++/9/bits/stl_vector.h ****       using _Base::_M_allocate;
 472:/usr/include/c++/9/bits/stl_vector.h ****       using _Base::_M_deallocate;
 473:/usr/include/c++/9/bits/stl_vector.h ****       using _Base::_M_impl;
 474:/usr/include/c++/9/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 475:/usr/include/c++/9/bits/stl_vector.h **** 
 476:/usr/include/c++/9/bits/stl_vector.h ****     public:
 477:/usr/include/c++/9/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 478:/usr/include/c++/9/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 479:/usr/include/c++/9/bits/stl_vector.h **** 
 480:/usr/include/c++/9/bits/stl_vector.h ****       /**
 481:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 482:/usr/include/c++/9/bits/stl_vector.h ****        */
 483:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 484:/usr/include/c++/9/bits/stl_vector.h ****       vector() = default;
 1112              		.loc 4 484 7
 1113              		.cfi_startproc
 1114 0000 F30F1EFA 		endbr64
 1115 0004 55       		pushq	%rbp
 1116              		.cfi_def_cfa_offset 16
 1117              		.cfi_offset 6, -16
 1118 0005 4889E5   		movq	%rsp, %rbp
 1119              		.cfi_def_cfa_register 6
 1120 0008 53       		pushq	%rbx
 1121 0009 4883EC18 		subq	$24, %rsp
 1122              		.cfi_offset 3, -24
 1123 000d 48897DE8 		movq	%rdi, -24(%rbp)
 1124              	.LBB8:
 1125              		.loc 4 484 7
 1126 0011 488B45E8 		movq	-24(%rbp), %rax
 1127 0015 48837DE8 		cmpq	$0, -24(%rbp)
 1127      00
 1128 001a 740B     		je	.L65
 1129 001c 4889C2   		movq	%rax, %rdx
 1130 001f 83E207   		andl	$7, %edx
 1131 0022 4885D2   		testq	%rdx, %rdx
 1132 0025 740F     		je	.L66
 1133              	.L65:
 1134 0027 4889C6   		movq	%rax, %rsi
 1135 002a 488D3D00 		leaq	.Lubsan_data391(%rip), %rdi
 1135      000000
 1136 0031 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 1136      00
 1137              	.L66:
 1138 0036 488B5DE8 		movq	-24(%rbp), %rbx
 1139 003a 4889D8   		movq	%rbx, %rax
 1140 003d 4885DB   		testq	%rbx, %rbx
 1141 0040 740B     		je	.L67
 1142 0042 4889C2   		movq	%rax, %rdx
 1143 0045 83E207   		andl	$7, %edx
 1144 0048 4885D2   		testq	%rdx, %rdx
 1145 004b 740F     		je	.L68
 1146              	.L67:
 1147 004d 4889C6   		movq	%rax, %rsi
 1148 0050 488D3D00 		leaq	.Lubsan_data392(%rip), %rdi
 1148      000000
 1149 0057 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 1149      00
 1150              	.L68:
 1151 005c 4889DF   		movq	%rbx, %rdi
 1152 005f E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2Ev
 1152      00
 1153              	.LBE8:
 1154 0064 90       		nop
 1155 0065 4883C418 		addq	$24, %rsp
 1156 0069 5B       		popq	%rbx
 1157 006a 5D       		popq	%rbp
 1158              		.cfi_def_cfa 7, 8
 1159 006b C3       		ret
 1160              		.cfi_endproc
 1161              	.LFE2352:
 1163              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev
 1164              		.set	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev,_ZNSt6vectorINS
 1165              		.data
 1166              		.align 32
 1169              	.Lubsan_type11:
 1172 01c4 27626173 		.string	"'basic_ifstream'"
 1172      69635F69 
 1172      66737472 
 1172      65616D27 
 1172      00
 1173 01d5 00000000 		.zero	43
 1173      00000000 
 1173      00000000 
 1173      00000000 
 1173      00000000 
 1174              		.section	.data.rel,"aw"
 1175              		.align 32
 1178              	.Lubsan_data393:
 1179 0000 00000000 		.quad	.LC0
 1179      00000000 
 1180 0008 13000000 		.long	19
 1181 000c 13000000 		.long	19
 1182 0010 00000000 		.quad	.Lubsan_type11
 1182      00000000 
 1183 0018 00000000 		.quad	_ZTISt14basic_ifstreamIcSt11char_traitsIcEE
 1183      00000000 
 1184 0020 04       		.byte	4
 1185 0021 00000000 		.zero	7
 1185      000000
 1186 0028 00000000 		.zero	56
 1186      00000000 
 1186      00000000 
 1186      00000000 
 1186      00000000 
 1187              		.data
 1188              		.align 32
 1191              	.Lubsan_type12:
 1194 0204 27626173 		.string	"'basic_ofstream'"
 1194      69635F6F 
 1194      66737472 
 1194      65616D27 
 1194      00
 1195 0215 00000000 		.zero	43
 1195      00000000 
 1195      00000000 
 1195      00000000 
 1195      00000000 
 1196              		.section	.data.rel
 1197              		.align 32
 1200              	.Lubsan_data394:
 1201 0060 00000000 		.quad	.LC0
 1201      00000000 
 1202 0068 13000000 		.long	19
 1203 006c 25000000 		.long	37
 1204 0070 00000000 		.quad	.Lubsan_type12
 1204      00000000 
 1205 0078 00000000 		.quad	_ZTISt14basic_ofstreamIcSt11char_traitsIcEE
 1205      00000000 
 1206 0080 04       		.byte	4
 1207 0081 00000000 		.zero	7
 1207      000000
 1208 0088 00000000 		.zero	56
 1208      00000000 
 1208      00000000 
 1208      00000000 
 1208      00000000 
 1209              		.data
 1210              		.align 32
 1213              	.Lubsan_type13:
 1216 0244 27626173 		.string	"'basic_ios'"
 1216      69635F69 
 1216      6F732700 
 1217 0250 00000000 		.zero	48
 1217      00000000 
 1217      00000000 
 1217      00000000 
 1217      00000000 
 1218              		.section	.data.rel
 1219              		.align 32
 1222              	.Lubsan_data395:
 1223 00c0 00000000 		.quad	.LC0
 1223      00000000 
 1224 00c8 17000000 		.long	23
 1225 00cc 12000000 		.long	18
 1226 00d0 00000000 		.quad	.Lubsan_type13
 1226      00000000 
 1227 00d8 00000000 		.quad	_ZTISt9basic_iosIcSt11char_traitsIcEE
 1227      00000000 
 1228 00e0 04       		.byte	4
 1229 00e1 00000000 		.zero	7
 1229      000000
 1230 00e8 00000000 		.zero	56
 1230      00000000 
 1230      00000000 
 1230      00000000 
 1230      00000000 
 1231              		.section	.data.rel.local
 1232              		.align 32
 1235              	.Lubsan_data396:
 1236 04c0 00000000 		.quad	.LC0
 1236      00000000 
 1237 04c8 1A000000 		.long	26
 1238 04cc 31000000 		.long	49
 1239 04d0 00000000 		.quad	.Lubsan_type10
 1239      00000000 
 1240 04d8 03       		.byte	3
 1241 04d9 04       		.byte	4
 1242 04da 00000000 		.zero	6
 1242      0000
 1243 04e0 00000000 		.zero	32
 1243      00000000 
 1243      00000000 
 1243      00000000 
 1243      00000000 
 1244              		.data
 1245              		.align 32
 1248              	.Lubsan_type14:
 1251 0284 27636F6E 		.string	"'const struct value_type'"
 1251      73742073 
 1251      74727563 
 1251      74207661 
 1251      6C75655F 
 1252 029e 00000000 		.zero	34
 1252      00000000 
 1252      00000000 
 1252      00000000 
 1252      00000000 
 1253              		.section	.data.rel.local
 1254              		.align 32
 1257              	.Lubsan_data397:
 1258 0500 00000000 		.quad	.LC0
 1258      00000000 
 1259 0508 1A000000 		.long	26
 1260 050c 1E000000 		.long	30
 1261 0510 00000000 		.quad	.Lubsan_type14
 1261      00000000 
 1262 0518 03       		.byte	3
 1263 0519 02       		.byte	2
 1264 051a 00000000 		.zero	6
 1264      0000
 1265 0520 00000000 		.zero	32
 1265      00000000 
 1265      00000000 
 1265      00000000 
 1265      00000000 
 1266              		.align 32
 1269              	.Lubsan_data398:
 1270 0540 00000000 		.quad	.LC0
 1270      00000000 
 1271 0548 1C000000 		.long	28
 1272 054c 31000000 		.long	49
 1273 0550 00000000 		.quad	.Lubsan_type10
 1273      00000000 
 1274 0558 03       		.byte	3
 1275 0559 04       		.byte	4
 1276 055a 00000000 		.zero	6
 1276      0000
 1277 0560 00000000 		.zero	32
 1277      00000000 
 1277      00000000 
 1277      00000000 
 1277      00000000 
 1278              		.align 32
 1281              	.Lubsan_data399:
 1282 0580 00000000 		.quad	.LC0
 1282      00000000 
 1283 0588 1C000000 		.long	28
 1284 058c 1E000000 		.long	30
 1285 0590 00000000 		.quad	.Lubsan_type14
 1285      00000000 
 1286 0598 03       		.byte	3
 1287 0599 02       		.byte	2
 1288 059a 00000000 		.zero	6
 1288      0000
 1289 05a0 00000000 		.zero	32
 1289      00000000 
 1289      00000000 
 1289      00000000 
 1289      00000000 
 1290              		.data
 1291              		.align 32
 1294              	.Lubsan_type15:
 1297 02c4 27636F6E 		.string	"'const struct basic_string'"
 1297      73742073 
 1297      74727563 
 1297      74206261 
 1297      7369635F 
 1298 02e0 00000000 		.zero	32
 1298      00000000 
 1298      00000000 
 1298      00000000 
 1298      00000000 
 1299              		.section	.data.rel.local
 1300              		.align 32
 1303              	.Lubsan_data400:
 1304 05c0 00000000 		.quad	.LC0
 1304      00000000 
 1305 05c8 1D000000 		.long	29
 1306 05cc 40000000 		.long	64
 1307 05d0 00000000 		.quad	.Lubsan_type15
 1307      00000000 
 1308 05d8 03       		.byte	3
 1309 05d9 02       		.byte	2
 1310 05da 00000000 		.zero	6
 1310      0000
 1311 05e0 00000000 		.zero	32
 1311      00000000 
 1311      00000000 
 1311      00000000 
 1311      00000000 
 1312              		.align 32
 1315              	.Lubsan_data401:
 1316 0600 00000000 		.quad	.LC0
 1316      00000000 
 1317 0608 1D000000 		.long	29
 1318 060c 3B000000 		.long	59
 1319 0610 00000000 		.quad	.Lubsan_type10
 1319      00000000 
 1320 0618 03       		.byte	3
 1321 0619 04       		.byte	4
 1322 061a 00000000 		.zero	6
 1322      0000
 1323 0620 00000000 		.zero	32
 1323      00000000 
 1323      00000000 
 1323      00000000 
 1323      00000000 
 1324              		.align 32
 1327              	.Lubsan_data402:
 1328 0640 00000000 		.quad	.LC0
 1328      00000000 
 1329 0648 1D000000 		.long	29
 1330 064c 40000000 		.long	64
 1331 0650 00000000 		.quad	.Lubsan_type15
 1331      00000000 
 1332 0658 03       		.byte	3
 1333 0659 02       		.byte	2
 1334 065a 00000000 		.zero	6
 1334      0000
 1335 0660 00000000 		.zero	32
 1335      00000000 
 1335      00000000 
 1335      00000000 
 1335      00000000 
 1336              		.data
 1337              		.align 32
 1340              	.Lubsan_type16:
 1343 0304 27636F6E 		.string	"'const struct __normal_iterator'"
 1343      73742073 
 1343      74727563 
 1343      74205F5F 
 1343      6E6F726D 
 1344 0325 00000000 		.zero	59
 1344      00000000 
 1344      00000000 
 1344      00000000 
 1344      00000000 
 1345              		.section	.data.rel.local
 1346              		.align 32
 1349              	.Lubsan_data403:
 1350 0680 00000000 		.quad	.LC0
 1350      00000000 
 1351 0688 1E000000 		.long	30
 1352 068c 2E000000 		.long	46
 1353 0690 00000000 		.quad	.Lubsan_type16
 1353      00000000 
 1354 0698 03       		.byte	3
 1355 0699 02       		.byte	2
 1356 069a 00000000 		.zero	6
 1356      0000
 1357 06a0 00000000 		.zero	32
 1357      00000000 
 1357      00000000 
 1357      00000000 
 1357      00000000 
 1358              		.section	.data.rel
 1359              		.align 32
 1362              	.Lubsan_data404:
 1363 0120 00000000 		.quad	.LC0
 1363      00000000 
 1364 0128 23000000 		.long	35
 1365 012c 0C000000 		.long	12
 1366 0130 00000000 		.quad	.Lubsan_type12
 1366      00000000 
 1367 0138 00000000 		.quad	_ZTISt14basic_ofstreamIcSt11char_traitsIcEE
 1367      00000000 
 1368 0140 04       		.byte	4
 1369 0141 00000000 		.zero	7
 1369      000000
 1370 0148 00000000 		.zero	56
 1370      00000000 
 1370      00000000 
 1370      00000000 
 1370      00000000 
 1371              		.align 32
 1374              	.Lubsan_data405:
 1375 0180 00000000 		.quad	0
 1375      00000000 
 1376 0188 00000000 		.long	0
 1377 018c 00000000 		.long	0
 1378 0190 00000000 		.quad	.Lubsan_type12
 1378      00000000 
 1379 0198 00000000 		.quad	_ZTISt14basic_ofstreamIcSt11char_traitsIcEE
 1379      00000000 
 1380 01a0 04       		.byte	4
 1381 01a1 00000000 		.zero	7
 1381      000000
 1382 01a8 00000000 		.zero	56
 1382      00000000 
 1382      00000000 
 1382      00000000 
 1382      00000000 
 1383              		.align 32
 1386              	.Lubsan_data406:
 1387 01e0 00000000 		.quad	0
 1387      00000000 
 1388 01e8 00000000 		.long	0
 1389 01ec 00000000 		.long	0
 1390 01f0 00000000 		.quad	.Lubsan_type11
 1390      00000000 
 1391 01f8 00000000 		.quad	_ZTISt14basic_ifstreamIcSt11char_traitsIcEE
 1391      00000000 
 1392 0200 04       		.byte	4
 1393 0201 00000000 		.zero	7
 1393      000000
 1394 0208 00000000 		.zero	56
 1394      00000000 
 1394      00000000 
 1394      00000000 
 1394      00000000 
 1395              		.align 32
 1398              	.Lubsan_data407:
 1399 0240 00000000 		.quad	.LC0
 1399      00000000 
 1400 0248 12000000 		.long	18
 1401 024c 24000000 		.long	36
 1402 0250 00000000 		.quad	.Lubsan_type12
 1402      00000000 
 1403 0258 00000000 		.quad	_ZTISt14basic_ofstreamIcSt11char_traitsIcEE
 1403      00000000 
 1404 0260 04       		.byte	4
 1405 0261 00000000 		.zero	7
 1405      000000
 1406 0268 00000000 		.zero	56
 1406      00000000 
 1406      00000000 
 1406      00000000 
 1406      00000000 
 1407              		.align 32
 1410              	.Lubsan_data408:
 1411 02a0 00000000 		.quad	.LC0
 1411      00000000 
 1412 02a8 11000000 		.long	17
 1413 02ac 22000000 		.long	34
 1414 02b0 00000000 		.quad	.Lubsan_type11
 1414      00000000 
 1415 02b8 00000000 		.quad	_ZTISt14basic_ifstreamIcSt11char_traitsIcEE
 1415      00000000 
 1416 02c0 04       		.byte	4
 1417 02c1 00000000 		.zero	7
 1417      000000
 1418 02c8 00000000 		.zero	56
 1418      00000000 
 1418      00000000 
 1418      00000000 
 1418      00000000 
 1419              		.globl	__asan_stack_malloc_5
 1420              		.section	.rodata
 1421              		.align 8
 1422              	.LC4:
 1423 0160 31322034 		.string	"12 48 8 9 <unknown> 80 8 9 <unknown> 112 24 16 removed_dates:20 176 24 9 <unknown> 240 24
 1423      38203820 
 1423      39203C75 
 1423      6E6B6E6F 
 1423      776E3E20 
 1424              		.globl	__asan_stack_free_5
 1425 0246 00000000 		.align 32
 1425      00000000 
 1425      00000000 
 1425      00000000 
 1425      00000000 
 1426              	.LC5:
 1427 0260 776F7264 		.string	"wordles.txt"
 1427      6C65732E 
 1427      74787400 
 1428 026c 00000000 		.zero	52
 1428      00000000 
 1428      00000000 
 1428      00000000 
 1428      00000000 
 1429              		.align 32
 1430              	.LC6:
 1431 02a0 70726F63 		.string	"processed.txt"
 1431      65737365 
 1431      642E7478 
 1431      7400
 1432 02ae 00000000 		.zero	50
 1432      00000000 
 1432      00000000 
 1432      00000000 
 1432      00000000 
 1433              		.text
 1434              		.globl	main
 1436              	main:
 1437              	.LASANPC2344:
 1438              	.LFB2344:
  15:/home/arkel/c++/wordle/files/update_word_list.cpp **** 
  16:/home/arkel/c++/wordle/files/update_word_list.cpp **** int main() {
 1439              		.loc 3 16 12
 1440              		.cfi_startproc
 1441              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1442              		.cfi_lsda 0x1b,.LLSDA2344
 1443 07a6 F30F1EFA 		endbr64
 1444 07aa 55       		pushq	%rbp
 1445              		.cfi_def_cfa_offset 16
 1446              		.cfi_offset 6, -16
 1447 07ab 4889E5   		movq	%rsp, %rbp
 1448              		.cfi_def_cfa_register 6
 1449 07ae 4157     		pushq	%r15
 1450 07b0 4156     		pushq	%r14
 1451 07b2 4155     		pushq	%r13
 1452 07b4 4154     		pushq	%r12
 1453 07b6 53       		pushq	%rbx
 1454 07b7 4881EC78 		subq	$1912, %rsp
 1454      070000
 1455              		.cfi_offset 15, -24
 1456              		.cfi_offset 14, -32
 1457              		.cfi_offset 13, -40
 1458              		.cfi_offset 12, -48
 1459              		.cfi_offset 3, -56
 1460 07be 4C8DAD70 		leaq	-1936(%rbp), %r13
 1460      F8FFFF
 1461 07c5 4D89EF   		movq	%r13, %r15
 1462 07c8 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 1462      000000
 1463 07cf 7412     		je	.L69
 1464 07d1 BF400700 		movl	$1856, %edi
 1464      00
 1465 07d6 E8000000 		call	__asan_stack_malloc_5@PLT
 1465      00
 1466              	.LVL1:
 1467 07db 4885C0   		testq	%rax, %rax
 1468 07de 7403     		je	.L69
 1469 07e0 4989C5   		movq	%rax, %r13
 1470              	.L69:
 1471 07e3 498D8560 		leaq	1888(%r13), %rax
 1471      070000
 1472 07ea 4889C3   		movq	%rax, %rbx
 1473 07ed 49C74500 		movq	$1102416563, 0(%r13)
 1473      B38AB541 
 1474 07f5 488D0500 		leaq	.LC4(%rip), %rax
 1474      000000
 1475 07fc 49894508 		movq	%rax, 8(%r13)
 1476 0800 488D059F 		leaq	.LASANPC2344(%rip), %rax
 1476      FFFFFF
 1477 0807 49894510 		movq	%rax, 16(%r13)
 1478 080b 4D89EC   		movq	%r13, %r12
 1479 080e 49C1EC03 		shrq	$3, %r12
 1480 0812 41C78424 		movl	$-235802127, 2147450880(%r12)
 1480      0080FF7F 
 1480      F1F1F1F1 
 1481 081e 41C78424 		movl	$61937, 2147450884(%r12)
 1481      0480FF7F 
 1481      F1F10000 
 1482 082a 41C78424 		movl	$-234881024, 2147450884(%r12)
 1482      0480FF7F 
 1482      000000F2 
 1483 0836 41C78424 		movl	$62194, 2147450888(%r12)
 1483      0880FF7F 
 1483      F2F20000 
 1484 0842 41C78424 		movl	$-234881024, 2147450888(%r12)
 1484      0880FF7F 
 1484      000000F2 
 1485 084e 41C78424 		movl	$62194, 2147450892(%r12)
 1485      0C80FF7F 
 1485      F2F20000 
 1486 085a 41C78424 		movl	$-218959360, 2147450896(%r12)
 1486      1080FF7F 
 1486      00F2F2F2 
 1487 0866 41C78424 		movl	$62194, 2147450900(%r12)
 1487      1480FF7F 
 1487      F2F20000 
 1488 0872 41C78424 		movl	$-218959360, 2147450904(%r12)
 1488      1880FF7F 
 1488      00F2F2F2 
 1489 087e 41C78424 		movl	$62194, 2147450908(%r12)
 1489      1C80FF7F 
 1489      F2F20000 
 1490 088a 41C78424 		movl	$-218959360, 2147450912(%r12)
 1490      2080FF7F 
 1490      00F2F2F2 
 1491 0896 41C78424 		movl	$62194, 2147450916(%r12)
 1491      2480FF7F 
 1491      F2F20000 
 1492 08a2 41C78424 		movl	$-218959360, 2147450920(%r12)
 1492      2880FF7F 
 1492      00F2F2F2 
 1493 08ae 41C78424 		movl	$62194, 2147450924(%r12)
 1493      2C80FF7F 
 1493      F2F20000 
 1494 08ba 41C78424 		movl	$-219021312, 2147450928(%r12)
 1494      3080FF7F 
 1494      0000F2F2 
 1495 08c6 41C78424 		movl	$62194, 2147450932(%r12)
 1495      3480FF7F 
 1495      F2F20000 
 1496 08d2 41C78424 		movl	$-219021312, 2147450936(%r12)
 1496      3880FF7F 
 1496      0000F2F2 
 1497 08de 41C78424 		movl	$62194, 2147450940(%r12)
 1497      3C80FF7F 
 1497      F2F20000 
 1498 08ea 41C78424 		movl	$-219021312, 2147450944(%r12)
 1498      4080FF7F 
 1498      0000F2F2 
 1499 08f6 41C78424 		movl	$62194, 2147450948(%r12)
 1499      4480FF7F 
 1499      F2F20000 
 1500 0902 41C78424 		movl	$-219021312, 2147450952(%r12)
 1500      4880FF7F 
 1500      0000F2F2 
 1501 090e 41C78424 		movl	$62194, 2147450956(%r12)
 1501      4C80FF7F 
 1501      F2F20000 
 1502 091a 41C78424 		movl	$-219021312, 2147451020(%r12)
 1502      8C80FF7F 
 1502      0000F2F2 
 1503 0926 41C78424 		movl	$-218959118, 2147451024(%r12)
 1503      9080FF7F 
 1503      F2F2F2F2 
 1504 0932 41C78424 		movl	$62194, 2147451028(%r12)
 1504      9480FF7F 
 1504      F2F20000 
 1505 093e 41C78424 		movl	$-218103808, 2147451092(%r12)
 1505      D480FF7F 
 1505      000000F3 
 1506 094a 41C78424 		movl	$-202116109, 2147451096(%r12)
 1506      D880FF7F 
 1506      F3F3F3F3 
 1507 0956 41C78424 		movl	$-202116109, 2147451100(%r12)
 1507      DC80FF7F 
 1507      F3F3F3F3 
 1508 0962 41C78424 		movl	$-202116109, 2147451104(%r12)
 1508      E080FF7F 
 1508      F3F3F3F3 
 1509 096e 41C78424 		movl	$-202116109, 2147451108(%r12)
 1509      E480FF7F 
 1509      F3F3F3F3 
 1510              		.loc 3 16 12
 1511 097a 64488B04 		movq	%fs:40, %rax
 1511      25280000 
 1511      00
 1512 0983 488945C8 		movq	%rax, -56(%rbp)
 1513 0987 31C0     		xorl	%eax, %eax
  17:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::ifstream ifs("wordles.txt");
 1514              		.loc 3 17 34
 1515 0989 488D8350 		leaq	-688(%rbx), %rax
 1515      FDFFFF
 1516 0990 BA080000 		movl	$8, %edx
 1516      00
 1517 0995 488D3500 		leaq	.LC5(%rip), %rsi
 1517      000000
 1518 099c 4889C7   		movq	%rax, %rdi
 1519              	.LEHB6:
 1520 099f E8000000 		call	_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode@PLT
 1520      00
 1521              	.LEHE6:
  18:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::ofstream ofs("processed.txt");
 1522              		.loc 3 18 36
 1523 09a4 488D8310 		leaq	-1264(%rbx), %rax
 1523      FBFFFF
 1524 09ab BA100000 		movl	$16, %edx
 1524      00
 1525 09b0 488D3500 		leaq	.LC6(%rip), %rsi
 1525      000000
 1526 09b7 4889C7   		movq	%rax, %rdi
 1527              	.LEHB7:
 1528 09ba E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode@PLT
 1528      00
 1529              	.LEHE7:
  19:/home/arkel/c++/wordle/files/update_word_list.cpp ****   if (!ifs.is_open() || !ofs.is_open()) return 1;
 1530              		.loc 3 19 19
 1531 09bf 488D8350 		leaq	-688(%rbx), %rax
 1531      FDFFFF
 1532 09c6 4889C2   		movq	%rax, %rdx
 1533 09c9 48C1EA03 		shrq	$3, %rdx
 1534 09cd 4881C200 		addq	$2147450880, %rdx
 1534      80FF7F
 1535 09d4 0FB612   		movzbl	(%rdx), %edx
 1536 09d7 84D2     		testb	%dl, %dl
 1537 09d9 7408     		je	.L73
 1538 09db 4889C7   		movq	%rax, %rdi
 1539 09de E8000000 		call	__asan_report_load8@PLT
 1539      00
 1540              	.L73:
 1541 09e3 488B8350 		movq	-688(%rbx), %rax
 1541      FDFFFF
 1542 09ea 4889C2   		movq	%rax, %rdx
 1543 09ed 48B89127 		movabsq	$1323554330416523153, %rax
 1543      68A9A635 
 1543      5E12
 1544 09f7 4831D0   		xorq	%rdx, %rax
 1545 09fa 4889C1   		movq	%rax, %rcx
 1546 09fd 48B8692D 		movabsq	$-7070675565921424023, %rax
 1546      38EB08EA 
 1546      DF9D
 1547 0a07 480FAFC1 		imulq	%rcx, %rax
 1548 0a0b 4889C1   		movq	%rax, %rcx
 1549 0a0e 48C1E12F 		salq	$47, %rcx
 1550 0a12 4831D0   		xorq	%rdx, %rax
 1551 0a15 4831C1   		xorq	%rax, %rcx
 1552 0a18 4889CA   		movq	%rcx, %rdx
 1553 0a1b 48B8692D 		movabsq	$-7070675565921424023, %rax
 1553      38EB08EA 
 1553      DF9D
 1554 0a25 480FAFC2 		imulq	%rdx, %rax
 1555 0a29 4889C2   		movq	%rax, %rdx
 1556 0a2c 48C1E22F 		salq	$47, %rdx
 1557 0a30 4831C2   		xorq	%rax, %rdx
 1558 0a33 48B8692D 		movabsq	$-7070675565921424023, %rax
 1558      38EB08EA 
 1558      DF9D
 1559 0a3d 480FAFC2 		imulq	%rdx, %rax
 1560 0a41 4889C2   		movq	%rax, %rdx
 1561 0a44 83E27F   		andl	$127, %edx
 1562 0a47 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1562      00000000 
 1563 0a4f 488D1500 		leaq	__ubsan_vptr_type_cache(%rip), %rdx
 1563      000000
 1564 0a56 488B1411 		movq	(%rcx,%rdx), %rdx
 1565 0a5a 4839C2   		cmpq	%rax, %rdx
 1566 0a5d 7419     		je	.L74
 1567 0a5f 488D8B50 		leaq	-688(%rbx), %rcx
 1567      FDFFFF
 1568 0a66 4889C2   		movq	%rax, %rdx
 1569 0a69 4889CE   		movq	%rcx, %rsi
 1570 0a6c 488D3D00 		leaq	.Lubsan_data393(%rip), %rdi
 1570      000000
 1571 0a73 E8000000 		call	__ubsan_handle_dynamic_type_cache_miss@PLT
 1571      00
 1572              	.L74:
 1573 0a78 488D8350 		leaq	-688(%rbx), %rax
 1573      FDFFFF
 1574 0a7f 4889C7   		movq	%rax, %rdi
 1575              	.LEHB8:
 1576 0a82 E8000000 		call	_ZNSt14basic_ifstreamIcSt11char_traitsIcEE7is_openEv@PLT
 1576      00
 1577              		.loc 3 19 7
 1578 0a87 83F001   		xorl	$1, %eax
 1579              		.loc 3 19 22
 1580 0a8a 84C0     		testb	%al, %al
 1581 0a8c 0F85CF00 		jne	.L75
 1581      0000
 1582              		.loc 3 19 37 discriminator 3
 1583 0a92 488D8310 		leaq	-1264(%rbx), %rax
 1583      FBFFFF
 1584 0a99 4889C2   		movq	%rax, %rdx
 1585 0a9c 48C1EA03 		shrq	$3, %rdx
 1586 0aa0 4881C200 		addq	$2147450880, %rdx
 1586      80FF7F
 1587 0aa7 0FB612   		movzbl	(%rdx), %edx
 1588 0aaa 84D2     		testb	%dl, %dl
 1589 0aac 7408     		je	.L76
 1590              		.loc 3 19 37 is_stmt 0
 1591 0aae 4889C7   		movq	%rax, %rdi
 1592 0ab1 E8000000 		call	__asan_report_load8@PLT
 1592      00
 1593              	.L76:
 1594              		.loc 3 19 37 discriminator 3
 1595 0ab6 488B8310 		movq	-1264(%rbx), %rax
 1595      FBFFFF
 1596 0abd 4889C2   		movq	%rax, %rdx
 1597 0ac0 48B8F313 		movabsq	$-7890976370364771341, %rax
 1597      68A1CC9E 
 1597      7D92
 1598 0aca 4831D0   		xorq	%rdx, %rax
 1599 0acd 4889C1   		movq	%rax, %rcx
 1600 0ad0 48B8692D 		movabsq	$-7070675565921424023, %rax
 1600      38EB08EA 
 1600      DF9D
 1601 0ada 480FAFC1 		imulq	%rcx, %rax
 1602 0ade 4889C1   		movq	%rax, %rcx
 1603 0ae1 48C1E12F 		salq	$47, %rcx
 1604 0ae5 4831D0   		xorq	%rdx, %rax
 1605 0ae8 4831C1   		xorq	%rax, %rcx
 1606 0aeb 4889CA   		movq	%rcx, %rdx
 1607 0aee 48B8692D 		movabsq	$-7070675565921424023, %rax
 1607      38EB08EA 
 1607      DF9D
 1608 0af8 480FAFC2 		imulq	%rdx, %rax
 1609 0afc 4889C2   		movq	%rax, %rdx
 1610 0aff 48C1E22F 		salq	$47, %rdx
 1611 0b03 4831C2   		xorq	%rax, %rdx
 1612 0b06 48B8692D 		movabsq	$-7070675565921424023, %rax
 1612      38EB08EA 
 1612      DF9D
 1613 0b10 480FAFC2 		imulq	%rdx, %rax
 1614 0b14 4889C2   		movq	%rax, %rdx
 1615 0b17 83E27F   		andl	$127, %edx
 1616 0b1a 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1616      00000000 
 1617 0b22 488D1500 		leaq	__ubsan_vptr_type_cache(%rip), %rdx
 1617      000000
 1618 0b29 488B1411 		movq	(%rcx,%rdx), %rdx
 1619 0b2d 4839C2   		cmpq	%rax, %rdx
 1620 0b30 7419     		je	.L77
 1621              		.loc 3 19 37
 1622 0b32 488D8B10 		leaq	-1264(%rbx), %rcx
 1622      FBFFFF
 1623 0b39 4889C2   		movq	%rax, %rdx
 1624 0b3c 4889CE   		movq	%rcx, %rsi
 1625 0b3f 488D3D00 		leaq	.Lubsan_data394(%rip), %rdi
 1625      000000
 1626 0b46 E8000000 		call	__ubsan_handle_dynamic_type_cache_miss@PLT
 1626      00
 1627              	.L77:
 1628              		.loc 3 19 37 discriminator 3
 1629 0b4b 488D8310 		leaq	-1264(%rbx), %rax
 1629      FBFFFF
 1630 0b52 4889C7   		movq	%rax, %rdi
 1631 0b55 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE7is_openEv@PLT
 1631      00
 1632              	.LEHE8:
 1633              		.loc 3 19 25 is_stmt 1 discriminator 3
 1634 0b5a 83F001   		xorl	$1, %eax
 1635              		.loc 3 19 22 discriminator 3
 1636 0b5d 84C0     		testb	%al, %al
 1637 0b5f 7407     		je	.L78
 1638              	.L75:
 1639              		.loc 3 19 22 is_stmt 0 discriminator 5
 1640 0b61 B8010000 		movl	$1, %eax
 1640      00
 1641 0b66 EB05     		jmp	.L79
 1642              	.L78:
 1643              		.loc 3 19 22 discriminator 6
 1644 0b68 B8000000 		movl	$0, %eax
 1644      00
 1645              	.L79:
 1646              		.loc 3 19 3 is_stmt 1 discriminator 8
 1647 0b6d 84C0     		testb	%al, %al
 1648 0b6f 7415     		je	.L80
 1649              		.loc 3 19 48 discriminator 9
 1650 0b71 C7856CF8 		movl	$1, -1940(%rbp)
 1650      FFFF0100 
 1650      0000
 1651 0b7b 41BE0000 		movl	$0, %r14d
 1651      0000
 1652 0b81 E98B0800 		jmp	.L81
 1652      00
 1653              	.L80:
  20:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::vector<std::string> removed_dates;
 1654              		.loc 3 20 28
 1655 0b86 488D8310 		leaq	-1776(%rbx), %rax
 1655      F9FFFF
 1656 0b8d 4889C7   		movq	%rax, %rdi
 1657 0b90 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev
 1657      00
  21:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::string line;
 1658              		.loc 3 21 15
 1659 0b95 488D8310 		leaq	-1520(%rbx), %rax
 1659      FAFFFF
 1660 0b9c 4889C7   		movq	%rax, %rdi
 1661 0b9f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT
 1661      00
  22:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::getline(ifs, line);
 1662              		.loc 3 22 25
 1663 0ba4 488D9310 		leaq	-1520(%rbx), %rdx
 1663      FAFFFF
 1664 0bab 488D8350 		leaq	-688(%rbx), %rax
 1664      FDFFFF
 1665 0bb2 4889D6   		movq	%rdx, %rsi
 1666 0bb5 4889C7   		movq	%rax, %rdi
 1667              	.LEHB9:
 1668 0bb8 E8000000 		call	_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringI
 1668      00
 1669              	.L110:
  23:/home/arkel/c++/wordle/files/update_word_list.cpp ****   while (!ifs.eof() && !line.empty()) {
 1670              		.loc 3 23 18
 1671 0bbd 488D8350 		leaq	-688(%rbx), %rax
 1671      FDFFFF
 1672 0bc4 48050001 		addq	$256, %rax
 1672      0000
 1673 0bca 4889C2   		movq	%rax, %rdx
 1674 0bcd 48C1EA03 		shrq	$3, %rdx
 1675 0bd1 4881C200 		addq	$2147450880, %rdx
 1675      80FF7F
 1676 0bd8 0FB612   		movzbl	(%rdx), %edx
 1677 0bdb 84D2     		testb	%dl, %dl
 1678 0bdd 7408     		je	.L82
 1679 0bdf 4889C7   		movq	%rax, %rdi
 1680 0be2 E8000000 		call	__asan_report_load8@PLT
 1680      00
 1681              	.L82:
 1682 0be7 488B8350 		movq	-432(%rbx), %rax
 1682      FEFFFF
 1683 0bee 4889C2   		movq	%rax, %rdx
 1684 0bf1 48B8A56E 		movabsq	$8135312701535973029, %rax
 1684      C69FCC6F 
 1684      E670
 1685 0bfb 4831D0   		xorq	%rdx, %rax
 1686 0bfe 4889C1   		movq	%rax, %rcx
 1687 0c01 48B8692D 		movabsq	$-7070675565921424023, %rax
 1687      38EB08EA 
 1687      DF9D
 1688 0c0b 480FAFC1 		imulq	%rcx, %rax
 1689 0c0f 4889C1   		movq	%rax, %rcx
 1690 0c12 48C1E12F 		salq	$47, %rcx
 1691 0c16 4831D0   		xorq	%rdx, %rax
 1692 0c19 4831C1   		xorq	%rax, %rcx
 1693 0c1c 4889CA   		movq	%rcx, %rdx
 1694 0c1f 48B8692D 		movabsq	$-7070675565921424023, %rax
 1694      38EB08EA 
 1694      DF9D
 1695 0c29 480FAFC2 		imulq	%rdx, %rax
 1696 0c2d 4889C2   		movq	%rax, %rdx
 1697 0c30 48C1E22F 		salq	$47, %rdx
 1698 0c34 4831C2   		xorq	%rax, %rdx
 1699 0c37 48B8692D 		movabsq	$-7070675565921424023, %rax
 1699      38EB08EA 
 1699      DF9D
 1700 0c41 480FAFC2 		imulq	%rdx, %rax
 1701 0c45 4889C2   		movq	%rax, %rdx
 1702 0c48 83E27F   		andl	$127, %edx
 1703 0c4b 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1703      00000000 
 1704 0c53 488D1500 		leaq	__ubsan_vptr_type_cache(%rip), %rdx
 1704      000000
 1705 0c5a 488B1411 		movq	(%rcx,%rdx), %rdx
 1706 0c5e 4839C2   		cmpq	%rax, %rdx
 1707 0c61 7420     		je	.L83
 1708 0c63 488D9350 		leaq	-688(%rbx), %rdx
 1708      FDFFFF
 1709 0c6a 488D8A00 		leaq	256(%rdx), %rcx
 1709      010000
 1710 0c71 4889C2   		movq	%rax, %rdx
 1711 0c74 4889CE   		movq	%rcx, %rsi
 1712 0c77 488D3D00 		leaq	.Lubsan_data395(%rip), %rdi
 1712      000000
 1713 0c7e E8000000 		call	__ubsan_handle_dynamic_type_cache_miss@PLT
 1713      00
 1714              	.L83:
 1715 0c83 488D8350 		leaq	-688(%rbx), %rax
 1715      FDFFFF
 1716 0c8a 48050001 		addq	$256, %rax
 1716      0000
 1717 0c90 4889C7   		movq	%rax, %rdi
 1718 0c93 E8000000 		call	_ZNKSt9basic_iosIcSt11char_traitsIcEE3eofEv@PLT
 1718      00
 1719              		.loc 3 23 10
 1720 0c98 83F001   		xorl	$1, %eax
 1721              		.loc 3 23 21
 1722 0c9b 84C0     		testb	%al, %al
 1723 0c9d 741D     		je	.L84
 1724              		.loc 3 23 35 discriminator 2
 1725 0c9f 488D8310 		leaq	-1520(%rbx), %rax
 1725      FAFFFF
 1726 0ca6 4889C7   		movq	%rax, %rdi
 1727 0ca9 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv@PLT
 1727      00
 1728              		.loc 3 23 24 discriminator 2
 1729 0cae 83F001   		xorl	$1, %eax
 1730              		.loc 3 23 21 discriminator 2
 1731 0cb1 84C0     		testb	%al, %al
 1732 0cb3 7407     		je	.L84
 1733              		.loc 3 23 21 is_stmt 0 discriminator 4
 1734 0cb5 B8010000 		movl	$1, %eax
 1734      00
 1735 0cba EB05     		jmp	.L85
 1736              	.L84:
 1737              		.loc 3 23 21 discriminator 5
 1738 0cbc B8000000 		movl	$0, %eax
 1738      00
 1739              	.L85:
 1740              		.loc 3 23 21 discriminator 7
 1741 0cc1 84C0     		testb	%al, %al
 1742 0cc3 0F844806 		je	.L86
 1742      0000
  24:/home/arkel/c++/wordle/files/update_word_list.cpp ****     if (line.find('*') != std::string::npos) {
 1743              		.loc 3 24 18 is_stmt 1
 1744 0cc9 488D8310 		leaq	-1520(%rbx), %rax
 1744      FAFFFF
 1745 0cd0 BA000000 		movl	$0, %edx
 1745      00
 1746 0cd5 BE2A0000 		movl	$42, %esi
 1746      00
 1747 0cda 4889C7   		movq	%rax, %rdi
 1748 0cdd E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT
 1748      00
 1749              		.loc 3 24 24
 1750 0ce2 4883F8FF 		cmpq	$-1, %rax
 1751 0ce6 0F95C0   		setne	%al
 1752              		.loc 3 24 5
 1753 0ce9 84C0     		testb	%al, %al
 1754 0ceb 0F848B01 		je	.L87
 1754      0000
  25:/home/arkel/c++/wordle/files/update_word_list.cpp ****       // remove this word
  26:/home/arkel/c++/wordle/files/update_word_list.cpp ****       removed_dates.push_back(date_thing(line)[0]);
 1755              		.loc 3 26 49
 1756 0cf1 488D8350 		leaq	-1712(%rbx), %rax
 1756      F9FFFF
 1757 0cf8 48C1E803 		shrq	$3, %rax
 1758 0cfc 48050080 		addq	$2147450880, %rax
 1758      FF7F
 1759 0d02 66C70000 		movw	$0, (%rax)
 1759      00
 1760 0d07 C6400200 		movb	$0, 2(%rax)
 1761              		.loc 3 26 41
 1762 0d0b 488D8350 		leaq	-1456(%rbx), %rax
 1762      FAFFFF
 1763 0d12 48C1E803 		shrq	$3, %rax
 1764 0d16 48050080 		addq	$2147450880, %rax
 1764      FF7F
 1765 0d1c C7000000 		movl	$0, (%rax)
 1765      0000
 1766 0d22 488D9310 		leaq	-1520(%rbx), %rdx
 1766      FAFFFF
 1767 0d29 488D8350 		leaq	-1456(%rbx), %rax
 1767      FAFFFF
 1768 0d30 4889D6   		movq	%rdx, %rsi
 1769 0d33 4889C7   		movq	%rax, %rdi
 1770 0d36 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1770      00
 1771              	.LEHE9:
 1772              		.loc 3 26 41 is_stmt 0 discriminator 1
 1773 0d3b 488D8350 		leaq	-1712(%rbx), %rax
 1773      F9FFFF
 1774 0d42 4889C2   		movq	%rax, %rdx
 1775 0d45 48C1EA03 		shrq	$3, %rdx
 1776 0d49 4881C200 		addq	$2147450880, %rdx
 1776      80FF7F
 1777 0d50 0FB612   		movzbl	(%rdx), %edx
 1778 0d53 84D2     		testb	%dl, %dl
 1779 0d55 0F95C1   		setne	%cl
 1780 0d58 84D2     		testb	%dl, %dl
 1781 0d5a 0F9EC2   		setle	%dl
 1782 0d5d 89CF     		movl	%ecx, %edi
 1783 0d5f 21D7     		andl	%edx, %edi
 1784 0d61 BA180000 		movl	$24, %edx
 1784      00
 1785 0d66 4883EA01 		subq	$1, %rdx
 1786 0d6a 488D0C10 		leaq	(%rax,%rdx), %rcx
 1787 0d6e 4889CA   		movq	%rcx, %rdx
 1788 0d71 48C1EA03 		shrq	$3, %rdx
 1789 0d75 4881C200 		addq	$2147450880, %rdx
 1789      80FF7F
 1790 0d7c 0FB612   		movzbl	(%rdx), %edx
 1791 0d7f 84D2     		testb	%dl, %dl
 1792 0d81 400F95C6 		setne	%sil
 1793 0d85 83E107   		andl	$7, %ecx
 1794 0d88 38D1     		cmpb	%dl, %cl
 1795 0d8a 0F9DC2   		setge	%dl
 1796 0d8d 21F2     		andl	%esi, %edx
 1797 0d8f 09FA     		orl	%edi, %edx
 1798 0d91 84D2     		testb	%dl, %dl
 1799 0d93 740D     		je	.L88
 1800              		.loc 3 26 41
 1801 0d95 BE180000 		movl	$24, %esi
 1801      00
 1802 0d9a 4889C7   		movq	%rax, %rdi
 1803 0d9d E8000000 		call	__asan_report_store_n@PLT
 1803      00
 1804              	.L88:
 1805              		.loc 3 26 41 discriminator 1
 1806 0da2 488D8350 		leaq	-1712(%rbx), %rax
 1806      F9FFFF
 1807 0da9 488D9350 		leaq	-1456(%rbx), %rdx
 1807      FAFFFF
 1808 0db0 4889D6   		movq	%rdx, %rsi
 1809 0db3 4889C7   		movq	%rax, %rdi
 1810              	.LEHB10:
 1811 0db6 E8000000 		call	_Z10date_thingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 1811      00
 1812              	.LEHE10:
 1813              		.loc 3 26 41 discriminator 3
 1814 0dbb 4C8DB350 		leaq	-1712(%rbx), %r14
 1814      F9FFFF
 1815              		.loc 3 26 49 is_stmt 1 discriminator 3
 1816 0dc2 4C89F0   		movq	%r14, %rax
 1817 0dc5 4D85F6   		testq	%r14, %r14
 1818 0dc8 740B     		je	.L89
 1819 0dca 4889C2   		movq	%rax, %rdx
 1820 0dcd 83E207   		andl	$7, %edx
 1821 0dd0 4885D2   		testq	%rdx, %rdx
 1822 0dd3 740F     		je	.L90
 1823              	.L89:
 1824              		.loc 3 26 49 is_stmt 0
 1825 0dd5 4889C6   		movq	%rax, %rsi
 1826 0dd8 488D3D00 		leaq	.Lubsan_data396(%rip), %rdi
 1826      000000
 1827 0ddf E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 1827      00
 1828              	.L90:
 1829              		.loc 3 26 49 discriminator 3
 1830 0de4 BE000000 		movl	$0, %esi
 1830      00
 1831 0de9 4C89F7   		movq	%r14, %rdi
 1832 0dec E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEm
 1832      00
 1833 0df1 4989C6   		movq	%rax, %r14
 1834              		.loc 3 26 30 is_stmt 1 discriminator 3
 1835 0df4 4C89F0   		movq	%r14, %rax
 1836 0df7 4D85F6   		testq	%r14, %r14
 1837 0dfa 740B     		je	.L91
 1838 0dfc 4889C2   		movq	%rax, %rdx
 1839 0dff 83E207   		andl	$7, %edx
 1840 0e02 4885D2   		testq	%rdx, %rdx
 1841 0e05 740F     		je	.L92
 1842              	.L91:
 1843              		.loc 3 26 30 is_stmt 0
 1844 0e07 4889C6   		movq	%rax, %rsi
 1845 0e0a 488D3D00 		leaq	.Lubsan_data397(%rip), %rdi
 1845      000000
 1846 0e11 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 1846      00
 1847              	.L92:
 1848              		.loc 3 26 30 discriminator 3
 1849 0e16 488D8310 		leaq	-1776(%rbx), %rax
 1849      F9FFFF
 1850 0e1d 4C89F6   		movq	%r14, %rsi
 1851 0e20 4889C7   		movq	%rax, %rdi
 1852              	.LEHB11:
 1853 0e23 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_
 1853      00
 1854              	.LEHE11:
 1855              		.loc 3 26 41 is_stmt 1 discriminator 5
 1856 0e28 488D8350 		leaq	-1712(%rbx), %rax
 1856      F9FFFF
 1857 0e2f 4889C7   		movq	%rax, %rdi
 1858 0e32 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 1858      00
 1859 0e37 488D8350 		leaq	-1712(%rbx), %rax
 1859      F9FFFF
 1860 0e3e 48C1E803 		shrq	$3, %rax
 1861 0e42 48050080 		addq	$2147450880, %rax
 1861      FF7F
 1862 0e48 66C700F8 		movw	$-1800, (%rax)
 1862      F8
 1863 0e4d C64002F8 		movb	$-8, 2(%rax)
 1864 0e51 488D8350 		leaq	-1456(%rbx), %rax
 1864      FAFFFF
 1865 0e58 4889C7   		movq	%rax, %rdi
 1866 0e5b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1866      00
 1867 0e60 488D8350 		leaq	-1456(%rbx), %rax
 1867      FAFFFF
 1868 0e67 48C1E803 		shrq	$3, %rax
 1869 0e6b 48050080 		addq	$2147450880, %rax
 1869      FF7F
 1870 0e71 C700F8F8 		movl	$-117901064, (%rax)
 1870      F8F8
 1871 0e77 E9770400 		jmp	.L93
 1871      00
 1872              	.L87:
  27:/home/arkel/c++/wordle/files/update_word_list.cpp ****     } else {
  28:/home/arkel/c++/wordle/files/update_word_list.cpp ****       removed_dates.push_back(date_thing(line)[0]);
 1873              		.loc 3 28 49
 1874 0e7c 488D8390 		leaq	-1648(%rbx), %rax
 1874      F9FFFF
 1875 0e83 48C1E803 		shrq	$3, %rax
 1876 0e87 48050080 		addq	$2147450880, %rax
 1876      FF7F
 1877 0e8d 66C70000 		movw	$0, (%rax)
 1877      00
 1878 0e92 C6400200 		movb	$0, 2(%rax)
 1879              		.loc 3 28 41
 1880 0e96 488D8390 		leaq	-1392(%rbx), %rax
 1880      FAFFFF
 1881 0e9d 48C1E803 		shrq	$3, %rax
 1882 0ea1 48050080 		addq	$2147450880, %rax
 1882      FF7F
 1883 0ea7 C7000000 		movl	$0, (%rax)
 1883      0000
 1884 0ead 488D9310 		leaq	-1520(%rbx), %rdx
 1884      FAFFFF
 1885 0eb4 488D8390 		leaq	-1392(%rbx), %rax
 1885      FAFFFF
 1886 0ebb 4889D6   		movq	%rdx, %rsi
 1887 0ebe 4889C7   		movq	%rax, %rdi
 1888              	.LEHB12:
 1889 0ec1 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1889      00
 1890              	.LEHE12:
 1891              		.loc 3 28 41 is_stmt 0 discriminator 1
 1892 0ec6 488D8390 		leaq	-1648(%rbx), %rax
 1892      F9FFFF
 1893 0ecd 4889C2   		movq	%rax, %rdx
 1894 0ed0 48C1EA03 		shrq	$3, %rdx
 1895 0ed4 4881C200 		addq	$2147450880, %rdx
 1895      80FF7F
 1896 0edb 0FB612   		movzbl	(%rdx), %edx
 1897 0ede 84D2     		testb	%dl, %dl
 1898 0ee0 0F95C1   		setne	%cl
 1899 0ee3 84D2     		testb	%dl, %dl
 1900 0ee5 0F9EC2   		setle	%dl
 1901 0ee8 89CF     		movl	%ecx, %edi
 1902 0eea 21D7     		andl	%edx, %edi
 1903 0eec BA180000 		movl	$24, %edx
 1903      00
 1904 0ef1 4883EA01 		subq	$1, %rdx
 1905 0ef5 488D0C10 		leaq	(%rax,%rdx), %rcx
 1906 0ef9 4889CA   		movq	%rcx, %rdx
 1907 0efc 48C1EA03 		shrq	$3, %rdx
 1908 0f00 4881C200 		addq	$2147450880, %rdx
 1908      80FF7F
 1909 0f07 0FB612   		movzbl	(%rdx), %edx
 1910 0f0a 84D2     		testb	%dl, %dl
 1911 0f0c 400F95C6 		setne	%sil
 1912 0f10 83E107   		andl	$7, %ecx
 1913 0f13 38D1     		cmpb	%dl, %cl
 1914 0f15 0F9DC2   		setge	%dl
 1915 0f18 21F2     		andl	%esi, %edx
 1916 0f1a 09FA     		orl	%edi, %edx
 1917 0f1c 84D2     		testb	%dl, %dl
 1918 0f1e 740D     		je	.L94
 1919              		.loc 3 28 41
 1920 0f20 BE180000 		movl	$24, %esi
 1920      00
 1921 0f25 4889C7   		movq	%rax, %rdi
 1922 0f28 E8000000 		call	__asan_report_store_n@PLT
 1922      00
 1923              	.L94:
 1924              		.loc 3 28 41 discriminator 1
 1925 0f2d 488D8390 		leaq	-1648(%rbx), %rax
 1925      F9FFFF
 1926 0f34 488D9390 		leaq	-1392(%rbx), %rdx
 1926      FAFFFF
 1927 0f3b 4889D6   		movq	%rdx, %rsi
 1928 0f3e 4889C7   		movq	%rax, %rdi
 1929              	.LEHB13:
 1930 0f41 E8000000 		call	_Z10date_thingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 1930      00
 1931              	.LEHE13:
 1932              		.loc 3 28 41 discriminator 3
 1933 0f46 4C8DB390 		leaq	-1648(%rbx), %r14
 1933      F9FFFF
 1934              		.loc 3 28 49 is_stmt 1 discriminator 3
 1935 0f4d 4C89F0   		movq	%r14, %rax
 1936 0f50 4D85F6   		testq	%r14, %r14
 1937 0f53 740B     		je	.L95
 1938 0f55 4889C2   		movq	%rax, %rdx
 1939 0f58 83E207   		andl	$7, %edx
 1940 0f5b 4885D2   		testq	%rdx, %rdx
 1941 0f5e 740F     		je	.L96
 1942              	.L95:
 1943              		.loc 3 28 49 is_stmt 0
 1944 0f60 4889C6   		movq	%rax, %rsi
 1945 0f63 488D3D00 		leaq	.Lubsan_data398(%rip), %rdi
 1945      000000
 1946 0f6a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 1946      00
 1947              	.L96:
 1948              		.loc 3 28 49 discriminator 3
 1949 0f6f BE000000 		movl	$0, %esi
 1949      00
 1950 0f74 4C89F7   		movq	%r14, %rdi
 1951 0f77 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEm
 1951      00
 1952 0f7c 4989C6   		movq	%rax, %r14
 1953              		.loc 3 28 30 is_stmt 1 discriminator 3
 1954 0f7f 4C89F0   		movq	%r14, %rax
 1955 0f82 4D85F6   		testq	%r14, %r14
 1956 0f85 740B     		je	.L97
 1957 0f87 4889C2   		movq	%rax, %rdx
 1958 0f8a 83E207   		andl	$7, %edx
 1959 0f8d 4885D2   		testq	%rdx, %rdx
 1960 0f90 740F     		je	.L98
 1961              	.L97:
 1962              		.loc 3 28 30 is_stmt 0
 1963 0f92 4889C6   		movq	%rax, %rsi
 1964 0f95 488D3D00 		leaq	.Lubsan_data399(%rip), %rdi
 1964      000000
 1965 0f9c E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 1965      00
 1966              	.L98:
 1967              		.loc 3 28 30 discriminator 3
 1968 0fa1 488D8310 		leaq	-1776(%rbx), %rax
 1968      F9FFFF
 1969 0fa8 4C89F6   		movq	%r14, %rsi
 1970 0fab 4889C7   		movq	%rax, %rdi
 1971              	.LEHB14:
 1972 0fae E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_
 1972      00
 1973              	.LEHE14:
 1974              		.loc 3 28 41 is_stmt 1 discriminator 5
 1975 0fb3 488D8390 		leaq	-1648(%rbx), %rax
 1975      F9FFFF
 1976 0fba 4889C7   		movq	%rax, %rdi
 1977 0fbd E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 1977      00
 1978 0fc2 488D8390 		leaq	-1648(%rbx), %rax
 1978      F9FFFF
 1979 0fc9 48C1E803 		shrq	$3, %rax
 1980 0fcd 48050080 		addq	$2147450880, %rax
 1980      FF7F
 1981 0fd3 66C700F8 		movw	$-1800, (%rax)
 1981      F8
 1982 0fd8 C64002F8 		movb	$-8, 2(%rax)
 1983 0fdc 488D8390 		leaq	-1392(%rbx), %rax
 1983      FAFFFF
 1984 0fe3 4889C7   		movq	%rax, %rdi
 1985 0fe6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1985      00
 1986 0feb 488D8390 		leaq	-1392(%rbx), %rax
 1986      FAFFFF
 1987 0ff2 48C1E803 		shrq	$3, %rax
 1988 0ff6 48050080 		addq	$2147450880, %rax
 1988      FF7F
 1989 0ffc C700F8F8 		movl	$-117901064, (%rax)
 1989      F8F8
  29:/home/arkel/c++/wordle/files/update_word_list.cpp ****       ofs << removed_dates[0] << ' ' << date_thing(line)[1] << '\n';
 1990              		.loc 3 29 29 discriminator 5
 1991 1002 488D8310 		leaq	-1776(%rbx), %rax
 1991      F9FFFF
 1992 1009 BE000000 		movl	$0, %esi
 1992      00
 1993 100e 4889C7   		movq	%rax, %rdi
 1994 1011 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEm
 1994      00
 1995 1016 4989C6   		movq	%rax, %r14
 1996              		.loc 3 29 64 discriminator 5
 1997 1019 4C89F0   		movq	%r14, %rax
 1998 101c 4D85F6   		testq	%r14, %r14
 1999 101f 740B     		je	.L99
 2000 1021 4889C2   		movq	%rax, %rdx
 2001 1024 83E207   		andl	$7, %edx
 2002 1027 4885D2   		testq	%rdx, %rdx
 2003 102a 740F     		je	.L100
 2004              	.L99:
 2005              		.loc 3 29 64 is_stmt 0
 2006 102c 4889C6   		movq	%rax, %rsi
 2007 102f 488D3D00 		leaq	.Lubsan_data400(%rip), %rdi
 2007      000000
 2008 1036 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 2008      00
 2009              	.L100:
 2010              		.loc 3 29 64 discriminator 5
 2011 103b 488D8310 		leaq	-1264(%rbx), %rax
 2011      FBFFFF
 2012 1042 4C89F6   		movq	%r14, %rsi
 2013 1045 4889C7   		movq	%rax, %rdi
 2014              	.LEHB15:
 2015 1048 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 2015      00
 2016 104d BE200000 		movl	$32, %esi
 2016      00
 2017 1052 4889C7   		movq	%rax, %rdi
 2018 1055 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
 2018      00
 2019              		.loc 3 29 64 discriminator 1
 2020 105a 48898560 		movq	%rax, -1952(%rbp)
 2020      F8FFFF
 2021              		.loc 3 29 59 is_stmt 1 discriminator 1
 2022 1061 488D83D0 		leaq	-1584(%rbx), %rax
 2022      F9FFFF
 2023 1068 48C1E803 		shrq	$3, %rax
 2024 106c 48050080 		addq	$2147450880, %rax
 2024      FF7F
 2025 1072 66C70000 		movw	$0, (%rax)
 2025      00
 2026 1077 C6400200 		movb	$0, 2(%rax)
 2027              		.loc 3 29 51 discriminator 1
 2028 107b 488D83D0 		leaq	-1328(%rbx), %rax
 2028      FAFFFF
 2029 1082 48C1E803 		shrq	$3, %rax
 2030 1086 48050080 		addq	$2147450880, %rax
 2030      FF7F
 2031 108c C7000000 		movl	$0, (%rax)
 2031      0000
 2032 1092 488D9310 		leaq	-1520(%rbx), %rdx
 2032      FAFFFF
 2033 1099 488D83D0 		leaq	-1328(%rbx), %rax
 2033      FAFFFF
 2034 10a0 4889D6   		movq	%rdx, %rsi
 2035 10a3 4889C7   		movq	%rax, %rdi
 2036 10a6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 2036      00
 2037              	.LEHE15:
 2038              		.loc 3 29 51 is_stmt 0 discriminator 3
 2039 10ab 488D83D0 		leaq	-1584(%rbx), %rax
 2039      F9FFFF
 2040 10b2 4889C2   		movq	%rax, %rdx
 2041 10b5 48C1EA03 		shrq	$3, %rdx
 2042 10b9 4881C200 		addq	$2147450880, %rdx
 2042      80FF7F
 2043 10c0 0FB612   		movzbl	(%rdx), %edx
 2044 10c3 84D2     		testb	%dl, %dl
 2045 10c5 0F95C1   		setne	%cl
 2046 10c8 84D2     		testb	%dl, %dl
 2047 10ca 0F9EC2   		setle	%dl
 2048 10cd 89CF     		movl	%ecx, %edi
 2049 10cf 21D7     		andl	%edx, %edi
 2050 10d1 BA180000 		movl	$24, %edx
 2050      00
 2051 10d6 4883EA01 		subq	$1, %rdx
 2052 10da 488D0C10 		leaq	(%rax,%rdx), %rcx
 2053 10de 4889CA   		movq	%rcx, %rdx
 2054 10e1 48C1EA03 		shrq	$3, %rdx
 2055 10e5 4881C200 		addq	$2147450880, %rdx
 2055      80FF7F
 2056 10ec 0FB612   		movzbl	(%rdx), %edx
 2057 10ef 84D2     		testb	%dl, %dl
 2058 10f1 400F95C6 		setne	%sil
 2059 10f5 83E107   		andl	$7, %ecx
 2060 10f8 38D1     		cmpb	%dl, %cl
 2061 10fa 0F9DC2   		setge	%dl
 2062 10fd 21F2     		andl	%esi, %edx
 2063 10ff 09FA     		orl	%edi, %edx
 2064 1101 84D2     		testb	%dl, %dl
 2065 1103 740D     		je	.L101
 2066              		.loc 3 29 51
 2067 1105 BE180000 		movl	$24, %esi
 2067      00
 2068 110a 4889C7   		movq	%rax, %rdi
 2069 110d E8000000 		call	__asan_report_store_n@PLT
 2069      00
 2070              	.L101:
 2071              		.loc 3 29 51 discriminator 3
 2072 1112 488D83D0 		leaq	-1584(%rbx), %rax
 2072      F9FFFF
 2073 1119 488D93D0 		leaq	-1328(%rbx), %rdx
 2073      FAFFFF
 2074 1120 4889D6   		movq	%rdx, %rsi
 2075 1123 4889C7   		movq	%rax, %rdi
 2076              	.LEHB16:
 2077 1126 E8000000 		call	_Z10date_thingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 2077      00
 2078              	.LEHE16:
 2079              		.loc 3 29 51 discriminator 5
 2080 112b 4C8DB3D0 		leaq	-1584(%rbx), %r14
 2080      F9FFFF
 2081              		.loc 3 29 59 is_stmt 1 discriminator 5
 2082 1132 4C89F0   		movq	%r14, %rax
 2083 1135 4D85F6   		testq	%r14, %r14
 2084 1138 740B     		je	.L102
 2085 113a 4889C2   		movq	%rax, %rdx
 2086 113d 83E207   		andl	$7, %edx
 2087 1140 4885D2   		testq	%rdx, %rdx
 2088 1143 740F     		je	.L103
 2089              	.L102:
 2090              		.loc 3 29 59 is_stmt 0
 2091 1145 4889C6   		movq	%rax, %rsi
 2092 1148 488D3D00 		leaq	.Lubsan_data401(%rip), %rdi
 2092      000000
 2093 114f E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 2093      00
 2094              	.L103:
 2095              		.loc 3 29 59 discriminator 5
 2096 1154 BE010000 		movl	$1, %esi
 2096      00
 2097 1159 4C89F7   		movq	%r14, %rdi
 2098 115c E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEm
 2098      00
 2099 1161 4989C6   		movq	%rax, %r14
 2100              		.loc 3 29 64 is_stmt 1 discriminator 5
 2101 1164 4C89F0   		movq	%r14, %rax
 2102 1167 4D85F6   		testq	%r14, %r14
 2103 116a 740B     		je	.L104
 2104 116c 4889C2   		movq	%rax, %rdx
 2105 116f 83E207   		andl	$7, %edx
 2106 1172 4885D2   		testq	%rdx, %rdx
 2107 1175 740F     		je	.L105
 2108              	.L104:
 2109              		.loc 3 29 64 is_stmt 0
 2110 1177 4889C6   		movq	%rax, %rsi
 2111 117a 488D3D00 		leaq	.Lubsan_data402(%rip), %rdi
 2111      000000
 2112 1181 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 2112      00
 2113              	.L105:
 2114              		.loc 3 29 64 discriminator 5
 2115 1186 4C89F6   		movq	%r14, %rsi
 2116 1189 488BBD60 		movq	-1952(%rbp), %rdi
 2116      F8FFFF
 2117              	.LEHB17:
 2118 1190 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 2118      00
 2119 1195 BE0A0000 		movl	$10, %esi
 2119      00
 2120 119a 4889C7   		movq	%rax, %rdi
 2121 119d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
 2121      00
 2122              	.LEHE17:
 2123              		.loc 3 29 51 is_stmt 1 discriminator 9
 2124 11a2 488D83D0 		leaq	-1584(%rbx), %rax
 2124      F9FFFF
 2125 11a9 4889C7   		movq	%rax, %rdi
 2126 11ac E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 2126      00
 2127 11b1 488D83D0 		leaq	-1584(%rbx), %rax
 2127      F9FFFF
 2128 11b8 48C1E803 		shrq	$3, %rax
 2129 11bc 48050080 		addq	$2147450880, %rax
 2129      FF7F
 2130 11c2 66C700F8 		movw	$-1800, (%rax)
 2130      F8
 2131 11c7 C64002F8 		movb	$-8, 2(%rax)
 2132 11cb 488D83D0 		leaq	-1328(%rbx), %rax
 2132      FAFFFF
 2133 11d2 4889C7   		movq	%rax, %rdi
 2134 11d5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2134      00
 2135 11da 488D83D0 		leaq	-1328(%rbx), %rax
 2135      FAFFFF
 2136 11e1 48C1E803 		shrq	$3, %rax
 2137 11e5 48050080 		addq	$2147450880, %rax
 2137      FF7F
 2138 11eb C700F8F8 		movl	$-117901064, (%rax)
 2138      F8F8
  30:/home/arkel/c++/wordle/files/update_word_list.cpp ****       removed_dates.erase(removed_dates.begin()); // pop front
 2139              		.loc 3 30 26 discriminator 9
 2140 11f1 488D83F0 		leaq	-1808(%rbx), %rax
 2140      F8FFFF
 2141 11f8 48C1E803 		shrq	$3, %rax
 2142 11fc 48050080 		addq	$2147450880, %rax
 2142      FF7F
 2143 1202 C60000   		movb	$0, (%rax)
 2144              		.loc 3 30 46 discriminator 9
 2145 1205 488D83D0 		leaq	-1840(%rbx), %rax
 2145      F8FFFF
 2146 120c 48C1E803 		shrq	$3, %rax
 2147 1210 48050080 		addq	$2147450880, %rax
 2147      FF7F
 2148 1216 C60000   		movb	$0, (%rax)
 2149              		.loc 3 30 47 discriminator 9
 2150 1219 488D83D0 		leaq	-1840(%rbx), %rax
 2150      F8FFFF
 2151 1220 4889C2   		movq	%rax, %rdx
 2152 1223 48C1EA03 		shrq	$3, %rdx
 2153 1227 4881C200 		addq	$2147450880, %rdx
 2153      80FF7F
 2154 122e 0FB612   		movzbl	(%rdx), %edx
 2155 1231 84D2     		testb	%dl, %dl
 2156 1233 7408     		je	.L106
 2157              		.loc 3 30 47 is_stmt 0
 2158 1235 4889C7   		movq	%rax, %rdi
 2159 1238 E8000000 		call	__asan_report_store8@PLT
 2159      00
 2160              	.L106:
 2161              		.loc 3 30 47 discriminator 9
 2162 123d 488D8310 		leaq	-1776(%rbx), %rax
 2162      F9FFFF
 2163 1244 4889C7   		movq	%rax, %rdi
 2164 1247 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv
 2164      00
 2165 124c 488983D0 		movq	%rax, -1840(%rbx)
 2165      F8FFFF
 2166              		.loc 3 30 46 is_stmt 1 discriminator 9
 2167 1253 4C8DB3D0 		leaq	-1840(%rbx), %r14
 2167      F8FFFF
 2168 125a 4C89F0   		movq	%r14, %rax
 2169 125d 4D85F6   		testq	%r14, %r14
 2170 1260 740B     		je	.L107
 2171 1262 4889C2   		movq	%rax, %rdx
 2172 1265 83E207   		andl	$7, %edx
 2173 1268 4885D2   		testq	%rdx, %rdx
 2174 126b 740F     		je	.L108
 2175              	.L107:
 2176              		.loc 3 30 46 is_stmt 0
 2177 126d 4889C6   		movq	%rax, %rsi
 2178 1270 488D3D00 		leaq	.Lubsan_data403(%rip), %rdi
 2178      000000
 2179 1277 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 2179      00
 2180              	.L108:
 2181              		.loc 3 30 48 is_stmt 1 discriminator 9
 2182 127c 488D83F0 		leaq	-1808(%rbx), %rax
 2182      F8FFFF
 2183 1283 4C89F6   		movq	%r14, %rsi
 2184 1286 4889C7   		movq	%rax, %rdi
 2185 1289 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 2185      00
 2186 128e 488D83F0 		leaq	-1808(%rbx), %rax
 2186      F8FFFF
 2187 1295 4889C2   		movq	%rax, %rdx
 2188 1298 48C1EA03 		shrq	$3, %rdx
 2189 129c 4881C200 		addq	$2147450880, %rdx
 2189      80FF7F
 2190 12a3 0FB612   		movzbl	(%rdx), %edx
 2191 12a6 84D2     		testb	%dl, %dl
 2192 12a8 7408     		je	.L109
 2193              		.loc 3 30 48 is_stmt 0
 2194 12aa 4889C7   		movq	%rax, %rdi
 2195 12ad E8000000 		call	__asan_report_load8@PLT
 2195      00
 2196              	.L109:
 2197              		.loc 3 30 48 discriminator 9
 2198 12b2 488B93F0 		movq	-1808(%rbx), %rdx
 2198      F8FFFF
 2199 12b9 488D8310 		leaq	-1776(%rbx), %rax
 2199      F9FFFF
 2200 12c0 4889D6   		movq	%rdx, %rsi
 2201 12c3 4889C7   		movq	%rax, %rdi
 2202              	.LEHB18:
 2203 12c6 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5eraseEN9__gnu_cxx17
 2203      00
 2204              	.LEHE18:
 2205 12cb 488D83F0 		leaq	-1808(%rbx), %rax
 2205      F8FFFF
 2206 12d2 48C1E803 		shrq	$3, %rax
 2207 12d6 48050080 		addq	$2147450880, %rax
 2207      FF7F
 2208 12dc C600F8   		movb	$-8, (%rax)
 2209              		.loc 3 30 46 is_stmt 1 discriminator 9
 2210 12df 488D83D0 		leaq	-1840(%rbx), %rax
 2210      F8FFFF
 2211 12e6 48C1E803 		shrq	$3, %rax
 2212 12ea 48050080 		addq	$2147450880, %rax
 2212      FF7F
 2213 12f0 C600F8   		movb	$-8, (%rax)
 2214              	.L93:
  31:/home/arkel/c++/wordle/files/update_word_list.cpp ****     }
  32:/home/arkel/c++/wordle/files/update_word_list.cpp ****     std::getline(ifs, line);
 2215              		.loc 3 32 27
 2216 12f3 488D9310 		leaq	-1520(%rbx), %rdx
 2216      FAFFFF
 2217 12fa 488D8350 		leaq	-688(%rbx), %rax
 2217      FDFFFF
 2218 1301 4889D6   		movq	%rdx, %rsi
 2219 1304 4889C7   		movq	%rax, %rdi
 2220              	.LEHB19:
 2221 1307 E8000000 		call	_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringI
 2221      00
  23:/home/arkel/c++/wordle/files/update_word_list.cpp ****     if (line.find('*') != std::string::npos) {
 2222              		.loc 3 23 3
 2223 130c E9ACF8FF 		jmp	.L110
 2223      FF
 2224              	.L86:
  33:/home/arkel/c++/wordle/files/update_word_list.cpp ****   }
  34:/home/arkel/c++/wordle/files/update_word_list.cpp ****   ofs << '\n';
 2225              		.loc 3 34 10
 2226 1311 488D8310 		leaq	-1264(%rbx), %rax
 2226      FBFFFF
 2227 1318 BE0A0000 		movl	$10, %esi
 2227      00
 2228 131d 4889C7   		movq	%rax, %rdi
 2229 1320 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
 2229      00
  35:/home/arkel/c++/wordle/files/update_word_list.cpp ****   ofs.close();
 2230              		.loc 3 35 12
 2231 1325 488D8310 		leaq	-1264(%rbx), %rax
 2231      FBFFFF
 2232 132c 4889C2   		movq	%rax, %rdx
 2233 132f 48C1EA03 		shrq	$3, %rdx
 2234 1333 4881C200 		addq	$2147450880, %rdx
 2234      80FF7F
 2235 133a 0FB612   		movzbl	(%rdx), %edx
 2236 133d 84D2     		testb	%dl, %dl
 2237 133f 7408     		je	.L111
 2238 1341 4889C7   		movq	%rax, %rdi
 2239 1344 E8000000 		call	__asan_report_load8@PLT
 2239      00
 2240              	.L111:
 2241 1349 488B8310 		movq	-1264(%rbx), %rax
 2241      FBFFFF
 2242 1350 4889C2   		movq	%rax, %rdx
 2243 1353 48B8F313 		movabsq	$-7890976370364771341, %rax
 2243      68A1CC9E 
 2243      7D92
 2244 135d 4831D0   		xorq	%rdx, %rax
 2245 1360 4889C1   		movq	%rax, %rcx
 2246 1363 48B8692D 		movabsq	$-7070675565921424023, %rax
 2246      38EB08EA 
 2246      DF9D
 2247 136d 480FAFC1 		imulq	%rcx, %rax
 2248 1371 4889C1   		movq	%rax, %rcx
 2249 1374 48C1E12F 		salq	$47, %rcx
 2250 1378 4831D0   		xorq	%rdx, %rax
 2251 137b 4831C1   		xorq	%rax, %rcx
 2252 137e 4889CA   		movq	%rcx, %rdx
 2253 1381 48B8692D 		movabsq	$-7070675565921424023, %rax
 2253      38EB08EA 
 2253      DF9D
 2254 138b 480FAFC2 		imulq	%rdx, %rax
 2255 138f 4889C2   		movq	%rax, %rdx
 2256 1392 48C1E22F 		salq	$47, %rdx
 2257 1396 4831C2   		xorq	%rax, %rdx
 2258 1399 48B8692D 		movabsq	$-7070675565921424023, %rax
 2258      38EB08EA 
 2258      DF9D
 2259 13a3 480FAFC2 		imulq	%rdx, %rax
 2260 13a7 4889C2   		movq	%rax, %rdx
 2261 13aa 83E27F   		andl	$127, %edx
 2262 13ad 488D0CD5 		leaq	0(,%rdx,8), %rcx
 2262      00000000 
 2263 13b5 488D1500 		leaq	__ubsan_vptr_type_cache(%rip), %rdx
 2263      000000
 2264 13bc 488B1411 		movq	(%rcx,%rdx), %rdx
 2265 13c0 4839C2   		cmpq	%rax, %rdx
 2266 13c3 7419     		je	.L112
 2267 13c5 488D8B10 		leaq	-1264(%rbx), %rcx
 2267      FBFFFF
 2268 13cc 4889C2   		movq	%rax, %rdx
 2269 13cf 4889CE   		movq	%rcx, %rsi
 2270 13d2 488D3D00 		leaq	.Lubsan_data404(%rip), %rdi
 2270      000000
 2271 13d9 E8000000 		call	__ubsan_handle_dynamic_type_cache_miss@PLT
 2271      00
 2272              	.L112:
 2273 13de 488D8310 		leaq	-1264(%rbx), %rax
 2273      FBFFFF
 2274 13e5 4889C7   		movq	%rax, %rdi
 2275 13e8 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv@PLT
 2275      00
 2276              	.LEHE19:
  21:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::getline(ifs, line);
 2277              		.loc 3 21 15
 2278 13ed 488D8310 		leaq	-1520(%rbx), %rax
 2278      FAFFFF
 2279 13f4 4889C7   		movq	%rax, %rdi
 2280 13f7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2280      00
  20:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::string line;
 2281              		.loc 3 20 28
 2282 13fc 488D8310 		leaq	-1776(%rbx), %rax
 2282      F9FFFF
 2283 1403 4889C7   		movq	%rax, %rdi
 2284 1406 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 2284      00
 2285 140b 41BE0100 		movl	$1, %r14d
 2285      0000
 2286              	.L81:
 2287 1411 488D8310 		leaq	-1264(%rbx), %rax
 2287      FBFFFF
 2288 1418 4889C2   		movq	%rax, %rdx
 2289 141b 48C1EA03 		shrq	$3, %rdx
 2290 141f 4881C200 		addq	$2147450880, %rdx
 2290      80FF7F
 2291 1426 0FB612   		movzbl	(%rdx), %edx
 2292 1429 84D2     		testb	%dl, %dl
 2293 142b 7408     		je	.L113
 2294 142d 4889C7   		movq	%rax, %rdi
 2295 1430 E8000000 		call	__asan_report_load8@PLT
 2295      00
 2296              	.L113:
 2297 1435 488B8310 		movq	-1264(%rbx), %rax
 2297      FBFFFF
 2298 143c 4889C2   		movq	%rax, %rdx
 2299 143f 48B8F313 		movabsq	$-7890976370364771341, %rax
 2299      68A1CC9E 
 2299      7D92
 2300 1449 4831D0   		xorq	%rdx, %rax
 2301 144c 4889C1   		movq	%rax, %rcx
 2302 144f 48B8692D 		movabsq	$-7070675565921424023, %rax
 2302      38EB08EA 
 2302      DF9D
 2303 1459 480FAFC1 		imulq	%rcx, %rax
 2304 145d 4889C1   		movq	%rax, %rcx
 2305 1460 48C1E12F 		salq	$47, %rcx
 2306 1464 4831D0   		xorq	%rdx, %rax
 2307 1467 4831C1   		xorq	%rax, %rcx
 2308 146a 4889CA   		movq	%rcx, %rdx
 2309 146d 48B8692D 		movabsq	$-7070675565921424023, %rax
 2309      38EB08EA 
 2309      DF9D
 2310 1477 480FAFC2 		imulq	%rdx, %rax
 2311 147b 4889C2   		movq	%rax, %rdx
 2312 147e 48C1E22F 		salq	$47, %rdx
 2313 1482 4831C2   		xorq	%rax, %rdx
 2314 1485 48B8692D 		movabsq	$-7070675565921424023, %rax
 2314      38EB08EA 
 2314      DF9D
 2315 148f 480FAFC2 		imulq	%rdx, %rax
 2316 1493 4889C2   		movq	%rax, %rdx
 2317 1496 83E27F   		andl	$127, %edx
 2318 1499 488D0CD5 		leaq	0(,%rdx,8), %rcx
 2318      00000000 
 2319 14a1 488D1500 		leaq	__ubsan_vptr_type_cache(%rip), %rdx
 2319      000000
 2320 14a8 488B1411 		movq	(%rcx,%rdx), %rdx
 2321 14ac 4839C2   		cmpq	%rax, %rdx
 2322 14af 7419     		je	.L114
 2323 14b1 488D8B10 		leaq	-1264(%rbx), %rcx
 2323      FBFFFF
 2324 14b8 4889C2   		movq	%rax, %rdx
 2325 14bb 4889CE   		movq	%rcx, %rsi
 2326 14be 488D3D00 		leaq	.Lubsan_data405(%rip), %rdi
 2326      000000
 2327 14c5 E8000000 		call	__ubsan_handle_dynamic_type_cache_miss@PLT
 2327      00
 2328              	.L114:
 2329 14ca 488D8310 		leaq	-1264(%rbx), %rax
 2329      FBFFFF
 2330 14d1 4889C7   		movq	%rax, %rdi
 2331 14d4 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@PLT
 2331      00
 2332 14d9 4183FE01 		cmpl	$1, %r14d
 2333 14dd 7408     		je	.L115
 2334 14df 41BE0000 		movl	$0, %r14d
 2334      0000
 2335 14e5 EB06     		jmp	.L116
 2336              	.L115:
 2337 14e7 41BE0100 		movl	$1, %r14d
 2337      0000
 2338              	.L116:
 2339 14ed 488D8350 		leaq	-688(%rbx), %rax
 2339      FDFFFF
 2340 14f4 4889C2   		movq	%rax, %rdx
 2341 14f7 48C1EA03 		shrq	$3, %rdx
 2342 14fb 4881C200 		addq	$2147450880, %rdx
 2342      80FF7F
 2343 1502 0FB612   		movzbl	(%rdx), %edx
 2344 1505 84D2     		testb	%dl, %dl
 2345 1507 7408     		je	.L117
 2346 1509 4889C7   		movq	%rax, %rdi
 2347 150c E8000000 		call	__asan_report_load8@PLT
 2347      00
 2348              	.L117:
 2349 1511 488B8350 		movq	-688(%rbx), %rax
 2349      FDFFFF
 2350 1518 4889C2   		movq	%rax, %rdx
 2351 151b 48B89127 		movabsq	$1323554330416523153, %rax
 2351      68A9A635 
 2351      5E12
 2352 1525 4831D0   		xorq	%rdx, %rax
 2353 1528 4889C1   		movq	%rax, %rcx
 2354 152b 48B8692D 		movabsq	$-7070675565921424023, %rax
 2354      38EB08EA 
 2354      DF9D
 2355 1535 480FAFC1 		imulq	%rcx, %rax
 2356 1539 4889C1   		movq	%rax, %rcx
 2357 153c 48C1E12F 		salq	$47, %rcx
 2358 1540 4831D0   		xorq	%rdx, %rax
 2359 1543 4831C1   		xorq	%rax, %rcx
 2360 1546 4889CA   		movq	%rcx, %rdx
 2361 1549 48B8692D 		movabsq	$-7070675565921424023, %rax
 2361      38EB08EA 
 2361      DF9D
 2362 1553 480FAFC2 		imulq	%rdx, %rax
 2363 1557 4889C2   		movq	%rax, %rdx
 2364 155a 48C1E22F 		salq	$47, %rdx
 2365 155e 4831C2   		xorq	%rax, %rdx
 2366 1561 48B8692D 		movabsq	$-7070675565921424023, %rax
 2366      38EB08EA 
 2366      DF9D
 2367 156b 480FAFC2 		imulq	%rdx, %rax
 2368 156f 4889C2   		movq	%rax, %rdx
 2369 1572 83E27F   		andl	$127, %edx
 2370 1575 488D0CD5 		leaq	0(,%rdx,8), %rcx
 2370      00000000 
 2371 157d 488D1500 		leaq	__ubsan_vptr_type_cache(%rip), %rdx
 2371      000000
 2372 1584 488B1411 		movq	(%rcx,%rdx), %rdx
 2373 1588 4839C2   		cmpq	%rax, %rdx
 2374 158b 7419     		je	.L118
 2375 158d 488D8B50 		leaq	-688(%rbx), %rcx
 2375      FDFFFF
 2376 1594 4889C2   		movq	%rax, %rdx
 2377 1597 4889CE   		movq	%rcx, %rsi
 2378 159a 488D3D00 		leaq	.Lubsan_data406(%rip), %rdi
 2378      000000
 2379 15a1 E8000000 		call	__ubsan_handle_dynamic_type_cache_miss@PLT
 2379      00
 2380              	.L118:
 2381 15a6 488D8350 		leaq	-688(%rbx), %rax
 2381      FDFFFF
 2382 15ad 4889C7   		movq	%rax, %rdi
 2383 15b0 E8000000 		call	_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@PLT
 2383      00
 2384 15b5 4183FE01 		cmpl	$1, %r14d
 2385 15b9 7407     		je	.L119
 2386 15bb B8000000 		movl	$0, %eax
 2386      00
 2387 15c0 EB05     		jmp	.L120
 2388              	.L119:
 2389 15c2 B8010000 		movl	$1, %eax
 2389      00
 2390              	.L120:
 2391 15c7 83F801   		cmpl	$1, %eax
 2392 15ca 750A     		jne	.L121
  36:/home/arkel/c++/wordle/files/update_word_list.cpp **** }...
 2393              		.loc 3 36 1
 2394 15cc C7856CF8 		movl	$0, -1940(%rbp)
 2394      FFFF0000 
 2394      0000
 2395              	.L121:
 2396 15d6 8B9D6CF8 		movl	-1940(%rbp), %ebx
 2396      FFFF
  16:/home/arkel/c++/wordle/files/update_word_list.cpp **** int main() {
 2397              		.loc 3 16 12
 2398 15dc 4D39EF   		cmpq	%r13, %r15
 2399 15df 0F847B03 		je	.L70
 2399      0000
 2400 15e5 E9590300 		jmp	.L147
 2400      00
 2401              	.L141:
 2402 15ea F30F1EFA 		endbr64
 2403 15ee 4989C4   		movq	%rax, %r12
  26:/home/arkel/c++/wordle/files/update_word_list.cpp ****       removed_dates.push_back(date_thing(line)[0]);
 2404              		.loc 3 26 41
 2405 15f1 488D8350 		leaq	-1712(%rbx), %rax
 2405      F9FFFF
 2406 15f8 4889C7   		movq	%rax, %rdi
 2407 15fb E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 2407      00
 2408 1600 4C89E2   		movq	%r12, %rdx
 2409 1603 488D8350 		leaq	-1712(%rbx), %rax
 2409      F9FFFF
 2410 160a 48C1E803 		shrq	$3, %rax
 2411 160e 48050080 		addq	$2147450880, %rax
 2411      FF7F
 2412 1614 66C700F8 		movw	$-1800, (%rax)
 2412      F8
 2413 1619 C64002F8 		movb	$-8, 2(%rax)
 2414 161d 4989D4   		movq	%rdx, %r12
 2415 1620 EB07     		jmp	.L123
 2416              	.L140:
 2417 1622 F30F1EFA 		endbr64
 2418 1626 4989C4   		movq	%rax, %r12
 2419              	.L123:
  26:/home/arkel/c++/wordle/files/update_word_list.cpp ****       removed_dates.push_back(date_thing(line)[0]);
 2420              		.loc 3 26 41 is_stmt 0 discriminator 2
 2421 1629 488D8350 		leaq	-1456(%rbx), %rax
 2421      FAFFFF
 2422 1630 4889C7   		movq	%rax, %rdi
 2423 1633 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2423      00
 2424 1638 4C89E2   		movq	%r12, %rdx
 2425 163b 488D8350 		leaq	-1456(%rbx), %rax
 2425      FAFFFF
 2426 1642 48C1E803 		shrq	$3, %rax
 2427 1646 48050080 		addq	$2147450880, %rax
 2427      FF7F
 2428 164c C700F8F8 		movl	$-117901064, (%rax)
 2428      F8F8
 2429 1652 4989D4   		movq	%rdx, %r12
 2430 1655 E9190100 		jmp	.L124
 2430      00
 2431              	.L143:
 2432 165a F30F1EFA 		endbr64
 2433 165e 4989C4   		movq	%rax, %r12
  28:/home/arkel/c++/wordle/files/update_word_list.cpp ****       removed_dates.push_back(date_thing(line)[0]);
 2434              		.loc 3 28 41 is_stmt 1
 2435 1661 488D8390 		leaq	-1648(%rbx), %rax
 2435      F9FFFF
 2436 1668 4889C7   		movq	%rax, %rdi
 2437 166b E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 2437      00
 2438 1670 4C89E2   		movq	%r12, %rdx
 2439 1673 488D8390 		leaq	-1648(%rbx), %rax
 2439      F9FFFF
 2440 167a 48C1E803 		shrq	$3, %rax
 2441 167e 48050080 		addq	$2147450880, %rax
 2441      FF7F
 2442 1684 66C700F8 		movw	$-1800, (%rax)
 2442      F8
 2443 1689 C64002F8 		movb	$-8, 2(%rax)
 2444 168d 4989D4   		movq	%rdx, %r12
 2445 1690 EB07     		jmp	.L126
 2446              	.L142:
 2447 1692 F30F1EFA 		endbr64
 2448 1696 4989C4   		movq	%rax, %r12
 2449              	.L126:
  28:/home/arkel/c++/wordle/files/update_word_list.cpp ****       removed_dates.push_back(date_thing(line)[0]);
 2450              		.loc 3 28 41 is_stmt 0 discriminator 2
 2451 1699 488D8390 		leaq	-1392(%rbx), %rax
 2451      FAFFFF
 2452 16a0 4889C7   		movq	%rax, %rdi
 2453 16a3 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2453      00
 2454 16a8 4C89E2   		movq	%r12, %rdx
 2455 16ab 488D8390 		leaq	-1392(%rbx), %rax
 2455      FAFFFF
 2456 16b2 48C1E803 		shrq	$3, %rax
 2457 16b6 48050080 		addq	$2147450880, %rax
 2457      FF7F
 2458 16bc C700F8F8 		movl	$-117901064, (%rax)
 2458      F8F8
 2459 16c2 4989D4   		movq	%rdx, %r12
 2460 16c5 E9A90000 		jmp	.L124
 2460      00
 2461              	.L145:
 2462 16ca F30F1EFA 		endbr64
 2463 16ce 4989C4   		movq	%rax, %r12
  29:/home/arkel/c++/wordle/files/update_word_list.cpp ****       ofs << removed_dates[0] << ' ' << date_thing(line)[1] << '\n';
 2464              		.loc 3 29 51 is_stmt 1
 2465 16d1 488D83D0 		leaq	-1584(%rbx), %rax
 2465      F9FFFF
 2466 16d8 4889C7   		movq	%rax, %rdi
 2467 16db E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 2467      00
 2468 16e0 4C89E2   		movq	%r12, %rdx
 2469 16e3 488D83D0 		leaq	-1584(%rbx), %rax
 2469      F9FFFF
 2470 16ea 48C1E803 		shrq	$3, %rax
 2471 16ee 48050080 		addq	$2147450880, %rax
 2471      FF7F
 2472 16f4 66C700F8 		movw	$-1800, (%rax)
 2472      F8
 2473 16f9 C64002F8 		movb	$-8, 2(%rax)
 2474 16fd 4989D4   		movq	%rdx, %r12
 2475 1700 EB07     		jmp	.L128
 2476              	.L144:
 2477 1702 F30F1EFA 		endbr64
 2478 1706 4989C4   		movq	%rax, %r12
 2479              	.L128:
  29:/home/arkel/c++/wordle/files/update_word_list.cpp ****       ofs << removed_dates[0] << ' ' << date_thing(line)[1] << '\n';
 2480              		.loc 3 29 51 is_stmt 0 discriminator 4
 2481 1709 488D83D0 		leaq	-1328(%rbx), %rax
 2481      FAFFFF
 2482 1710 4889C7   		movq	%rax, %rdi
 2483 1713 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2483      00
 2484 1718 4C89E2   		movq	%r12, %rdx
 2485 171b 488D83D0 		leaq	-1328(%rbx), %rax
 2485      FAFFFF
 2486 1722 48C1E803 		shrq	$3, %rax
 2487 1726 48050080 		addq	$2147450880, %rax
 2487      FF7F
 2488 172c C700F8F8 		movl	$-117901064, (%rax)
 2488      F8F8
 2489 1732 4989D4   		movq	%rdx, %r12
 2490 1735 EB3C     		jmp	.L124
 2491              	.L146:
 2492 1737 F30F1EFA 		endbr64
  30:/home/arkel/c++/wordle/files/update_word_list.cpp ****       removed_dates.erase(removed_dates.begin()); // pop front
 2493              		.loc 3 30 48 is_stmt 1
 2494 173b 488D93F0 		leaq	-1808(%rbx), %rdx
 2494      F8FFFF
 2495 1742 48C1EA03 		shrq	$3, %rdx
 2496 1746 4881C200 		addq	$2147450880, %rdx
 2496      80FF7F
 2497 174d C602F8   		movb	$-8, (%rdx)
 2498 1750 4889C2   		movq	%rax, %rdx
  30:/home/arkel/c++/wordle/files/update_word_list.cpp ****       removed_dates.erase(removed_dates.begin()); // pop front
 2499              		.loc 3 30 46
 2500 1753 488D83D0 		leaq	-1840(%rbx), %rax
 2500      F8FFFF
 2501 175a 48C1E803 		shrq	$3, %rax
 2502 175e 48050080 		addq	$2147450880, %rax
 2502      FF7F
 2503 1764 C600F8   		movb	$-8, (%rax)
 2504 1767 4989D4   		movq	%rdx, %r12
 2505 176a EB07     		jmp	.L124
 2506              	.L139:
 2507 176c F30F1EFA 		endbr64
 2508 1770 4989C4   		movq	%rax, %r12
 2509              	.L124:
  21:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::string line;
 2510              		.loc 3 21 15
 2511 1773 488D8310 		leaq	-1520(%rbx), %rax
 2511      FAFFFF
 2512 177a 4889C7   		movq	%rax, %rdi
 2513 177d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2513      00
  20:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::vector<std::string> removed_dates;
 2514              		.loc 3 20 28
 2515 1782 488D8310 		leaq	-1776(%rbx), %rax
 2515      F9FFFF
 2516 1789 4889C7   		movq	%rax, %rdi
 2517 178c E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 2517      00
 2518 1791 EB07     		jmp	.L130
 2519              	.L138:
 2520 1793 F30F1EFA 		endbr64
 2521 1797 4989C4   		movq	%rax, %r12
 2522              	.L130:
  18:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::ofstream ofs("processed.txt");
 2523              		.loc 3 18 36
 2524 179a 488D8310 		leaq	-1264(%rbx), %rax
 2524      FBFFFF
 2525 17a1 4889C2   		movq	%rax, %rdx
 2526 17a4 48C1EA03 		shrq	$3, %rdx
 2527 17a8 4881C200 		addq	$2147450880, %rdx
 2527      80FF7F
 2528 17af 0FB612   		movzbl	(%rdx), %edx
 2529 17b2 84D2     		testb	%dl, %dl
 2530 17b4 7408     		je	.L131
 2531 17b6 4889C7   		movq	%rax, %rdi
 2532 17b9 E8000000 		call	__asan_report_load8@PLT
 2532      00
 2533              	.L131:
 2534 17be 488B8310 		movq	-1264(%rbx), %rax
 2534      FBFFFF
 2535 17c5 4889C2   		movq	%rax, %rdx
 2536 17c8 48B8F313 		movabsq	$-7890976370364771341, %rax
 2536      68A1CC9E 
 2536      7D92
 2537 17d2 4831D0   		xorq	%rdx, %rax
 2538 17d5 4889C1   		movq	%rax, %rcx
 2539 17d8 48B8692D 		movabsq	$-7070675565921424023, %rax
 2539      38EB08EA 
 2539      DF9D
 2540 17e2 480FAFC1 		imulq	%rcx, %rax
 2541 17e6 4889C1   		movq	%rax, %rcx
 2542 17e9 48C1E12F 		salq	$47, %rcx
 2543 17ed 4831D0   		xorq	%rdx, %rax
 2544 17f0 4831C1   		xorq	%rax, %rcx
 2545 17f3 4889CA   		movq	%rcx, %rdx
 2546 17f6 48B8692D 		movabsq	$-7070675565921424023, %rax
 2546      38EB08EA 
 2546      DF9D
 2547 1800 480FAFC2 		imulq	%rdx, %rax
 2548 1804 4889C2   		movq	%rax, %rdx
 2549 1807 48C1E22F 		salq	$47, %rdx
 2550 180b 4831C2   		xorq	%rax, %rdx
 2551 180e 48B8692D 		movabsq	$-7070675565921424023, %rax
 2551      38EB08EA 
 2551      DF9D
 2552 1818 480FAFC2 		imulq	%rdx, %rax
 2553 181c 4889C2   		movq	%rax, %rdx
 2554 181f 83E27F   		andl	$127, %edx
 2555 1822 488D0CD5 		leaq	0(,%rdx,8), %rcx
 2555      00000000 
 2556 182a 488D1500 		leaq	__ubsan_vptr_type_cache(%rip), %rdx
 2556      000000
 2557 1831 488B1411 		movq	(%rcx,%rdx), %rdx
 2558 1835 4839C2   		cmpq	%rax, %rdx
 2559 1838 7419     		je	.L132
 2560 183a 488D8B10 		leaq	-1264(%rbx), %rcx
 2560      FBFFFF
 2561 1841 4889C2   		movq	%rax, %rdx
 2562 1844 4889CE   		movq	%rcx, %rsi
 2563 1847 488D3D00 		leaq	.Lubsan_data407(%rip), %rdi
 2563      000000
 2564 184e E8000000 		call	__ubsan_handle_dynamic_type_cache_miss@PLT
 2564      00
 2565              	.L132:
 2566 1853 488D8310 		leaq	-1264(%rbx), %rax
 2566      FBFFFF
 2567 185a 4889C7   		movq	%rax, %rdi
 2568 185d E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@PLT
 2568      00
 2569 1862 EB07     		jmp	.L133
 2570              	.L137:
 2571 1864 F30F1EFA 		endbr64
 2572 1868 4989C4   		movq	%rax, %r12
 2573              	.L133:
  17:/home/arkel/c++/wordle/files/update_word_list.cpp ****   std::ifstream ifs("wordles.txt");
 2574              		.loc 3 17 34
 2575 186b 488D8350 		leaq	-688(%rbx), %rax
 2575      FDFFFF
 2576 1872 4889C2   		movq	%rax, %rdx
 2577 1875 48C1EA03 		shrq	$3, %rdx
 2578 1879 4881C200 		addq	$2147450880, %rdx
 2578      80FF7F
 2579 1880 0FB612   		movzbl	(%rdx), %edx
 2580 1883 84D2     		testb	%dl, %dl
 2581 1885 7408     		je	.L134
 2582 1887 4889C7   		movq	%rax, %rdi
 2583 188a E8000000 		call	__asan_report_load8@PLT
 2583      00
 2584              	.L134:
 2585 188f 488B8350 		movq	-688(%rbx), %rax
 2585      FDFFFF
 2586 1896 4889C2   		movq	%rax, %rdx
 2587 1899 48B89127 		movabsq	$1323554330416523153, %rax
 2587      68A9A635 
 2587      5E12
 2588 18a3 4831D0   		xorq	%rdx, %rax
 2589 18a6 4889C1   		movq	%rax, %rcx
 2590 18a9 48B8692D 		movabsq	$-7070675565921424023, %rax
 2590      38EB08EA 
 2590      DF9D
 2591 18b3 480FAFC1 		imulq	%rcx, %rax
 2592 18b7 4889C1   		movq	%rax, %rcx
 2593 18ba 48C1E12F 		salq	$47, %rcx
 2594 18be 4831D0   		xorq	%rdx, %rax
 2595 18c1 4831C1   		xorq	%rax, %rcx
 2596 18c4 4889CA   		movq	%rcx, %rdx
 2597 18c7 48B8692D 		movabsq	$-7070675565921424023, %rax
 2597      38EB08EA 
 2597      DF9D
 2598 18d1 480FAFC2 		imulq	%rdx, %rax
 2599 18d5 4889C2   		movq	%rax, %rdx
 2600 18d8 48C1E22F 		salq	$47, %rdx
 2601 18dc 4831C2   		xorq	%rax, %rdx
 2602 18df 48B8692D 		movabsq	$-7070675565921424023, %rax
 2602      38EB08EA 
 2602      DF9D
 2603 18e9 480FAFC2 		imulq	%rdx, %rax
 2604 18ed 4889C2   		movq	%rax, %rdx
 2605 18f0 83E27F   		andl	$127, %edx
 2606 18f3 488D0CD5 		leaq	0(,%rdx,8), %rcx
 2606      00000000 
 2607 18fb 488D1500 		leaq	__ubsan_vptr_type_cache(%rip), %rdx
 2607      000000
 2608 1902 488B1411 		movq	(%rcx,%rdx), %rdx
 2609 1906 4839C2   		cmpq	%rax, %rdx
 2610 1909 7419     		je	.L135
 2611 190b 488D8B50 		leaq	-688(%rbx), %rcx
 2611      FDFFFF
 2612 1912 4889C2   		movq	%rax, %rdx
 2613 1915 4889CE   		movq	%rcx, %rsi
 2614 1918 488D3D00 		leaq	.Lubsan_data408(%rip), %rdi
 2614      000000
 2615 191f E8000000 		call	__ubsan_handle_dynamic_type_cache_miss@PLT
 2615      00
 2616              	.L135:
 2617 1924 488D8350 		leaq	-688(%rbx), %rax
 2617      FDFFFF
 2618 192b 4889C7   		movq	%rax, %rdi
 2619 192e E8000000 		call	_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@PLT
 2619      00
 2620 1933 4C89E3   		movq	%r12, %rbx
 2621 1936 E8000000 		call	__asan_handle_no_return@PLT
 2621      00
 2622 193b 4889DF   		movq	%rbx, %rdi
 2623              	.LEHB20:
 2624 193e E8000000 		call	_Unwind_Resume@PLT
 2624      00
 2625              	.LEHE20:
 2626              	.L147:
  16:/home/arkel/c++/wordle/files/update_word_list.cpp **** int main() {
 2627              		.loc 3 16 12
 2628 1943 49C74500 		movq	$1172321806, 0(%r13)
 2628      0E36E045 
 2629 194b 4C89FA   		movq	%r15, %rdx
 2630 194e BE400700 		movl	$1856, %esi
 2630      00
 2631 1953 4C89EF   		movq	%r13, %rdi
 2632 1956 E8000000 		call	__asan_stack_free_5@PLT
 2632      00
 2633              	.LVL2:
 2634 195b E9B40000 		jmp	.L71
 2634      00
 2635              	.L70:
 2636 1960 49C78424 		movq	$0, 2147450880(%r12)
 2636      0080FF7F 
 2636      00000000 
 2637 196c 49C78424 		movq	$0, 2147450888(%r12)
 2637      0880FF7F 
 2637      00000000 
 2638 1978 49C78424 		movq	$0, 2147450896(%r12)
 2638      1080FF7F 
 2638      00000000 
 2639 1984 49C78424 		movq	$0, 2147450904(%r12)
 2639      1880FF7F 
 2639      00000000 
 2640 1990 49C78424 		movq	$0, 2147450912(%r12)
 2640      2080FF7F 
 2640      00000000 
 2641 199c 49C78424 		movq	$0, 2147450920(%r12)
 2641      2880FF7F 
 2641      00000000 
 2642 19a8 49C78424 		movq	$0, 2147450928(%r12)
 2642      3080FF7F 
 2642      00000000 
 2643 19b4 49C78424 		movq	$0, 2147450936(%r12)
 2643      3880FF7F 
 2643      00000000 
 2644 19c0 49C78424 		movq	$0, 2147450944(%r12)
 2644      4080FF7F 
 2644      00000000 
 2645 19cc 49C78424 		movq	$0, 2147450952(%r12)
 2645      4880FF7F 
 2645      00000000 
 2646 19d8 49C78424 		movq	$0, 2147451020(%r12)
 2646      8C80FF7F 
 2646      00000000 
 2647 19e4 41C78424 		movl	$0, 2147451028(%r12)
 2647      9480FF7F 
 2647      00000000 
 2648 19f0 49C78424 		movq	$0, 2147451092(%r12)
 2648      D480FF7F 
 2648      00000000 
 2649 19fc 49C78424 		movq	$0, 2147451100(%r12)
 2649      DC80FF7F 
 2649      00000000 
 2650 1a08 41C78424 		movl	$0, 2147451108(%r12)
 2650      E480FF7F 
 2650      00000000 
 2651              	.L71:
 2652              		.loc 3 36 1
 2653 1a14 488B45C8 		movq	-56(%rbp), %rax
 2654 1a18 64483304 		xorq	%fs:40, %rax
 2654      25280000 
 2654      00
 2655 1a21 7405     		je	.L136
 2656 1a23 E8000000 		call	__stack_chk_fail@PLT
 2656      00
 2657              	.L136:
 2658 1a28 89D8     		movl	%ebx, %eax
 2659 1a2a 4881C478 		addq	$1912, %rsp
 2659      070000
 2660 1a31 5B       		popq	%rbx
 2661 1a32 415C     		popq	%r12
 2662 1a34 415D     		popq	%r13
 2663 1a36 415E     		popq	%r14
 2664 1a38 415F     		popq	%r15
 2665 1a3a 5D       		popq	%rbp
 2666              		.cfi_def_cfa 7, 8
 2667 1a3b C3       		ret
 2668              		.cfi_endproc
 2669              	.LFE2344:
 2670              		.section	.gcc_except_table
 2671              	.LLSDA2344:
 2672 0028 FF       		.byte	0xff
 2673 0029 FF       		.byte	0xff
 2674 002a 01       		.byte	0x1
 2675 002b 5B       		.uleb128 .LLSDACSE2344-.LLSDACSB2344
 2676              	.LLSDACSB2344:
 2677 002c F903     		.uleb128 .LEHB6-.LFB2344
 2678 002e 05       		.uleb128 .LEHE6-.LEHB6
 2679 002f 00       		.uleb128 0
 2680 0030 00       		.uleb128 0
 2681 0031 9404     		.uleb128 .LEHB7-.LFB2344
 2682 0033 05       		.uleb128 .LEHE7-.LEHB7
 2683 0034 BE21     		.uleb128 .L137-.LFB2344
 2684 0036 00       		.uleb128 0
 2685 0037 DC05     		.uleb128 .LEHB8-.LFB2344
 2686 0039 D801     		.uleb128 .LEHE8-.LEHB8
 2687 003b ED1F     		.uleb128 .L138-.LFB2344
 2688 003d 00       		.uleb128 0
 2689 003e 9208     		.uleb128 .LEHB9-.LFB2344
 2690 0040 8303     		.uleb128 .LEHE9-.LEHB9
 2691 0042 C61F     		.uleb128 .L139-.LFB2344
 2692 0044 00       		.uleb128 0
 2693 0045 900C     		.uleb128 .LEHB10-.LFB2344
 2694 0047 05       		.uleb128 .LEHE10-.LEHB10
 2695 0048 FC1C     		.uleb128 .L140-.LFB2344
 2696 004a 00       		.uleb128 0
 2697 004b FD0C     		.uleb128 .LEHB11-.LFB2344
 2698 004d 05       		.uleb128 .LEHE11-.LEHB11
 2699 004e C41C     		.uleb128 .L141-.LFB2344
 2700 0050 00       		.uleb128 0
 2701 0051 9B0E     		.uleb128 .LEHB12-.LFB2344
 2702 0053 05       		.uleb128 .LEHE12-.LEHB12
 2703 0054 C61F     		.uleb128 .L139-.LFB2344
 2704 0056 00       		.uleb128 0
 2705 0057 9B0F     		.uleb128 .LEHB13-.LFB2344
 2706 0059 05       		.uleb128 .LEHE13-.LEHB13
 2707 005a EC1D     		.uleb128 .L142-.LFB2344
 2708 005c 00       		.uleb128 0
 2709 005d 8810     		.uleb128 .LEHB14-.LFB2344
 2710 005f 05       		.uleb128 .LEHE14-.LEHB14
 2711 0060 B41D     		.uleb128 .L143-.LFB2344
 2712 0062 00       		.uleb128 0
 2713 0063 A211     		.uleb128 .LEHB15-.LFB2344
 2714 0065 63       		.uleb128 .LEHE15-.LEHB15
 2715 0066 C61F     		.uleb128 .L139-.LFB2344
 2716 0068 00       		.uleb128 0
 2717 0069 8013     		.uleb128 .LEHB16-.LFB2344
 2718 006b 05       		.uleb128 .LEHE16-.LEHB16
 2719 006c DC1E     		.uleb128 .L144-.LFB2344
 2720 006e 00       		.uleb128 0
 2721 006f EA13     		.uleb128 .LEHB17-.LFB2344
 2722 0071 12       		.uleb128 .LEHE17-.LEHB17
 2723 0072 A41E     		.uleb128 .L145-.LFB2344
 2724 0074 00       		.uleb128 0
 2725 0075 A016     		.uleb128 .LEHB18-.LFB2344
 2726 0077 05       		.uleb128 .LEHE18-.LEHB18
 2727 0078 911F     		.uleb128 .L146-.LFB2344
 2728 007a 00       		.uleb128 0
 2729 007b E116     		.uleb128 .LEHB19-.LFB2344
 2730 007d E601     		.uleb128 .LEHE19-.LEHB19
 2731 007f C61F     		.uleb128 .L139-.LFB2344
 2732 0081 00       		.uleb128 0
 2733 0082 9823     		.uleb128 .LEHB20-.LFB2344
 2734 0084 05       		.uleb128 .LEHE20-.LEHB20
 2735 0085 00       		.uleb128 0
 2736 0086 00       		.uleb128 0
 2737              	.LLSDACSE2344:
 2738              		.text
 2740              		.data
 2741              		.align 32
 2744              	.Lubsan_type17:
 2747 0364 27636F6E 		.string	"'const char_type'"
 2747      73742063 
 2747      6861725F 
 2747      74797065 
 2747      2700
 2748 0376 00000000 		.zero	42
 2748      00000000 
 2748      00000000 
 2748      00000000 
 2748      00000000 
 2749              		.section	.rodata
 2750              		.align 32
 2751              	.LC7:
 2752 02e0 2F757372 		.string	"/usr/include/c++/9/bits/char_traits.h"
 2752      2F696E63 
 2752      6C756465 
 2752      2F632B2B 
 2752      2F392F62 
 2753 0306 00000000 		.zero	58
 2753      00000000 
 2753      00000000 
 2753      00000000 
 2753      00000000 
 2754              		.section	.data.rel.local
 2755              		.align 32
 2758              	.Lubsan_data409:
 2759 06c0 00000000 		.quad	.LC7
 2759      00000000 
 2760 06c8 65000000 		.long	101
 2761 06cc 15000000 		.long	21
 2762 06d0 00000000 		.quad	.Lubsan_type17
 2762      00000000 
 2763 06d8 00       		.byte	0
 2764 06d9 00       		.byte	0
 2765 06da 00000000 		.zero	6
 2765      0000
 2766 06e0 00000000 		.zero	32
 2766      00000000 
 2766      00000000 
 2766      00000000 
 2766      00000000 
 2767              		.align 32
 2770              	.Lubsan_data410:
 2771 0700 00000000 		.quad	.LC7
 2771      00000000 
 2772 0708 65000000 		.long	101
 2773 070c 15000000 		.long	21
 2774 0710 00000000 		.quad	.Lubsan_type17
 2774      00000000 
 2775 0718 00       		.byte	0
 2776 0719 00       		.byte	0
 2777 071a 00000000 		.zero	6
 2777      0000
 2778 0720 00000000 		.zero	32
 2778      00000000 
 2778      00000000 
 2778      00000000 
 2778      00000000 
 2779              		.section	.text._ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_,"axG",@progbits,_ZN9__gnu_cxx11char_traitsI
 2780              		.weak	_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_
 2782              	_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_:
 2783              	.LASANPC2355:
 2784              	.LFB2355:
 100:/usr/include/c++/9/bits/char_traits.h ****       { return __c1 == __c2; }
 2785              		.loc 2 100 7
 2786              		.cfi_startproc
 2787 0000 F30F1EFA 		endbr64
 2788 0004 55       		pushq	%rbp
 2789              		.cfi_def_cfa_offset 16
 2790              		.cfi_offset 6, -16
 2791 0005 4889E5   		movq	%rsp, %rbp
 2792              		.cfi_def_cfa_register 6
 2793 0008 53       		pushq	%rbx
 2794 0009 4883EC18 		subq	$24, %rsp
 2795              		.cfi_offset 3, -24
 2796 000d 48897DE8 		movq	%rdi, -24(%rbp)
 2797 0011 488975E0 		movq	%rsi, -32(%rbp)
 101:/usr/include/c++/9/bits/char_traits.h **** 
 2798              		.loc 2 101 21
 2799 0015 48837DE8 		cmpq	$0, -24(%rbp)
 2799      00
 2800 001a 7511     		jne	.L149
 2801 001c BE000000 		movl	$0, %esi
 2801      00
 2802 0021 488D3D00 		leaq	.Lubsan_data409(%rip), %rdi
 2802      000000
 2803 0028 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 2803      00
 2804              	.L149:
 2805 002d 488B45E8 		movq	-24(%rbp), %rax
 2806 0031 4889C2   		movq	%rax, %rdx
 2807 0034 48C1EA03 		shrq	$3, %rdx
 2808 0038 4881C200 		addq	$2147450880, %rdx
 2808      80FF7F
 2809 003f 0FB612   		movzbl	(%rdx), %edx
 2810 0042 84D2     		testb	%dl, %dl
 2811 0044 0F95C1   		setne	%cl
 2812 0047 4889C6   		movq	%rax, %rsi
 2813 004a 83E607   		andl	$7, %esi
 2814 004d 4038D6   		cmpb	%dl, %sil
 2815 0050 0F9DC2   		setge	%dl
 2816 0053 21CA     		andl	%ecx, %edx
 2817 0055 84D2     		testb	%dl, %dl
 2818 0057 7408     		je	.L150
 2819 0059 4889C7   		movq	%rax, %rdi
 2820 005c E8000000 		call	__asan_report_load1@PLT
 2820      00
 2821              	.L150:
 2822 0061 488B45E8 		movq	-24(%rbp), %rax
 2823 0065 0FB618   		movzbl	(%rax), %ebx
 2824 0068 48837DE0 		cmpq	$0, -32(%rbp)
 2824      00
 2825 006d 7511     		jne	.L151
 2826 006f BE000000 		movl	$0, %esi
 2826      00
 2827 0074 488D3D00 		leaq	.Lubsan_data410(%rip), %rdi
 2827      000000
 2828 007b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 2828      00
 2829              	.L151:
 2830 0080 488B45E0 		movq	-32(%rbp), %rax
 2831 0084 4889C2   		movq	%rax, %rdx
 2832 0087 48C1EA03 		shrq	$3, %rdx
 2833 008b 4881C200 		addq	$2147450880, %rdx
 2833      80FF7F
 2834 0092 0FB612   		movzbl	(%rdx), %edx
 2835 0095 84D2     		testb	%dl, %dl
 2836 0097 0F95C1   		setne	%cl
 2837 009a 4889C6   		movq	%rax, %rsi
 2838 009d 83E607   		andl	$7, %esi
 2839 00a0 4038D6   		cmpb	%dl, %sil
 2840 00a3 0F9DC2   		setge	%dl
 2841 00a6 21CA     		andl	%ecx, %edx
 2842 00a8 84D2     		testb	%dl, %dl
 2843 00aa 7408     		je	.L152
 2844 00ac 4889C7   		movq	%rax, %rdi
 2845 00af E8000000 		call	__asan_report_load1@PLT
 2845      00
 2846              	.L152:
 2847 00b4 488B45E0 		movq	-32(%rbp), %rax
 2848 00b8 0FB600   		movzbl	(%rax), %eax
 101:/usr/include/c++/9/bits/char_traits.h **** 
 2849              		.loc 2 101 24
 2850 00bb 38C3     		cmpb	%al, %bl
 2851 00bd 0F94C0   		sete	%al
 101:/usr/include/c++/9/bits/char_traits.h **** 
 2852              		.loc 2 101 30
 2853 00c0 4883C418 		addq	$24, %rsp
 2854 00c4 5B       		popq	%rbx
 2855 00c5 5D       		popq	%rbp
 2856              		.cfi_def_cfa 7, 8
 2857 00c6 C3       		ret
 2858              		.cfi_endproc
 2859              	.LFE2355:
 2861              		.section	.data.rel.local
 2862              		.align 32
 2865              	.Lubsan_data411:
 2866 0740 00000000 		.quad	.LC7
 2866      00000000 
 2867 0748 A5000000 		.long	165
 2868 074c 15000000 		.long	21
 2869 0750 00000000 		.zero	48
 2869      00000000 
 2869      00000000 
 2869      00000000 
 2869      00000000 
 2870              		.align 32
 2873              	.Lubsan_data412:
 2874 0780 00000000 		.quad	.LC7
 2874      00000000 
 2875 0788 A5000000 		.long	165
 2876 078c 15000000 		.long	21
 2877 0790 00000000 		.quad	.Lubsan_type17
 2877      00000000 
 2878 0798 00       		.byte	0
 2879 0799 02       		.byte	2
 2880 079a 00000000 		.zero	6
 2880      0000
 2881 07a0 00000000 		.zero	32
 2881      00000000 
 2881      00000000 
 2881      00000000 
 2881      00000000 
 2882              		.globl	__asan_stack_malloc_0
 2883              		.section	.rodata
 2884              	.LC8:
 2885 0340 31203332 		.string	"1 32 1 9 <unknown>"
 2885      20312039 
 2885      203C756E 
 2885      6B6E6F77 
 2885      6E3E00
 2886              		.section	.text._ZN9__gnu_cxx11char_traitsIcE6lengthEPKc,"axG",@progbits,_ZN9__gnu_cxx11char_traits
 2887              		.align 2
 2888              		.weak	_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc
 2890              	_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc:
 2891              	.LASANPC2354:
 2892              	.LFB2354:
 161:/usr/include/c++/9/bits/char_traits.h ****     length(const char_type* __p)
 2893              		.loc 2 161 5
 2894              		.cfi_startproc
 2895 0000 F30F1EFA 		endbr64
 2896 0004 55       		pushq	%rbp
 2897              		.cfi_def_cfa_offset 16
 2898              		.cfi_offset 6, -16
 2899 0005 4889E5   		movq	%rsp, %rbp
 2900              		.cfi_def_cfa_register 6
 2901 0008 4157     		pushq	%r15
 2902 000a 4156     		pushq	%r14
 2903 000c 4155     		pushq	%r13
 2904 000e 4154     		pushq	%r12
 2905 0010 53       		pushq	%rbx
 2906 0011 4881EC88 		subq	$136, %rsp
 2906      000000
 2907              		.cfi_offset 15, -24
 2908              		.cfi_offset 14, -32
 2909              		.cfi_offset 13, -40
 2910              		.cfi_offset 12, -48
 2911              		.cfi_offset 3, -56
 2912 0018 4889BD58 		movq	%rdi, -168(%rbp)
 2912      FFFFFF
 2913 001f 488D9D70 		leaq	-144(%rbp), %rbx
 2913      FFFFFF
 2914 0026 4989DF   		movq	%rbx, %r15
 2915 0029 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 2915      000000
 2916 0030 7412     		je	.L154
 2917 0032 BF400000 		movl	$64, %edi
 2917      00
 2918 0037 E8000000 		call	__asan_stack_malloc_0@PLT
 2918      00
 2919              	.LVL3:
 2920 003c 4885C0   		testq	%rax, %rax
 2921 003f 7403     		je	.L154
 2922 0041 4889C3   		movq	%rax, %rbx
 2923              	.L154:
 2924 0044 488D4360 		leaq	96(%rbx), %rax
 2925 0048 4989C4   		movq	%rax, %r12
 2926 004b 48C703B3 		movq	$1102416563, (%rbx)
 2926      8AB541
 2927 0052 488D0500 		leaq	.LC8(%rip), %rax
 2927      000000
 2928 0059 48894308 		movq	%rax, 8(%rbx)
 2929 005d 488D059C 		leaq	.LASANPC2354(%rip), %rax
 2929      FFFFFF
 2930 0064 48894310 		movq	%rax, 16(%rbx)
 2931 0068 4989DD   		movq	%rbx, %r13
 2932 006b 49C1ED03 		shrq	$3, %r13
 2933 006f 41C78500 		movl	$-235802127, 2147450880(%r13)
 2933      80FF7FF1 
 2933      F1F1F1
 2934 007a 41C78504 		movl	$-202116351, 2147450884(%r13)
 2934      80FF7F01 
 2934      F3F3F3
 161:/usr/include/c++/9/bits/char_traits.h ****     length(const char_type* __p)
 2935              		.loc 2 161 5
 2936 0085 64488B04 		movq	%fs:40, %rax
 2936      25280000 
 2936      00
 2937 008e 488945C8 		movq	%rax, -56(%rbp)
 2938 0092 31C0     		xorl	%eax, %eax
 164:/usr/include/c++/9/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 2939              		.loc 2 164 19
 2940 0094 48C78568 		movq	$0, -152(%rbp)
 2940      FFFFFF00 
 2940      000000
 2941              	.L164:
 165:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 2942              		.loc 2 165 14
 2943 009f 498D4424 		leaq	-64(%r12), %rax
 2943      C0
 2944 00a4 48C1E803 		shrq	$3, %rax
 2945 00a8 48050080 		addq	$2147450880, %rax
 2945      FF7F
 2946 00ae C60001   		movb	$1, (%rax)
 165:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 2947              		.loc 2 165 17
 2948 00b1 498D4424 		leaq	-64(%r12), %rax
 2948      C0
 2949 00b6 4889C2   		movq	%rax, %rdx
 2950 00b9 4889D0   		movq	%rdx, %rax
 2951 00bc 48C1E803 		shrq	$3, %rax
 2952 00c0 48050080 		addq	$2147450880, %rax
 2952      FF7F
 2953 00c6 0FB600   		movzbl	(%rax), %eax
 2954 00c9 84C0     		testb	%al, %al
 2955 00cb 0F95C1   		setne	%cl
 2956 00ce 84C0     		testb	%al, %al
 2957 00d0 0F9EC0   		setle	%al
 2958 00d3 21C8     		andl	%ecx, %eax
 2959 00d5 84C0     		testb	%al, %al
 2960 00d7 7408     		je	.L158
 2961 00d9 4889D7   		movq	%rdx, %rdi
 2962 00dc E8000000 		call	__asan_report_store1@PLT
 2962      00
 2963              	.L158:
 2964 00e1 41C64424 		movb	$0, -64(%r12)
 2964      C000
 165:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 2965              		.loc 2 165 21
 2966 00e7 488B9558 		movq	-168(%rbp), %rdx
 2966      FFFFFF
 2967 00ee 488B8568 		movq	-152(%rbp), %rax
 2967      FFFFFF
 2968 00f5 4801D0   		addq	%rdx, %rax
 2969 00f8 488B8D68 		movq	-152(%rbp), %rcx
 2969      FFFFFF
 2970 00ff 48F7D1   		notq	%rcx
 2971 0102 48C1E93F 		shrq	$63, %rcx
 2972 0106 84C9     		testb	%cl, %cl
 2973 0108 7420     		je	.L159
 2974 010a 4839D0   		cmpq	%rdx, %rax
 2975 010d 7320     		jnb	.L160
 2976              	.L161:
 2977 010f 488B8D58 		movq	-168(%rbp), %rcx
 2977      FFFFFF
 2978 0116 4889C2   		movq	%rax, %rdx
 2979 0119 4889CE   		movq	%rcx, %rsi
 2980 011c 488D3D00 		leaq	.Lubsan_data411(%rip), %rdi
 2980      000000
 2981 0123 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 2981      00
 2982 0128 EB05     		jmp	.L160
 2983              	.L159:
 2984 012a 4839D0   		cmpq	%rdx, %rax
 2985 012d 77E0     		ja	.L161
 2986              	.L160:
 2987 012f 488B9558 		movq	-168(%rbp), %rdx
 2987      FFFFFF
 2988 0136 488B8568 		movq	-152(%rbp), %rax
 2988      FFFFFF
 2989 013d 4C8D3402 		leaq	(%rdx,%rax), %r14
 2990 0141 4D85F6   		testq	%r14, %r14
 2991 0144 7511     		jne	.L162
 2992 0146 BE000000 		movl	$0, %esi
 2992      00
 2993 014b 488D3D00 		leaq	.Lubsan_data412(%rip), %rdi
 2993      000000
 2994 0152 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 2994      00
 2995              	.L162:
 165:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 2996              		.loc 2 165 17
 2997 0157 498D4424 		leaq	-64(%r12), %rax
 2997      C0
 2998 015c 4889C6   		movq	%rax, %rsi
 2999 015f 4C89F7   		movq	%r14, %rdi
 3000 0162 E8000000 		call	_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_
 3000      00
 165:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 3001              		.loc 2 165 14
 3002 0167 83F001   		xorl	$1, %eax
 3003 016a 89C2     		movl	%eax, %edx
 165:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 3004              		.loc 2 165 17
 3005 016c 498D4424 		leaq	-64(%r12), %rax
 3005      C0
 3006 0171 48C1E803 		shrq	$3, %rax
 3007 0175 48050080 		addq	$2147450880, %rax
 3007      FF7F
 3008 017b C600F8   		movb	$-8, (%rax)
 165:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 3009              		.loc 2 165 14
 3010 017e 84D2     		testb	%dl, %dl
 3011 0180 740D     		je	.L163
 166:/usr/include/c++/9/bits/char_traits.h ****       return __i;
 3012              		.loc 2 166 9
 3013 0182 48838568 		addq	$1, -152(%rbp)
 3013      FFFFFF01 
 165:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 3014              		.loc 2 165 7
 3015 018a E910FFFF 		jmp	.L164
 3015      FF
 3016              	.L163:
 167:/usr/include/c++/9/bits/char_traits.h ****     }
 3017              		.loc 2 167 14
 3018 018f 488B8568 		movq	-152(%rbp), %rax
 3018      FFFFFF
 3019 0196 4889C2   		movq	%rax, %rdx
 161:/usr/include/c++/9/bits/char_traits.h ****     length(const char_type* __p)
 3020              		.loc 2 161 5
 3021 0199 4939DF   		cmpq	%rbx, %r15
 3022 019c 7421     		je	.L155
 3023 019e 48C7030E 		movq	$1172321806, (%rbx)
 3023      36E045
 3024 01a5 48B8F5F5 		movabsq	$-723401728380766731, %rax
 3024      F5F5F5F5 
 3024      F5F5
 3025 01af 49898500 		movq	%rax, 2147450880(%r13)
 3025      80FF7F
 3026 01b6 488B4338 		movq	56(%rbx), %rax
 3027 01ba C60000   		movb	$0, (%rax)
 3028 01bd EB0B     		jmp	.L156
 3029              	.L155:
 3030 01bf 49C78500 		movq	$0, 2147450880(%r13)
 3030      80FF7F00 
 3030      000000
 3031              	.L156:
 168:/usr/include/c++/9/bits/char_traits.h **** 
 3032              		.loc 2 168 5
 3033 01ca 488B45C8 		movq	-56(%rbp), %rax
 3034 01ce 64483304 		xorq	%fs:40, %rax
 3034      25280000 
 3034      00
 3035 01d7 7405     		je	.L166
 3036 01d9 E8000000 		call	__stack_chk_fail@PLT
 3036      00
 3037              	.L166:
 3038 01de 4889D0   		movq	%rdx, %rax
 3039 01e1 4881C488 		addq	$136, %rsp
 3039      000000
 3040 01e8 5B       		popq	%rbx
 3041 01e9 415C     		popq	%r12
 3042 01eb 415D     		popq	%r13
 3043 01ed 415E     		popq	%r14
 3044 01ef 415F     		popq	%r15
 3045 01f1 5D       		popq	%rbp
 3046              		.cfi_def_cfa 7, 8
 3047 01f2 C3       		ret
 3048              		.cfi_endproc
 3049              	.LFE2354:
 3051              		.data
 3052              		.align 32
 3055              	.Lubsan_type18:
 3058 03a4 27737472 		.string	"'struct allocator'"
 3058      75637420 
 3058      616C6C6F 
 3058      6361746F 
 3058      722700
 3059 03b7 00000000 		.zero	41
 3059      00000000 
 3059      00000000 
 3059      00000000 
 3059      00000000 
 3060              		.section	.rodata
 3061 0353 00000000 		.align 32
 3061      00000000 
 3061      00000000 
 3061      00
 3062              	.LC9:
 3063 0360 2F757372 		.string	"/usr/include/c++/9/bits/basic_string.h"
 3063      2F696E63 
 3063      6C756465 
 3063      2F632B2B 
 3063      2F392F62 
 3064 0387 00000000 		.zero	57
 3064      00000000 
 3064      00000000 
 3064      00000000 
 3064      00000000 
 3065              		.section	.data.rel.local
 3066              		.align 32
 3069              	.Lubsan_data413:
 3070 07c0 00000000 		.quad	.LC9
 3070      00000000 
 3071 07c8 9A000000 		.long	154
 3072 07cc 0E000000 		.long	14
 3073 07d0 00000000 		.quad	.Lubsan_type18
 3073      00000000 
 3074 07d8 00       		.byte	0
 3075 07d9 04       		.byte	4
 3076 07da 00000000 		.zero	6
 3076      0000
 3077 07e0 00000000 		.zero	32
 3077      00000000 
 3077      00000000 
 3077      00000000 
 3077      00000000 
 3078              		.data
 3079              		.align 32
 3082              	.Lubsan_type19:
 3085 03e4 27737472 		.string	"'struct <unknown>'"
 3085      75637420 
 3085      3C756E6B 
 3085      6E6F776E 
 3085      3E2700
 3086 03f7 00000000 		.zero	41
 3086      00000000 
 3086      00000000 
 3086      00000000 
 3086      00000000 
 3087              		.section	.data.rel.local
 3088              		.align 32
 3091              	.Lubsan_data414:
 3092 0800 00000000 		.quad	.LC9
 3092      00000000 
 3093 0808 9A000000 		.long	154
 3094 080c 0E000000 		.long	14
 3095 0810 00000000 		.quad	.Lubsan_type19
 3095      00000000 
 3096 0818 03       		.byte	3
 3097 0819 02       		.byte	2
 3098 081a 00000000 		.zero	6
 3098      0000
 3099 0820 00000000 		.zero	32
 3099      00000000 
 3099      00000000 
 3099      00000000 
 3099      00000000 
 3100              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD2Ev,"axG",@prog
 3101              		.align 2
 3102              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD2Ev
 3104              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD2Ev:
 3105              	.LASANPC2457:
 3106              	.LFB2457:
 3107              		.file 5 "/usr/include/c++/9/bits/basic_string.h"
   1:/usr/include/c++/9/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/9/bits/basic_string.h **** 
   3:/usr/include/c++/9/bits/basic_string.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/basic_string.h **** //
   5:/usr/include/c++/9/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/basic_string.h **** // any later version.
  10:/usr/include/c++/9/bits/basic_string.h **** 
  11:/usr/include/c++/9/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/basic_string.h **** 
  16:/usr/include/c++/9/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/basic_string.h **** 
  20:/usr/include/c++/9/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/basic_string.h **** 
  25:/usr/include/c++/9/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/c++/9/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/9/bits/basic_string.h ****  */
  29:/usr/include/c++/9/bits/basic_string.h **** 
  30:/usr/include/c++/9/bits/basic_string.h **** //
  31:/usr/include/c++/9/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/c++/9/bits/basic_string.h **** //
  33:/usr/include/c++/9/bits/basic_string.h **** 
  34:/usr/include/c++/9/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/c++/9/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/c++/9/bits/basic_string.h **** 
  37:/usr/include/c++/9/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/c++/9/bits/basic_string.h **** 
  39:/usr/include/c++/9/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/9/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/c++/9/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/c++/9/bits/basic_string.h **** 
  43:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/c++/9/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/c++/9/bits/basic_string.h **** #endif
  46:/usr/include/c++/9/bits/basic_string.h **** 
  47:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
  48:/usr/include/c++/9/bits/basic_string.h **** # include <string_view>
  49:/usr/include/c++/9/bits/basic_string.h **** #endif
  50:/usr/include/c++/9/bits/basic_string.h **** 
  51:/usr/include/c++/9/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  52:/usr/include/c++/9/bits/basic_string.h **** {
  53:/usr/include/c++/9/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  54:/usr/include/c++/9/bits/basic_string.h **** 
  55:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
  56:/usr/include/c++/9/bits/basic_string.h **** // Support P0426R1 changes to char_traits in C++17.
  57:/usr/include/c++/9/bits/basic_string.h **** # define __cpp_lib_constexpr_string 201611L
  58:/usr/include/c++/9/bits/basic_string.h **** #endif
  59:/usr/include/c++/9/bits/basic_string.h **** 
  60:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  61:/usr/include/c++/9/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  62:/usr/include/c++/9/bits/basic_string.h ****   /**
  63:/usr/include/c++/9/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  64:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  65:/usr/include/c++/9/bits/basic_string.h ****    *
  66:/usr/include/c++/9/bits/basic_string.h ****    *  @ingroup strings
  67:/usr/include/c++/9/bits/basic_string.h ****    *  @ingroup sequences
  68:/usr/include/c++/9/bits/basic_string.h ****    *
  69:/usr/include/c++/9/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  70:/usr/include/c++/9/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  71:/usr/include/c++/9/bits/basic_string.h ****    *                   char_traits<_CharT>.
  72:/usr/include/c++/9/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  73:/usr/include/c++/9/bits/basic_string.h ****    *
  74:/usr/include/c++/9/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  75:/usr/include/c++/9/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  76:/usr/include/c++/9/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  77:/usr/include/c++/9/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  78:/usr/include/c++/9/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  79:/usr/include/c++/9/bits/basic_string.h ****    */
  80:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  81:/usr/include/c++/9/bits/basic_string.h ****     class basic_string
  82:/usr/include/c++/9/bits/basic_string.h ****     {
  83:/usr/include/c++/9/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  84:/usr/include/c++/9/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  85:/usr/include/c++/9/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  86:/usr/include/c++/9/bits/basic_string.h **** 
  87:/usr/include/c++/9/bits/basic_string.h ****       // Types:
  88:/usr/include/c++/9/bits/basic_string.h ****     public:
  89:/usr/include/c++/9/bits/basic_string.h ****       typedef _Traits					traits_type;
  90:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  91:/usr/include/c++/9/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  92:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  93:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  94:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  95:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  96:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  97:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  98:/usr/include/c++/9/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  99:/usr/include/c++/9/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
 100:/usr/include/c++/9/bits/basic_string.h **** 							const_iterator;
 101:/usr/include/c++/9/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 102:/usr/include/c++/9/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 103:/usr/include/c++/9/bits/basic_string.h **** 
 104:/usr/include/c++/9/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 105:/usr/include/c++/9/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 106:/usr/include/c++/9/bits/basic_string.h **** 
 107:/usr/include/c++/9/bits/basic_string.h ****     protected:
 108:/usr/include/c++/9/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 109:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus < 201103L
 110:/usr/include/c++/9/bits/basic_string.h ****       typedef iterator __const_iterator;
 111:/usr/include/c++/9/bits/basic_string.h **** #else
 112:/usr/include/c++/9/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 113:/usr/include/c++/9/bits/basic_string.h **** #endif
 114:/usr/include/c++/9/bits/basic_string.h **** 
 115:/usr/include/c++/9/bits/basic_string.h ****     private:
 116:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
 117:/usr/include/c++/9/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 118:/usr/include/c++/9/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 119:/usr/include/c++/9/bits/basic_string.h **** 
 120:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 121:/usr/include/c++/9/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 122:/usr/include/c++/9/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 123:/usr/include/c++/9/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 124:/usr/include/c++/9/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 125:/usr/include/c++/9/bits/basic_string.h **** 	  _Res>;
 126:/usr/include/c++/9/bits/basic_string.h **** 
 127:/usr/include/c++/9/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 128:/usr/include/c++/9/bits/basic_string.h ****       static __sv_type
 129:/usr/include/c++/9/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 130:/usr/include/c++/9/bits/basic_string.h ****       { return __svt; }
 131:/usr/include/c++/9/bits/basic_string.h **** 
 132:/usr/include/c++/9/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 133:/usr/include/c++/9/bits/basic_string.h ****       // allows to add an internal constructor that does not
 134:/usr/include/c++/9/bits/basic_string.h ****       // participate in overload resolution when a string_view
 135:/usr/include/c++/9/bits/basic_string.h ****       // is provided.
 136:/usr/include/c++/9/bits/basic_string.h ****       struct __sv_wrapper
 137:/usr/include/c++/9/bits/basic_string.h ****       {
 138:/usr/include/c++/9/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 139:/usr/include/c++/9/bits/basic_string.h **** 	__sv_type _M_sv;
 140:/usr/include/c++/9/bits/basic_string.h ****       };
 141:/usr/include/c++/9/bits/basic_string.h **** 
 142:/usr/include/c++/9/bits/basic_string.h ****       /**
 143:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 144:/usr/include/c++/9/bits/basic_string.h ****        *          wrapper.
 145:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 146:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 147:/usr/include/c++/9/bits/basic_string.h ****        */
 148:/usr/include/c++/9/bits/basic_string.h ****       explicit
 149:/usr/include/c++/9/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 150:/usr/include/c++/9/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 151:/usr/include/c++/9/bits/basic_string.h **** #endif
 152:/usr/include/c++/9/bits/basic_string.h **** 
 153:/usr/include/c++/9/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 154:/usr/include/c++/9/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 3108              		.loc 5 154 14
 3109              		.cfi_startproc
 3110 0000 F30F1EFA 		endbr64
 3111 0004 55       		pushq	%rbp
 3112              		.cfi_def_cfa_offset 16
 3113              		.cfi_offset 6, -16
 3114 0005 4889E5   		movq	%rsp, %rbp
 3115              		.cfi_def_cfa_register 6
 3116 0008 4883EC10 		subq	$16, %rsp
 3117 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3118              	.LBB9:
 3119              		.loc 5 154 14
 3120 0010 48837DF8 		cmpq	$0, -8(%rbp)
 3120      00
 3121 0015 7511     		jne	.L168
 3122 0017 BE000000 		movl	$0, %esi
 3122      00
 3123 001c 488D3D00 		leaq	.Lubsan_data413(%rip), %rdi
 3123      000000
 3124 0023 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3124      00
 3125              	.L168:
 3126 0028 488B45F8 		movq	-8(%rbp), %rax
 3127 002c 4889C7   		movq	%rax, %rdi
 3128 002f E8000000 		call	_ZNSaIcED2Ev@PLT
 3128      00
 3129 0034 488B45F8 		movq	-8(%rbp), %rax
 3130 0038 48837DF8 		cmpq	$0, -8(%rbp)
 3130      00
 3131 003d 740B     		je	.L169
 3132 003f 4889C2   		movq	%rax, %rdx
 3133 0042 83E207   		andl	$7, %edx
 3134 0045 4885D2   		testq	%rdx, %rdx
 3135 0048 740F     		je	.L171
 3136              	.L169:
 3137 004a 4889C6   		movq	%rax, %rsi
 3138 004d 488D3D00 		leaq	.Lubsan_data414(%rip), %rdi
 3138      000000
 3139 0054 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3139      00
 3140              	.L171:
 3141              	.LBE9:
 3142 0059 90       		nop
 3143 005a C9       		leave
 3144              		.cfi_def_cfa 7, 8
 3145 005b C3       		ret
 3146              		.cfi_endproc
 3147              	.LFE2457:
 3149              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev
 3150              		.set	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev,_ZNSt7__cxx1112basic_
 3151              		.data
 3152              		.align 32
 3155              	.Lubsan_type20:
 3158 0424 27737472 		.string	"'struct <unknown>'"
 3158      75637420 
 3158      3C756E6B 
 3158      6E6F776E 
 3158      3E2700
 3159 0437 00000000 		.zero	41
 3159      00000000 
 3159      00000000 
 3159      00000000 
 3159      00000000 
 3160              		.section	.data.rel.local
 3161              		.align 32
 3164              	.Lubsan_data415:
 3165 0840 00000000 		.quad	.LC9
 3165      00000000 
 3166 0848 11020000 		.long	529
 3167 084c 07000000 		.long	7
 3168 0850 00000000 		.quad	.Lubsan_type20
 3168      00000000 
 3169 0858 03       		.byte	3
 3170 0859 02       		.byte	2
 3171 085a 00000000 		.zero	6
 3171      0000
 3172 0860 00000000 		.zero	32
 3172      00000000 
 3172      00000000 
 3172      00000000 
 3172      00000000 
 3173              		.align 32
 3176              	.Lubsan_data416:
 3177 0880 00000000 		.quad	.LC9
 3177      00000000 
 3178 0888 12020000 		.long	530
 3179 088c 29000000 		.long	41
 3180 0890 00000000 		.quad	.Lubsan_type5
 3180      00000000 
 3181 0898 03       		.byte	3
 3182 0899 03       		.byte	3
 3183 089a 00000000 		.zero	6
 3183      0000
 3184 08a0 00000000 		.zero	32
 3184      00000000 
 3184      00000000 
 3184      00000000 
 3184      00000000 
 3185              		.data
 3186              		.align 32
 3189              	.Lubsan_type21:
 3192 0464 27737472 		.string	"'struct _Alloc_hider'"
 3192      75637420 
 3192      5F416C6C 
 3192      6F635F68 
 3192      69646572 
 3193 047a 00000000 		.zero	38
 3193      00000000 
 3193      00000000 
 3193      00000000 
 3193      00000000 
 3194              		.section	.data.rel.local
 3195              		.align 32
 3198              	.Lubsan_data417:
 3199 08c0 00000000 		.quad	.LC9
 3199      00000000 
 3200 08c8 12020000 		.long	530
 3201 08cc 29000000 		.long	41
 3202 08d0 00000000 		.quad	.Lubsan_type21
 3202      00000000 
 3203 08d8 03       		.byte	3
 3204 08d9 05       		.byte	5
 3205 08da 00000000 		.zero	6
 3205      0000
 3206 08e0 00000000 		.zero	32
 3206      00000000 
 3206      00000000 
 3206      00000000 
 3206      00000000 
 3207              		.align 32
 3210              	.Lubsan_data418:
 3211 0900 00000000 		.quad	.LC9
 3211      00000000 
 3212 0908 12020000 		.long	530
 3213 090c 29000000 		.long	41
 3214 0910 00000000 		.quad	.Lubsan_type5
 3214      00000000 
 3215 0918 03       		.byte	3
 3216 0919 04       		.byte	4
 3217 091a 00000000 		.zero	6
 3217      0000
 3218 0920 00000000 		.zero	32
 3218      00000000 
 3218      00000000 
 3218      00000000 
 3218      00000000 
 3219              		.align 32
 3222              	.Lubsan_data419:
 3223 0940 00000000 		.quad	.LC9
 3223      00000000 
 3224 0948 13020000 		.long	531
 3225 094c 09000000 		.long	9
 3226 0950 00000000 		.quad	.Lubsan_type5
 3226      00000000 
 3227 0958 03       		.byte	3
 3228 0959 04       		.byte	4
 3229 095a 00000000 		.zero	6
 3229      0000
 3230 0960 00000000 		.zero	32
 3230      00000000 
 3230      00000000 
 3230      00000000 
 3230      00000000 
 3231              		.align 32
 3234              	.Lubsan_data420:
 3235 0980 00000000 		.quad	.LC9
 3235      00000000 
 3236 0988 13020000 		.long	531
 3237 098c 09000000 		.long	9
 3238 0990 00000000 		.zero	48
 3238      00000000 
 3238      00000000 
 3238      00000000 
 3238      00000000 
 3239              		.align 32
 3242              	.Lubsan_data421:
 3243 09c0 00000000 		.quad	.LC9
 3243      00000000 
 3244 09c8 13020000 		.long	531
 3245 09cc 09000000 		.long	9
 3246 09d0 00000000 		.zero	48
 3246      00000000 
 3246      00000000 
 3246      00000000 
 3246      00000000 
 3247              		.align 32
 3250              	.Lubsan_data422:
 3251 0a00 00000000 		.quad	.LC9
 3251      00000000 
 3252 0a08 12020000 		.long	530
 3253 0a0c 29000000 		.long	41
 3254 0a10 00000000 		.quad	.Lubsan_type5
 3254      00000000 
 3255 0a18 03       		.byte	3
 3256 0a19 03       		.byte	3
 3257 0a1a 00000000 		.zero	6
 3257      0000
 3258 0a20 00000000 		.zero	32
 3258      00000000 
 3258      00000000 
 3258      00000000 
 3258      00000000 
 3259              		.align 32
 3262              	.Lubsan_data423:
 3263 0a40 00000000 		.quad	.LC9
 3263      00000000 
 3264 0a48 12020000 		.long	530
 3265 0a4c 29000000 		.long	41
 3266 0a50 00000000 		.quad	.Lubsan_type21
 3266      00000000 
 3267 0a58 03       		.byte	3
 3268 0a59 04       		.byte	4
 3269 0a5a 00000000 		.zero	6
 3269      0000
 3270 0a60 00000000 		.zero	32
 3270      00000000 
 3270      00000000 
 3270      00000000 
 3270      00000000 
 3271              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_,"axG",@progbi
 3272              		.align 2
 3273              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
 3275              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:
 3276              	.LASANPC2628:
 3277              	.LFB2628:
 155:/usr/include/c++/9/bits/basic_string.h ****       {
 156:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus < 201103L
 157:/usr/include/c++/9/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 158:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 159:/usr/include/c++/9/bits/basic_string.h **** #else
 160:/usr/include/c++/9/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 161:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 162:/usr/include/c++/9/bits/basic_string.h **** 
 163:/usr/include/c++/9/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 164:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 165:/usr/include/c++/9/bits/basic_string.h **** #endif
 166:/usr/include/c++/9/bits/basic_string.h **** 
 167:/usr/include/c++/9/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 168:/usr/include/c++/9/bits/basic_string.h ****       };
 169:/usr/include/c++/9/bits/basic_string.h **** 
 170:/usr/include/c++/9/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 171:/usr/include/c++/9/bits/basic_string.h ****       size_type		_M_string_length;
 172:/usr/include/c++/9/bits/basic_string.h **** 
 173:/usr/include/c++/9/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 174:/usr/include/c++/9/bits/basic_string.h **** 
 175:/usr/include/c++/9/bits/basic_string.h ****       union
 176:/usr/include/c++/9/bits/basic_string.h ****       {
 177:/usr/include/c++/9/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 178:/usr/include/c++/9/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 179:/usr/include/c++/9/bits/basic_string.h ****       };
 180:/usr/include/c++/9/bits/basic_string.h **** 
 181:/usr/include/c++/9/bits/basic_string.h ****       void
 182:/usr/include/c++/9/bits/basic_string.h ****       _M_data(pointer __p)
 183:/usr/include/c++/9/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 184:/usr/include/c++/9/bits/basic_string.h **** 
 185:/usr/include/c++/9/bits/basic_string.h ****       void
 186:/usr/include/c++/9/bits/basic_string.h ****       _M_length(size_type __length)
 187:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 188:/usr/include/c++/9/bits/basic_string.h **** 
 189:/usr/include/c++/9/bits/basic_string.h ****       pointer
 190:/usr/include/c++/9/bits/basic_string.h ****       _M_data() const
 191:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 192:/usr/include/c++/9/bits/basic_string.h **** 
 193:/usr/include/c++/9/bits/basic_string.h ****       pointer
 194:/usr/include/c++/9/bits/basic_string.h ****       _M_local_data()
 195:/usr/include/c++/9/bits/basic_string.h ****       {
 196:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 197:/usr/include/c++/9/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 198:/usr/include/c++/9/bits/basic_string.h **** #else
 199:/usr/include/c++/9/bits/basic_string.h **** 	return pointer(_M_local_buf);
 200:/usr/include/c++/9/bits/basic_string.h **** #endif
 201:/usr/include/c++/9/bits/basic_string.h ****       }
 202:/usr/include/c++/9/bits/basic_string.h **** 
 203:/usr/include/c++/9/bits/basic_string.h ****       const_pointer
 204:/usr/include/c++/9/bits/basic_string.h ****       _M_local_data() const
 205:/usr/include/c++/9/bits/basic_string.h ****       {
 206:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 207:/usr/include/c++/9/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 208:/usr/include/c++/9/bits/basic_string.h **** #else
 209:/usr/include/c++/9/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 210:/usr/include/c++/9/bits/basic_string.h **** #endif
 211:/usr/include/c++/9/bits/basic_string.h ****       }
 212:/usr/include/c++/9/bits/basic_string.h **** 
 213:/usr/include/c++/9/bits/basic_string.h ****       void
 214:/usr/include/c++/9/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 215:/usr/include/c++/9/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 216:/usr/include/c++/9/bits/basic_string.h **** 
 217:/usr/include/c++/9/bits/basic_string.h ****       void
 218:/usr/include/c++/9/bits/basic_string.h ****       _M_set_length(size_type __n)
 219:/usr/include/c++/9/bits/basic_string.h ****       {
 220:/usr/include/c++/9/bits/basic_string.h **** 	_M_length(__n);
 221:/usr/include/c++/9/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 222:/usr/include/c++/9/bits/basic_string.h ****       }
 223:/usr/include/c++/9/bits/basic_string.h **** 
 224:/usr/include/c++/9/bits/basic_string.h ****       bool
 225:/usr/include/c++/9/bits/basic_string.h ****       _M_is_local() const
 226:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 227:/usr/include/c++/9/bits/basic_string.h **** 
 228:/usr/include/c++/9/bits/basic_string.h ****       // Create & Destroy
 229:/usr/include/c++/9/bits/basic_string.h ****       pointer
 230:/usr/include/c++/9/bits/basic_string.h ****       _M_create(size_type&, size_type);
 231:/usr/include/c++/9/bits/basic_string.h **** 
 232:/usr/include/c++/9/bits/basic_string.h ****       void
 233:/usr/include/c++/9/bits/basic_string.h ****       _M_dispose()
 234:/usr/include/c++/9/bits/basic_string.h ****       {
 235:/usr/include/c++/9/bits/basic_string.h **** 	if (!_M_is_local())
 236:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 237:/usr/include/c++/9/bits/basic_string.h ****       }
 238:/usr/include/c++/9/bits/basic_string.h **** 
 239:/usr/include/c++/9/bits/basic_string.h ****       void
 240:/usr/include/c++/9/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 241:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 242:/usr/include/c++/9/bits/basic_string.h **** 
 243:/usr/include/c++/9/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 244:/usr/include/c++/9/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 245:/usr/include/c++/9/bits/basic_string.h ****       template<typename _InIterator>
 246:/usr/include/c++/9/bits/basic_string.h ****         void
 247:/usr/include/c++/9/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 248:/usr/include/c++/9/bits/basic_string.h **** 			 std::__false_type)
 249:/usr/include/c++/9/bits/basic_string.h **** 	{
 250:/usr/include/c++/9/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 251:/usr/include/c++/9/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 252:/usr/include/c++/9/bits/basic_string.h **** 	}
 253:/usr/include/c++/9/bits/basic_string.h **** 
 254:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 255:/usr/include/c++/9/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 256:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Integer>
 257:/usr/include/c++/9/bits/basic_string.h ****         void
 258:/usr/include/c++/9/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 259:/usr/include/c++/9/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 260:/usr/include/c++/9/bits/basic_string.h **** 
 261:/usr/include/c++/9/bits/basic_string.h ****       void
 262:/usr/include/c++/9/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 263:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__req, __c); }
 264:/usr/include/c++/9/bits/basic_string.h **** 
 265:/usr/include/c++/9/bits/basic_string.h ****       template<typename _InIterator>
 266:/usr/include/c++/9/bits/basic_string.h ****         void
 267:/usr/include/c++/9/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 268:/usr/include/c++/9/bits/basic_string.h **** 	{
 269:/usr/include/c++/9/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 270:/usr/include/c++/9/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 271:/usr/include/c++/9/bits/basic_string.h ****         }
 272:/usr/include/c++/9/bits/basic_string.h **** 
 273:/usr/include/c++/9/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 274:/usr/include/c++/9/bits/basic_string.h ****       template<typename _InIterator>
 275:/usr/include/c++/9/bits/basic_string.h ****         void
 276:/usr/include/c++/9/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 277:/usr/include/c++/9/bits/basic_string.h **** 		     std::input_iterator_tag);
 278:/usr/include/c++/9/bits/basic_string.h **** 
 279:/usr/include/c++/9/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 280:/usr/include/c++/9/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 281:/usr/include/c++/9/bits/basic_string.h ****       template<typename _FwdIterator>
 282:/usr/include/c++/9/bits/basic_string.h ****         void
 283:/usr/include/c++/9/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 284:/usr/include/c++/9/bits/basic_string.h **** 		     std::forward_iterator_tag);
 285:/usr/include/c++/9/bits/basic_string.h **** 
 286:/usr/include/c++/9/bits/basic_string.h ****       void
 287:/usr/include/c++/9/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 288:/usr/include/c++/9/bits/basic_string.h **** 
 289:/usr/include/c++/9/bits/basic_string.h ****       allocator_type&
 290:/usr/include/c++/9/bits/basic_string.h ****       _M_get_allocator()
 291:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus; }
 292:/usr/include/c++/9/bits/basic_string.h **** 
 293:/usr/include/c++/9/bits/basic_string.h ****       const allocator_type&
 294:/usr/include/c++/9/bits/basic_string.h ****       _M_get_allocator() const
 295:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus; }
 296:/usr/include/c++/9/bits/basic_string.h **** 
 297:/usr/include/c++/9/bits/basic_string.h ****     private:
 298:/usr/include/c++/9/bits/basic_string.h **** 
 299:/usr/include/c++/9/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 300:/usr/include/c++/9/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 301:/usr/include/c++/9/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 302:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 303:/usr/include/c++/9/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 304:/usr/include/c++/9/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 305:/usr/include/c++/9/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 306:/usr/include/c++/9/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 307:/usr/include/c++/9/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 308:/usr/include/c++/9/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 309:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
 310:/usr/include/c++/9/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 311:/usr/include/c++/9/bits/basic_string.h **** #endif
 312:/usr/include/c++/9/bits/basic_string.h **** 
 313:/usr/include/c++/9/bits/basic_string.h ****       size_type
 314:/usr/include/c++/9/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 315:/usr/include/c++/9/bits/basic_string.h ****       {
 316:/usr/include/c++/9/bits/basic_string.h **** 	if (__pos > this->size())
 317:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 318:/usr/include/c++/9/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 319:/usr/include/c++/9/bits/basic_string.h **** 				   __s, __pos, this->size());
 320:/usr/include/c++/9/bits/basic_string.h **** 	return __pos;
 321:/usr/include/c++/9/bits/basic_string.h ****       }
 322:/usr/include/c++/9/bits/basic_string.h **** 
 323:/usr/include/c++/9/bits/basic_string.h ****       void
 324:/usr/include/c++/9/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 325:/usr/include/c++/9/bits/basic_string.h ****       {
 326:/usr/include/c++/9/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 327:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 328:/usr/include/c++/9/bits/basic_string.h ****       }
 329:/usr/include/c++/9/bits/basic_string.h **** 
 330:/usr/include/c++/9/bits/basic_string.h **** 
 331:/usr/include/c++/9/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 332:/usr/include/c++/9/bits/basic_string.h ****       size_type
 333:/usr/include/c++/9/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 334:/usr/include/c++/9/bits/basic_string.h ****       {
 335:/usr/include/c++/9/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 336:/usr/include/c++/9/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 337:/usr/include/c++/9/bits/basic_string.h ****       }
 338:/usr/include/c++/9/bits/basic_string.h **** 
 339:/usr/include/c++/9/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 340:/usr/include/c++/9/bits/basic_string.h ****       bool
 341:/usr/include/c++/9/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 342:/usr/include/c++/9/bits/basic_string.h ****       {
 343:/usr/include/c++/9/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 344:/usr/include/c++/9/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 345:/usr/include/c++/9/bits/basic_string.h ****       }
 346:/usr/include/c++/9/bits/basic_string.h **** 
 347:/usr/include/c++/9/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 348:/usr/include/c++/9/bits/basic_string.h ****       // traits_type::copy/move/assign.
 349:/usr/include/c++/9/bits/basic_string.h ****       static void
 350:/usr/include/c++/9/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 351:/usr/include/c++/9/bits/basic_string.h ****       {
 352:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == 1)
 353:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 354:/usr/include/c++/9/bits/basic_string.h **** 	else
 355:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 356:/usr/include/c++/9/bits/basic_string.h ****       }
 357:/usr/include/c++/9/bits/basic_string.h **** 
 358:/usr/include/c++/9/bits/basic_string.h ****       static void
 359:/usr/include/c++/9/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 360:/usr/include/c++/9/bits/basic_string.h ****       {
 361:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == 1)
 362:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 363:/usr/include/c++/9/bits/basic_string.h **** 	else
 364:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 365:/usr/include/c++/9/bits/basic_string.h ****       }
 366:/usr/include/c++/9/bits/basic_string.h **** 
 367:/usr/include/c++/9/bits/basic_string.h ****       static void
 368:/usr/include/c++/9/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 369:/usr/include/c++/9/bits/basic_string.h ****       {
 370:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == 1)
 371:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 372:/usr/include/c++/9/bits/basic_string.h **** 	else
 373:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 374:/usr/include/c++/9/bits/basic_string.h ****       }
 375:/usr/include/c++/9/bits/basic_string.h **** 
 376:/usr/include/c++/9/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 377:/usr/include/c++/9/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 378:/usr/include/c++/9/bits/basic_string.h ****       template<class _Iterator>
 379:/usr/include/c++/9/bits/basic_string.h ****         static void
 380:/usr/include/c++/9/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 381:/usr/include/c++/9/bits/basic_string.h ****         {
 382:/usr/include/c++/9/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 383:/usr/include/c++/9/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 384:/usr/include/c++/9/bits/basic_string.h **** 	}
 385:/usr/include/c++/9/bits/basic_string.h **** 
 386:/usr/include/c++/9/bits/basic_string.h ****       static void
 387:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 388:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 389:/usr/include/c++/9/bits/basic_string.h **** 
 390:/usr/include/c++/9/bits/basic_string.h ****       static void
 391:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 392:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 393:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 394:/usr/include/c++/9/bits/basic_string.h **** 
 395:/usr/include/c++/9/bits/basic_string.h ****       static void
 396:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 397:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 398:/usr/include/c++/9/bits/basic_string.h **** 
 399:/usr/include/c++/9/bits/basic_string.h ****       static void
 400:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 401:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 402:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 403:/usr/include/c++/9/bits/basic_string.h **** 
 404:/usr/include/c++/9/bits/basic_string.h ****       static int
 405:/usr/include/c++/9/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 406:/usr/include/c++/9/bits/basic_string.h ****       {
 407:/usr/include/c++/9/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 408:/usr/include/c++/9/bits/basic_string.h **** 
 409:/usr/include/c++/9/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 410:/usr/include/c++/9/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 411:/usr/include/c++/9/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 412:/usr/include/c++/9/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 413:/usr/include/c++/9/bits/basic_string.h **** 	else
 414:/usr/include/c++/9/bits/basic_string.h **** 	  return int(__d);
 415:/usr/include/c++/9/bits/basic_string.h ****       }
 416:/usr/include/c++/9/bits/basic_string.h **** 
 417:/usr/include/c++/9/bits/basic_string.h ****       void
 418:/usr/include/c++/9/bits/basic_string.h ****       _M_assign(const basic_string&);
 419:/usr/include/c++/9/bits/basic_string.h **** 
 420:/usr/include/c++/9/bits/basic_string.h ****       void
 421:/usr/include/c++/9/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 422:/usr/include/c++/9/bits/basic_string.h **** 		size_type __len2);
 423:/usr/include/c++/9/bits/basic_string.h **** 
 424:/usr/include/c++/9/bits/basic_string.h ****       void
 425:/usr/include/c++/9/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 426:/usr/include/c++/9/bits/basic_string.h **** 
 427:/usr/include/c++/9/bits/basic_string.h ****     public:
 428:/usr/include/c++/9/bits/basic_string.h ****       // Construct/copy/destroy:
 429:/usr/include/c++/9/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 430:/usr/include/c++/9/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 431:/usr/include/c++/9/bits/basic_string.h **** 
 432:/usr/include/c++/9/bits/basic_string.h ****       /**
 433:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 434:/usr/include/c++/9/bits/basic_string.h ****        */
 435:/usr/include/c++/9/bits/basic_string.h ****       basic_string()
 436:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 437:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 438:/usr/include/c++/9/bits/basic_string.h ****       { _M_set_length(0); }
 439:/usr/include/c++/9/bits/basic_string.h **** 
 440:/usr/include/c++/9/bits/basic_string.h ****       /**
 441:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 442:/usr/include/c++/9/bits/basic_string.h ****        */
 443:/usr/include/c++/9/bits/basic_string.h ****       explicit
 444:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 445:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 446:/usr/include/c++/9/bits/basic_string.h ****       { _M_set_length(0); }
 447:/usr/include/c++/9/bits/basic_string.h **** 
 448:/usr/include/c++/9/bits/basic_string.h ****       /**
 449:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 450:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 451:/usr/include/c++/9/bits/basic_string.h ****        */
 452:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str)
 453:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 454:/usr/include/c++/9/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 455:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 456:/usr/include/c++/9/bits/basic_string.h **** 
 457:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 458:/usr/include/c++/9/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 459:/usr/include/c++/9/bits/basic_string.h ****       /**
 460:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 461:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 462:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 463:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 464:/usr/include/c++/9/bits/basic_string.h ****        */
 465:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 466:/usr/include/c++/9/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 467:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 468:/usr/include/c++/9/bits/basic_string.h ****       {
 469:/usr/include/c++/9/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 470:/usr/include/c++/9/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 471:/usr/include/c++/9/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 472:/usr/include/c++/9/bits/basic_string.h ****       }
 473:/usr/include/c++/9/bits/basic_string.h **** 
 474:/usr/include/c++/9/bits/basic_string.h ****       /**
 475:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 476:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 477:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 478:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 479:/usr/include/c++/9/bits/basic_string.h ****        */
 480:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 481:/usr/include/c++/9/bits/basic_string.h **** 		   size_type __n)
 482:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 483:/usr/include/c++/9/bits/basic_string.h ****       {
 484:/usr/include/c++/9/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 485:/usr/include/c++/9/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 486:/usr/include/c++/9/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 487:/usr/include/c++/9/bits/basic_string.h ****       }
 488:/usr/include/c++/9/bits/basic_string.h **** 
 489:/usr/include/c++/9/bits/basic_string.h ****       /**
 490:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 491:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 492:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 493:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 494:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 495:/usr/include/c++/9/bits/basic_string.h ****        */
 496:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 497:/usr/include/c++/9/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 498:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 499:/usr/include/c++/9/bits/basic_string.h ****       {
 500:/usr/include/c++/9/bits/basic_string.h **** 	const _CharT* __start
 501:/usr/include/c++/9/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 502:/usr/include/c++/9/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 503:/usr/include/c++/9/bits/basic_string.h ****       }
 504:/usr/include/c++/9/bits/basic_string.h **** 
 505:/usr/include/c++/9/bits/basic_string.h ****       /**
 506:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 507:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __s  Source character %array.
 508:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 509:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 510:/usr/include/c++/9/bits/basic_string.h ****        *
 511:/usr/include/c++/9/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 512:/usr/include/c++/9/bits/basic_string.h ****        *  has no special meaning.
 513:/usr/include/c++/9/bits/basic_string.h ****        */
 514:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 515:/usr/include/c++/9/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 516:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 517:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 518:/usr/include/c++/9/bits/basic_string.h **** 
 519:/usr/include/c++/9/bits/basic_string.h ****       /**
 520:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 521:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __s  Source C string.
 522:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 523:/usr/include/c++/9/bits/basic_string.h ****        */
 524:/usr/include/c++/9/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 525:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 526:/usr/include/c++/9/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 527:/usr/include/c++/9/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 528:/usr/include/c++/9/bits/basic_string.h **** #endif
 529:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 3278              		.loc 5 529 7
 3279              		.cfi_startproc
 3280              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3281              		.cfi_lsda 0x1b,.LLSDA2628
 3282 0000 F30F1EFA 		endbr64
 3283 0004 55       		pushq	%rbp
 3284              		.cfi_def_cfa_offset 16
 3285              		.cfi_offset 6, -16
 3286 0005 4889E5   		movq	%rsp, %rbp
 3287              		.cfi_def_cfa_register 6
 3288 0008 4154     		pushq	%r12
 3289 000a 53       		pushq	%rbx
 3290 000b 4883EC20 		subq	$32, %rsp
 3291              		.cfi_offset 12, -24
 3292              		.cfi_offset 3, -32
 3293 000f 48897DE8 		movq	%rdi, -24(%rbp)
 3294 0013 488975E0 		movq	%rsi, -32(%rbp)
 3295 0017 488955D8 		movq	%rdx, -40(%rbp)
 3296              		.loc 5 529 7
 3297 001b 488B45E8 		movq	-24(%rbp), %rax
 3298 001f 48837DE8 		cmpq	$0, -24(%rbp)
 3298      00
 3299 0024 740B     		je	.L173
 3300 0026 4889C2   		movq	%rax, %rdx
 3301 0029 83E207   		andl	$7, %edx
 3302 002c 4885D2   		testq	%rdx, %rdx
 3303 002f 740F     		je	.L174
 3304              	.L173:
 3305 0031 4889C6   		movq	%rax, %rsi
 3306 0034 488D3D00 		leaq	.Lubsan_data415(%rip), %rdi
 3306      000000
 3307 003b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3307      00
 3308              	.L174:
 3309              	.LBB10:
 530:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 3310              		.loc 5 530 41
 3311 0040 488B45E8 		movq	-24(%rbp), %rax
 3312 0044 48837DE8 		cmpq	$0, -24(%rbp)
 3312      00
 3313 0049 740B     		je	.L175
 3314 004b 4889C2   		movq	%rax, %rdx
 3315 004e 83E207   		andl	$7, %edx
 3316 0051 4885D2   		testq	%rdx, %rdx
 3317 0054 740F     		je	.L176
 3318              	.L175:
 3319 0056 4889C6   		movq	%rax, %rsi
 3320 0059 488D3D00 		leaq	.Lubsan_data416(%rip), %rdi
 3320      000000
 3321 0060 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3321      00
 3322              	.L176:
 3323 0065 488B5DE8 		movq	-24(%rbp), %rbx
 3324 0069 4889D8   		movq	%rbx, %rax
 3325 006c 4885DB   		testq	%rbx, %rbx
 3326 006f 740B     		je	.L177
 3327 0071 4889C2   		movq	%rax, %rdx
 3328 0074 83E207   		andl	$7, %edx
 3329 0077 4885D2   		testq	%rdx, %rdx
 3330 007a 740F     		je	.L178
 3331              	.L177:
 3332 007c 4889C6   		movq	%rax, %rsi
 3333 007f 488D3D00 		leaq	.Lubsan_data417(%rip), %rdi
 3333      000000
 3334 0086 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3334      00
 3335              	.L178:
 3336 008b 488B45E8 		movq	-24(%rbp), %rax
 3337 008f 48837DE8 		cmpq	$0, -24(%rbp)
 3337      00
 3338 0094 740B     		je	.L179
 3339 0096 4889C2   		movq	%rax, %rdx
 3340 0099 83E207   		andl	$7, %edx
 3341 009c 4885D2   		testq	%rdx, %rdx
 3342 009f 740F     		je	.L180
 3343              	.L179:
 3344 00a1 4889C6   		movq	%rax, %rsi
 3345 00a4 488D3D00 		leaq	.Lubsan_data418(%rip), %rdi
 3345      000000
 3346 00ab E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3346      00
 3347              	.L180:
 3348 00b0 488B45E8 		movq	-24(%rbp), %rax
 3349 00b4 4889C7   		movq	%rax, %rdi
 3350              	.LEHB21:
 3351 00b7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@PLT
 3351      00
 3352 00bc 4889C1   		movq	%rax, %rcx
 3353 00bf 488B45D8 		movq	-40(%rbp), %rax
 3354 00c3 4889C2   		movq	%rax, %rdx
 3355 00c6 4889CE   		movq	%rcx, %rsi
 3356 00c9 4889DF   		movq	%rbx, %rdi
 3357 00cc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@PLT
 3357      00
 3358              	.LEHE21:
 531:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 3359              		.loc 5 531 9
 3360 00d1 488B45E8 		movq	-24(%rbp), %rax
 3361 00d5 48837DE8 		cmpq	$0, -24(%rbp)
 3361      00
 3362 00da 740B     		je	.L181
 3363 00dc 4889C2   		movq	%rax, %rdx
 3364 00df 83E207   		andl	$7, %edx
 3365 00e2 4885D2   		testq	%rdx, %rdx
 3366 00e5 740F     		je	.L182
 3367              	.L181:
 3368 00e7 4889C6   		movq	%rax, %rsi
 3369 00ea 488D3D00 		leaq	.Lubsan_data419(%rip), %rdi
 3369      000000
 3370 00f1 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3370      00
 3371              	.L182:
 3372 00f6 48837DE0 		cmpq	$0, -32(%rbp)
 3372      00
 3373 00fb 7450     		je	.L183
 3374              		.loc 5 531 58 discriminator 1
 3375 00fd 488B45E0 		movq	-32(%rbp), %rax
 3376 0101 4889C7   		movq	%rax, %rdi
 3377              	.LEHB22:
 3378 0104 E8000000 		call	_ZNSt11char_traitsIcE6lengthEPKc
 3378      00
 3379 0109 4889C3   		movq	%rax, %rbx
 3380              		.loc 5 531 9 discriminator 1
 3381 010c 488B55E0 		movq	-32(%rbp), %rdx
 3382 0110 488D041A 		leaq	(%rdx,%rbx), %rax
 3383 0114 4889D9   		movq	%rbx, %rcx
 3384 0117 48F7D1   		notq	%rcx
 3385 011a 48C1E93F 		shrq	$63, %rcx
 3386 011e 84C9     		testb	%cl, %cl
 3387 0120 741D     		je	.L184
 3388              		.loc 5 531 9 is_stmt 0
 3389 0122 4839D0   		cmpq	%rdx, %rax
 3390 0125 731D     		jnb	.L185
 3391              	.L186:
 3392 0127 488B4DE0 		movq	-32(%rbp), %rcx
 3393 012b 4889C2   		movq	%rax, %rdx
 3394 012e 4889CE   		movq	%rcx, %rsi
 3395 0131 488D3D00 		leaq	.Lubsan_data420(%rip), %rdi
 3395      000000
 3396 0138 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 3396      00
 3397 013d EB05     		jmp	.L185
 3398              	.L184:
 3399              		.loc 5 531 9 discriminator 3
 3400 013f 4839D0   		cmpq	%rdx, %rax
 3401 0142 77E3     		ja	.L186
 3402              	.L185:
 3403 0144 488B45E0 		movq	-32(%rbp), %rax
 3404 0148 4801D8   		addq	%rbx, %rax
 3405 014b EB28     		jmp	.L187
 3406              	.L183:
 3407              		.loc 5 531 9 discriminator 2
 3408 014d 488B45E0 		movq	-32(%rbp), %rax
 3409 0151 488D50FF 		leaq	-1(%rax), %rdx
 3410 0155 4885C0   		testq	%rax, %rax
 3411 0158 7513     		jne	.L188
 3412              		.loc 5 531 9
 3413 015a 488B45E0 		movq	-32(%rbp), %rax
 3414 015e 4889C6   		movq	%rax, %rsi
 3415 0161 488D3D00 		leaq	.Lubsan_data421(%rip), %rdi
 3415      000000
 3416 0168 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 3416      00
 3417              	.L188:
 3418              		.loc 5 531 9 discriminator 2
 3419 016d 488B45E0 		movq	-32(%rbp), %rax
 3420 0171 4883E801 		subq	$1, %rax
 3421              	.L187:
 3422              		.loc 5 531 9 discriminator 5
 3423 0175 488B75E0 		movq	-32(%rbp), %rsi
 3424 0179 488B4DE8 		movq	-24(%rbp), %rcx
 3425 017d 4889C2   		movq	%rax, %rdx
 3426 0180 4889CF   		movq	%rcx, %rdi
 3427 0183 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_
 3427      00
 3428              	.LEHE22:
 3429              	.LBE10:
 3430              		.loc 5 531 77 is_stmt 1
 3431 0188 EB6A     		jmp	.L195
 3432              	.L194:
 3433 018a F30F1EFA 		endbr64
 3434 018e 4989C4   		movq	%rax, %r12
 3435              	.LBB11:
 530:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 3436              		.loc 5 530 41
 3437 0191 488B45E8 		movq	-24(%rbp), %rax
 3438 0195 48837DE8 		cmpq	$0, -24(%rbp)
 3438      00
 3439 019a 740B     		je	.L190
 3440 019c 4889C2   		movq	%rax, %rdx
 3441 019f 83E207   		andl	$7, %edx
 3442 01a2 4885D2   		testq	%rdx, %rdx
 3443 01a5 740F     		je	.L191
 3444              	.L190:
 3445 01a7 4889C6   		movq	%rax, %rsi
 3446 01aa 488D3D00 		leaq	.Lubsan_data422(%rip), %rdi
 3446      000000
 3447 01b1 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3447      00
 3448              	.L191:
 3449 01b6 488B5DE8 		movq	-24(%rbp), %rbx
 3450 01ba 4889D8   		movq	%rbx, %rax
 3451 01bd 4885DB   		testq	%rbx, %rbx
 3452 01c0 740B     		je	.L192
 3453 01c2 4889C2   		movq	%rax, %rdx
 3454 01c5 83E207   		andl	$7, %edx
 3455 01c8 4885D2   		testq	%rdx, %rdx
 3456 01cb 740F     		je	.L193
 3457              	.L192:
 3458 01cd 4889C6   		movq	%rax, %rsi
 3459 01d0 488D3D00 		leaq	.Lubsan_data423(%rip), %rdi
 3459      000000
 3460 01d7 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3460      00
 3461              	.L193:
 3462 01dc 4889DF   		movq	%rbx, %rdi
 3463 01df E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev
 3463      00
 3464 01e4 4C89E3   		movq	%r12, %rbx
 3465 01e7 E8000000 		call	__asan_handle_no_return@PLT
 3465      00
 3466 01ec 4889DF   		movq	%rbx, %rdi
 3467              	.LEHB23:
 3468 01ef E8000000 		call	_Unwind_Resume@PLT
 3468      00
 3469              	.LEHE23:
 3470              	.L195:
 3471              	.LBE11:
 3472              		.loc 5 531 77
 3473 01f4 4883C420 		addq	$32, %rsp
 3474 01f8 5B       		popq	%rbx
 3475 01f9 415C     		popq	%r12
 3476 01fb 5D       		popq	%rbp
 3477              		.cfi_def_cfa 7, 8
 3478 01fc C3       		ret
 3479              		.cfi_endproc
 3480              	.LFE2628:
 3481              		.section	.gcc_except_table
 3482              	.LLSDA2628:
 3483 0087 FF       		.byte	0xff
 3484 0088 FF       		.byte	0xff
 3485 0089 01       		.byte	0x1
 3486 008a 11       		.uleb128 .LLSDACSE2628-.LLSDACSB2628
 3487              	.LLSDACSB2628:
 3488 008b B701     		.uleb128 .LEHB21-.LFB2628
 3489 008d 1A       		.uleb128 .LEHE21-.LEHB21
 3490 008e 00       		.uleb128 0
 3491 008f 00       		.uleb128 0
 3492 0090 8402     		.uleb128 .LEHB22-.LFB2628
 3493 0092 8401     		.uleb128 .LEHE22-.LEHB22
 3494 0094 8A03     		.uleb128 .L194-.LFB2628
 3495 0096 00       		.uleb128 0
 3496 0097 EF03     		.uleb128 .LEHB23-.LFB2628
 3497 0099 05       		.uleb128 .LEHE23-.LEHB23
 3498 009a 00       		.uleb128 0
 3499 009b 00       		.uleb128 0
 3500              	.LLSDACSE2628:
 3501              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_,"axG",@progbi
 3503              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 3504              		.set	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_,_ZNSt7__cxx1112basic_st
 3505              		.data
 3506              		.align 32
 3509              	.Lubsan_type22:
 3512 04a4 27737472 		.string	"'struct new_allocator'"
 3512      75637420 
 3512      6E65775F 
 3512      616C6C6F 
 3512      6361746F 
 3513 04bb 00000000 		.zero	37
 3513      00000000 
 3513      00000000 
 3513      00000000 
 3513      00000000 
 3514              		.section	.rodata
 3515              		.align 32
 3516              	.LC10:
 3517 03c0 2F757372 		.string	"/usr/include/c++/9/bits/allocator.h"
 3517      2F696E63 
 3517      6C756465 
 3517      2F632B2B 
 3517      2F392F62 
 3518 03e4 00000000 		.zero	60
 3518      00000000 
 3518      00000000 
 3518      00000000 
 3518      00000000 
 3519              		.section	.data.rel.local
 3520              		.align 32
 3523              	.Lubsan_data424:
 3524 0a80 00000000 		.quad	.LC10
 3524      00000000 
 3525 0a88 89000000 		.long	137
 3526 0a8c 24000000 		.long	36
 3527 0a90 00000000 		.quad	.Lubsan_type22
 3527      00000000 
 3528 0a98 00       		.byte	0
 3529 0a99 05       		.byte	5
 3530 0a9a 00000000 		.zero	6
 3530      0000
 3531 0aa0 00000000 		.zero	32
 3531      00000000 
 3531      00000000 
 3531      00000000 
 3531      00000000 
 3532              		.section	.text._ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev,"axG",@progbits,_ZN
 3533              		.align 2
 3534              		.weak	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev
 3536              	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
 3537              	.LASANPC2631:
 3538              	.LFB2631:
 3539              		.file 6 "/usr/include/c++/9/bits/allocator.h"
   1:/usr/include/c++/9/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/9/bits/allocator.h **** 
   3:/usr/include/c++/9/bits/allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/allocator.h **** //
   5:/usr/include/c++/9/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/allocator.h **** // any later version.
  10:/usr/include/c++/9/bits/allocator.h **** 
  11:/usr/include/c++/9/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/allocator.h **** 
  16:/usr/include/c++/9/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/allocator.h **** 
  20:/usr/include/c++/9/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/allocator.h **** 
  25:/usr/include/c++/9/bits/allocator.h **** /*
  26:/usr/include/c++/9/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/9/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/9/bits/allocator.h ****  *
  29:/usr/include/c++/9/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/9/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/9/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/9/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/9/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/9/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/9/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/9/bits/allocator.h ****  */
  37:/usr/include/c++/9/bits/allocator.h **** 
  38:/usr/include/c++/9/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/9/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/9/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/9/bits/allocator.h ****  */
  42:/usr/include/c++/9/bits/allocator.h **** 
  43:/usr/include/c++/9/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/9/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/9/bits/allocator.h **** 
  46:/usr/include/c++/9/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/9/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/9/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/9/bits/allocator.h **** #endif
  51:/usr/include/c++/9/bits/allocator.h **** 
  52:/usr/include/c++/9/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
  54:/usr/include/c++/9/bits/allocator.h **** # define __cpp_lib_allocator_is_always_equal 201411
  55:/usr/include/c++/9/bits/allocator.h **** #endif
  56:/usr/include/c++/9/bits/allocator.h **** 
  57:/usr/include/c++/9/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/usr/include/c++/9/bits/allocator.h **** {
  59:/usr/include/c++/9/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/c++/9/bits/allocator.h **** 
  61:/usr/include/c++/9/bits/allocator.h ****   /**
  62:/usr/include/c++/9/bits/allocator.h ****    *  @addtogroup allocators
  63:/usr/include/c++/9/bits/allocator.h ****    *  @{
  64:/usr/include/c++/9/bits/allocator.h ****    */
  65:/usr/include/c++/9/bits/allocator.h **** 
  66:/usr/include/c++/9/bits/allocator.h ****   /// allocator<void> specialization.
  67:/usr/include/c++/9/bits/allocator.h ****   template<>
  68:/usr/include/c++/9/bits/allocator.h ****     class allocator<void>
  69:/usr/include/c++/9/bits/allocator.h ****     {
  70:/usr/include/c++/9/bits/allocator.h ****     public:
  71:/usr/include/c++/9/bits/allocator.h ****       typedef size_t      size_type;
  72:/usr/include/c++/9/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  73:/usr/include/c++/9/bits/allocator.h ****       typedef void*       pointer;
  74:/usr/include/c++/9/bits/allocator.h ****       typedef const void* const_pointer;
  75:/usr/include/c++/9/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/c++/9/bits/allocator.h **** 
  77:/usr/include/c++/9/bits/allocator.h ****       template<typename _Tp1>
  78:/usr/include/c++/9/bits/allocator.h **** 	struct rebind
  79:/usr/include/c++/9/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  80:/usr/include/c++/9/bits/allocator.h **** 
  81:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
  82:/usr/include/c++/9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  83:/usr/include/c++/9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  84:/usr/include/c++/9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  85:/usr/include/c++/9/bits/allocator.h **** 
  86:/usr/include/c++/9/bits/allocator.h ****       typedef true_type is_always_equal;
  87:/usr/include/c++/9/bits/allocator.h **** 
  88:/usr/include/c++/9/bits/allocator.h ****       template<typename _Up, typename... _Args>
  89:/usr/include/c++/9/bits/allocator.h **** 	void
  90:/usr/include/c++/9/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  91:/usr/include/c++/9/bits/allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  92:/usr/include/c++/9/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  93:/usr/include/c++/9/bits/allocator.h **** 
  94:/usr/include/c++/9/bits/allocator.h ****       template<typename _Up>
  95:/usr/include/c++/9/bits/allocator.h **** 	void
  96:/usr/include/c++/9/bits/allocator.h **** 	destroy(_Up* __p)
  97:/usr/include/c++/9/bits/allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
  98:/usr/include/c++/9/bits/allocator.h **** 	{ __p->~_Up(); }
  99:/usr/include/c++/9/bits/allocator.h **** #endif
 100:/usr/include/c++/9/bits/allocator.h ****     };
 101:/usr/include/c++/9/bits/allocator.h **** 
 102:/usr/include/c++/9/bits/allocator.h ****   /**
 103:/usr/include/c++/9/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 104:/usr/include/c++/9/bits/allocator.h ****    *
 105:/usr/include/c++/9/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 106:/usr/include/c++/9/bits/allocator.h ****    *  for further details.
 107:/usr/include/c++/9/bits/allocator.h ****    *
 108:/usr/include/c++/9/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 109:/usr/include/c++/9/bits/allocator.h ****    */
 110:/usr/include/c++/9/bits/allocator.h ****   template<typename _Tp>
 111:/usr/include/c++/9/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 112:/usr/include/c++/9/bits/allocator.h ****     {
 113:/usr/include/c++/9/bits/allocator.h ****    public:
 114:/usr/include/c++/9/bits/allocator.h ****       typedef size_t     size_type;
 115:/usr/include/c++/9/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 116:/usr/include/c++/9/bits/allocator.h ****       typedef _Tp*       pointer;
 117:/usr/include/c++/9/bits/allocator.h ****       typedef const _Tp* const_pointer;
 118:/usr/include/c++/9/bits/allocator.h ****       typedef _Tp&       reference;
 119:/usr/include/c++/9/bits/allocator.h ****       typedef const _Tp& const_reference;
 120:/usr/include/c++/9/bits/allocator.h ****       typedef _Tp        value_type;
 121:/usr/include/c++/9/bits/allocator.h **** 
 122:/usr/include/c++/9/bits/allocator.h ****       template<typename _Tp1>
 123:/usr/include/c++/9/bits/allocator.h **** 	struct rebind
 124:/usr/include/c++/9/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 125:/usr/include/c++/9/bits/allocator.h **** 
 126:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
 127:/usr/include/c++/9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 128:/usr/include/c++/9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 129:/usr/include/c++/9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 130:/usr/include/c++/9/bits/allocator.h **** 
 131:/usr/include/c++/9/bits/allocator.h ****       typedef true_type is_always_equal;
 132:/usr/include/c++/9/bits/allocator.h **** #endif
 133:/usr/include/c++/9/bits/allocator.h **** 
 134:/usr/include/c++/9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 135:/usr/include/c++/9/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 136:/usr/include/c++/9/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 137:/usr/include/c++/9/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 3540              		.loc 6 137 7
 3541              		.cfi_startproc
 3542 0000 F30F1EFA 		endbr64
 3543 0004 55       		pushq	%rbp
 3544              		.cfi_def_cfa_offset 16
 3545              		.cfi_offset 6, -16
 3546 0005 4889E5   		movq	%rsp, %rbp
 3547              		.cfi_def_cfa_register 6
 3548 0008 4883EC10 		subq	$16, %rsp
 3549 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3550              	.LBB12:
 3551              		.loc 6 137 36
 3552 0010 48837DF8 		cmpq	$0, -8(%rbp)
 3552      00
 3553 0015 7511     		jne	.L197
 3554 0017 BE000000 		movl	$0, %esi
 3554      00
 3555 001c 488D3D00 		leaq	.Lubsan_data424(%rip), %rdi
 3555      000000
 3556 0023 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3556      00
 3557              	.L197:
 3558 0028 488B45F8 		movq	-8(%rbp), %rax
 3559 002c 4889C7   		movq	%rax, %rdi
 3560 002f E8000000 		call	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev
 3560      00
 3561              	.LBE12:
 3562              		.loc 6 137 38
 3563 0034 90       		nop
 3564 0035 C9       		leave
 3565              		.cfi_def_cfa 7, 8
 3566 0036 C3       		ret
 3567              		.cfi_endproc
 3568              	.LFE2631:
 3570              		.weak	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev
 3571              		.set	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev,_ZNSaINSt7__cxx1112basic_stri
 3572              		.section	.data.rel.local
 3573              		.align 32
 3576              	.Lubsan_data425:
 3577 0ac0 00000000 		.quad	.LC10
 3577      00000000 
 3578 0ac8 98000000 		.long	152
 3579 0acc 27000000 		.long	39
 3580 0ad0 00000000 		.quad	.Lubsan_type22
 3580      00000000 
 3581 0ad8 00       		.byte	0
 3582 0ad9 04       		.byte	4
 3583 0ada 00000000 		.zero	6
 3583      0000
 3584 0ae0 00000000 		.zero	32
 3584      00000000 
 3584      00000000 
 3584      00000000 
 3584      00000000 
 3585              		.section	.text._ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev,"axG",@progbits,_ZN
 3586              		.align 2
 3587              		.weak	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 3589              	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
 3590              	.LASANPC2634:
 3591              	.LFB2634:
 138:/usr/include/c++/9/bits/allocator.h **** 
 139:/usr/include/c++/9/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 140:/usr/include/c++/9/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 142:/usr/include/c++/9/bits/allocator.h **** 
 143:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
 144:/usr/include/c++/9/bits/allocator.h ****       // Avoid implicit deprecation.
 145:/usr/include/c++/9/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 146:/usr/include/c++/9/bits/allocator.h **** #endif
 147:/usr/include/c++/9/bits/allocator.h **** 
 148:/usr/include/c++/9/bits/allocator.h ****       template<typename _Tp1>
 149:/usr/include/c++/9/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 150:/usr/include/c++/9/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 151:/usr/include/c++/9/bits/allocator.h **** 
 152:/usr/include/c++/9/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 3592              		.loc 6 152 7
 3593              		.cfi_startproc
 3594 0000 F30F1EFA 		endbr64
 3595 0004 55       		pushq	%rbp
 3596              		.cfi_def_cfa_offset 16
 3597              		.cfi_offset 6, -16
 3598 0005 4889E5   		movq	%rsp, %rbp
 3599              		.cfi_def_cfa_register 6
 3600 0008 4883EC10 		subq	$16, %rsp
 3601 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3602              	.LBB13:
 3603              		.loc 6 152 39
 3604 0010 48837DF8 		cmpq	$0, -8(%rbp)
 3604      00
 3605 0015 7511     		jne	.L199
 3606 0017 BE000000 		movl	$0, %esi
 3606      00
 3607 001c 488D3D00 		leaq	.Lubsan_data425(%rip), %rdi
 3607      000000
 3608 0023 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3608      00
 3609              	.L199:
 3610 0028 488B45F8 		movq	-8(%rbp), %rax
 3611 002c 4889C7   		movq	%rax, %rdi
 3612 002f E8000000 		call	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 3612      00
 3613              	.LBE13:
 3614 0034 90       		nop
 3615 0035 C9       		leave
 3616              		.cfi_def_cfa 7, 8
 3617 0036 C3       		ret
 3618              		.cfi_endproc
 3619              	.LFE2634:
 3621              		.weak	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 3622              		.set	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev,_ZNSaINSt7__cxx1112basic_stri
 3623              		.data
 3624              		.align 32
 3627              	.Lubsan_type23:
 3630 04e4 27737472 		.string	"'struct <unknown>'"
 3630      75637420 
 3630      3C756E6B 
 3630      6E6F776E 
 3630      3E2700
 3631 04f7 00000000 		.zero	41
 3631      00000000 
 3631      00000000 
 3631      00000000 
 3631      00000000 
 3632              		.section	.data.rel.local
 3633              		.align 32
 3636              	.Lubsan_data426:
 3637 0b00 00000000 		.quad	.LC3
 3637      00000000 
 3638 0b08 6E020000 		.long	622
 3639 0b0c 07000000 		.long	7
 3640 0b10 00000000 		.quad	.Lubsan_type23
 3640      00000000 
 3641 0b18 03       		.byte	3
 3642 0b19 02       		.byte	2
 3643 0b1a 00000000 		.zero	6
 3643      0000
 3644 0b20 00000000 		.zero	32
 3644      00000000 
 3644      00000000 
 3644      00000000 
 3644      00000000 
 3645              		.align 32
 3648              	.Lubsan_data427:
 3649 0b40 00000000 		.quad	.LC3
 3649      00000000 
 3650 0b48 70020000 		.long	624
 3651 0b4c 12000000 		.long	18
 3652 0b50 00000000 		.quad	.Lubsan_type10
 3652      00000000 
 3653 0b58 03       		.byte	3
 3654 0b59 03       		.byte	3
 3655 0b5a 00000000 		.zero	6
 3655      0000
 3656 0b60 00000000 		.zero	32
 3656      00000000 
 3656      00000000 
 3656      00000000 
 3656      00000000 
 3657              		.align 32
 3660              	.Lubsan_data428:
 3661 0b80 00000000 		.quad	.LC3
 3661      00000000 
 3662 0b88 70020000 		.long	624
 3663 0b8c 12000000 		.long	18
 3664 0b90 00000000 		.quad	.Lubsan_type8
 3664      00000000 
 3665 0b98 03       		.byte	3
 3666 0b99 05       		.byte	5
 3667 0b9a 00000000 		.zero	6
 3667      0000
 3668 0ba0 00000000 		.zero	32
 3668      00000000 
 3668      00000000 
 3668      00000000 
 3668      00000000 
 3669              		.data
 3670              		.align 32
 3673              	.Lubsan_type24:
 3676 0524 27636F6E 		.string	"'const struct allocator_type'"
 3676      73742073 
 3676      74727563 
 3676      7420616C 
 3676      6C6F6361 
 3677 0542 00000000 		.zero	62
 3677      00000000 
 3677      00000000 
 3677      00000000 
 3677      00000000 
 3678              		.section	.data.rel.local
 3679              		.align 32
 3682              	.Lubsan_data429:
 3683 0bc0 00000000 		.quad	.LC3
 3683      00000000 
 3684 0bc8 70020000 		.long	624
 3685 0bcc 12000000 		.long	18
 3686 0bd0 00000000 		.quad	.Lubsan_type24
 3686      00000000 
 3687 0bd8 00       		.byte	0
 3688 0bd9 02       		.byte	2
 3689 0bda 00000000 		.zero	6
 3689      0000
 3690 0be0 00000000 		.zero	32
 3690      00000000 
 3690      00000000 
 3690      00000000 
 3690      00000000 
 3691              		.align 32
 3694              	.Lubsan_data430:
 3695 0c00 00000000 		.quad	.LC3
 3695      00000000 
 3696 0c08 72020000 		.long	626
 3697 0c0c 02000000 		.long	2
 3698 0c10 00000000 		.quad	.Lubsan_type10
 3698      00000000 
 3699 0c18 03       		.byte	3
 3700 0c19 04       		.byte	4
 3701 0c1a 00000000 		.zero	6
 3701      0000
 3702 0c20 00000000 		.zero	32
 3702      00000000 
 3702      00000000 
 3702      00000000 
 3702      00000000 
 3703              		.align 32
 3706              	.Lubsan_data431:
 3707 0c40 00000000 		.quad	.LC3
 3707      00000000 
 3708 0c48 70020000 		.long	624
 3709 0c4c 12000000 		.long	18
 3710 0c50 00000000 		.quad	.Lubsan_type10
 3710      00000000 
 3711 0c58 03       		.byte	3
 3712 0c59 03       		.byte	3
 3713 0c5a 00000000 		.zero	6
 3713      0000
 3714 0c60 00000000 		.zero	32
 3714      00000000 
 3714      00000000 
 3714      00000000 
 3714      00000000 
 3715              		.align 32
 3718              	.Lubsan_data432:
 3719 0c80 00000000 		.quad	.LC3
 3719      00000000 
 3720 0c88 70020000 		.long	624
 3721 0c8c 12000000 		.long	18
 3722 0c90 00000000 		.quad	.Lubsan_type8
 3722      00000000 
 3723 0c98 03       		.byte	3
 3724 0c99 04       		.byte	4
 3725 0c9a 00000000 		.zero	6
 3725      0000
 3726 0ca0 00000000 		.zero	32
 3726      00000000 
 3726      00000000 
 3726      00000000 
 3726      00000000 
 3727              		.globl	__asan_stack_malloc_1
 3728              		.section	.rodata
 3729              		.align 8
 3730              	.LC11:
 3731 0420 32203438 		.string	"2 48 1 9 <unknown> 64 16 7 __l:622"
 3731      20312039 
 3731      203C756E 
 3731      6B6E6F77 
 3731      6E3E2036 
 3732              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2ESt16ini
 3733              		.align 2
 3734              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2ESt16initializer_
 3736              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2ESt16initializer_listIS5
 3737              	.LASANPC2637:
 3738              	.LFB2637:
 485:/usr/include/c++/9/bits/stl_vector.h **** #else
 486:/usr/include/c++/9/bits/stl_vector.h ****       vector() { }
 487:/usr/include/c++/9/bits/stl_vector.h **** #endif
 488:/usr/include/c++/9/bits/stl_vector.h **** 
 489:/usr/include/c++/9/bits/stl_vector.h ****       /**
 490:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 491:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 492:/usr/include/c++/9/bits/stl_vector.h ****        */
 493:/usr/include/c++/9/bits/stl_vector.h ****       explicit
 494:/usr/include/c++/9/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 495:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__a) { }
 496:/usr/include/c++/9/bits/stl_vector.h **** 
 497:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 498:/usr/include/c++/9/bits/stl_vector.h ****       /**
 499:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 500:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 501:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 502:/usr/include/c++/9/bits/stl_vector.h ****        *
 503:/usr/include/c++/9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 504:/usr/include/c++/9/bits/stl_vector.h ****        *  constructed elements.
 505:/usr/include/c++/9/bits/stl_vector.h ****        */
 506:/usr/include/c++/9/bits/stl_vector.h ****       explicit
 507:/usr/include/c++/9/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 508:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 509:/usr/include/c++/9/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 510:/usr/include/c++/9/bits/stl_vector.h **** 
 511:/usr/include/c++/9/bits/stl_vector.h ****       /**
 512:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 513:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 514:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 515:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 516:/usr/include/c++/9/bits/stl_vector.h ****        *
 517:/usr/include/c++/9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 518:/usr/include/c++/9/bits/stl_vector.h ****        */
 519:/usr/include/c++/9/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 520:/usr/include/c++/9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 521:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 522:/usr/include/c++/9/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 523:/usr/include/c++/9/bits/stl_vector.h **** #else
 524:/usr/include/c++/9/bits/stl_vector.h ****       /**
 525:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 526:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 527:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 528:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 529:/usr/include/c++/9/bits/stl_vector.h ****        *
 530:/usr/include/c++/9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 531:/usr/include/c++/9/bits/stl_vector.h ****        */
 532:/usr/include/c++/9/bits/stl_vector.h ****       explicit
 533:/usr/include/c++/9/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 534:/usr/include/c++/9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 535:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 536:/usr/include/c++/9/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 537:/usr/include/c++/9/bits/stl_vector.h **** #endif
 538:/usr/include/c++/9/bits/stl_vector.h **** 
 539:/usr/include/c++/9/bits/stl_vector.h ****       /**
 540:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 541:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 542:/usr/include/c++/9/bits/stl_vector.h ****        *
 543:/usr/include/c++/9/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 544:/usr/include/c++/9/bits/stl_vector.h ****        *  @a __x  will not be copied
 545:/usr/include/c++/9/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 546:/usr/include/c++/9/bits/stl_vector.h ****        *
 547:/usr/include/c++/9/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 548:/usr/include/c++/9/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 549:/usr/include/c++/9/bits/stl_vector.h ****        */
 550:/usr/include/c++/9/bits/stl_vector.h ****       vector(const vector& __x)
 551:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__x.size(),
 552:/usr/include/c++/9/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 553:/usr/include/c++/9/bits/stl_vector.h ****       {
 554:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 555:/usr/include/c++/9/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 556:/usr/include/c++/9/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 557:/usr/include/c++/9/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 558:/usr/include/c++/9/bits/stl_vector.h ****       }
 559:/usr/include/c++/9/bits/stl_vector.h **** 
 560:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 561:/usr/include/c++/9/bits/stl_vector.h ****       /**
 562:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 563:/usr/include/c++/9/bits/stl_vector.h ****        *
 564:/usr/include/c++/9/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 565:/usr/include/c++/9/bits/stl_vector.h ****        *  moved instance.
 566:/usr/include/c++/9/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 567:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector.
 568:/usr/include/c++/9/bits/stl_vector.h ****        */
 569:/usr/include/c++/9/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 570:/usr/include/c++/9/bits/stl_vector.h **** 
 571:/usr/include/c++/9/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 572:/usr/include/c++/9/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 573:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 574:/usr/include/c++/9/bits/stl_vector.h ****       {
 575:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 576:/usr/include/c++/9/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 577:/usr/include/c++/9/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 578:/usr/include/c++/9/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 579:/usr/include/c++/9/bits/stl_vector.h ****       }
 580:/usr/include/c++/9/bits/stl_vector.h **** 
 581:/usr/include/c++/9/bits/stl_vector.h ****     private:
 582:/usr/include/c++/9/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 583:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 584:/usr/include/c++/9/bits/stl_vector.h ****       { }
 585:/usr/include/c++/9/bits/stl_vector.h **** 
 586:/usr/include/c++/9/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 587:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__m)
 588:/usr/include/c++/9/bits/stl_vector.h ****       {
 589:/usr/include/c++/9/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 590:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 591:/usr/include/c++/9/bits/stl_vector.h **** 	else if (!__rv.empty())
 592:/usr/include/c++/9/bits/stl_vector.h **** 	  {
 593:/usr/include/c++/9/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 594:/usr/include/c++/9/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 595:/usr/include/c++/9/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 596:/usr/include/c++/9/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 597:/usr/include/c++/9/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 598:/usr/include/c++/9/bits/stl_vector.h **** 	    __rv.clear();
 599:/usr/include/c++/9/bits/stl_vector.h **** 	  }
 600:/usr/include/c++/9/bits/stl_vector.h ****       }
 601:/usr/include/c++/9/bits/stl_vector.h **** 
 602:/usr/include/c++/9/bits/stl_vector.h ****     public:
 603:/usr/include/c++/9/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 604:/usr/include/c++/9/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 605:/usr/include/c++/9/bits/stl_vector.h ****       noexcept( noexcept(
 606:/usr/include/c++/9/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 607:/usr/include/c++/9/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 608:/usr/include/c++/9/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 609:/usr/include/c++/9/bits/stl_vector.h ****       { }
 610:/usr/include/c++/9/bits/stl_vector.h **** 
 611:/usr/include/c++/9/bits/stl_vector.h ****       /**
 612:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 613:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 614:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 615:/usr/include/c++/9/bits/stl_vector.h ****        *
 616:/usr/include/c++/9/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 617:/usr/include/c++/9/bits/stl_vector.h ****        *  initializer_list @a __l.
 618:/usr/include/c++/9/bits/stl_vector.h ****        *
 619:/usr/include/c++/9/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 620:/usr/include/c++/9/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 621:/usr/include/c++/9/bits/stl_vector.h ****        */
 622:/usr/include/c++/9/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 3739              		.loc 4 622 7
 3740              		.cfi_startproc
 3741              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3742              		.cfi_lsda 0x1b,.LLSDA2637
 3743 0000 F30F1EFA 		endbr64
 3744 0004 55       		pushq	%rbp
 3745              		.cfi_def_cfa_offset 16
 3746              		.cfi_offset 6, -16
 3747 0005 4889E5   		movq	%rsp, %rbp
 3748              		.cfi_def_cfa_register 6
 3749 0008 4157     		pushq	%r15
 3750 000a 4156     		pushq	%r14
 3751 000c 4155     		pushq	%r13
 3752 000e 4154     		pushq	%r12
 3753 0010 53       		pushq	%rbx
 3754 0011 4881ECA8 		subq	$168, %rsp
 3754      000000
 3755              		.cfi_offset 15, -24
 3756              		.cfi_offset 14, -32
 3757              		.cfi_offset 13, -40
 3758              		.cfi_offset 12, -48
 3759              		.cfi_offset 3, -56
 3760 0018 4889BD48 		movq	%rdi, -184(%rbp)
 3760      FFFFFF
 3761 001f 4889F0   		movq	%rsi, %rax
 3762 0022 4889D6   		movq	%rdx, %rsi
 3763 0025 4889F2   		movq	%rsi, %rdx
 3764 0028 48898530 		movq	%rax, -208(%rbp)
 3764      FFFFFF
 3765 002f 48899538 		movq	%rdx, -200(%rbp)
 3765      FFFFFF
 3766 0036 48898D40 		movq	%rcx, -192(%rbp)
 3766      FFFFFF
 3767 003d 488D9D50 		leaq	-176(%rbp), %rbx
 3767      FFFFFF
 3768 0044 4989DF   		movq	%rbx, %r15
 3769 0047 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 3769      000000
 3770 004e 7412     		je	.L200
 3771 0050 BF600000 		movl	$96, %edi
 3771      00
 3772 0055 E8000000 		call	__asan_stack_malloc_1@PLT
 3772      00
 3773              	.LVL4:
 3774 005a 4885C0   		testq	%rax, %rax
 3775 005d 7403     		je	.L200
 3776 005f 4889C3   		movq	%rax, %rbx
 3777              	.L200:
 3778 0062 488D8380 		leaq	128(%rbx), %rax
 3778      000000
 3779 0069 4989C5   		movq	%rax, %r13
 3780 006c 48C703B3 		movq	$1102416563, (%rbx)
 3780      8AB541
 3781 0073 488D0500 		leaq	.LC11(%rip), %rax
 3781      000000
 3782 007a 48894308 		movq	%rax, 8(%rbx)
 3783 007e 488D057B 		leaq	.LASANPC2637(%rip), %rax
 3783      FFFFFF
 3784 0085 48894310 		movq	%rax, 16(%rbx)
 3785 0089 4989DC   		movq	%rbx, %r12
 3786 008c 49C1EC03 		shrq	$3, %r12
 3787 0090 41C78424 		movl	$-235802127, 2147450880(%r12)
 3787      0080FF7F 
 3787      F1F1F1F1 
 3788 009c 41C78424 		movl	$-234753551, 2147450884(%r12)
 3788      0480FF7F 
 3788      F1F101F2 
 3789 00a8 41C78424 		movl	$-202178560, 2147450888(%r12)
 3789      0880FF7F 
 3789      0000F3F3 
 3790              		.loc 4 622 7
 3791 00b4 64488B04 		movq	%fs:40, %rax
 3791      25280000 
 3791      00
 3792 00bd 488945C8 		movq	%rax, -56(%rbp)
 3793 00c1 31C0     		xorl	%eax, %eax
 3794              		.loc 4 622 43
 3795 00c3 488B8530 		movq	-208(%rbp), %rax
 3795      FFFFFF
 3796 00ca 488B9538 		movq	-200(%rbp), %rdx
 3796      FFFFFF
 3797 00d1 498945C0 		movq	%rax, -64(%r13)
 3798 00d5 498955C8 		movq	%rdx, -56(%r13)
 3799              		.loc 4 622 7
 3800 00d9 488B8548 		movq	-184(%rbp), %rax
 3800      FFFFFF
 3801 00e0 4883BD48 		cmpq	$0, -184(%rbp)
 3801      FFFFFF00 
 3802 00e8 740B     		je	.L204
 3803 00ea 4889C2   		movq	%rax, %rdx
 3804 00ed 83E207   		andl	$7, %edx
 3805 00f0 4885D2   		testq	%rdx, %rdx
 3806 00f3 740F     		je	.L205
 3807              	.L204:
 3808 00f5 4889C6   		movq	%rax, %rsi
 3809 00f8 488D3D00 		leaq	.Lubsan_data426(%rip), %rdi
 3809      000000
 3810 00ff E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3810      00
 3811              	.L205:
 3812              	.LBB14:
 623:/usr/include/c++/9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 624:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__a)
 3813              		.loc 4 624 18
 3814 0104 488B8548 		movq	-184(%rbp), %rax
 3814      FFFFFF
 3815 010b 4883BD48 		cmpq	$0, -184(%rbp)
 3815      FFFFFF00 
 3816 0113 740B     		je	.L206
 3817 0115 4889C2   		movq	%rax, %rdx
 3818 0118 83E207   		andl	$7, %edx
 3819 011b 4885D2   		testq	%rdx, %rdx
 3820 011e 740F     		je	.L207
 3821              	.L206:
 3822 0120 4889C6   		movq	%rax, %rsi
 3823 0123 488D3D00 		leaq	.Lubsan_data427(%rip), %rdi
 3823      000000
 3824 012a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3824      00
 3825              	.L207:
 3826 012f 4C8BB548 		movq	-184(%rbp), %r14
 3826      FFFFFF
 3827 0136 4C89F0   		movq	%r14, %rax
 3828 0139 4D85F6   		testq	%r14, %r14
 3829 013c 740B     		je	.L208
 3830 013e 4889C2   		movq	%rax, %rdx
 3831 0141 83E207   		andl	$7, %edx
 3832 0144 4885D2   		testq	%rdx, %rdx
 3833 0147 740F     		je	.L209
 3834              	.L208:
 3835 0149 4889C6   		movq	%rax, %rsi
 3836 014c 488D3D00 		leaq	.Lubsan_data428(%rip), %rdi
 3836      000000
 3837 0153 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3837      00
 3838              	.L209:
 3839 0158 4883BD40 		cmpq	$0, -192(%rbp)
 3839      FFFFFF00 
 3840 0160 7511     		jne	.L210
 3841 0162 BE000000 		movl	$0, %esi
 3841      00
 3842 0167 488D3D00 		leaq	.Lubsan_data429(%rip), %rdi
 3842      000000
 3843 016e E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3843      00
 3844              	.L210:
 3845 0173 488B8540 		movq	-192(%rbp), %rax
 3845      FFFFFF
 3846 017a 4889C6   		movq	%rax, %rsi
 3847 017d 4C89F7   		movq	%r14, %rdi
 3848 0180 E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2ERKS6_
 3848      00
 625:/usr/include/c++/9/bits/stl_vector.h ****       {
 626:/usr/include/c++/9/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 3849              		.loc 4 626 2
 3850 0185 488B8548 		movq	-184(%rbp), %rax
 3850      FFFFFF
 3851 018c 4883BD48 		cmpq	$0, -184(%rbp)
 3851      FFFFFF00 
 3852 0194 740B     		je	.L211
 3853 0196 4889C2   		movq	%rax, %rdx
 3854 0199 83E207   		andl	$7, %edx
 3855 019c 4885D2   		testq	%rdx, %rdx
 3856 019f 740F     		je	.L212
 3857              	.L211:
 3858 01a1 4889C6   		movq	%rax, %rsi
 3859 01a4 488D3D00 		leaq	.Lubsan_data430(%rip), %rdi
 3859      000000
 3860 01ab E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3860      00
 3861              	.L212:
 3862 01b0 498D45C0 		leaq	-64(%r13), %rax
 3863 01b4 4889C7   		movq	%rax, %rdi
 3864 01b7 E8000000 		call	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3endEv
 3864      00
 3865 01bc 4989C6   		movq	%rax, %r14
 3866 01bf 498D45C0 		leaq	-64(%r13), %rax
 3867 01c3 4889C7   		movq	%rax, %rdi
 3868 01c6 E8000000 		call	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv
 3868      00
 3869 01cb 4889C1   		movq	%rax, %rcx
 3870 01ce 488B8548 		movq	-184(%rbp), %rax
 3870      FFFFFF
 3871 01d5 4C89F2   		movq	%r14, %rdx
 3872 01d8 4889CE   		movq	%rcx, %rsi
 3873 01db 4889C7   		movq	%rax, %rdi
 3874              	.LEHB24:
 3875 01de E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializ
 3875      00
 3876              	.LEHE24:
 3877              	.LBE14:
 627:/usr/include/c++/9/bits/stl_vector.h **** 			    random_access_iterator_tag());
 628:/usr/include/c++/9/bits/stl_vector.h ****       }
 3878              		.loc 4 628 7
 3879 01e3 E9850000 		jmp	.L220
 3879      00
 3880              	.L219:
 3881 01e8 F30F1EFA 		endbr64
 3882              	.LBB15:
 626:/usr/include/c++/9/bits/stl_vector.h **** 			    random_access_iterator_tag());
 3883              		.loc 4 626 2
 3884 01ec 498D55B0 		leaq	-80(%r13), %rdx
 3885 01f0 48C1EA03 		shrq	$3, %rdx
 3886 01f4 4881C200 		addq	$2147450880, %rdx
 3886      80FF7F
 3887 01fb C602F8   		movb	$-8, (%rdx)
 3888 01fe 4989C4   		movq	%rax, %r12
 624:/usr/include/c++/9/bits/stl_vector.h ****       {
 3889              		.loc 4 624 18
 3890 0201 488B8548 		movq	-184(%rbp), %rax
 3890      FFFFFF
 3891 0208 4883BD48 		cmpq	$0, -184(%rbp)
 3891      FFFFFF00 
 3892 0210 740B     		je	.L214
 3893 0212 4889C2   		movq	%rax, %rdx
 3894 0215 83E207   		andl	$7, %edx
 3895 0218 4885D2   		testq	%rdx, %rdx
 3896 021b 740F     		je	.L215
 3897              	.L214:
 3898 021d 4889C6   		movq	%rax, %rsi
 3899 0220 488D3D00 		leaq	.Lubsan_data431(%rip), %rdi
 3899      000000
 3900 0227 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3900      00
 3901              	.L215:
 3902 022c 488B9D48 		movq	-184(%rbp), %rbx
 3902      FFFFFF
 3903 0233 4889D8   		movq	%rbx, %rax
 3904 0236 4885DB   		testq	%rbx, %rbx
 3905 0239 740B     		je	.L216
 3906 023b 4889C2   		movq	%rax, %rdx
 3907 023e 83E207   		andl	$7, %edx
 3908 0241 4885D2   		testq	%rdx, %rdx
 3909 0244 740F     		je	.L217
 3910              	.L216:
 3911 0246 4889C6   		movq	%rax, %rsi
 3912 0249 488D3D00 		leaq	.Lubsan_data432(%rip), %rdi
 3912      000000
 3913 0250 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 3913      00
 3914              	.L217:
 3915 0255 4889DF   		movq	%rbx, %rdi
 3916 0258 E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 3916      00
 3917 025d 4C89E3   		movq	%r12, %rbx
 3918 0260 E8000000 		call	__asan_handle_no_return@PLT
 3918      00
 3919 0265 4889DF   		movq	%rbx, %rdi
 3920              	.LEHB25:
 3921 0268 E8000000 		call	_Unwind_Resume@PLT
 3921      00
 3922              	.LEHE25:
 3923              	.L220:
 3924              	.LBE15:
 622:/usr/include/c++/9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 3925              		.loc 4 622 7
 3926 026d 4939DF   		cmpq	%rbx, %r15
 3927 0270 742E     		je	.L201
 3928 0272 48C7030E 		movq	$1172321806, (%rbx)
 3928      36E045
 3929 0279 48B8F5F5 		movabsq	$-723401728380766731, %rax
 3929      F5F5F5F5 
 3929      F5F5
 3930 0283 49898424 		movq	%rax, 2147450880(%r12)
 3930      0080FF7F 
 3931 028b 41C78424 		movl	$-168430091, 2147450888(%r12)
 3931      0880FF7F 
 3931      F5F5F5F5 
 3932 0297 488B4378 		movq	120(%rbx), %rax
 3933 029b C60000   		movb	$0, (%rax)
 3934 029e EB18     		jmp	.L202
 3935              	.L201:
 3936 02a0 49C78424 		movq	$0, 2147450880(%r12)
 3936      0080FF7F 
 3936      00000000 
 3937 02ac 41C78424 		movl	$0, 2147450888(%r12)
 3937      0880FF7F 
 3937      00000000 
 3938              	.L202:
 3939              		.loc 4 628 7
 3940 02b8 488B45C8 		movq	-56(%rbp), %rax
 3941 02bc 64483304 		xorq	%fs:40, %rax
 3941      25280000 
 3941      00
 3942 02c5 7405     		je	.L218
 3943 02c7 E8000000 		call	__stack_chk_fail@PLT
 3943      00
 3944              	.L218:
 3945 02cc 4881C4A8 		addq	$168, %rsp
 3945      000000
 3946 02d3 5B       		popq	%rbx
 3947 02d4 415C     		popq	%r12
 3948 02d6 415D     		popq	%r13
 3949 02d8 415E     		popq	%r14
 3950 02da 415F     		popq	%r15
 3951 02dc 5D       		popq	%rbp
 3952              		.cfi_def_cfa 7, 8
 3953 02dd C3       		ret
 3954              		.cfi_endproc
 3955              	.LFE2637:
 3956              		.section	.gcc_except_table
 3957              	.LLSDA2637:
 3958 009c FF       		.byte	0xff
 3959 009d FF       		.byte	0xff
 3960 009e 01       		.byte	0x1
 3961 009f 0B       		.uleb128 .LLSDACSE2637-.LLSDACSB2637
 3962              	.LLSDACSB2637:
 3963 00a0 DE03     		.uleb128 .LEHB24-.LFB2637
 3964 00a2 05       		.uleb128 .LEHE24-.LEHB24
 3965 00a3 E803     		.uleb128 .L219-.LFB2637
 3966 00a5 00       		.uleb128 0
 3967 00a6 E804     		.uleb128 .LEHB25-.LFB2637
 3968 00a8 05       		.uleb128 .LEHE25-.LEHB25
 3969 00a9 00       		.uleb128 0
 3970 00aa 00       		.uleb128 0
 3971              	.LLSDACSE2637:
 3972              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2ESt16ini
 3974              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_
 3975              		.set	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_l
 3976              		.section	.data.rel.local
 3977              		.align 32
 3980              	.Lubsan_data433:
 3981 0cc0 00000000 		.quad	.LC3
 3981      00000000 
 3982 0cc8 A6020000 		.long	678
 3983 0ccc 1C000000 		.long	28
 3984 0cd0 00000000 		.quad	.Lubsan_type10
 3984      00000000 
 3985 0cd8 03       		.byte	3
 3986 0cd9 03       		.byte	3
 3987 0cda 00000000 		.zero	6
 3987      0000
 3988 0ce0 00000000 		.zero	32
 3988      00000000 
 3988      00000000 
 3988      00000000 
 3988      00000000 
 3989              		.align 32
 3992              	.Lubsan_data434:
 3993 0d00 00000000 		.quad	.LC3
 3993      00000000 
 3994 0d08 A6020000 		.long	678
 3995 0d0c 1C000000 		.long	28
 3996 0d10 00000000 		.quad	.Lubsan_type8
 3996      00000000 
 3997 0d18 03       		.byte	3
 3998 0d19 04       		.byte	4
 3999 0d1a 00000000 		.zero	6
 3999      0000
 4000 0d20 00000000 		.zero	32
 4000      00000000 
 4000      00000000 
 4000      00000000 
 4000      00000000 
 4001              		.align 32
 4004              	.Lubsan_data435:
 4005 0d40 00000000 		.quad	.LC3
 4005      00000000 
 4006 0d48 A5020000 		.long	677
 4007 0d4c 0F000000 		.long	15
 4008 0d50 00000000 		.quad	.Lubsan_type6
 4008      00000000 
 4009 0d58 00       		.byte	0
 4010 0d59 02       		.byte	2
 4011 0d5a 00000000 		.zero	6
 4011      0000
 4012 0d60 00000000 		.zero	32
 4012      00000000 
 4012      00000000 
 4012      00000000 
 4012      00000000 
 4013              		.align 32
 4016              	.Lubsan_data436:
 4017 0d80 00000000 		.quad	.LC3
 4017      00000000 
 4018 0d88 A5020000 		.long	677
 4019 0d8c 0F000000 		.long	15
 4020 0d90 00000000 		.quad	.Lubsan_type10
 4020      00000000 
 4021 0d98 03       		.byte	3
 4022 0d99 03       		.byte	3
 4023 0d9a 00000000 		.zero	6
 4023      0000
 4024 0da0 00000000 		.zero	32
 4024      00000000 
 4024      00000000 
 4024      00000000 
 4024      00000000 
 4025              		.align 32
 4028              	.Lubsan_data437:
 4029 0dc0 00000000 		.quad	.LC3
 4029      00000000 
 4030 0dc8 A5020000 		.long	677
 4031 0dcc 0F000000 		.long	15
 4032 0dd0 00000000 		.zero	48
 4032      00000000 
 4032      00000000 
 4032      00000000 
 4032      00000000 
 4033              		.align 32
 4036              	.Lubsan_data438:
 4037 0e00 00000000 		.quad	.LC3
 4037      00000000 
 4038 0e08 A5020000 		.long	677
 4039 0e0c 0F000000 		.long	15
 4040 0e10 00000000 		.quad	.Lubsan_type10
 4040      00000000 
 4041 0e18 03       		.byte	3
 4042 0e19 03       		.byte	3
 4043 0e1a 00000000 		.zero	6
 4043      0000
 4044 0e20 00000000 		.zero	32
 4044      00000000 
 4044      00000000 
 4044      00000000 
 4044      00000000 
 4045              		.align 32
 4048              	.Lubsan_data439:
 4049 0e40 00000000 		.quad	.LC3
 4049      00000000 
 4050 0e48 A8020000 		.long	680
 4051 0e4c 07000000 		.long	7
 4052 0e50 00000000 		.quad	.Lubsan_type10
 4052      00000000 
 4053 0e58 03       		.byte	3
 4054 0e59 03       		.byte	3
 4055 0e5a 00000000 		.zero	6
 4055      0000
 4056 0e60 00000000 		.zero	32
 4056      00000000 
 4056      00000000 
 4056      00000000 
 4056      00000000 
 4057              		.align 32
 4060              	.Lubsan_data440:
 4061 0e80 00000000 		.quad	.LC3
 4061      00000000 
 4062 0e88 A8020000 		.long	680
 4063 0e8c 07000000 		.long	7
 4064 0e90 00000000 		.quad	.Lubsan_type8
 4064      00000000 
 4065 0e98 03       		.byte	3
 4066 0e99 04       		.byte	4
 4067 0e9a 00000000 		.zero	6
 4067      0000
 4068 0ea0 00000000 		.zero	32
 4068      00000000 
 4068      00000000 
 4068      00000000 
 4068      00000000 
 4069              		.align 32
 4072              	.Lubsan_data441:
 4073 0ec0 00000000 		.quad	.LC3
 4073      00000000 
 4074 0ec8 A8020000 		.long	680
 4075 0ecc 07000000 		.long	7
 4076 0ed0 00000000 		.quad	.Lubsan_type23
 4076      00000000 
 4077 0ed8 03       		.byte	3
 4078 0ed9 02       		.byte	2
 4079 0eda 00000000 		.zero	6
 4079      0000
 4080 0ee0 00000000 		.zero	32
 4080      00000000 
 4080      00000000 
 4080      00000000 
 4080      00000000 
 4081              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev,"axG"
 4082              		.align 2
 4083              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 4085              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:
 4086              	.LASANPC2640:
 4087              	.LFB2640:
 629:/usr/include/c++/9/bits/stl_vector.h **** #endif
 630:/usr/include/c++/9/bits/stl_vector.h **** 
 631:/usr/include/c++/9/bits/stl_vector.h ****       /**
 632:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 633:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 634:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 635:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 636:/usr/include/c++/9/bits/stl_vector.h ****        *
 637:/usr/include/c++/9/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 638:/usr/include/c++/9/bits/stl_vector.h ****        *  [first,last).
 639:/usr/include/c++/9/bits/stl_vector.h ****        *
 640:/usr/include/c++/9/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 641:/usr/include/c++/9/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 642:/usr/include/c++/9/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 643:/usr/include/c++/9/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 644:/usr/include/c++/9/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 645:/usr/include/c++/9/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 646:/usr/include/c++/9/bits/stl_vector.h ****        */
 647:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 648:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator,
 649:/usr/include/c++/9/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 650:/usr/include/c++/9/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 651:/usr/include/c++/9/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 652:/usr/include/c++/9/bits/stl_vector.h **** 	: _Base(__a)
 653:/usr/include/c++/9/bits/stl_vector.h **** 	{
 654:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 655:/usr/include/c++/9/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 656:/usr/include/c++/9/bits/stl_vector.h **** 	}
 657:/usr/include/c++/9/bits/stl_vector.h **** #else
 658:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
 659:/usr/include/c++/9/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 660:/usr/include/c++/9/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 661:/usr/include/c++/9/bits/stl_vector.h **** 	: _Base(__a)
 662:/usr/include/c++/9/bits/stl_vector.h **** 	{
 663:/usr/include/c++/9/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 664:/usr/include/c++/9/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 665:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 666:/usr/include/c++/9/bits/stl_vector.h **** 	}
 667:/usr/include/c++/9/bits/stl_vector.h **** #endif
 668:/usr/include/c++/9/bits/stl_vector.h **** 
 669:/usr/include/c++/9/bits/stl_vector.h ****       /**
 670:/usr/include/c++/9/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 671:/usr/include/c++/9/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 672:/usr/include/c++/9/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 673:/usr/include/c++/9/bits/stl_vector.h ****        *  responsibility.
 674:/usr/include/c++/9/bits/stl_vector.h ****        */
 675:/usr/include/c++/9/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 4088              		.loc 4 675 7
 4089              		.cfi_startproc
 4090              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4091              		.cfi_lsda 0x1b,.LLSDA2640
 4092 0000 F30F1EFA 		endbr64
 4093 0004 55       		pushq	%rbp
 4094              		.cfi_def_cfa_offset 16
 4095              		.cfi_offset 6, -16
 4096 0005 4889E5   		movq	%rsp, %rbp
 4097              		.cfi_def_cfa_register 6
 4098 0008 4154     		pushq	%r12
 4099 000a 53       		pushq	%rbx
 4100 000b 4883EC10 		subq	$16, %rsp
 4101              		.cfi_offset 12, -24
 4102              		.cfi_offset 3, -32
 4103 000f 48897DE8 		movq	%rdi, -24(%rbp)
 4104              	.LBB16:
 676:/usr/include/c++/9/bits/stl_vector.h ****       {
 677:/usr/include/c++/9/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 678:/usr/include/c++/9/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 4105              		.loc 4 678 28
 4106 0013 488B45E8 		movq	-24(%rbp), %rax
 4107 0017 48837DE8 		cmpq	$0, -24(%rbp)
 4107      00
 4108 001c 740B     		je	.L222
 4109 001e 4889C2   		movq	%rax, %rdx
 4110 0021 83E207   		andl	$7, %edx
 4111 0024 4885D2   		testq	%rdx, %rdx
 4112 0027 740F     		je	.L223
 4113              	.L222:
 4114 0029 4889C6   		movq	%rax, %rsi
 4115 002c 488D3D00 		leaq	.Lubsan_data433(%rip), %rdi
 4115      000000
 4116 0033 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4116      00
 4117              	.L223:
 4118 0038 488B5DE8 		movq	-24(%rbp), %rbx
 4119 003c 4889D8   		movq	%rbx, %rax
 4120 003f 4885DB   		testq	%rbx, %rbx
 4121 0042 740B     		je	.L224
 4122 0044 4889C2   		movq	%rax, %rdx
 4123 0047 83E207   		andl	$7, %edx
 4124 004a 4885D2   		testq	%rdx, %rdx
 4125 004d 740F     		je	.L225
 4126              	.L224:
 4127 004f 4889C6   		movq	%rax, %rsi
 4128 0052 488D3D00 		leaq	.Lubsan_data434(%rip), %rdi
 4128      000000
 4129 0059 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4129      00
 4130              	.L225:
 4131 005e 4889DF   		movq	%rbx, %rdi
 4132 0061 E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_a
 4132      00
 4133 0066 4889C3   		movq	%rax, %rbx
 677:/usr/include/c++/9/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 4134              		.loc 4 677 15
 4135 0069 4885DB   		testq	%rbx, %rbx
 4136 006c 7511     		jne	.L226
 4137 006e BE000000 		movl	$0, %esi
 4137      00
 4138 0073 488D3D00 		leaq	.Lubsan_data435(%rip), %rdi
 4138      000000
 4139 007a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4139      00
 4140              	.L226:
 4141 007f 488B45E8 		movq	-24(%rbp), %rax
 4142 0083 48837DE8 		cmpq	$0, -24(%rbp)
 4142      00
 4143 0088 740B     		je	.L227
 4144 008a 4889C2   		movq	%rax, %rdx
 4145 008d 83E207   		andl	$7, %edx
 4146 0090 4885D2   		testq	%rdx, %rdx
 4147 0093 740F     		je	.L228
 4148              	.L227:
 4149 0095 4889C6   		movq	%rax, %rsi
 4150 0098 488D3D00 		leaq	.Lubsan_data436(%rip), %rdi
 4150      000000
 4151 009f E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4151      00
 4152              	.L228:
 4153 00a4 488B45E8 		movq	-24(%rbp), %rax
 4154 00a8 488D5008 		leaq	8(%rax), %rdx
 4155 00ac 4883F8F8 		cmpq	$-8, %rax
 4156 00b0 7213     		jb	.L229
 4157 00b2 488B45E8 		movq	-24(%rbp), %rax
 4158 00b6 4889C6   		movq	%rax, %rsi
 4159 00b9 488D3D00 		leaq	.Lubsan_data437(%rip), %rdi
 4159      000000
 4160 00c0 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 4160      00
 4161              	.L229:
 4162 00c5 488B45E8 		movq	-24(%rbp), %rax
 4163 00c9 4883C008 		addq	$8, %rax
 4164 00cd 4889C2   		movq	%rax, %rdx
 4165 00d0 48C1EA03 		shrq	$3, %rdx
 4166 00d4 4881C200 		addq	$2147450880, %rdx
 4166      80FF7F
 4167 00db 0FB612   		movzbl	(%rdx), %edx
 4168 00de 84D2     		testb	%dl, %dl
 4169 00e0 7408     		je	.L230
 4170 00e2 4889C7   		movq	%rax, %rdi
 4171 00e5 E8000000 		call	__asan_report_load8@PLT
 4171      00
 4172              	.L230:
 4173 00ea 488B45E8 		movq	-24(%rbp), %rax
 4174 00ee 4C8B6008 		movq	8(%rax), %r12
 4175 00f2 488B45E8 		movq	-24(%rbp), %rax
 4176 00f6 48837DE8 		cmpq	$0, -24(%rbp)
 4176      00
 4177 00fb 740B     		je	.L231
 4178 00fd 4889C2   		movq	%rax, %rdx
 4179 0100 83E207   		andl	$7, %edx
 4180 0103 4885D2   		testq	%rdx, %rdx
 4181 0106 740F     		je	.L232
 4182              	.L231:
 4183 0108 4889C6   		movq	%rax, %rsi
 4184 010b 488D3D00 		leaq	.Lubsan_data438(%rip), %rdi
 4184      000000
 4185 0112 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4185      00
 4186              	.L232:
 4187 0117 488B45E8 		movq	-24(%rbp), %rax
 4188 011b 4889C2   		movq	%rax, %rdx
 4189 011e 48C1EA03 		shrq	$3, %rdx
 4190 0122 4881C200 		addq	$2147450880, %rdx
 4190      80FF7F
 4191 0129 0FB612   		movzbl	(%rdx), %edx
 4192 012c 84D2     		testb	%dl, %dl
 4193 012e 7408     		je	.L233
 4194 0130 4889C7   		movq	%rax, %rdi
 4195 0133 E8000000 		call	__asan_report_load8@PLT
 4195      00
 4196              	.L233:
 4197 0138 488B45E8 		movq	-24(%rbp), %rax
 4198 013c 488B00   		movq	(%rax), %rax
 4199 013f 4889DA   		movq	%rbx, %rdx
 4200 0142 4C89E6   		movq	%r12, %rsi
 4201 0145 4889C7   		movq	%rax, %rdi
 4202 0148 E8000000 		call	_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E
 4202      00
 679:/usr/include/c++/9/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 680:/usr/include/c++/9/bits/stl_vector.h ****       }
 4203              		.loc 4 680 7
 4204 014d 488B45E8 		movq	-24(%rbp), %rax
 4205 0151 48837DE8 		cmpq	$0, -24(%rbp)
 4205      00
 4206 0156 740B     		je	.L234
 4207 0158 4889C2   		movq	%rax, %rdx
 4208 015b 83E207   		andl	$7, %edx
 4209 015e 4885D2   		testq	%rdx, %rdx
 4210 0161 740F     		je	.L235
 4211              	.L234:
 4212 0163 4889C6   		movq	%rax, %rsi
 4213 0166 488D3D00 		leaq	.Lubsan_data439(%rip), %rdi
 4213      000000
 4214 016d E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4214      00
 4215              	.L235:
 4216 0172 488B5DE8 		movq	-24(%rbp), %rbx
 4217 0176 4889D8   		movq	%rbx, %rax
 4218 0179 4885DB   		testq	%rbx, %rbx
 4219 017c 740B     		je	.L236
 4220 017e 4889C2   		movq	%rax, %rdx
 4221 0181 83E207   		andl	$7, %edx
 4222 0184 4885D2   		testq	%rdx, %rdx
 4223 0187 740F     		je	.L237
 4224              	.L236:
 4225 0189 4889C6   		movq	%rax, %rsi
 4226 018c 488D3D00 		leaq	.Lubsan_data440(%rip), %rdi
 4226      000000
 4227 0193 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4227      00
 4228              	.L237:
 4229 0198 4889DF   		movq	%rbx, %rdi
 4230 019b E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 4230      00
 4231 01a0 488B45E8 		movq	-24(%rbp), %rax
 4232 01a4 48837DE8 		cmpq	$0, -24(%rbp)
 4232      00
 4233 01a9 740B     		je	.L238
 4234 01ab 4889C2   		movq	%rax, %rdx
 4235 01ae 83E207   		andl	$7, %edx
 4236 01b1 4885D2   		testq	%rdx, %rdx
 4237 01b4 740F     		je	.L240
 4238              	.L238:
 4239 01b6 4889C6   		movq	%rax, %rsi
 4240 01b9 488D3D00 		leaq	.Lubsan_data441(%rip), %rdi
 4240      000000
 4241 01c0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4241      00
 4242              	.L240:
 4243              	.LBE16:
 4244 01c5 90       		nop
 4245 01c6 4883C410 		addq	$16, %rsp
 4246 01ca 5B       		popq	%rbx
 4247 01cb 415C     		popq	%r12
 4248 01cd 5D       		popq	%rbp
 4249              		.cfi_def_cfa 7, 8
 4250 01ce C3       		ret
 4251              		.cfi_endproc
 4252              	.LFE2640:
 4253              		.section	.gcc_except_table
 4254              	.LLSDA2640:
 4255 00ab FF       		.byte	0xff
 4256 00ac FF       		.byte	0xff
 4257 00ad 01       		.byte	0x1
 4258 00ae 00       		.uleb128 .LLSDACSE2640-.LLSDACSB2640
 4259              	.LLSDACSB2640:
 4260              	.LLSDACSE2640:
 4261              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev,"axG"
 4263              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 4264              		.set	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev,_ZNSt6vectorINS
 4265              		.section	.data.rel.local
 4266              		.align 32
 4269              	.Lubsan_data442:
 4270 0f00 00000000 		.quad	.LC3
 4270      00000000 
 4271 0f08 80000000 		.long	128
 4272 0f0c 02000000 		.long	2
 4273 0f10 00000000 		.quad	.Lubsan_type7
 4273      00000000 
 4274 0f18 03       		.byte	3
 4275 0f19 02       		.byte	2
 4276 0f1a 00000000 		.zero	6
 4276      0000
 4277 0f20 00000000 		.zero	32
 4277      00000000 
 4277      00000000 
 4277      00000000 
 4277      00000000 
 4278              		.align 32
 4281              	.Lubsan_data443:
 4282 0f40 00000000 		.quad	.LC3
 4282      00000000 
 4283 0f48 82000000 		.long	130
 4284 0f4c 13000000 		.long	19
 4285 0f50 00000000 		.quad	.Lubsan_type6
 4285      00000000 
 4286 0f58 00       		.byte	0
 4287 0f59 05       		.byte	5
 4288 0f5a 00000000 		.zero	6
 4288      0000
 4289 0f60 00000000 		.zero	32
 4289      00000000 
 4289      00000000 
 4289      00000000 
 4289      00000000 
 4290              		.align 32
 4293              	.Lubsan_data444:
 4294 0f80 00000000 		.quad	.LC3
 4294      00000000 
 4295 0f88 82000000 		.long	130
 4296 0f8c 13000000 		.long	19
 4297 0f90 00000000 		.quad	.Lubsan_type9
 4297      00000000 
 4298 0f98 03       		.byte	3
 4299 0f99 03       		.byte	3
 4300 0f9a 00000000 		.zero	6
 4300      0000
 4301 0fa0 00000000 		.zero	32
 4301      00000000 
 4301      00000000 
 4301      00000000 
 4301      00000000 
 4302              		.data
 4303              		.align 32
 4306              	.Lubsan_type25:
 4309 0584 27737472 		.string	"'struct _Vector_impl_data'"
 4309      75637420 
 4309      5F566563 
 4309      746F725F 
 4309      696D706C 
 4310 059f 00000000 		.zero	33
 4310      00000000 
 4310      00000000 
 4310      00000000 
 4310      00000000 
 4311              		.section	.data.rel.local
 4312              		.align 32
 4315              	.Lubsan_data445:
 4316 0fc0 00000000 		.quad	.LC3
 4316      00000000 
 4317 0fc8 82000000 		.long	130
 4318 0fcc 13000000 		.long	19
 4319 0fd0 00000000 		.quad	.Lubsan_type25
 4319      00000000 
 4320 0fd8 03       		.byte	3
 4321 0fd9 05       		.byte	5
 4322 0fda 00000000 		.zero	6
 4322      0000
 4323 0fe0 00000000 		.zero	32
 4323      00000000 
 4323      00000000 
 4323      00000000 
 4323      00000000 
 4324              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_
 4325              		.align 2
 4326              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_im
 4328              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC2Ev:
 4329              	.LASANPC2660:
 4330              	.LFB2660:
 128:/usr/include/c++/9/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 4331              		.loc 4 128 2
 4332              		.cfi_startproc
 4333 0000 F30F1EFA 		endbr64
 4334 0004 55       		pushq	%rbp
 4335              		.cfi_def_cfa_offset 16
 4336              		.cfi_offset 6, -16
 4337 0005 4889E5   		movq	%rsp, %rbp
 4338              		.cfi_def_cfa_register 6
 4339 0008 53       		pushq	%rbx
 4340 0009 4883EC18 		subq	$24, %rsp
 4341              		.cfi_offset 3, -24
 4342 000d 48897DE8 		movq	%rdi, -24(%rbp)
 128:/usr/include/c++/9/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 4343              		.loc 4 128 2
 4344 0011 488B45E8 		movq	-24(%rbp), %rax
 4345 0015 48837DE8 		cmpq	$0, -24(%rbp)
 4345      00
 4346 001a 740B     		je	.L242
 4347 001c 4889C2   		movq	%rax, %rdx
 4348 001f 83E207   		andl	$7, %edx
 4349 0022 4885D2   		testq	%rdx, %rdx
 4350 0025 740F     		je	.L243
 4351              	.L242:
 4352 0027 4889C6   		movq	%rax, %rsi
 4353 002a 488D3D00 		leaq	.Lubsan_data442(%rip), %rdi
 4353      000000
 4354 0031 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4354      00
 4355              	.L243:
 4356              	.LBB17:
 130:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 4357              		.loc 4 130 19
 4358 0036 48837DE8 		cmpq	$0, -24(%rbp)
 4358      00
 4359 003b 7511     		jne	.L244
 4360 003d BE000000 		movl	$0, %esi
 4360      00
 4361 0042 488D3D00 		leaq	.Lubsan_data443(%rip), %rdi
 4361      000000
 4362 0049 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4362      00
 4363              	.L244:
 4364 004e 488B45E8 		movq	-24(%rbp), %rax
 4365 0052 4889C7   		movq	%rax, %rdi
 4366 0055 E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev
 4366      00
 4367 005a 488B45E8 		movq	-24(%rbp), %rax
 4368 005e 48837DE8 		cmpq	$0, -24(%rbp)
 4368      00
 4369 0063 740B     		je	.L245
 4370 0065 4889C2   		movq	%rax, %rdx
 4371 0068 83E207   		andl	$7, %edx
 4372 006b 4885D2   		testq	%rdx, %rdx
 4373 006e 740F     		je	.L246
 4374              	.L245:
 4375 0070 4889C6   		movq	%rax, %rsi
 4376 0073 488D3D00 		leaq	.Lubsan_data444(%rip), %rdi
 4376      000000
 4377 007a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4377      00
 4378              	.L246:
 4379 007f 488B5DE8 		movq	-24(%rbp), %rbx
 4380 0083 4889D8   		movq	%rbx, %rax
 4381 0086 4885DB   		testq	%rbx, %rbx
 4382 0089 740B     		je	.L247
 4383 008b 4889C2   		movq	%rax, %rdx
 4384 008e 83E207   		andl	$7, %edx
 4385 0091 4885D2   		testq	%rdx, %rdx
 4386 0094 740F     		je	.L248
 4387              	.L247:
 4388 0096 4889C6   		movq	%rax, %rsi
 4389 0099 488D3D00 		leaq	.Lubsan_data445(%rip), %rdi
 4389      000000
 4390 00a0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4390      00
 4391              	.L248:
 4392 00a5 4889DF   		movq	%rbx, %rdi
 4393 00a8 E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_imp
 4393      00
 4394              	.LBE17:
 131:/usr/include/c++/9/bits/stl_vector.h **** 
 4395              		.loc 4 131 4
 4396 00ad 90       		nop
 4397 00ae 4883C418 		addq	$24, %rsp
 4398 00b2 5B       		popq	%rbx
 4399 00b3 5D       		popq	%rbp
 4400              		.cfi_def_cfa 7, 8
 4401 00b4 C3       		ret
 4402              		.cfi_endproc
 4403              	.LFE2660:
 4405              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_im
 4406              		.set	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_imp
 4407              		.section	.data.rel.local
 4408              		.align 32
 4411              	.Lubsan_data446:
 4412 1000 00000000 		.quad	.LC3
 4412      00000000 
 4413 1008 4C010000 		.long	332
 4414 100c 02000000 		.long	2
 4415 1010 00000000 		.quad	.Lubsan_type8
 4415      00000000 
 4416 1018 03       		.byte	3
 4417 1019 04       		.byte	4
 4418 101a 00000000 		.zero	6
 4418      0000
 4419 1020 00000000 		.zero	32
 4419      00000000 
 4419      00000000 
 4419      00000000 
 4419      00000000 
 4420              		.align 32
 4423              	.Lubsan_data447:
 4424 1040 00000000 		.quad	.LC3
 4424      00000000 
 4425 1048 4D010000 		.long	333
 4426 104c 11000000 		.long	17
 4427 1050 00000000 		.quad	.Lubsan_type8
 4427      00000000 
 4428 1058 03       		.byte	3
 4429 1059 03       		.byte	3
 4430 105a 00000000 		.zero	6
 4430      0000
 4431 1060 00000000 		.zero	32
 4431      00000000 
 4431      00000000 
 4431      00000000 
 4431      00000000 
 4432              		.align 32
 4435              	.Lubsan_data448:
 4436 1080 00000000 		.quad	.LC3
 4436      00000000 
 4437 1088 4D010000 		.long	333
 4438 108c 11000000 		.long	17
 4439 1090 00000000 		.zero	48
 4439      00000000 
 4439      00000000 
 4439      00000000 
 4439      00000000 
 4440              		.align 32
 4443              	.Lubsan_data449:
 4444 10c0 00000000 		.quad	.LC3
 4444      00000000 
 4445 10c8 4D010000 		.long	333
 4446 10cc 2D000000 		.long	45
 4447 10d0 00000000 		.quad	.Lubsan_type8
 4447      00000000 
 4448 10d8 03       		.byte	3
 4449 10d9 03       		.byte	3
 4450 10da 00000000 		.zero	6
 4450      0000
 4451 10e0 00000000 		.zero	32
 4451      00000000 
 4451      00000000 
 4451      00000000 
 4451      00000000 
 4452              		.align 32
 4455              	.Lubsan_data450:
 4456 1100 00000000 		.quad	.LC3
 4456      00000000 
 4457 1108 4C010000 		.long	332
 4458 110c 02000000 		.long	2
 4459 1110 00000000 		.quad	.Lubsan_type8
 4459      00000000 
 4460 1118 03       		.byte	3
 4461 1119 03       		.byte	3
 4462 111a 00000000 		.zero	6
 4462      0000
 4463 1120 00000000 		.zero	32
 4463      00000000 
 4463      00000000 
 4463      00000000 
 4463      00000000 
 4464              		.align 32
 4467              	.Lubsan_data451:
 4468 1140 00000000 		.quad	.LC3
 4468      00000000 
 4469 1148 4E010000 		.long	334
 4470 114c 07000000 		.long	7
 4471 1150 00000000 		.quad	.Lubsan_type8
 4471      00000000 
 4472 1158 03       		.byte	3
 4473 1159 03       		.byte	3
 4474 115a 00000000 		.zero	6
 4474      0000
 4475 1160 00000000 		.zero	32
 4475      00000000 
 4475      00000000 
 4475      00000000 
 4475      00000000 
 4476              		.align 32
 4479              	.Lubsan_data452:
 4480 1180 00000000 		.quad	.LC3
 4480      00000000 
 4481 1188 4E010000 		.long	334
 4482 118c 07000000 		.long	7
 4483 1190 00000000 		.quad	.Lubsan_type9
 4483      00000000 
 4484 1198 03       		.byte	3
 4485 1199 04       		.byte	4
 4486 119a 00000000 		.zero	6
 4486      0000
 4487 11a0 00000000 		.zero	32
 4487      00000000 
 4487      00000000 
 4487      00000000 
 4487      00000000 
 4488              		.data
 4489              		.align 32
 4492              	.Lubsan_type26:
 4495 05c4 27737472 		.string	"'struct <unknown>'"
 4495      75637420 
 4495      3C756E6B 
 4495      6E6F776E 
 4495      3E2700
 4496 05d7 00000000 		.zero	41
 4496      00000000 
 4496      00000000 
 4496      00000000 
 4496      00000000 
 4497              		.section	.data.rel.local
 4498              		.align 32
 4501              	.Lubsan_data453:
 4502 11c0 00000000 		.quad	.LC3
 4502      00000000 
 4503 11c8 4E010000 		.long	334
 4504 11cc 07000000 		.long	7
 4505 11d0 00000000 		.quad	.Lubsan_type26
 4505      00000000 
 4506 11d8 03       		.byte	3
 4507 11d9 02       		.byte	2
 4508 11da 00000000 		.zero	6
 4508      0000
 4509 11e0 00000000 		.zero	32
 4509      00000000 
 4509      00000000 
 4509      00000000 
 4509      00000000 
 4510              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2E
 4511              		.align 2
 4512              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 4514              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:
 4515              	.LASANPC2663:
 4516              	.LFB2663:
 330:/usr/include/c++/9/bits/stl_vector.h ****       {
 4517              		.loc 4 330 7
 4518              		.cfi_startproc
 4519              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4520              		.cfi_lsda 0x1b,.LLSDA2663
 4521 0000 F30F1EFA 		endbr64
 4522 0004 55       		pushq	%rbp
 4523              		.cfi_def_cfa_offset 16
 4524              		.cfi_offset 6, -16
 4525 0005 4889E5   		movq	%rsp, %rbp
 4526              		.cfi_def_cfa_register 6
 4527 0008 53       		pushq	%rbx
 4528 0009 4883EC18 		subq	$24, %rsp
 4529              		.cfi_offset 3, -24
 4530 000d 48897DE8 		movq	%rdi, -24(%rbp)
 4531              	.LBB18:
 332:/usr/include/c++/9/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 4532              		.loc 4 332 2
 4533 0011 488B45E8 		movq	-24(%rbp), %rax
 4534 0015 48837DE8 		cmpq	$0, -24(%rbp)
 4534      00
 4535 001a 740B     		je	.L250
 4536 001c 4889C2   		movq	%rax, %rdx
 4537 001f 83E207   		andl	$7, %edx
 4538 0022 4885D2   		testq	%rdx, %rdx
 4539 0025 740F     		je	.L251
 4540              	.L250:
 4541 0027 4889C6   		movq	%rax, %rsi
 4542 002a 488D3D00 		leaq	.Lubsan_data446(%rip), %rdi
 4542      000000
 4543 0031 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4543      00
 4544              	.L251:
 333:/usr/include/c++/9/bits/stl_vector.h ****       }
 4545              		.loc 4 333 17
 4546 0036 488B45E8 		movq	-24(%rbp), %rax
 4547 003a 48837DE8 		cmpq	$0, -24(%rbp)
 4547      00
 4548 003f 740B     		je	.L252
 4549 0041 4889C2   		movq	%rax, %rdx
 4550 0044 83E207   		andl	$7, %edx
 4551 0047 4885D2   		testq	%rdx, %rdx
 4552 004a 740F     		je	.L253
 4553              	.L252:
 4554 004c 4889C6   		movq	%rax, %rsi
 4555 004f 488D3D00 		leaq	.Lubsan_data447(%rip), %rdi
 4555      000000
 4556 0056 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4556      00
 4557              	.L253:
 4558 005b 488B45E8 		movq	-24(%rbp), %rax
 4559 005f 488D5010 		leaq	16(%rax), %rdx
 4560 0063 4883F8F0 		cmpq	$-16, %rax
 4561 0067 7213     		jb	.L254
 4562 0069 488B45E8 		movq	-24(%rbp), %rax
 4563 006d 4889C6   		movq	%rax, %rsi
 4564 0070 488D3D00 		leaq	.Lubsan_data448(%rip), %rdi
 4564      000000
 4565 0077 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 4565      00
 4566              	.L254:
 4567 007c 488B45E8 		movq	-24(%rbp), %rax
 4568 0080 4883C010 		addq	$16, %rax
 4569 0084 4889C2   		movq	%rax, %rdx
 4570 0087 48C1EA03 		shrq	$3, %rdx
 4571 008b 4881C200 		addq	$2147450880, %rdx
 4571      80FF7F
 4572 0092 0FB612   		movzbl	(%rdx), %edx
 4573 0095 84D2     		testb	%dl, %dl
 4574 0097 7408     		je	.L255
 4575 0099 4889C7   		movq	%rax, %rdi
 4576 009c E8000000 		call	__asan_report_load8@PLT
 4576      00
 4577              	.L255:
 4578 00a1 488B45E8 		movq	-24(%rbp), %rax
 4579 00a5 488B5810 		movq	16(%rax), %rbx
 333:/usr/include/c++/9/bits/stl_vector.h ****       }
 4580              		.loc 4 333 45
 4581 00a9 488B45E8 		movq	-24(%rbp), %rax
 4582 00ad 48837DE8 		cmpq	$0, -24(%rbp)
 4582      00
 4583 00b2 740B     		je	.L256
 4584 00b4 4889C2   		movq	%rax, %rdx
 4585 00b7 83E207   		andl	$7, %edx
 4586 00ba 4885D2   		testq	%rdx, %rdx
 4587 00bd 740F     		je	.L257
 4588              	.L256:
 4589 00bf 4889C6   		movq	%rax, %rsi
 4590 00c2 488D3D00 		leaq	.Lubsan_data449(%rip), %rdi
 4590      000000
 4591 00c9 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4591      00
 4592              	.L257:
 4593 00ce 488B45E8 		movq	-24(%rbp), %rax
 4594 00d2 4889C2   		movq	%rax, %rdx
 4595 00d5 48C1EA03 		shrq	$3, %rdx
 4596 00d9 4881C200 		addq	$2147450880, %rdx
 4596      80FF7F
 4597 00e0 0FB612   		movzbl	(%rdx), %edx
 4598 00e3 84D2     		testb	%dl, %dl
 4599 00e5 7408     		je	.L258
 4600 00e7 4889C7   		movq	%rax, %rdi
 4601 00ea E8000000 		call	__asan_report_load8@PLT
 4601      00
 4602              	.L258:
 4603 00ef 488B45E8 		movq	-24(%rbp), %rax
 4604 00f3 488B00   		movq	(%rax), %rax
 333:/usr/include/c++/9/bits/stl_vector.h ****       }
 4605              		.loc 4 333 35
 4606 00f6 4829C3   		subq	%rax, %rbx
 4607 00f9 4889D8   		movq	%rbx, %rax
 4608 00fc 48C1F805 		sarq	$5, %rax
 332:/usr/include/c++/9/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 4609              		.loc 4 332 2
 4610 0100 4889C3   		movq	%rax, %rbx
 4611 0103 488B45E8 		movq	-24(%rbp), %rax
 4612 0107 48837DE8 		cmpq	$0, -24(%rbp)
 4612      00
 4613 010c 740B     		je	.L259
 4614 010e 4889C2   		movq	%rax, %rdx
 4615 0111 83E207   		andl	$7, %edx
 4616 0114 4885D2   		testq	%rdx, %rdx
 4617 0117 740F     		je	.L260
 4618              	.L259:
 4619 0119 4889C6   		movq	%rax, %rsi
 4620 011c 488D3D00 		leaq	.Lubsan_data450(%rip), %rdi
 4620      000000
 4621 0123 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4621      00
 4622              	.L260:
 4623 0128 488B45E8 		movq	-24(%rbp), %rax
 4624 012c 488B08   		movq	(%rax), %rcx
 4625 012f 488B45E8 		movq	-24(%rbp), %rax
 4626 0133 4889DA   		movq	%rbx, %rdx
 4627 0136 4889CE   		movq	%rcx, %rsi
 4628 0139 4889C7   		movq	%rax, %rdi
 4629 013c E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_dealloca
 4629      00
 334:/usr/include/c++/9/bits/stl_vector.h **** 
 4630              		.loc 4 334 7
 4631 0141 488B45E8 		movq	-24(%rbp), %rax
 4632 0145 48837DE8 		cmpq	$0, -24(%rbp)
 4632      00
 4633 014a 740B     		je	.L261
 4634 014c 4889C2   		movq	%rax, %rdx
 4635 014f 83E207   		andl	$7, %edx
 4636 0152 4885D2   		testq	%rdx, %rdx
 4637 0155 740F     		je	.L262
 4638              	.L261:
 4639 0157 4889C6   		movq	%rax, %rsi
 4640 015a 488D3D00 		leaq	.Lubsan_data451(%rip), %rdi
 4640      000000
 4641 0161 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4641      00
 4642              	.L262:
 4643 0166 488B5DE8 		movq	-24(%rbp), %rbx
 4644 016a 4889D8   		movq	%rbx, %rax
 4645 016d 4885DB   		testq	%rbx, %rbx
 4646 0170 740B     		je	.L263
 4647 0172 4889C2   		movq	%rax, %rdx
 4648 0175 83E207   		andl	$7, %edx
 4649 0178 4885D2   		testq	%rdx, %rdx
 4650 017b 740F     		je	.L264
 4651              	.L263:
 4652 017d 4889C6   		movq	%rax, %rsi
 4653 0180 488D3D00 		leaq	.Lubsan_data452(%rip), %rdi
 4653      000000
 4654 0187 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4654      00
 4655              	.L264:
 4656 018c 4889DF   		movq	%rbx, %rdi
 4657 018f E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_imp
 4657      00
 4658 0194 488B45E8 		movq	-24(%rbp), %rax
 4659 0198 48837DE8 		cmpq	$0, -24(%rbp)
 4659      00
 4660 019d 740B     		je	.L265
 4661 019f 4889C2   		movq	%rax, %rdx
 4662 01a2 83E207   		andl	$7, %edx
 4663 01a5 4885D2   		testq	%rdx, %rdx
 4664 01a8 740F     		je	.L267
 4665              	.L265:
 4666 01aa 4889C6   		movq	%rax, %rsi
 4667 01ad 488D3D00 		leaq	.Lubsan_data453(%rip), %rdi
 4667      000000
 4668 01b4 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4668      00
 4669              	.L267:
 4670              	.LBE18:
 4671 01b9 90       		nop
 4672 01ba 4883C418 		addq	$24, %rsp
 4673 01be 5B       		popq	%rbx
 4674 01bf 5D       		popq	%rbp
 4675              		.cfi_def_cfa 7, 8
 4676 01c0 C3       		ret
 4677              		.cfi_endproc
 4678              	.LFE2663:
 4679              		.section	.gcc_except_table
 4680              	.LLSDA2663:
 4681 00af FF       		.byte	0xff
 4682 00b0 FF       		.byte	0xff
 4683 00b1 01       		.byte	0x1
 4684 00b2 00       		.uleb128 .LLSDACSE2663-.LLSDACSB2663
 4685              	.LLSDACSB2663:
 4686              	.LLSDACSE2663:
 4687              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2E
 4689              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 4690              		.set	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev,_ZNSt12_
 4691              		.section	.data.rel.local
 4692              		.align 32
 4695              	.Lubsan_data454:
 4696 1200 00000000 		.quad	.LC3
 4696      00000000 
 4697 1208 13040000 		.long	1043
 4698 120c 19000000 		.long	25
 4699 1210 00000000 		.quad	.Lubsan_type10
 4699      00000000 
 4700 1218 03       		.byte	3
 4701 1219 03       		.byte	3
 4702 121a 00000000 		.zero	6
 4702      0000
 4703 1220 00000000 		.zero	32
 4703      00000000 
 4703      00000000 
 4703      00000000 
 4703      00000000 
 4704              		.align 32
 4707              	.Lubsan_data455:
 4708 1240 00000000 		.quad	.LC3
 4708      00000000 
 4709 1248 13040000 		.long	1043
 4710 124c 22000000 		.long	34
 4711 1250 00000000 		.zero	48
 4711      00000000 
 4711      00000000 
 4711      00000000 
 4711      00000000 
 4712              		.data
 4713              		.align 32
 4716              	.Lubsan_type27:
 4719 0604 27737472 		.string	"'struct value_type'"
 4719      75637420 
 4719      76616C75 
 4719      655F7479 
 4719      70652700 
 4720 0618 00000000 		.zero	40
 4720      00000000 
 4720      00000000 
 4720      00000000 
 4720      00000000 
 4721              		.section	.data.rel.local
 4722              		.align 32
 4725              	.Lubsan_data456:
 4726 1280 00000000 		.quad	.LC3
 4726      00000000 
 4727 1288 13040000 		.long	1043
 4728 128c 22000000 		.long	34
 4729 1290 00000000 		.quad	.Lubsan_type27
 4729      00000000 
 4730 1298 03       		.byte	3
 4731 1299 02       		.byte	2
 4732 129a 00000000 		.zero	6
 4732      0000
 4733 12a0 00000000 		.zero	32
 4733      00000000 
 4733      00000000 
 4733      00000000 
 4733      00000000 
 4734              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEm,"axG"
 4735              		.align 2
 4736              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEm
 4738              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEm:
 4739              	.LASANPC2671:
 4740              	.LFB2671:
 681:/usr/include/c++/9/bits/stl_vector.h **** 
 682:/usr/include/c++/9/bits/stl_vector.h ****       /**
 683:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 684:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 685:/usr/include/c++/9/bits/stl_vector.h ****        *
 686:/usr/include/c++/9/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 687:/usr/include/c++/9/bits/stl_vector.h ****        *  @a __x will not be copied.
 688:/usr/include/c++/9/bits/stl_vector.h ****        *
 689:/usr/include/c++/9/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 690:/usr/include/c++/9/bits/stl_vector.h ****        */
 691:/usr/include/c++/9/bits/stl_vector.h ****       vector&
 692:/usr/include/c++/9/bits/stl_vector.h ****       operator=(const vector& __x);
 693:/usr/include/c++/9/bits/stl_vector.h **** 
 694:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 695:/usr/include/c++/9/bits/stl_vector.h ****       /**
 696:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 697:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 698:/usr/include/c++/9/bits/stl_vector.h ****        *
 699:/usr/include/c++/9/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 700:/usr/include/c++/9/bits/stl_vector.h ****        *  if the allocators permit it).
 701:/usr/include/c++/9/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 702:/usr/include/c++/9/bits/stl_vector.h ****        *
 703:/usr/include/c++/9/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 704:/usr/include/c++/9/bits/stl_vector.h ****        */
 705:/usr/include/c++/9/bits/stl_vector.h ****       vector&
 706:/usr/include/c++/9/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 707:/usr/include/c++/9/bits/stl_vector.h ****       {
 708:/usr/include/c++/9/bits/stl_vector.h **** 	constexpr bool __move_storage =
 709:/usr/include/c++/9/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 710:/usr/include/c++/9/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 711:/usr/include/c++/9/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 712:/usr/include/c++/9/bits/stl_vector.h **** 	return *this;
 713:/usr/include/c++/9/bits/stl_vector.h ****       }
 714:/usr/include/c++/9/bits/stl_vector.h **** 
 715:/usr/include/c++/9/bits/stl_vector.h ****       /**
 716:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 717:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 718:/usr/include/c++/9/bits/stl_vector.h ****        *
 719:/usr/include/c++/9/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 720:/usr/include/c++/9/bits/stl_vector.h ****        *  initializer list @a __l.
 721:/usr/include/c++/9/bits/stl_vector.h ****        *
 722:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 723:/usr/include/c++/9/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 724:/usr/include/c++/9/bits/stl_vector.h ****        *  of elements assigned.
 725:/usr/include/c++/9/bits/stl_vector.h ****        */
 726:/usr/include/c++/9/bits/stl_vector.h ****       vector&
 727:/usr/include/c++/9/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 728:/usr/include/c++/9/bits/stl_vector.h ****       {
 729:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 730:/usr/include/c++/9/bits/stl_vector.h **** 			    random_access_iterator_tag());
 731:/usr/include/c++/9/bits/stl_vector.h **** 	return *this;
 732:/usr/include/c++/9/bits/stl_vector.h ****       }
 733:/usr/include/c++/9/bits/stl_vector.h **** #endif
 734:/usr/include/c++/9/bits/stl_vector.h **** 
 735:/usr/include/c++/9/bits/stl_vector.h ****       /**
 736:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 737:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 738:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 739:/usr/include/c++/9/bits/stl_vector.h ****        *
 740:/usr/include/c++/9/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 741:/usr/include/c++/9/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 742:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 743:/usr/include/c++/9/bits/stl_vector.h ****        *  the number of elements assigned.
 744:/usr/include/c++/9/bits/stl_vector.h ****        */
 745:/usr/include/c++/9/bits/stl_vector.h ****       void
 746:/usr/include/c++/9/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 747:/usr/include/c++/9/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 748:/usr/include/c++/9/bits/stl_vector.h **** 
 749:/usr/include/c++/9/bits/stl_vector.h ****       /**
 750:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 751:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 752:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 753:/usr/include/c++/9/bits/stl_vector.h ****        *
 754:/usr/include/c++/9/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 755:/usr/include/c++/9/bits/stl_vector.h ****        *  range [__first,__last).
 756:/usr/include/c++/9/bits/stl_vector.h ****        *
 757:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 758:/usr/include/c++/9/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 759:/usr/include/c++/9/bits/stl_vector.h ****        *  of elements assigned.
 760:/usr/include/c++/9/bits/stl_vector.h ****        */
 761:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 762:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator,
 763:/usr/include/c++/9/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 764:/usr/include/c++/9/bits/stl_vector.h **** 	void
 765:/usr/include/c++/9/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 766:/usr/include/c++/9/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 767:/usr/include/c++/9/bits/stl_vector.h **** #else
 768:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
 769:/usr/include/c++/9/bits/stl_vector.h **** 	void
 770:/usr/include/c++/9/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 771:/usr/include/c++/9/bits/stl_vector.h **** 	{
 772:/usr/include/c++/9/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 773:/usr/include/c++/9/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 774:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 775:/usr/include/c++/9/bits/stl_vector.h **** 	}
 776:/usr/include/c++/9/bits/stl_vector.h **** #endif
 777:/usr/include/c++/9/bits/stl_vector.h **** 
 778:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 779:/usr/include/c++/9/bits/stl_vector.h ****       /**
 780:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 781:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 782:/usr/include/c++/9/bits/stl_vector.h ****        *
 783:/usr/include/c++/9/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 784:/usr/include/c++/9/bits/stl_vector.h ****        *  initializer list @a __l.
 785:/usr/include/c++/9/bits/stl_vector.h ****        *
 786:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 787:/usr/include/c++/9/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 788:/usr/include/c++/9/bits/stl_vector.h ****        *  of elements assigned.
 789:/usr/include/c++/9/bits/stl_vector.h ****        */
 790:/usr/include/c++/9/bits/stl_vector.h ****       void
 791:/usr/include/c++/9/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 792:/usr/include/c++/9/bits/stl_vector.h ****       {
 793:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 794:/usr/include/c++/9/bits/stl_vector.h **** 			    random_access_iterator_tag());
 795:/usr/include/c++/9/bits/stl_vector.h ****       }
 796:/usr/include/c++/9/bits/stl_vector.h **** #endif
 797:/usr/include/c++/9/bits/stl_vector.h **** 
 798:/usr/include/c++/9/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 799:/usr/include/c++/9/bits/stl_vector.h ****       using _Base::get_allocator;
 800:/usr/include/c++/9/bits/stl_vector.h **** 
 801:/usr/include/c++/9/bits/stl_vector.h ****       // iterators
 802:/usr/include/c++/9/bits/stl_vector.h ****       /**
 803:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 804:/usr/include/c++/9/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 805:/usr/include/c++/9/bits/stl_vector.h ****        *  element order.
 806:/usr/include/c++/9/bits/stl_vector.h ****        */
 807:/usr/include/c++/9/bits/stl_vector.h ****       iterator
 808:/usr/include/c++/9/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 809:/usr/include/c++/9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 810:/usr/include/c++/9/bits/stl_vector.h **** 
 811:/usr/include/c++/9/bits/stl_vector.h ****       /**
 812:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 813:/usr/include/c++/9/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 814:/usr/include/c++/9/bits/stl_vector.h ****        *  element order.
 815:/usr/include/c++/9/bits/stl_vector.h ****        */
 816:/usr/include/c++/9/bits/stl_vector.h ****       const_iterator
 817:/usr/include/c++/9/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 818:/usr/include/c++/9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 819:/usr/include/c++/9/bits/stl_vector.h **** 
 820:/usr/include/c++/9/bits/stl_vector.h ****       /**
 821:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 822:/usr/include/c++/9/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 823:/usr/include/c++/9/bits/stl_vector.h ****        *  element order.
 824:/usr/include/c++/9/bits/stl_vector.h ****        */
 825:/usr/include/c++/9/bits/stl_vector.h ****       iterator
 826:/usr/include/c++/9/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 827:/usr/include/c++/9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 828:/usr/include/c++/9/bits/stl_vector.h **** 
 829:/usr/include/c++/9/bits/stl_vector.h ****       /**
 830:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 831:/usr/include/c++/9/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 832:/usr/include/c++/9/bits/stl_vector.h ****        *  ordinary element order.
 833:/usr/include/c++/9/bits/stl_vector.h ****        */
 834:/usr/include/c++/9/bits/stl_vector.h ****       const_iterator
 835:/usr/include/c++/9/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 836:/usr/include/c++/9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 837:/usr/include/c++/9/bits/stl_vector.h **** 
 838:/usr/include/c++/9/bits/stl_vector.h ****       /**
 839:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 840:/usr/include/c++/9/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 841:/usr/include/c++/9/bits/stl_vector.h ****        *  element order.
 842:/usr/include/c++/9/bits/stl_vector.h ****        */
 843:/usr/include/c++/9/bits/stl_vector.h ****       reverse_iterator
 844:/usr/include/c++/9/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 845:/usr/include/c++/9/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 846:/usr/include/c++/9/bits/stl_vector.h **** 
 847:/usr/include/c++/9/bits/stl_vector.h ****       /**
 848:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 849:/usr/include/c++/9/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 850:/usr/include/c++/9/bits/stl_vector.h ****        *  reverse element order.
 851:/usr/include/c++/9/bits/stl_vector.h ****        */
 852:/usr/include/c++/9/bits/stl_vector.h ****       const_reverse_iterator
 853:/usr/include/c++/9/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 854:/usr/include/c++/9/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 855:/usr/include/c++/9/bits/stl_vector.h **** 
 856:/usr/include/c++/9/bits/stl_vector.h ****       /**
 857:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 858:/usr/include/c++/9/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 859:/usr/include/c++/9/bits/stl_vector.h ****        *  in reverse element order.
 860:/usr/include/c++/9/bits/stl_vector.h ****        */
 861:/usr/include/c++/9/bits/stl_vector.h ****       reverse_iterator
 862:/usr/include/c++/9/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 863:/usr/include/c++/9/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 864:/usr/include/c++/9/bits/stl_vector.h **** 
 865:/usr/include/c++/9/bits/stl_vector.h ****       /**
 866:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 867:/usr/include/c++/9/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 868:/usr/include/c++/9/bits/stl_vector.h ****        *  is done in reverse element order.
 869:/usr/include/c++/9/bits/stl_vector.h ****        */
 870:/usr/include/c++/9/bits/stl_vector.h ****       const_reverse_iterator
 871:/usr/include/c++/9/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 872:/usr/include/c++/9/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 873:/usr/include/c++/9/bits/stl_vector.h **** 
 874:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 875:/usr/include/c++/9/bits/stl_vector.h ****       /**
 876:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 877:/usr/include/c++/9/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 878:/usr/include/c++/9/bits/stl_vector.h ****        *  element order.
 879:/usr/include/c++/9/bits/stl_vector.h ****        */
 880:/usr/include/c++/9/bits/stl_vector.h ****       const_iterator
 881:/usr/include/c++/9/bits/stl_vector.h ****       cbegin() const noexcept
 882:/usr/include/c++/9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 883:/usr/include/c++/9/bits/stl_vector.h **** 
 884:/usr/include/c++/9/bits/stl_vector.h ****       /**
 885:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 886:/usr/include/c++/9/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 887:/usr/include/c++/9/bits/stl_vector.h ****        *  ordinary element order.
 888:/usr/include/c++/9/bits/stl_vector.h ****        */
 889:/usr/include/c++/9/bits/stl_vector.h ****       const_iterator
 890:/usr/include/c++/9/bits/stl_vector.h ****       cend() const noexcept
 891:/usr/include/c++/9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 892:/usr/include/c++/9/bits/stl_vector.h **** 
 893:/usr/include/c++/9/bits/stl_vector.h ****       /**
 894:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 895:/usr/include/c++/9/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 896:/usr/include/c++/9/bits/stl_vector.h ****        *  reverse element order.
 897:/usr/include/c++/9/bits/stl_vector.h ****        */
 898:/usr/include/c++/9/bits/stl_vector.h ****       const_reverse_iterator
 899:/usr/include/c++/9/bits/stl_vector.h ****       crbegin() const noexcept
 900:/usr/include/c++/9/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 901:/usr/include/c++/9/bits/stl_vector.h **** 
 902:/usr/include/c++/9/bits/stl_vector.h ****       /**
 903:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 904:/usr/include/c++/9/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 905:/usr/include/c++/9/bits/stl_vector.h ****        *  is done in reverse element order.
 906:/usr/include/c++/9/bits/stl_vector.h ****        */
 907:/usr/include/c++/9/bits/stl_vector.h ****       const_reverse_iterator
 908:/usr/include/c++/9/bits/stl_vector.h ****       crend() const noexcept
 909:/usr/include/c++/9/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 910:/usr/include/c++/9/bits/stl_vector.h **** #endif
 911:/usr/include/c++/9/bits/stl_vector.h **** 
 912:/usr/include/c++/9/bits/stl_vector.h ****       // [23.2.4.2] capacity
 913:/usr/include/c++/9/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 914:/usr/include/c++/9/bits/stl_vector.h ****       size_type
 915:/usr/include/c++/9/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 916:/usr/include/c++/9/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 917:/usr/include/c++/9/bits/stl_vector.h **** 
 918:/usr/include/c++/9/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 919:/usr/include/c++/9/bits/stl_vector.h ****       size_type
 920:/usr/include/c++/9/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 921:/usr/include/c++/9/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 922:/usr/include/c++/9/bits/stl_vector.h **** 
 923:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 924:/usr/include/c++/9/bits/stl_vector.h ****       /**
 925:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 926:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 927:/usr/include/c++/9/bits/stl_vector.h ****        *
 928:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 929:/usr/include/c++/9/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 930:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 931:/usr/include/c++/9/bits/stl_vector.h ****        *  default constructed elements are appended.
 932:/usr/include/c++/9/bits/stl_vector.h ****        */
 933:/usr/include/c++/9/bits/stl_vector.h ****       void
 934:/usr/include/c++/9/bits/stl_vector.h ****       resize(size_type __new_size)
 935:/usr/include/c++/9/bits/stl_vector.h ****       {
 936:/usr/include/c++/9/bits/stl_vector.h **** 	if (__new_size > size())
 937:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 938:/usr/include/c++/9/bits/stl_vector.h **** 	else if (__new_size < size())
 939:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 940:/usr/include/c++/9/bits/stl_vector.h ****       }
 941:/usr/include/c++/9/bits/stl_vector.h **** 
 942:/usr/include/c++/9/bits/stl_vector.h ****       /**
 943:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 944:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 945:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 946:/usr/include/c++/9/bits/stl_vector.h ****        *
 947:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 948:/usr/include/c++/9/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 949:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 950:/usr/include/c++/9/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 951:/usr/include/c++/9/bits/stl_vector.h ****        *  given data.
 952:/usr/include/c++/9/bits/stl_vector.h ****        */
 953:/usr/include/c++/9/bits/stl_vector.h ****       void
 954:/usr/include/c++/9/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 955:/usr/include/c++/9/bits/stl_vector.h ****       {
 956:/usr/include/c++/9/bits/stl_vector.h **** 	if (__new_size > size())
 957:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 958:/usr/include/c++/9/bits/stl_vector.h **** 	else if (__new_size < size())
 959:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 960:/usr/include/c++/9/bits/stl_vector.h ****       }
 961:/usr/include/c++/9/bits/stl_vector.h **** #else
 962:/usr/include/c++/9/bits/stl_vector.h ****       /**
 963:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 964:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 965:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 966:/usr/include/c++/9/bits/stl_vector.h ****        *
 967:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 968:/usr/include/c++/9/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 969:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 970:/usr/include/c++/9/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 971:/usr/include/c++/9/bits/stl_vector.h ****        *  given data.
 972:/usr/include/c++/9/bits/stl_vector.h ****        */
 973:/usr/include/c++/9/bits/stl_vector.h ****       void
 974:/usr/include/c++/9/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 975:/usr/include/c++/9/bits/stl_vector.h ****       {
 976:/usr/include/c++/9/bits/stl_vector.h **** 	if (__new_size > size())
 977:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 978:/usr/include/c++/9/bits/stl_vector.h **** 	else if (__new_size < size())
 979:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 980:/usr/include/c++/9/bits/stl_vector.h ****       }
 981:/usr/include/c++/9/bits/stl_vector.h **** #endif
 982:/usr/include/c++/9/bits/stl_vector.h **** 
 983:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 984:/usr/include/c++/9/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 985:/usr/include/c++/9/bits/stl_vector.h ****       void
 986:/usr/include/c++/9/bits/stl_vector.h ****       shrink_to_fit()
 987:/usr/include/c++/9/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 988:/usr/include/c++/9/bits/stl_vector.h **** #endif
 989:/usr/include/c++/9/bits/stl_vector.h **** 
 990:/usr/include/c++/9/bits/stl_vector.h ****       /**
 991:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 992:/usr/include/c++/9/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 993:/usr/include/c++/9/bits/stl_vector.h ****        */
 994:/usr/include/c++/9/bits/stl_vector.h ****       size_type
 995:/usr/include/c++/9/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 996:/usr/include/c++/9/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 997:/usr/include/c++/9/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 998:/usr/include/c++/9/bits/stl_vector.h **** 
 999:/usr/include/c++/9/bits/stl_vector.h ****       /**
1000:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1001:/usr/include/c++/9/bits/stl_vector.h ****        *  equal end().)
1002:/usr/include/c++/9/bits/stl_vector.h ****        */
1003:/usr/include/c++/9/bits/stl_vector.h ****       _GLIBCXX_NODISCARD bool
1004:/usr/include/c++/9/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1005:/usr/include/c++/9/bits/stl_vector.h ****       { return begin() == end(); }
1006:/usr/include/c++/9/bits/stl_vector.h **** 
1007:/usr/include/c++/9/bits/stl_vector.h ****       /**
1008:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1009:/usr/include/c++/9/bits/stl_vector.h ****        *          elements.
1010:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
1011:/usr/include/c++/9/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1012:/usr/include/c++/9/bits/stl_vector.h ****        *
1013:/usr/include/c++/9/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
1014:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1015:/usr/include/c++/9/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
1016:/usr/include/c++/9/bits/stl_vector.h ****        *  thrown.
1017:/usr/include/c++/9/bits/stl_vector.h ****        *
1018:/usr/include/c++/9/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1019:/usr/include/c++/9/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
1020:/usr/include/c++/9/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
1021:/usr/include/c++/9/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1022:/usr/include/c++/9/bits/stl_vector.h ****        *  and copying of %vector data.
1023:/usr/include/c++/9/bits/stl_vector.h ****        */
1024:/usr/include/c++/9/bits/stl_vector.h ****       void
1025:/usr/include/c++/9/bits/stl_vector.h ****       reserve(size_type __n);
1026:/usr/include/c++/9/bits/stl_vector.h **** 
1027:/usr/include/c++/9/bits/stl_vector.h ****       // element access
1028:/usr/include/c++/9/bits/stl_vector.h ****       /**
1029:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1030:/usr/include/c++/9/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1031:/usr/include/c++/9/bits/stl_vector.h ****        *  accessed.
1032:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1033:/usr/include/c++/9/bits/stl_vector.h ****        *
1034:/usr/include/c++/9/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1035:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1036:/usr/include/c++/9/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1037:/usr/include/c++/9/bits/stl_vector.h ****        *  see at().)
1038:/usr/include/c++/9/bits/stl_vector.h ****        */
1039:/usr/include/c++/9/bits/stl_vector.h ****       reference
1040:/usr/include/c++/9/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 4741              		.loc 4 1040 7
 4742              		.cfi_startproc
 4743 0000 F30F1EFA 		endbr64
 4744 0004 55       		pushq	%rbp
 4745              		.cfi_def_cfa_offset 16
 4746              		.cfi_offset 6, -16
 4747 0005 4889E5   		movq	%rsp, %rbp
 4748              		.cfi_def_cfa_register 6
 4749 0008 4154     		pushq	%r12
 4750 000a 53       		pushq	%rbx
 4751 000b 4883EC10 		subq	$16, %rsp
 4752              		.cfi_offset 12, -24
 4753              		.cfi_offset 3, -32
 4754 000f 48897DE8 		movq	%rdi, -24(%rbp)
 4755 0013 488975E0 		movq	%rsi, -32(%rbp)
1041:/usr/include/c++/9/bits/stl_vector.h ****       {
1042:/usr/include/c++/9/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1043:/usr/include/c++/9/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
 4756              		.loc 4 1043 25
 4757 0017 488B45E8 		movq	-24(%rbp), %rax
 4758 001b 48837DE8 		cmpq	$0, -24(%rbp)
 4758      00
 4759 0020 740B     		je	.L269
 4760 0022 4889C2   		movq	%rax, %rdx
 4761 0025 83E207   		andl	$7, %edx
 4762 0028 4885D2   		testq	%rdx, %rdx
 4763 002b 740F     		je	.L270
 4764              	.L269:
 4765 002d 4889C6   		movq	%rax, %rsi
 4766 0030 488D3D00 		leaq	.Lubsan_data454(%rip), %rdi
 4766      000000
 4767 0037 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4767      00
 4768              	.L270:
 4769 003c 488B45E8 		movq	-24(%rbp), %rax
 4770 0040 4889C2   		movq	%rax, %rdx
 4771 0043 48C1EA03 		shrq	$3, %rdx
 4772 0047 4881C200 		addq	$2147450880, %rdx
 4772      80FF7F
 4773 004e 0FB612   		movzbl	(%rdx), %edx
 4774 0051 84D2     		testb	%dl, %dl
 4775 0053 7408     		je	.L271
 4776 0055 4889C7   		movq	%rax, %rdi
 4777 0058 E8000000 		call	__asan_report_load8@PLT
 4777      00
 4778              	.L271:
 4779 005d 488B45E8 		movq	-24(%rbp), %rax
 4780 0061 4C8B20   		movq	(%rax), %r12
 4781              		.loc 4 1043 34
 4782 0064 488B45E0 		movq	-32(%rbp), %rax
 4783 0068 48C1E005 		salq	$5, %rax
 4784 006c 4889C3   		movq	%rax, %rbx
 4785 006f 4C89E2   		movq	%r12, %rdx
 4786 0072 488D041A 		leaq	(%rdx,%rbx), %rax
 4787 0076 4889D9   		movq	%rbx, %rcx
 4788 0079 48F7D1   		notq	%rcx
 4789 007c 48C1E93F 		shrq	$63, %rcx
 4790 0080 84C9     		testb	%cl, %cl
 4791 0082 7419     		je	.L272
 4792 0084 4839D0   		cmpq	%rdx, %rax
 4793 0087 7319     		jnb	.L273
 4794              	.L274:
 4795 0089 4889C2   		movq	%rax, %rdx
 4796 008c 4C89E6   		movq	%r12, %rsi
 4797 008f 488D3D00 		leaq	.Lubsan_data455(%rip), %rdi
 4797      000000
 4798 0096 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 4798      00
 4799 009b EB05     		jmp	.L273
 4800              	.L272:
 4801 009d 4839D0   		cmpq	%rdx, %rax
 4802 00a0 77E7     		ja	.L274
 4803              	.L273:
 4804 00a2 4C01E3   		addq	%r12, %rbx
 4805 00a5 4889D8   		movq	%rbx, %rax
 4806 00a8 4885DB   		testq	%rbx, %rbx
 4807 00ab 740B     		je	.L275
 4808 00ad 4889C2   		movq	%rax, %rdx
 4809 00b0 83E207   		andl	$7, %edx
 4810 00b3 4885D2   		testq	%rdx, %rdx
 4811 00b6 740F     		je	.L277
 4812              	.L275:
 4813 00b8 4889C6   		movq	%rax, %rsi
 4814 00bb 488D3D00 		leaq	.Lubsan_data456(%rip), %rdi
 4814      000000
 4815 00c2 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 4815      00
 4816              	.L277:
 4817              		.loc 4 1043 39 discriminator 1
 4818 00c7 4889D8   		movq	%rbx, %rax
1044:/usr/include/c++/9/bits/stl_vector.h ****       }
 4819              		.loc 4 1044 7 discriminator 1
 4820 00ca 4883C410 		addq	$16, %rsp
 4821 00ce 5B       		popq	%rbx
 4822 00cf 415C     		popq	%r12
 4823 00d1 5D       		popq	%rbp
 4824              		.cfi_def_cfa 7, 8
 4825 00d2 C3       		ret
 4826              		.cfi_endproc
 4827              	.LFE2671:
 4829              		.section	.data.rel.local
 4830              		.align 32
 4833              	.Lubsan_data457:
 4834 12c0 00000000 		.quad	.LC3
 4834      00000000 
 4835 12c8 A2040000 		.long	1186
 4836 12cc 14000000 		.long	20
 4837 12d0 00000000 		.quad	.Lubsan_type10
 4837      00000000 
 4838 12d8 03       		.byte	3
 4839 12d9 03       		.byte	3
 4840 12da 00000000 		.zero	6
 4840      0000
 4841 12e0 00000000 		.zero	32
 4841      00000000 
 4841      00000000 
 4841      00000000 
 4841      00000000 
 4842              		.align 32
 4845              	.Lubsan_data458:
 4846 1300 00000000 		.quad	.LC3
 4846      00000000 
 4847 1308 A2040000 		.long	1186
 4848 130c 14000000 		.long	20
 4849 1310 00000000 		.zero	48
 4849      00000000 
 4849      00000000 
 4849      00000000 
 4849      00000000 
 4850              		.align 32
 4853              	.Lubsan_data459:
 4854 1340 00000000 		.quad	.LC3
 4854      00000000 
 4855 1348 A2040000 		.long	1186
 4856 134c 2F000000 		.long	47
 4857 1350 00000000 		.quad	.Lubsan_type10
 4857      00000000 
 4858 1358 03       		.byte	3
 4859 1359 03       		.byte	3
 4860 135a 00000000 		.zero	6
 4860      0000
 4861 1360 00000000 		.zero	32
 4861      00000000 
 4861      00000000 
 4861      00000000 
 4861      00000000 
 4862              		.align 32
 4865              	.Lubsan_data460:
 4866 1380 00000000 		.quad	.LC3
 4866      00000000 
 4867 1388 A2040000 		.long	1186
 4868 138c 2F000000 		.long	47
 4869 1390 00000000 		.zero	48
 4869      00000000 
 4869      00000000 
 4869      00000000 
 4869      00000000 
 4870              		.align 32
 4873              	.Lubsan_data461:
 4874 13c0 00000000 		.quad	.LC3
 4874      00000000 
 4875 13c8 A5040000 		.long	1189
 4876 13cc 1E000000 		.long	30
 4877 13d0 00000000 		.quad	.Lubsan_type15
 4877      00000000 
 4878 13d8 03       		.byte	3
 4879 13d9 02       		.byte	2
 4880 13da 00000000 		.zero	6
 4880      0000
 4881 13e0 00000000 		.zero	32
 4881      00000000 
 4881      00000000 
 4881      00000000 
 4881      00000000 
 4882              		.align 32
 4885              	.Lubsan_data462:
 4886 1400 00000000 		.quad	.LC3
 4886      00000000 
 4887 1408 A5040000 		.long	1189
 4888 140c 1E000000 		.long	30
 4889 1410 00000000 		.quad	.Lubsan_type10
 4889      00000000 
 4890 1418 03       		.byte	3
 4891 1419 03       		.byte	3
 4892 141a 00000000 		.zero	6
 4892      0000
 4893 1420 00000000 		.zero	32
 4893      00000000 
 4893      00000000 
 4893      00000000 
 4893      00000000 
 4894              		.align 32
 4897              	.Lubsan_data463:
 4898 1440 00000000 		.quad	.LC3
 4898      00000000 
 4899 1448 A5040000 		.long	1189
 4900 144c 1E000000 		.long	30
 4901 1450 00000000 		.zero	48
 4901      00000000 
 4901      00000000 
 4901      00000000 
 4901      00000000 
 4902              		.align 32
 4905              	.Lubsan_data464:
 4906 1480 00000000 		.quad	.LC3
 4906      00000000 
 4907 1488 A5040000 		.long	1189
 4908 148c 25000000 		.long	37
 4909 1490 00000000 		.quad	.Lubsan_type10
 4909      00000000 
 4910 1498 03       		.byte	3
 4911 1499 03       		.byte	3
 4912 149a 00000000 		.zero	6
 4912      0000
 4913 14a0 00000000 		.zero	32
 4913      00000000 
 4913      00000000 
 4913      00000000 
 4913      00000000 
 4914              		.data
 4915              		.align 32
 4918              	.Lubsan_type28:
 4921 0644 27737472 		.string	"'struct allocator_type'"
 4921      75637420 
 4921      616C6C6F 
 4921      6361746F 
 4921      725F7479 
 4922 065c 00000000 		.zero	36
 4922      00000000 
 4922      00000000 
 4922      00000000 
 4922      00000000 
 4923              		.section	.data.rel.local
 4924              		.align 32
 4927              	.Lubsan_data465:
 4928 14c0 00000000 		.quad	.LC3
 4928      00000000 
 4929 14c8 A5040000 		.long	1189
 4930 14cc 1E000000 		.long	30
 4931 14d0 00000000 		.quad	.Lubsan_type28
 4931      00000000 
 4932 14d8 00       		.byte	0
 4933 14d9 02       		.byte	2
 4934 14da 00000000 		.zero	6
 4934      0000
 4935 14e0 00000000 		.zero	32
 4935      00000000 
 4935      00000000 
 4935      00000000 
 4935      00000000 
 4936              		.align 32
 4939              	.Lubsan_data466:
 4940 1500 00000000 		.quad	.LC3
 4940      00000000 
 4941 1508 A7040000 		.long	1191
 4942 150c 16000000 		.long	22
 4943 1510 00000000 		.quad	.Lubsan_type10
 4943      00000000 
 4944 1518 03       		.byte	3
 4945 1519 03       		.byte	3
 4946 151a 00000000 		.zero	6
 4946      0000
 4947 1520 00000000 		.zero	32
 4947      00000000 
 4947      00000000 
 4947      00000000 
 4947      00000000 
 4948              		.align 32
 4951              	.Lubsan_data467:
 4952 1540 00000000 		.quad	.LC3
 4952      00000000 
 4953 1548 A7040000 		.long	1191
 4954 154c 16000000 		.long	22
 4955 1550 00000000 		.zero	48
 4955      00000000 
 4955      00000000 
 4955      00000000 
 4955      00000000 
 4956              		.align 32
 4959              	.Lubsan_data468:
 4960 1580 00000000 		.quad	.LC3
 4960      00000000 
 4961 1588 A7040000 		.long	1191
 4962 158c 06000000 		.long	6
 4963 1590 00000000 		.zero	48
 4963      00000000 
 4963      00000000 
 4963      00000000 
 4963      00000000 
 4964              		.align 32
 4967              	.Lubsan_data469:
 4968 15c0 00000000 		.quad	.LC3
 4968      00000000 
 4969 15c8 A7040000 		.long	1191
 4970 15cc 06000000 		.long	6
 4971 15d0 00000000 		.quad	.Lubsan_type10
 4971      00000000 
 4972 15d8 03       		.byte	3
 4973 15d9 03       		.byte	3
 4974 15da 00000000 		.zero	6
 4974      0000
 4975 15e0 00000000 		.zero	32
 4975      00000000 
 4975      00000000 
 4975      00000000 
 4975      00000000 
 4976              		.align 32
 4979              	.Lubsan_data470:
 4980 1600 00000000 		.quad	.LC3
 4980      00000000 
 4981 1608 A7040000 		.long	1191
 4982 160c 06000000 		.long	6
 4983 1610 00000000 		.zero	48
 4983      00000000 
 4983      00000000 
 4983      00000000 
 4983      00000000 
 4984              		.align 32
 4987              	.Lubsan_data471:
 4988 1640 00000000 		.quad	.LC3
 4988      00000000 
 4989 1648 AB040000 		.long	1195
 4990 164c 04000000 		.long	4
 4991 1650 00000000 		.quad	.Lubsan_type10
 4991      00000000 
 4992 1658 03       		.byte	3
 4993 1659 04       		.byte	4
 4994 165a 00000000 		.zero	6
 4994      0000
 4995 1660 00000000 		.zero	32
 4995      00000000 
 4995      00000000 
 4995      00000000 
 4995      00000000 
 4996              		.align 32
 4999              	.Lubsan_data472:
 5000 1680 00000000 		.quad	.LC3
 5000      00000000 
 5001 1688 AB040000 		.long	1195
 5002 168c 04000000 		.long	4
 5003 1690 00000000 		.quad	.Lubsan_type15
 5003      00000000 
 5004 1698 03       		.byte	3
 5005 1699 02       		.byte	2
 5006 169a 00000000 		.zero	6
 5006      0000
 5007 16a0 00000000 		.zero	32
 5007      00000000 
 5007      00000000 
 5007      00000000 
 5007      00000000 
 5008              		.align 32
 5011              	.Lubsan_data473:
 5012 16c0 00000000 		.quad	.LC3
 5012      00000000 
 5013 16c8 AB040000 		.long	1195
 5014 16cc 04000000 		.long	4
 5015 16d0 00000000 		.quad	.Lubsan_type10
 5015      00000000 
 5016 16d8 03       		.byte	3
 5017 16d9 04       		.byte	4
 5018 16da 00000000 		.zero	6
 5018      0000
 5019 16e0 00000000 		.zero	32
 5019      00000000 
 5019      00000000 
 5019      00000000 
 5019      00000000 
 5020              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_back
 5021              		.align 2
 5022              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_
 5024              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_:
 5025              	.LASANPC2672:
 5026              	.LFB2672:
1045:/usr/include/c++/9/bits/stl_vector.h **** 
1046:/usr/include/c++/9/bits/stl_vector.h ****       /**
1047:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1048:/usr/include/c++/9/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1049:/usr/include/c++/9/bits/stl_vector.h ****        *  accessed.
1050:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1051:/usr/include/c++/9/bits/stl_vector.h ****        *
1052:/usr/include/c++/9/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1053:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1054:/usr/include/c++/9/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1055:/usr/include/c++/9/bits/stl_vector.h ****        *  see at().)
1056:/usr/include/c++/9/bits/stl_vector.h ****        */
1057:/usr/include/c++/9/bits/stl_vector.h ****       const_reference
1058:/usr/include/c++/9/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1059:/usr/include/c++/9/bits/stl_vector.h ****       {
1060:/usr/include/c++/9/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1061:/usr/include/c++/9/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1062:/usr/include/c++/9/bits/stl_vector.h ****       }
1063:/usr/include/c++/9/bits/stl_vector.h **** 
1064:/usr/include/c++/9/bits/stl_vector.h ****     protected:
1065:/usr/include/c++/9/bits/stl_vector.h ****       /// Safety check used only from at().
1066:/usr/include/c++/9/bits/stl_vector.h ****       void
1067:/usr/include/c++/9/bits/stl_vector.h ****       _M_range_check(size_type __n) const
1068:/usr/include/c++/9/bits/stl_vector.h ****       {
1069:/usr/include/c++/9/bits/stl_vector.h **** 	if (__n >= this->size())
1070:/usr/include/c++/9/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1071:/usr/include/c++/9/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
1072:/usr/include/c++/9/bits/stl_vector.h **** 				       "(which is %zu)"),
1073:/usr/include/c++/9/bits/stl_vector.h **** 				   __n, this->size());
1074:/usr/include/c++/9/bits/stl_vector.h ****       }
1075:/usr/include/c++/9/bits/stl_vector.h **** 
1076:/usr/include/c++/9/bits/stl_vector.h ****     public:
1077:/usr/include/c++/9/bits/stl_vector.h ****       /**
1078:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1079:/usr/include/c++/9/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1080:/usr/include/c++/9/bits/stl_vector.h ****        *  accessed.
1081:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1082:/usr/include/c++/9/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1083:/usr/include/c++/9/bits/stl_vector.h ****        *
1084:/usr/include/c++/9/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1085:/usr/include/c++/9/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1086:/usr/include/c++/9/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1087:/usr/include/c++/9/bits/stl_vector.h ****        */
1088:/usr/include/c++/9/bits/stl_vector.h ****       reference
1089:/usr/include/c++/9/bits/stl_vector.h ****       at(size_type __n)
1090:/usr/include/c++/9/bits/stl_vector.h ****       {
1091:/usr/include/c++/9/bits/stl_vector.h **** 	_M_range_check(__n);
1092:/usr/include/c++/9/bits/stl_vector.h **** 	return (*this)[__n];
1093:/usr/include/c++/9/bits/stl_vector.h ****       }
1094:/usr/include/c++/9/bits/stl_vector.h **** 
1095:/usr/include/c++/9/bits/stl_vector.h ****       /**
1096:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1097:/usr/include/c++/9/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1098:/usr/include/c++/9/bits/stl_vector.h ****        *  accessed.
1099:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1100:/usr/include/c++/9/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1101:/usr/include/c++/9/bits/stl_vector.h ****        *
1102:/usr/include/c++/9/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1103:/usr/include/c++/9/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1104:/usr/include/c++/9/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1105:/usr/include/c++/9/bits/stl_vector.h ****        */
1106:/usr/include/c++/9/bits/stl_vector.h ****       const_reference
1107:/usr/include/c++/9/bits/stl_vector.h ****       at(size_type __n) const
1108:/usr/include/c++/9/bits/stl_vector.h ****       {
1109:/usr/include/c++/9/bits/stl_vector.h **** 	_M_range_check(__n);
1110:/usr/include/c++/9/bits/stl_vector.h **** 	return (*this)[__n];
1111:/usr/include/c++/9/bits/stl_vector.h ****       }
1112:/usr/include/c++/9/bits/stl_vector.h **** 
1113:/usr/include/c++/9/bits/stl_vector.h ****       /**
1114:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
1115:/usr/include/c++/9/bits/stl_vector.h ****        *  element of the %vector.
1116:/usr/include/c++/9/bits/stl_vector.h ****        */
1117:/usr/include/c++/9/bits/stl_vector.h ****       reference
1118:/usr/include/c++/9/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1119:/usr/include/c++/9/bits/stl_vector.h ****       {
1120:/usr/include/c++/9/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1121:/usr/include/c++/9/bits/stl_vector.h **** 	return *begin();
1122:/usr/include/c++/9/bits/stl_vector.h ****       }
1123:/usr/include/c++/9/bits/stl_vector.h **** 
1124:/usr/include/c++/9/bits/stl_vector.h ****       /**
1125:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1126:/usr/include/c++/9/bits/stl_vector.h ****        *  element of the %vector.
1127:/usr/include/c++/9/bits/stl_vector.h ****        */
1128:/usr/include/c++/9/bits/stl_vector.h ****       const_reference
1129:/usr/include/c++/9/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1130:/usr/include/c++/9/bits/stl_vector.h ****       {
1131:/usr/include/c++/9/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1132:/usr/include/c++/9/bits/stl_vector.h **** 	return *begin();
1133:/usr/include/c++/9/bits/stl_vector.h ****       }
1134:/usr/include/c++/9/bits/stl_vector.h **** 
1135:/usr/include/c++/9/bits/stl_vector.h ****       /**
1136:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
1137:/usr/include/c++/9/bits/stl_vector.h ****        *  element of the %vector.
1138:/usr/include/c++/9/bits/stl_vector.h ****        */
1139:/usr/include/c++/9/bits/stl_vector.h ****       reference
1140:/usr/include/c++/9/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1141:/usr/include/c++/9/bits/stl_vector.h ****       {
1142:/usr/include/c++/9/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1143:/usr/include/c++/9/bits/stl_vector.h **** 	return *(end() - 1);
1144:/usr/include/c++/9/bits/stl_vector.h ****       }
1145:/usr/include/c++/9/bits/stl_vector.h **** 
1146:/usr/include/c++/9/bits/stl_vector.h ****       /**
1147:/usr/include/c++/9/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1148:/usr/include/c++/9/bits/stl_vector.h ****        *  last element of the %vector.
1149:/usr/include/c++/9/bits/stl_vector.h ****        */
1150:/usr/include/c++/9/bits/stl_vector.h ****       const_reference
1151:/usr/include/c++/9/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1152:/usr/include/c++/9/bits/stl_vector.h ****       {
1153:/usr/include/c++/9/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1154:/usr/include/c++/9/bits/stl_vector.h **** 	return *(end() - 1);
1155:/usr/include/c++/9/bits/stl_vector.h ****       }
1156:/usr/include/c++/9/bits/stl_vector.h **** 
1157:/usr/include/c++/9/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1158:/usr/include/c++/9/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1159:/usr/include/c++/9/bits/stl_vector.h ****       // data access
1160:/usr/include/c++/9/bits/stl_vector.h ****       /**
1161:/usr/include/c++/9/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1162:/usr/include/c++/9/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1163:/usr/include/c++/9/bits/stl_vector.h ****        */
1164:/usr/include/c++/9/bits/stl_vector.h ****       _Tp*
1165:/usr/include/c++/9/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1166:/usr/include/c++/9/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1167:/usr/include/c++/9/bits/stl_vector.h **** 
1168:/usr/include/c++/9/bits/stl_vector.h ****       const _Tp*
1169:/usr/include/c++/9/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1170:/usr/include/c++/9/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1171:/usr/include/c++/9/bits/stl_vector.h **** 
1172:/usr/include/c++/9/bits/stl_vector.h ****       // [23.2.4.3] modifiers
1173:/usr/include/c++/9/bits/stl_vector.h ****       /**
1174:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1175:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  Data to be added.
1176:/usr/include/c++/9/bits/stl_vector.h ****        *
1177:/usr/include/c++/9/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1178:/usr/include/c++/9/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1179:/usr/include/c++/9/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1180:/usr/include/c++/9/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1181:/usr/include/c++/9/bits/stl_vector.h ****        *  available.
1182:/usr/include/c++/9/bits/stl_vector.h ****        */
1183:/usr/include/c++/9/bits/stl_vector.h ****       void
1184:/usr/include/c++/9/bits/stl_vector.h ****       push_back(const value_type& __x)
 5027              		.loc 4 1184 7
 5028              		.cfi_startproc
 5029 0000 F30F1EFA 		endbr64
 5030 0004 55       		pushq	%rbp
 5031              		.cfi_def_cfa_offset 16
 5032              		.cfi_offset 6, -16
 5033 0005 4889E5   		movq	%rsp, %rbp
 5034              		.cfi_def_cfa_register 6
 5035 0008 4154     		pushq	%r12
 5036 000a 53       		pushq	%rbx
 5037 000b 4883EC10 		subq	$16, %rsp
 5038              		.cfi_offset 12, -24
 5039              		.cfi_offset 3, -32
 5040 000f 48897DE8 		movq	%rdi, -24(%rbp)
 5041 0013 488975E0 		movq	%rsi, -32(%rbp)
1185:/usr/include/c++/9/bits/stl_vector.h ****       {
1186:/usr/include/c++/9/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 5042              		.loc 4 1186 20
 5043 0017 488B45E8 		movq	-24(%rbp), %rax
 5044 001b 48837DE8 		cmpq	$0, -24(%rbp)
 5044      00
 5045 0020 740B     		je	.L279
 5046 0022 4889C2   		movq	%rax, %rdx
 5047 0025 83E207   		andl	$7, %edx
 5048 0028 4885D2   		testq	%rdx, %rdx
 5049 002b 740F     		je	.L280
 5050              	.L279:
 5051 002d 4889C6   		movq	%rax, %rsi
 5052 0030 488D3D00 		leaq	.Lubsan_data457(%rip), %rdi
 5052      000000
 5053 0037 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5053      00
 5054              	.L280:
 5055 003c 488B45E8 		movq	-24(%rbp), %rax
 5056 0040 488D5008 		leaq	8(%rax), %rdx
 5057 0044 4883F8F8 		cmpq	$-8, %rax
 5058 0048 7213     		jb	.L281
 5059 004a 488B45E8 		movq	-24(%rbp), %rax
 5060 004e 4889C6   		movq	%rax, %rsi
 5061 0051 488D3D00 		leaq	.Lubsan_data458(%rip), %rdi
 5061      000000
 5062 0058 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 5062      00
 5063              	.L281:
 5064 005d 488B45E8 		movq	-24(%rbp), %rax
 5065 0061 4883C008 		addq	$8, %rax
 5066 0065 4889C2   		movq	%rax, %rdx
 5067 0068 48C1EA03 		shrq	$3, %rdx
 5068 006c 4881C200 		addq	$2147450880, %rdx
 5068      80FF7F
 5069 0073 0FB612   		movzbl	(%rdx), %edx
 5070 0076 84D2     		testb	%dl, %dl
 5071 0078 7408     		je	.L282
 5072 007a 4889C7   		movq	%rax, %rdi
 5073 007d E8000000 		call	__asan_report_load8@PLT
 5073      00
 5074              	.L282:
 5075 0082 488B45E8 		movq	-24(%rbp), %rax
 5076 0086 488B5808 		movq	8(%rax), %rbx
 5077              		.loc 4 1186 47
 5078 008a 488B45E8 		movq	-24(%rbp), %rax
 5079 008e 48837DE8 		cmpq	$0, -24(%rbp)
 5079      00
 5080 0093 740B     		je	.L283
 5081 0095 4889C2   		movq	%rax, %rdx
 5082 0098 83E207   		andl	$7, %edx
 5083 009b 4885D2   		testq	%rdx, %rdx
 5084 009e 740F     		je	.L284
 5085              	.L283:
 5086 00a0 4889C6   		movq	%rax, %rsi
 5087 00a3 488D3D00 		leaq	.Lubsan_data459(%rip), %rdi
 5087      000000
 5088 00aa E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5088      00
 5089              	.L284:
 5090 00af 488B45E8 		movq	-24(%rbp), %rax
 5091 00b3 488D5010 		leaq	16(%rax), %rdx
 5092 00b7 4883F8F0 		cmpq	$-16, %rax
 5093 00bb 7213     		jb	.L285
 5094 00bd 488B45E8 		movq	-24(%rbp), %rax
 5095 00c1 4889C6   		movq	%rax, %rsi
 5096 00c4 488D3D00 		leaq	.Lubsan_data460(%rip), %rdi
 5096      000000
 5097 00cb E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 5097      00
 5098              	.L285:
 5099 00d0 488B45E8 		movq	-24(%rbp), %rax
 5100 00d4 4883C010 		addq	$16, %rax
 5101 00d8 4889C2   		movq	%rax, %rdx
 5102 00db 48C1EA03 		shrq	$3, %rdx
 5103 00df 4881C200 		addq	$2147450880, %rdx
 5103      80FF7F
 5104 00e6 0FB612   		movzbl	(%rdx), %edx
 5105 00e9 84D2     		testb	%dl, %dl
 5106 00eb 7408     		je	.L286
 5107 00ed 4889C7   		movq	%rax, %rdi
 5108 00f0 E8000000 		call	__asan_report_load8@PLT
 5108      00
 5109              	.L286:
 5110 00f5 488B45E8 		movq	-24(%rbp), %rax
 5111 00f9 488B4010 		movq	16(%rax), %rax
 5112              		.loc 4 1186 2
 5113 00fd 4839C3   		cmpq	%rax, %rbx
 5114 0100 0F84AD01 		je	.L287
 5114      0000
1187:/usr/include/c++/9/bits/stl_vector.h **** 	  {
1188:/usr/include/c++/9/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1189:/usr/include/c++/9/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 5115              		.loc 4 1189 30
 5116 0106 488B45E0 		movq	-32(%rbp), %rax
 5117 010a 48837DE0 		cmpq	$0, -32(%rbp)
 5117      00
 5118 010f 740B     		je	.L288
 5119 0111 4889C2   		movq	%rax, %rdx
 5120 0114 83E207   		andl	$7, %edx
 5121 0117 4885D2   		testq	%rdx, %rdx
 5122 011a 740F     		je	.L289
 5123              	.L288:
 5124 011c 4889C6   		movq	%rax, %rsi
 5125 011f 488D3D00 		leaq	.Lubsan_data461(%rip), %rdi
 5125      000000
 5126 0126 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5126      00
 5127              	.L289:
 5128 012b 488B45E8 		movq	-24(%rbp), %rax
 5129 012f 48837DE8 		cmpq	$0, -24(%rbp)
 5129      00
 5130 0134 740B     		je	.L290
 5131 0136 4889C2   		movq	%rax, %rdx
 5132 0139 83E207   		andl	$7, %edx
 5133 013c 4885D2   		testq	%rdx, %rdx
 5134 013f 740F     		je	.L291
 5135              	.L290:
 5136 0141 4889C6   		movq	%rax, %rsi
 5137 0144 488D3D00 		leaq	.Lubsan_data462(%rip), %rdi
 5137      000000
 5138 014b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5138      00
 5139              	.L291:
 5140 0150 488B45E8 		movq	-24(%rbp), %rax
 5141 0154 488D5008 		leaq	8(%rax), %rdx
 5142 0158 4883F8F8 		cmpq	$-8, %rax
 5143 015c 7213     		jb	.L292
 5144 015e 488B45E8 		movq	-24(%rbp), %rax
 5145 0162 4889C6   		movq	%rax, %rsi
 5146 0165 488D3D00 		leaq	.Lubsan_data463(%rip), %rdi
 5146      000000
 5147 016c E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 5147      00
 5148              	.L292:
 5149 0171 488B45E8 		movq	-24(%rbp), %rax
 5150 0175 4C8B6008 		movq	8(%rax), %r12
 5151              		.loc 4 1189 37
 5152 0179 488B45E8 		movq	-24(%rbp), %rax
 5153 017d 48837DE8 		cmpq	$0, -24(%rbp)
 5153      00
 5154 0182 740B     		je	.L293
 5155 0184 4889C2   		movq	%rax, %rdx
 5156 0187 83E207   		andl	$7, %edx
 5157 018a 4885D2   		testq	%rdx, %rdx
 5158 018d 740F     		je	.L294
 5159              	.L293:
 5160 018f 4889C6   		movq	%rax, %rsi
 5161 0192 488D3D00 		leaq	.Lubsan_data464(%rip), %rdi
 5161      000000
 5162 0199 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5162      00
 5163              	.L294:
 5164 019e 488B5DE8 		movq	-24(%rbp), %rbx
 5165              		.loc 4 1189 30
 5166 01a2 4885DB   		testq	%rbx, %rbx
 5167 01a5 7511     		jne	.L295
 5168 01a7 BE000000 		movl	$0, %esi
 5168      00
 5169 01ac 488D3D00 		leaq	.Lubsan_data465(%rip), %rdi
 5169      000000
 5170 01b3 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5170      00
 5171              	.L295:
 5172 01b8 488B45E0 		movq	-32(%rbp), %rax
 5173 01bc 4889C2   		movq	%rax, %rdx
 5174 01bf 4C89E6   		movq	%r12, %rsi
 5175 01c2 4889DF   		movq	%rbx, %rdi
 5176 01c5 E8000000 		call	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS
 5176      00
1190:/usr/include/c++/9/bits/stl_vector.h **** 				     __x);
1191:/usr/include/c++/9/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 5177              		.loc 4 1191 22
 5178 01ca 488B45E8 		movq	-24(%rbp), %rax
 5179 01ce 48837DE8 		cmpq	$0, -24(%rbp)
 5179      00
 5180 01d3 740B     		je	.L296
 5181 01d5 4889C2   		movq	%rax, %rdx
 5182 01d8 83E207   		andl	$7, %edx
 5183 01db 4885D2   		testq	%rdx, %rdx
 5184 01de 740F     		je	.L297
 5185              	.L296:
 5186 01e0 4889C6   		movq	%rax, %rsi
 5187 01e3 488D3D00 		leaq	.Lubsan_data466(%rip), %rdi
 5187      000000
 5188 01ea E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5188      00
 5189              	.L297:
 5190 01ef 488B45E8 		movq	-24(%rbp), %rax
 5191 01f3 488D5008 		leaq	8(%rax), %rdx
 5192 01f7 4883F8F8 		cmpq	$-8, %rax
 5193 01fb 7213     		jb	.L298
 5194 01fd 488B45E8 		movq	-24(%rbp), %rax
 5195 0201 4889C6   		movq	%rax, %rsi
 5196 0204 488D3D00 		leaq	.Lubsan_data467(%rip), %rdi
 5196      000000
 5197 020b E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 5197      00
 5198              	.L298:
 5199 0210 488B45E8 		movq	-24(%rbp), %rax
 5200 0214 4883C008 		addq	$8, %rax
 5201 0218 4889C2   		movq	%rax, %rdx
 5202 021b 48C1EA03 		shrq	$3, %rdx
 5203 021f 4881C200 		addq	$2147450880, %rdx
 5203      80FF7F
 5204 0226 0FB612   		movzbl	(%rdx), %edx
 5205 0229 84D2     		testb	%dl, %dl
 5206 022b 7408     		je	.L299
 5207 022d 4889C7   		movq	%rax, %rdi
 5208 0230 E8000000 		call	__asan_report_load8@PLT
 5208      00
 5209              	.L299:
 5210 0235 488B45E8 		movq	-24(%rbp), %rax
 5211 0239 488B5808 		movq	8(%rax), %rbx
 5212              		.loc 4 1191 6
 5213 023d 4889DA   		movq	%rbx, %rdx
 5214 0240 488D4220 		leaq	32(%rdx), %rax
 5215 0244 4883FAE0 		cmpq	$-32, %rdx
 5216 0248 7212     		jb	.L300
 5217 024a 4889C2   		movq	%rax, %rdx
 5218 024d 4889DE   		movq	%rbx, %rsi
 5219 0250 488D3D00 		leaq	.Lubsan_data468(%rip), %rdi
 5219      000000
 5220 0257 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 5220      00
 5221              	.L300:
 5222 025c 4883C320 		addq	$32, %rbx
 5223 0260 488B45E8 		movq	-24(%rbp), %rax
 5224 0264 48837DE8 		cmpq	$0, -24(%rbp)
 5224      00
 5225 0269 740B     		je	.L301
 5226 026b 4889C2   		movq	%rax, %rdx
 5227 026e 83E207   		andl	$7, %edx
 5228 0271 4885D2   		testq	%rdx, %rdx
 5229 0274 740F     		je	.L302
 5230              	.L301:
 5231 0276 4889C6   		movq	%rax, %rsi
 5232 0279 488D3D00 		leaq	.Lubsan_data469(%rip), %rdi
 5232      000000
 5233 0280 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5233      00
 5234              	.L302:
 5235 0285 488B45E8 		movq	-24(%rbp), %rax
 5236 0289 488D5008 		leaq	8(%rax), %rdx
 5237 028d 4883F8F8 		cmpq	$-8, %rax
 5238 0291 7213     		jb	.L303
 5239 0293 488B45E8 		movq	-24(%rbp), %rax
 5240 0297 4889C6   		movq	%rax, %rsi
 5241 029a 488D3D00 		leaq	.Lubsan_data470(%rip), %rdi
 5241      000000
 5242 02a1 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 5242      00
 5243              	.L303:
 5244 02a6 488B45E8 		movq	-24(%rbp), %rax
 5245 02aa 48895808 		movq	%rbx, 8(%rax)
1192:/usr/include/c++/9/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1193:/usr/include/c++/9/bits/stl_vector.h **** 	  }
1194:/usr/include/c++/9/bits/stl_vector.h **** 	else
1195:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1196:/usr/include/c++/9/bits/stl_vector.h ****       }
 5246              		.loc 4 1196 7
 5247 02ae E9910000 		jmp	.L311
 5247      00
 5248              	.L287:
1195:/usr/include/c++/9/bits/stl_vector.h ****       }
 5249              		.loc 4 1195 4
 5250 02b3 488B45E8 		movq	-24(%rbp), %rax
 5251 02b7 48837DE8 		cmpq	$0, -24(%rbp)
 5251      00
 5252 02bc 740B     		je	.L305
 5253 02be 4889C2   		movq	%rax, %rdx
 5254 02c1 83E207   		andl	$7, %edx
 5255 02c4 4885D2   		testq	%rdx, %rdx
 5256 02c7 740F     		je	.L306
 5257              	.L305:
 5258 02c9 4889C6   		movq	%rax, %rsi
 5259 02cc 488D3D00 		leaq	.Lubsan_data471(%rip), %rdi
 5259      000000
 5260 02d3 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5260      00
 5261              	.L306:
 5262 02d8 488B45E0 		movq	-32(%rbp), %rax
 5263 02dc 48837DE0 		cmpq	$0, -32(%rbp)
 5263      00
 5264 02e1 740B     		je	.L307
 5265 02e3 4889C2   		movq	%rax, %rdx
 5266 02e6 83E207   		andl	$7, %edx
 5267 02e9 4885D2   		testq	%rdx, %rdx
 5268 02ec 740F     		je	.L308
 5269              	.L307:
 5270 02ee 4889C6   		movq	%rax, %rsi
 5271 02f1 488D3D00 		leaq	.Lubsan_data472(%rip), %rdi
 5271      000000
 5272 02f8 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5272      00
 5273              	.L308:
 5274 02fd 488B45E8 		movq	-24(%rbp), %rax
 5275 0301 48837DE8 		cmpq	$0, -24(%rbp)
 5275      00
 5276 0306 740B     		je	.L309
 5277 0308 4889C2   		movq	%rax, %rdx
 5278 030b 83E207   		andl	$7, %edx
 5279 030e 4885D2   		testq	%rdx, %rdx
 5280 0311 740F     		je	.L310
 5281              	.L309:
 5282 0313 4889C6   		movq	%rax, %rsi
 5283 0316 488D3D00 		leaq	.Lubsan_data473(%rip), %rdi
 5283      000000
 5284 031d E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5284      00
 5285              	.L310:
 5286 0322 488B45E8 		movq	-24(%rbp), %rax
 5287 0326 4889C7   		movq	%rax, %rdi
 5288 0329 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv
 5288      00
 5289 032e 4889C1   		movq	%rax, %rcx
 5290 0331 488B55E0 		movq	-32(%rbp), %rdx
 5291 0335 488B45E8 		movq	-24(%rbp), %rax
 5292 0339 4889CE   		movq	%rcx, %rsi
 5293 033c 4889C7   		movq	%rax, %rdi
 5294 033f E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertI
 5294      00
 5295              	.L311:
 5296              		.loc 4 1196 7
 5297 0344 90       		nop
 5298 0345 4883C410 		addq	$16, %rsp
 5299 0349 5B       		popq	%rbx
 5300 034a 415C     		popq	%r12
 5301 034c 5D       		popq	%rbp
 5302              		.cfi_def_cfa 7, 8
 5303 034d C3       		ret
 5304              		.cfi_endproc
 5305              	.LFE2672:
 5307              		.section	.data.rel.local
 5308              		.align 32
 5311              	.Lubsan_data474:
 5312 1700 00000000 		.quad	.LC3
 5312      00000000 
 5313 1708 29030000 		.long	809
 5314 170c 27000000 		.long	39
 5315 1710 00000000 		.quad	.Lubsan_type10
 5315      00000000 
 5316 1718 03       		.byte	3
 5317 1719 03       		.byte	3
 5318 171a 00000000 		.zero	6
 5318      0000
 5319 1720 00000000 		.zero	32
 5319      00000000 
 5319      00000000 
 5319      00000000 
 5319      00000000 
 5320              		.data
 5321              		.align 32
 5324              	.Lubsan_type29:
 5327 0684 27737472 		.string	"'struct basic_string *'"
 5327      75637420 
 5327      62617369 
 5327      635F7374 
 5327      72696E67 
 5328 069c 00000000 		.zero	36
 5328      00000000 
 5328      00000000 
 5328      00000000 
 5328      00000000 
 5329              		.section	.data.rel.local
 5330              		.align 32
 5333              	.Lubsan_data475:
 5334 1740 00000000 		.quad	.LC3
 5334      00000000 
 5335 1748 29030000 		.long	809
 5336 174c 27000000 		.long	39
 5337 1750 00000000 		.quad	.Lubsan_type29
 5337      00000000 
 5338 1758 03       		.byte	3
 5339 1759 02       		.byte	2
 5340 175a 00000000 		.zero	6
 5340      0000
 5341 1760 00000000 		.zero	32
 5341      00000000 
 5341      00000000 
 5341      00000000 
 5341      00000000 
 5342              		.section	.rodata
 5343              	.LC12:
 5344 0443 31203332 		.string	"1 32 8 9 <unknown>"
 5344      20382039 
 5344      203C756E 
 5344      6B6E6F77 
 5344      6E3E00
 5345              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv,"
 5346              		.align 2
 5347              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv
 5349              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv:
 5350              	.LASANPC2675:
 5351              	.LFB2675:
 808:/usr/include/c++/9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 5352              		.loc 4 808 7
 5353              		.cfi_startproc
 5354 0000 F30F1EFA 		endbr64
 5355 0004 55       		pushq	%rbp
 5356              		.cfi_def_cfa_offset 16
 5357              		.cfi_offset 6, -16
 5358 0005 4889E5   		movq	%rsp, %rbp
 5359              		.cfi_def_cfa_register 6
 5360 0008 4157     		pushq	%r15
 5361 000a 4156     		pushq	%r14
 5362 000c 4155     		pushq	%r13
 5363 000e 4154     		pushq	%r12
 5364 0010 53       		pushq	%rbx
 5365 0011 4883EC78 		subq	$120, %rsp
 5366              		.cfi_offset 15, -24
 5367              		.cfi_offset 14, -32
 5368              		.cfi_offset 13, -40
 5369              		.cfi_offset 12, -48
 5370              		.cfi_offset 3, -56
 5371 0015 4889BD68 		movq	%rdi, -152(%rbp)
 5371      FFFFFF
 5372 001c 488D9D70 		leaq	-144(%rbp), %rbx
 5372      FFFFFF
 5373 0023 4989DF   		movq	%rbx, %r15
 5374 0026 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 5374      000000
 5375 002d 7412     		je	.L312
 5376 002f BF400000 		movl	$64, %edi
 5376      00
 5377 0034 E8000000 		call	__asan_stack_malloc_0@PLT
 5377      00
 5378              	.LVL5:
 5379 0039 4885C0   		testq	%rax, %rax
 5380 003c 7403     		je	.L312
 5381 003e 4889C3   		movq	%rax, %rbx
 5382              	.L312:
 5383 0041 488D4360 		leaq	96(%rbx), %rax
 5384 0045 4989C6   		movq	%rax, %r14
 5385 0048 48C703B3 		movq	$1102416563, (%rbx)
 5385      8AB541
 5386 004f 488D0500 		leaq	.LC12(%rip), %rax
 5386      000000
 5387 0056 48894308 		movq	%rax, 8(%rbx)
 5388 005a 488D059F 		leaq	.LASANPC2675(%rip), %rax
 5388      FFFFFF
 5389 0061 48894310 		movq	%rax, 16(%rbx)
 5390 0065 4989DC   		movq	%rbx, %r12
 5391 0068 49C1EC03 		shrq	$3, %r12
 5392 006c 41C78424 		movl	$-235802127, 2147450880(%r12)
 5392      0080FF7F 
 5392      F1F1F1F1 
 5393 0078 41C78424 		movl	$-202116352, 2147450884(%r12)
 5393      0480FF7F 
 5393      00F3F3F3 
 808:/usr/include/c++/9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 5394              		.loc 4 808 7
 5395 0084 64488B04 		movq	%fs:40, %rax
 5395      25280000 
 5395      00
 5396 008d 488945C8 		movq	%rax, -56(%rbp)
 5397 0091 31C0     		xorl	%eax, %eax
 809:/usr/include/c++/9/bits/stl_vector.h **** 
 5398              		.loc 4 809 39
 5399 0093 488B8568 		movq	-152(%rbp), %rax
 5399      FFFFFF
 5400 009a 4883BD68 		cmpq	$0, -152(%rbp)
 5400      FFFFFF00 
 5401 00a2 740B     		je	.L316
 5402 00a4 4889C2   		movq	%rax, %rdx
 5403 00a7 83E207   		andl	$7, %edx
 5404 00aa 4885D2   		testq	%rdx, %rdx
 5405 00ad 740F     		je	.L317
 5406              	.L316:
 5407 00af 4889C6   		movq	%rax, %rsi
 5408 00b2 488D3D00 		leaq	.Lubsan_data474(%rip), %rdi
 5408      000000
 5409 00b9 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5409      00
 5410              	.L317:
 5411 00be 4C8BAD68 		movq	-152(%rbp), %r13
 5411      FFFFFF
 5412 00c5 4C89E8   		movq	%r13, %rax
 5413 00c8 4D85ED   		testq	%r13, %r13
 5414 00cb 740B     		je	.L318
 5415 00cd 4889C2   		movq	%rax, %rdx
 5416 00d0 83E207   		andl	$7, %edx
 5417 00d3 4885D2   		testq	%rdx, %rdx
 5418 00d6 740F     		je	.L319
 5419              	.L318:
 5420 00d8 4889C6   		movq	%rax, %rsi
 5421 00db 488D3D00 		leaq	.Lubsan_data475(%rip), %rdi
 5421      000000
 5422 00e2 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5422      00
 5423              	.L319:
 809:/usr/include/c++/9/bits/stl_vector.h **** 
 5424              		.loc 4 809 47
 5425 00e7 498D46C0 		leaq	-64(%r14), %rax
 5426 00eb 4C89EE   		movq	%r13, %rsi
 5427 00ee 4889C7   		movq	%rax, %rdi
 5428 00f1 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vect
 5428      00
 5429 00f6 498D46C0 		leaq	-64(%r14), %rax
 5430 00fa 4889C2   		movq	%rax, %rdx
 5431 00fd 48C1EA03 		shrq	$3, %rdx
 5432 0101 4881C200 		addq	$2147450880, %rdx
 5432      80FF7F
 5433 0108 0FB612   		movzbl	(%rdx), %edx
 5434 010b 84D2     		testb	%dl, %dl
 5435 010d 7408     		je	.L320
 5436 010f 4889C7   		movq	%rax, %rdi
 5437 0112 E8000000 		call	__asan_report_load8@PLT
 5437      00
 5438              	.L320:
 5439 0117 498B46C0 		movq	-64(%r14), %rax
 5440 011b 4889C2   		movq	%rax, %rdx
 808:/usr/include/c++/9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 5441              		.loc 4 808 7
 5442 011e 4939DF   		cmpq	%rbx, %r15
 5443 0121 7422     		je	.L313
 5444 0123 48C7030E 		movq	$1172321806, (%rbx)
 5444      36E045
 5445 012a 48B8F5F5 		movabsq	$-723401728380766731, %rax
 5445      F5F5F5F5 
 5445      F5F5
 5446 0134 49898424 		movq	%rax, 2147450880(%r12)
 5446      0080FF7F 
 5447 013c 488B4338 		movq	56(%rbx), %rax
 5448 0140 C60000   		movb	$0, (%rax)
 5449 0143 EB0C     		jmp	.L314
 5450              	.L313:
 5451 0145 49C78424 		movq	$0, 2147450880(%r12)
 5451      0080FF7F 
 5451      00000000 
 5452              	.L314:
 809:/usr/include/c++/9/bits/stl_vector.h **** 
 5453              		.loc 4 809 50
 5454 0151 488B45C8 		movq	-56(%rbp), %rax
 5455 0155 64483304 		xorq	%fs:40, %rax
 5455      25280000 
 5455      00
 5456 015e 7405     		je	.L322
 5457 0160 E8000000 		call	__stack_chk_fail@PLT
 5457      00
 5458              	.L322:
 5459 0165 4889D0   		movq	%rdx, %rax
 5460 0168 4883C478 		addq	$120, %rsp
 5461 016c 5B       		popq	%rbx
 5462 016d 415C     		popq	%r12
 5463 016f 415D     		popq	%r13
 5464 0171 415E     		popq	%r14
 5465 0173 415F     		popq	%r15
 5466 0175 5D       		popq	%rbp
 5467              		.cfi_def_cfa 7, 8
 5468 0176 C3       		ret
 5469              		.cfi_endproc
 5470              	.LFE2675:
 5472              		.data
 5473              		.align 32
 5476              	.Lubsan_type30:
 5479 06c4 27737472 		.string	"'struct <unknown>'"
 5479      75637420 
 5479      3C756E6B 
 5479      6E6F776E 
 5479      3E2700
 5480 06d7 00000000 		.zero	41
 5480      00000000 
 5480      00000000 
 5480      00000000 
 5480      00000000 
 5481              		.section	.rodata
 5482 0456 00000000 		.align 32
 5482      00000000 
 5482      0000
 5483              	.LC13:
 5484 0460 2F757372 		.string	"/usr/include/c++/9/bits/stl_iterator.h"
 5484      2F696E63 
 5484      6C756465 
 5484      2F632B2B 
 5484      2F392F62 
 5485 0487 00000000 		.zero	57
 5485      00000000 
 5485      00000000 
 5485      00000000 
 5485      00000000 
 5486              		.section	.data.rel.local
 5487              		.align 32
 5490              	.Lubsan_data476:
 5491 1780 00000000 		.quad	.LC13
 5491      00000000 
 5492 1788 28030000 		.long	808
 5493 178c 09000000 		.long	9
 5494 1790 00000000 		.quad	.Lubsan_type30
 5494      00000000 
 5495 1798 03       		.byte	3
 5496 1799 02       		.byte	2
 5497 179a 00000000 		.zero	6
 5497      0000
 5498 17a0 00000000 		.zero	32
 5498      00000000 
 5498      00000000 
 5498      00000000 
 5498      00000000 
 5499              		.align 32
 5502              	.Lubsan_data477:
 5503 17c0 00000000 		.quad	.LC13
 5503      00000000 
 5504 17c8 2C030000 		.long	812
 5505 17cc 20000000 		.long	32
 5506 17d0 00000000 		.quad	.Lubsan_type16
 5506      00000000 
 5507 17d8 03       		.byte	3
 5508 17d9 04       		.byte	4
 5509 17da 00000000 		.zero	6
 5509      0000
 5510 17e0 00000000 		.zero	32
 5510      00000000 
 5510      00000000 
 5510      00000000 
 5510      00000000 
 5511              		.align 32
 5514              	.Lubsan_data478:
 5515 1800 00000000 		.quad	.LC13
 5515      00000000 
 5516 1808 2C030000 		.long	812
 5517 180c 20000000 		.long	32
 5518 1810 00000000 		.quad	.Lubsan_type29
 5518      00000000 
 5519 1818 03       		.byte	3
 5520 1819 00       		.byte	0
 5521 181a 00000000 		.zero	6
 5521      0000
 5522 1820 00000000 		.zero	32
 5522      00000000 
 5522      00000000 
 5522      00000000 
 5522      00000000 
 5523              		.data
 5524              		.align 32
 5527              	.Lubsan_type31:
 5530 0704 27737472 		.string	"'struct __normal_iterator'"
 5530      75637420 
 5530      5F5F6E6F 
 5530      726D616C 
 5530      5F697465 
 5531 071f 00000000 		.zero	33
 5531      00000000 
 5531      00000000 
 5531      00000000 
 5531      00000000 
 5532              		.section	.data.rel.local
 5533              		.align 32
 5536              	.Lubsan_data479:
 5537 1840 00000000 		.quad	.LC13
 5537      00000000 
 5538 1848 2C030000 		.long	812
 5539 184c 20000000 		.long	32
 5540 1850 00000000 		.quad	.Lubsan_type31
 5540      00000000 
 5541 1858 03       		.byte	3
 5542 1859 03       		.byte	3
 5543 185a 00000000 		.zero	6
 5543      0000
 5544 1860 00000000 		.zero	32
 5544      00000000 
 5544      00000000 
 5544      00000000 
 5544      00000000 
 5545              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 5546              		.align 2
 5547              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6ve
 5549              	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6
 5550              	.LASANPC2677:
 5551              	.LFB2677:
 5552              		.file 7 "/usr/include/c++/9/bits/stl_iterator.h"
   1:/usr/include/c++/9/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_iterator.h **** 
   3:/usr/include/c++/9/bits/stl_iterator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_iterator.h **** //
   5:/usr/include/c++/9/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_iterator.h **** 
  11:/usr/include/c++/9/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_iterator.h **** 
  16:/usr/include/c++/9/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_iterator.h **** 
  20:/usr/include/c++/9/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_iterator.h **** 
  25:/usr/include/c++/9/bits/stl_iterator.h **** /*
  26:/usr/include/c++/9/bits/stl_iterator.h ****  *
  27:/usr/include/c++/9/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_iterator.h ****  *
  30:/usr/include/c++/9/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_iterator.h ****  *
  38:/usr/include/c++/9/bits/stl_iterator.h ****  *
  39:/usr/include/c++/9/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/9/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_iterator.h ****  *
  42:/usr/include/c++/9/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/9/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_iterator.h ****  */
  50:/usr/include/c++/9/bits/stl_iterator.h **** 
  51:/usr/include/c++/9/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/9/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/9/bits/stl_iterator.h ****  *
  55:/usr/include/c++/9/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/9/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/9/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/9/bits/stl_iterator.h ****  */
  59:/usr/include/c++/9/bits/stl_iterator.h **** 
  60:/usr/include/c++/9/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/9/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/9/bits/stl_iterator.h **** 
  63:/usr/include/c++/9/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/9/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/9/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/9/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/9/bits/stl_iterator.h **** 
  68:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
  69:/usr/include/c++/9/bits/stl_iterator.h **** # include <type_traits>
  70:/usr/include/c++/9/bits/stl_iterator.h **** #endif
  71:/usr/include/c++/9/bits/stl_iterator.h **** 
  72:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201703L
  73:/usr/include/c++/9/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201803L
  74:/usr/include/c++/9/bits/stl_iterator.h **** #endif
  75:/usr/include/c++/9/bits/stl_iterator.h **** 
  76:/usr/include/c++/9/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  77:/usr/include/c++/9/bits/stl_iterator.h **** {
  78:/usr/include/c++/9/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  79:/usr/include/c++/9/bits/stl_iterator.h **** 
  80:/usr/include/c++/9/bits/stl_iterator.h ****   /**
  81:/usr/include/c++/9/bits/stl_iterator.h ****    * @addtogroup iterators
  82:/usr/include/c++/9/bits/stl_iterator.h ****    * @{
  83:/usr/include/c++/9/bits/stl_iterator.h ****    */
  84:/usr/include/c++/9/bits/stl_iterator.h **** 
  85:/usr/include/c++/9/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  86:/usr/include/c++/9/bits/stl_iterator.h ****   /**
  87:/usr/include/c++/9/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  88:/usr/include/c++/9/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  89:/usr/include/c++/9/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  90:/usr/include/c++/9/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  91:/usr/include/c++/9/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  92:/usr/include/c++/9/bits/stl_iterator.h ****    *  @code
  93:/usr/include/c++/9/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  94:/usr/include/c++/9/bits/stl_iterator.h ****    *  @endcode
  95:/usr/include/c++/9/bits/stl_iterator.h ****    *
  96:/usr/include/c++/9/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  97:/usr/include/c++/9/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  98:/usr/include/c++/9/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  99:/usr/include/c++/9/bits/stl_iterator.h ****    *
 100:/usr/include/c++/9/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 101:/usr/include/c++/9/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 102:/usr/include/c++/9/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
 103:/usr/include/c++/9/bits/stl_iterator.h ****   */
 104:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 105:/usr/include/c++/9/bits/stl_iterator.h ****     class reverse_iterator
 106:/usr/include/c++/9/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 107:/usr/include/c++/9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 108:/usr/include/c++/9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 109:/usr/include/c++/9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 110:/usr/include/c++/9/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 111:/usr/include/c++/9/bits/stl_iterator.h ****     {
 112:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 113:/usr/include/c++/9/bits/stl_iterator.h ****       _Iterator current;
 114:/usr/include/c++/9/bits/stl_iterator.h **** 
 115:/usr/include/c++/9/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 116:/usr/include/c++/9/bits/stl_iterator.h **** 
 117:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 118:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 119:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 120:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 121:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 122:/usr/include/c++/9/bits/stl_iterator.h **** 
 123:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 124:/usr/include/c++/9/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 125:/usr/include/c++/9/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 126:/usr/include/c++/9/bits/stl_iterator.h ****       */
 127:/usr/include/c++/9/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 128:/usr/include/c++/9/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 129:/usr/include/c++/9/bits/stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 130:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 131:/usr/include/c++/9/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 132:/usr/include/c++/9/bits/stl_iterator.h **** 
 133:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 134:/usr/include/c++/9/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 135:/usr/include/c++/9/bits/stl_iterator.h ****       */
 136:/usr/include/c++/9/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 137:/usr/include/c++/9/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 138:/usr/include/c++/9/bits/stl_iterator.h **** 
 139:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 140:/usr/include/c++/9/bits/stl_iterator.h ****        *  The copy constructor is normal.
 141:/usr/include/c++/9/bits/stl_iterator.h ****       */
 142:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 143:/usr/include/c++/9/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 144:/usr/include/c++/9/bits/stl_iterator.h ****       : current(__x.current) { }
 145:/usr/include/c++/9/bits/stl_iterator.h **** 
 146:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 147:/usr/include/c++/9/bits/stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 148:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 149:/usr/include/c++/9/bits/stl_iterator.h **** 
 150:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/9/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 152:/usr/include/c++/9/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 153:/usr/include/c++/9/bits/stl_iterator.h ****       */
 154:/usr/include/c++/9/bits/stl_iterator.h ****       template<typename _Iter>
 155:/usr/include/c++/9/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 156:/usr/include/c++/9/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 157:/usr/include/c++/9/bits/stl_iterator.h **** 	: current(__x.base()) { }
 158:/usr/include/c++/9/bits/stl_iterator.h **** 
 159:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 160:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 161:/usr/include/c++/9/bits/stl_iterator.h ****       */
 162:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 163:/usr/include/c++/9/bits/stl_iterator.h ****       base() const
 164:/usr/include/c++/9/bits/stl_iterator.h ****       { return current; }
 165:/usr/include/c++/9/bits/stl_iterator.h **** 
 166:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 167:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 168:/usr/include/c++/9/bits/stl_iterator.h ****        *
 169:/usr/include/c++/9/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 170:/usr/include/c++/9/bits/stl_iterator.h ****        *
 171:/usr/include/c++/9/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 172:/usr/include/c++/9/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 173:/usr/include/c++/9/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 174:/usr/include/c++/9/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 175:/usr/include/c++/9/bits/stl_iterator.h ****       */
 176:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 177:/usr/include/c++/9/bits/stl_iterator.h ****       operator*() const
 178:/usr/include/c++/9/bits/stl_iterator.h ****       {
 179:/usr/include/c++/9/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 180:/usr/include/c++/9/bits/stl_iterator.h **** 	return *--__tmp;
 181:/usr/include/c++/9/bits/stl_iterator.h ****       }
 182:/usr/include/c++/9/bits/stl_iterator.h **** 
 183:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 184:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 185:/usr/include/c++/9/bits/stl_iterator.h ****        *
 186:/usr/include/c++/9/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 187:/usr/include/c++/9/bits/stl_iterator.h ****       */
 188:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 189:/usr/include/c++/9/bits/stl_iterator.h ****       operator->() const
 190:/usr/include/c++/9/bits/stl_iterator.h ****       {
 191:/usr/include/c++/9/bits/stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 192:/usr/include/c++/9/bits/stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 193:/usr/include/c++/9/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 194:/usr/include/c++/9/bits/stl_iterator.h **** 	--__tmp;
 195:/usr/include/c++/9/bits/stl_iterator.h **** 	return _S_to_pointer(__tmp);
 196:/usr/include/c++/9/bits/stl_iterator.h ****       }
 197:/usr/include/c++/9/bits/stl_iterator.h **** 
 198:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 199:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  @c *this
 200:/usr/include/c++/9/bits/stl_iterator.h ****        *
 201:/usr/include/c++/9/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 202:/usr/include/c++/9/bits/stl_iterator.h ****       */
 203:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 204:/usr/include/c++/9/bits/stl_iterator.h ****       operator++()
 205:/usr/include/c++/9/bits/stl_iterator.h ****       {
 206:/usr/include/c++/9/bits/stl_iterator.h **** 	--current;
 207:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 208:/usr/include/c++/9/bits/stl_iterator.h ****       }
 209:/usr/include/c++/9/bits/stl_iterator.h **** 
 210:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 211:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 212:/usr/include/c++/9/bits/stl_iterator.h ****        *
 213:/usr/include/c++/9/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 214:/usr/include/c++/9/bits/stl_iterator.h ****       */
 215:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 216:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int)
 217:/usr/include/c++/9/bits/stl_iterator.h ****       {
 218:/usr/include/c++/9/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 219:/usr/include/c++/9/bits/stl_iterator.h **** 	--current;
 220:/usr/include/c++/9/bits/stl_iterator.h **** 	return __tmp;
 221:/usr/include/c++/9/bits/stl_iterator.h ****       }
 222:/usr/include/c++/9/bits/stl_iterator.h **** 
 223:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 224:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  @c *this
 225:/usr/include/c++/9/bits/stl_iterator.h ****        *
 226:/usr/include/c++/9/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 227:/usr/include/c++/9/bits/stl_iterator.h ****       */
 228:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 229:/usr/include/c++/9/bits/stl_iterator.h ****       operator--()
 230:/usr/include/c++/9/bits/stl_iterator.h ****       {
 231:/usr/include/c++/9/bits/stl_iterator.h **** 	++current;
 232:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 233:/usr/include/c++/9/bits/stl_iterator.h ****       }
 234:/usr/include/c++/9/bits/stl_iterator.h **** 
 235:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 236:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 237:/usr/include/c++/9/bits/stl_iterator.h ****        *
 238:/usr/include/c++/9/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 239:/usr/include/c++/9/bits/stl_iterator.h ****       */
 240:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 241:/usr/include/c++/9/bits/stl_iterator.h ****       operator--(int)
 242:/usr/include/c++/9/bits/stl_iterator.h ****       {
 243:/usr/include/c++/9/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 244:/usr/include/c++/9/bits/stl_iterator.h **** 	++current;
 245:/usr/include/c++/9/bits/stl_iterator.h **** 	return __tmp;
 246:/usr/include/c++/9/bits/stl_iterator.h ****       }
 247:/usr/include/c++/9/bits/stl_iterator.h **** 
 248:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 249:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:/usr/include/c++/9/bits/stl_iterator.h ****        *
 251:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:/usr/include/c++/9/bits/stl_iterator.h ****       */
 253:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 254:/usr/include/c++/9/bits/stl_iterator.h ****       operator+(difference_type __n) const
 255:/usr/include/c++/9/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 256:/usr/include/c++/9/bits/stl_iterator.h **** 
 257:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 258:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  *this
 259:/usr/include/c++/9/bits/stl_iterator.h ****        *
 260:/usr/include/c++/9/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 261:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/usr/include/c++/9/bits/stl_iterator.h ****       */
 263:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 264:/usr/include/c++/9/bits/stl_iterator.h ****       operator+=(difference_type __n)
 265:/usr/include/c++/9/bits/stl_iterator.h ****       {
 266:/usr/include/c++/9/bits/stl_iterator.h **** 	current -= __n;
 267:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 268:/usr/include/c++/9/bits/stl_iterator.h ****       }
 269:/usr/include/c++/9/bits/stl_iterator.h **** 
 270:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 271:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 272:/usr/include/c++/9/bits/stl_iterator.h ****        *
 273:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:/usr/include/c++/9/bits/stl_iterator.h ****       */
 275:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 276:/usr/include/c++/9/bits/stl_iterator.h ****       operator-(difference_type __n) const
 277:/usr/include/c++/9/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 278:/usr/include/c++/9/bits/stl_iterator.h **** 
 279:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 280:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  *this
 281:/usr/include/c++/9/bits/stl_iterator.h ****        *
 282:/usr/include/c++/9/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 283:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 284:/usr/include/c++/9/bits/stl_iterator.h ****       */
 285:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 286:/usr/include/c++/9/bits/stl_iterator.h ****       operator-=(difference_type __n)
 287:/usr/include/c++/9/bits/stl_iterator.h ****       {
 288:/usr/include/c++/9/bits/stl_iterator.h **** 	current += __n;
 289:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 290:/usr/include/c++/9/bits/stl_iterator.h ****       }
 291:/usr/include/c++/9/bits/stl_iterator.h **** 
 292:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 293:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 294:/usr/include/c++/9/bits/stl_iterator.h ****        *
 295:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 296:/usr/include/c++/9/bits/stl_iterator.h ****       */
 297:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 298:/usr/include/c++/9/bits/stl_iterator.h ****       operator[](difference_type __n) const
 299:/usr/include/c++/9/bits/stl_iterator.h ****       { return *(*this + __n); }
 300:/usr/include/c++/9/bits/stl_iterator.h **** 
 301:/usr/include/c++/9/bits/stl_iterator.h ****     private:
 302:/usr/include/c++/9/bits/stl_iterator.h ****       template<typename _Tp>
 303:/usr/include/c++/9/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 304:/usr/include/c++/9/bits/stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 305:/usr/include/c++/9/bits/stl_iterator.h ****         { return __p; }
 306:/usr/include/c++/9/bits/stl_iterator.h **** 
 307:/usr/include/c++/9/bits/stl_iterator.h ****       template<typename _Tp>
 308:/usr/include/c++/9/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 309:/usr/include/c++/9/bits/stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 310:/usr/include/c++/9/bits/stl_iterator.h ****         { return __t.operator->(); }
 311:/usr/include/c++/9/bits/stl_iterator.h ****     };
 312:/usr/include/c++/9/bits/stl_iterator.h **** 
 313:/usr/include/c++/9/bits/stl_iterator.h ****   ///@{
 314:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 315:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 316:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 317:/usr/include/c++/9/bits/stl_iterator.h ****    *  @return  A simple bool.
 318:/usr/include/c++/9/bits/stl_iterator.h ****    *
 319:/usr/include/c++/9/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 320:/usr/include/c++/9/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 321:/usr/include/c++/9/bits/stl_iterator.h ****    *
 322:/usr/include/c++/9/bits/stl_iterator.h ****   */
 323:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 324:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 325:/usr/include/c++/9/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 326:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 327:/usr/include/c++/9/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 328:/usr/include/c++/9/bits/stl_iterator.h **** 
 329:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 330:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 331:/usr/include/c++/9/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 332:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 333:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 334:/usr/include/c++/9/bits/stl_iterator.h **** 
 335:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 336:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 337:/usr/include/c++/9/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 338:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 339:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__x == __y); }
 340:/usr/include/c++/9/bits/stl_iterator.h **** 
 341:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 342:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 343:/usr/include/c++/9/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 344:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 345:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y < __x; }
 346:/usr/include/c++/9/bits/stl_iterator.h **** 
 347:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 348:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 349:/usr/include/c++/9/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 350:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 351:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__y < __x); }
 352:/usr/include/c++/9/bits/stl_iterator.h **** 
 353:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 354:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 355:/usr/include/c++/9/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 356:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 357:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__x < __y); }
 358:/usr/include/c++/9/bits/stl_iterator.h **** 
 359:/usr/include/c++/9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 360:/usr/include/c++/9/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 361:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 362:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 363:/usr/include/c++/9/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 364:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 365:/usr/include/c++/9/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 366:/usr/include/c++/9/bits/stl_iterator.h **** 
 367:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 368:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 369:/usr/include/c++/9/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 370:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 371:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 372:/usr/include/c++/9/bits/stl_iterator.h **** 
 373:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 374:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 375:/usr/include/c++/9/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 376:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 377:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__x == __y); }
 378:/usr/include/c++/9/bits/stl_iterator.h **** 
 379:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 380:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 381:/usr/include/c++/9/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 382:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 383:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y < __x; }
 384:/usr/include/c++/9/bits/stl_iterator.h **** 
 385:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 386:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 387:/usr/include/c++/9/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 388:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 389:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__y < __x); }
 390:/usr/include/c++/9/bits/stl_iterator.h **** 
 391:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 392:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 393:/usr/include/c++/9/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 394:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 395:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__x < __y); }
 396:/usr/include/c++/9/bits/stl_iterator.h ****   ///@}
 397:/usr/include/c++/9/bits/stl_iterator.h **** 
 398:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 399:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 400:/usr/include/c++/9/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 401:/usr/include/c++/9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 402:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 403:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 404:/usr/include/c++/9/bits/stl_iterator.h **** 
 405:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 406:/usr/include/c++/9/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 407:/usr/include/c++/9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 408:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 409:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 410:/usr/include/c++/9/bits/stl_iterator.h **** #else
 411:/usr/include/c++/9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 412:/usr/include/c++/9/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 413:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 414:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 415:/usr/include/c++/9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 416:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 417:/usr/include/c++/9/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 418:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 419:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 420:/usr/include/c++/9/bits/stl_iterator.h **** 
 421:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 422:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 423:/usr/include/c++/9/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 424:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 425:/usr/include/c++/9/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 426:/usr/include/c++/9/bits/stl_iterator.h **** 
 427:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 428:/usr/include/c++/9/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 429:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 430:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 431:/usr/include/c++/9/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 432:/usr/include/c++/9/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 433:/usr/include/c++/9/bits/stl_iterator.h **** 
 434:/usr/include/c++/9/bits/stl_iterator.h **** # if __cplusplus > 201103L
 435:/usr/include/c++/9/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 436:/usr/include/c++/9/bits/stl_iterator.h **** 
 437:/usr/include/c++/9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 438:/usr/include/c++/9/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 439:/usr/include/c++/9/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 440:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 441:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 442:/usr/include/c++/9/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 443:/usr/include/c++/9/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 444:/usr/include/c++/9/bits/stl_iterator.h **** # endif
 445:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 446:/usr/include/c++/9/bits/stl_iterator.h **** 
 447:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 448:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 449:/usr/include/c++/9/bits/stl_iterator.h ****     auto
 450:/usr/include/c++/9/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 451:/usr/include/c++/9/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 452:/usr/include/c++/9/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 453:/usr/include/c++/9/bits/stl_iterator.h **** 
 454:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 455:/usr/include/c++/9/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 456:/usr/include/c++/9/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 457:/usr/include/c++/9/bits/stl_iterator.h ****     { };
 458:/usr/include/c++/9/bits/stl_iterator.h **** 
 459:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 460:/usr/include/c++/9/bits/stl_iterator.h ****     auto
 461:/usr/include/c++/9/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 462:/usr/include/c++/9/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 463:/usr/include/c++/9/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 464:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 465:/usr/include/c++/9/bits/stl_iterator.h **** 
 466:/usr/include/c++/9/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 467:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 468:/usr/include/c++/9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 469:/usr/include/c++/9/bits/stl_iterator.h ****    *
 470:/usr/include/c++/9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 471:/usr/include/c++/9/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 472:/usr/include/c++/9/bits/stl_iterator.h ****    *  push_back.
 473:/usr/include/c++/9/bits/stl_iterator.h ****    *
 474:/usr/include/c++/9/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 475:/usr/include/c++/9/bits/stl_iterator.h ****    *  save typing.
 476:/usr/include/c++/9/bits/stl_iterator.h ****   */
 477:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 478:/usr/include/c++/9/bits/stl_iterator.h ****     class back_insert_iterator
 479:/usr/include/c++/9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 480:/usr/include/c++/9/bits/stl_iterator.h ****     {
 481:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 482:/usr/include/c++/9/bits/stl_iterator.h ****       _Container* container;
 483:/usr/include/c++/9/bits/stl_iterator.h **** 
 484:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 485:/usr/include/c++/9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 486:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Container          container_type;
 487:/usr/include/c++/9/bits/stl_iterator.h **** 
 488:/usr/include/c++/9/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 489:/usr/include/c++/9/bits/stl_iterator.h ****       explicit
 490:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 491:/usr/include/c++/9/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 492:/usr/include/c++/9/bits/stl_iterator.h **** 
 493:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 494:/usr/include/c++/9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 495:/usr/include/c++/9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 496:/usr/include/c++/9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 497:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 498:/usr/include/c++/9/bits/stl_iterator.h ****        *
 499:/usr/include/c++/9/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 500:/usr/include/c++/9/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 501:/usr/include/c++/9/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 502:/usr/include/c++/9/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 503:/usr/include/c++/9/bits/stl_iterator.h ****       */
 504:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 505:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 506:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 507:/usr/include/c++/9/bits/stl_iterator.h ****       {
 508:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_back(__value);
 509:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 510:/usr/include/c++/9/bits/stl_iterator.h ****       }
 511:/usr/include/c++/9/bits/stl_iterator.h **** #else
 512:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 513:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 514:/usr/include/c++/9/bits/stl_iterator.h ****       {
 515:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_back(__value);
 516:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 517:/usr/include/c++/9/bits/stl_iterator.h ****       }
 518:/usr/include/c++/9/bits/stl_iterator.h **** 
 519:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 520:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 521:/usr/include/c++/9/bits/stl_iterator.h ****       {
 522:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 523:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 524:/usr/include/c++/9/bits/stl_iterator.h ****       }
 525:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 526:/usr/include/c++/9/bits/stl_iterator.h **** 
 527:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.
 528:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 529:/usr/include/c++/9/bits/stl_iterator.h ****       operator*()
 530:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 531:/usr/include/c++/9/bits/stl_iterator.h **** 
 532:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 533:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 534:/usr/include/c++/9/bits/stl_iterator.h ****       operator++()
 535:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 536:/usr/include/c++/9/bits/stl_iterator.h **** 
 537:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 538:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator
 539:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int)
 540:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 541:/usr/include/c++/9/bits/stl_iterator.h ****     };
 542:/usr/include/c++/9/bits/stl_iterator.h **** 
 543:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 544:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 545:/usr/include/c++/9/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 546:/usr/include/c++/9/bits/stl_iterator.h ****    *
 547:/usr/include/c++/9/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 548:/usr/include/c++/9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 549:/usr/include/c++/9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 550:/usr/include/c++/9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 551:/usr/include/c++/9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 552:/usr/include/c++/9/bits/stl_iterator.h ****    *  types for you.
 553:/usr/include/c++/9/bits/stl_iterator.h ****   */
 554:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 555:/usr/include/c++/9/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 556:/usr/include/c++/9/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 557:/usr/include/c++/9/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 558:/usr/include/c++/9/bits/stl_iterator.h **** 
 559:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 560:/usr/include/c++/9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 561:/usr/include/c++/9/bits/stl_iterator.h ****    *
 562:/usr/include/c++/9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 563:/usr/include/c++/9/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 564:/usr/include/c++/9/bits/stl_iterator.h ****    *  push_front.
 565:/usr/include/c++/9/bits/stl_iterator.h ****    *
 566:/usr/include/c++/9/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 567:/usr/include/c++/9/bits/stl_iterator.h ****    *  save typing.
 568:/usr/include/c++/9/bits/stl_iterator.h ****   */
 569:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 570:/usr/include/c++/9/bits/stl_iterator.h ****     class front_insert_iterator
 571:/usr/include/c++/9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 572:/usr/include/c++/9/bits/stl_iterator.h ****     {
 573:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 574:/usr/include/c++/9/bits/stl_iterator.h ****       _Container* container;
 575:/usr/include/c++/9/bits/stl_iterator.h **** 
 576:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 577:/usr/include/c++/9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 578:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Container          container_type;
 579:/usr/include/c++/9/bits/stl_iterator.h **** 
 580:/usr/include/c++/9/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 581:/usr/include/c++/9/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x)
 582:/usr/include/c++/9/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 583:/usr/include/c++/9/bits/stl_iterator.h **** 
 584:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 585:/usr/include/c++/9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 586:/usr/include/c++/9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 587:/usr/include/c++/9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 588:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 589:/usr/include/c++/9/bits/stl_iterator.h ****        *
 590:/usr/include/c++/9/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 591:/usr/include/c++/9/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 592:/usr/include/c++/9/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 593:/usr/include/c++/9/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 594:/usr/include/c++/9/bits/stl_iterator.h ****       */
 595:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 596:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 597:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 598:/usr/include/c++/9/bits/stl_iterator.h ****       {
 599:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_front(__value);
 600:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 601:/usr/include/c++/9/bits/stl_iterator.h ****       }
 602:/usr/include/c++/9/bits/stl_iterator.h **** #else
 603:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 604:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 605:/usr/include/c++/9/bits/stl_iterator.h ****       {
 606:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_front(__value);
 607:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 608:/usr/include/c++/9/bits/stl_iterator.h ****       }
 609:/usr/include/c++/9/bits/stl_iterator.h **** 
 610:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 611:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 612:/usr/include/c++/9/bits/stl_iterator.h ****       {
 613:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 614:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 615:/usr/include/c++/9/bits/stl_iterator.h ****       }
 616:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 617:/usr/include/c++/9/bits/stl_iterator.h **** 
 618:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.
 619:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 620:/usr/include/c++/9/bits/stl_iterator.h ****       operator*()
 621:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 622:/usr/include/c++/9/bits/stl_iterator.h **** 
 623:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 624:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 625:/usr/include/c++/9/bits/stl_iterator.h ****       operator++()
 626:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 627:/usr/include/c++/9/bits/stl_iterator.h **** 
 628:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 629:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator
 630:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int)
 631:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 632:/usr/include/c++/9/bits/stl_iterator.h ****     };
 633:/usr/include/c++/9/bits/stl_iterator.h **** 
 634:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 635:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 636:/usr/include/c++/9/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 637:/usr/include/c++/9/bits/stl_iterator.h ****    *
 638:/usr/include/c++/9/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 639:/usr/include/c++/9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 640:/usr/include/c++/9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 641:/usr/include/c++/9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 642:/usr/include/c++/9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 643:/usr/include/c++/9/bits/stl_iterator.h ****    *  types for you.
 644:/usr/include/c++/9/bits/stl_iterator.h ****   */
 645:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 646:/usr/include/c++/9/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 647:/usr/include/c++/9/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 648:/usr/include/c++/9/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 649:/usr/include/c++/9/bits/stl_iterator.h **** 
 650:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 651:/usr/include/c++/9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 652:/usr/include/c++/9/bits/stl_iterator.h ****    *
 653:/usr/include/c++/9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 654:/usr/include/c++/9/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 655:/usr/include/c++/9/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 656:/usr/include/c++/9/bits/stl_iterator.h ****    *  position.
 657:/usr/include/c++/9/bits/stl_iterator.h ****    *
 658:/usr/include/c++/9/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 659:/usr/include/c++/9/bits/stl_iterator.h ****    *  %iterator's position.)
 660:/usr/include/c++/9/bits/stl_iterator.h ****    *
 661:/usr/include/c++/9/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 662:/usr/include/c++/9/bits/stl_iterator.h ****    *  save typing.
 663:/usr/include/c++/9/bits/stl_iterator.h ****   */
 664:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 665:/usr/include/c++/9/bits/stl_iterator.h ****     class insert_iterator
 666:/usr/include/c++/9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 667:/usr/include/c++/9/bits/stl_iterator.h ****     {
 668:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 669:/usr/include/c++/9/bits/stl_iterator.h ****       _Container* container;
 670:/usr/include/c++/9/bits/stl_iterator.h ****       typename _Container::iterator iter;
 671:/usr/include/c++/9/bits/stl_iterator.h **** 
 672:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 673:/usr/include/c++/9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 674:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Container          container_type;
 675:/usr/include/c++/9/bits/stl_iterator.h **** 
 676:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 677:/usr/include/c++/9/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 678:/usr/include/c++/9/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 679:/usr/include/c++/9/bits/stl_iterator.h ****       */
 680:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 681:/usr/include/c++/9/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 682:/usr/include/c++/9/bits/stl_iterator.h **** 
 683:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 684:/usr/include/c++/9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 685:/usr/include/c++/9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 686:/usr/include/c++/9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 687:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 688:/usr/include/c++/9/bits/stl_iterator.h ****        *
 689:/usr/include/c++/9/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 690:/usr/include/c++/9/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 691:/usr/include/c++/9/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 692:/usr/include/c++/9/bits/stl_iterator.h ****        *
 693:/usr/include/c++/9/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 694:/usr/include/c++/9/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 695:/usr/include/c++/9/bits/stl_iterator.h ****        *  @code
 696:/usr/include/c++/9/bits/stl_iterator.h ****        *     // vector v contains A and Z
 697:/usr/include/c++/9/bits/stl_iterator.h ****        *
 698:/usr/include/c++/9/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 699:/usr/include/c++/9/bits/stl_iterator.h ****        *     i = 1;
 700:/usr/include/c++/9/bits/stl_iterator.h ****        *     i = 2;
 701:/usr/include/c++/9/bits/stl_iterator.h ****        *     i = 3;
 702:/usr/include/c++/9/bits/stl_iterator.h ****        *
 703:/usr/include/c++/9/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 704:/usr/include/c++/9/bits/stl_iterator.h ****        *  @endcode
 705:/usr/include/c++/9/bits/stl_iterator.h ****       */
 706:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 707:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 708:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 709:/usr/include/c++/9/bits/stl_iterator.h ****       {
 710:/usr/include/c++/9/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 711:/usr/include/c++/9/bits/stl_iterator.h **** 	++iter;
 712:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 713:/usr/include/c++/9/bits/stl_iterator.h ****       }
 714:/usr/include/c++/9/bits/stl_iterator.h **** #else
 715:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 716:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 717:/usr/include/c++/9/bits/stl_iterator.h ****       {
 718:/usr/include/c++/9/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 719:/usr/include/c++/9/bits/stl_iterator.h **** 	++iter;
 720:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 721:/usr/include/c++/9/bits/stl_iterator.h ****       }
 722:/usr/include/c++/9/bits/stl_iterator.h **** 
 723:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 724:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 725:/usr/include/c++/9/bits/stl_iterator.h ****       {
 726:/usr/include/c++/9/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 727:/usr/include/c++/9/bits/stl_iterator.h **** 	++iter;
 728:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 729:/usr/include/c++/9/bits/stl_iterator.h ****       }
 730:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 731:/usr/include/c++/9/bits/stl_iterator.h **** 
 732:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.
 733:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 734:/usr/include/c++/9/bits/stl_iterator.h ****       operator*()
 735:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 736:/usr/include/c++/9/bits/stl_iterator.h **** 
 737:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 738:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 739:/usr/include/c++/9/bits/stl_iterator.h ****       operator++()
 740:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 741:/usr/include/c++/9/bits/stl_iterator.h **** 
 742:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 743:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 744:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int)
 745:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 746:/usr/include/c++/9/bits/stl_iterator.h ****     };
 747:/usr/include/c++/9/bits/stl_iterator.h **** 
 748:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 749:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 750:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param __i  An iterator into the container.
 751:/usr/include/c++/9/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 752:/usr/include/c++/9/bits/stl_iterator.h ****    *
 753:/usr/include/c++/9/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 754:/usr/include/c++/9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 755:/usr/include/c++/9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 756:/usr/include/c++/9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 757:/usr/include/c++/9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 758:/usr/include/c++/9/bits/stl_iterator.h ****    *  types for you.
 759:/usr/include/c++/9/bits/stl_iterator.h ****   */
 760:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 761:/usr/include/c++/9/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 762:/usr/include/c++/9/bits/stl_iterator.h ****     inserter(_Container& __x, typename _Container::iterator __i)
 763:/usr/include/c++/9/bits/stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
 764:/usr/include/c++/9/bits/stl_iterator.h **** 
 765:/usr/include/c++/9/bits/stl_iterator.h ****   /// @} group iterators
 766:/usr/include/c++/9/bits/stl_iterator.h **** 
 767:/usr/include/c++/9/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 768:/usr/include/c++/9/bits/stl_iterator.h **** } // namespace
 769:/usr/include/c++/9/bits/stl_iterator.h **** 
 770:/usr/include/c++/9/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 771:/usr/include/c++/9/bits/stl_iterator.h **** {
 772:/usr/include/c++/9/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 773:/usr/include/c++/9/bits/stl_iterator.h **** 
 774:/usr/include/c++/9/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 775:/usr/include/c++/9/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 776:/usr/include/c++/9/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 777:/usr/include/c++/9/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 778:/usr/include/c++/9/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 779:/usr/include/c++/9/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 780:/usr/include/c++/9/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 781:/usr/include/c++/9/bits/stl_iterator.h ****   using std::iterator_traits;
 782:/usr/include/c++/9/bits/stl_iterator.h ****   using std::iterator;
 783:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 784:/usr/include/c++/9/bits/stl_iterator.h ****     class __normal_iterator
 785:/usr/include/c++/9/bits/stl_iterator.h ****     {
 786:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 787:/usr/include/c++/9/bits/stl_iterator.h ****       _Iterator _M_current;
 788:/usr/include/c++/9/bits/stl_iterator.h **** 
 789:/usr/include/c++/9/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 790:/usr/include/c++/9/bits/stl_iterator.h **** 
 791:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 792:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 793:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 794:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 795:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 796:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 797:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 798:/usr/include/c++/9/bits/stl_iterator.h **** 
 799:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 800:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 801:/usr/include/c++/9/bits/stl_iterator.h **** 
 802:/usr/include/c++/9/bits/stl_iterator.h ****       explicit
 803:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 804:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 805:/usr/include/c++/9/bits/stl_iterator.h **** 
 806:/usr/include/c++/9/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 807:/usr/include/c++/9/bits/stl_iterator.h ****       template<typename _Iter>
 808:/usr/include/c++/9/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 5553              		.loc 7 808 9
 5554              		.cfi_startproc
 5555 0000 F30F1EFA 		endbr64
 5556 0004 55       		pushq	%rbp
 5557              		.cfi_def_cfa_offset 16
 5558              		.cfi_offset 6, -16
 5559 0005 4889E5   		movq	%rsp, %rbp
 5560              		.cfi_def_cfa_register 6
 5561 0008 53       		pushq	%rbx
 5562 0009 4883EC18 		subq	$24, %rsp
 5563              		.cfi_offset 3, -24
 5564 000d 48897DE8 		movq	%rdi, -24(%rbp)
 5565 0011 488975E0 		movq	%rsi, -32(%rbp)
 5566              		.loc 7 808 9
 5567 0015 488B45E8 		movq	-24(%rbp), %rax
 5568 0019 48837DE8 		cmpq	$0, -24(%rbp)
 5568      00
 5569 001e 740B     		je	.L324
 5570 0020 4889C2   		movq	%rax, %rdx
 5571 0023 83E207   		andl	$7, %edx
 5572 0026 4885D2   		testq	%rdx, %rdx
 5573 0029 740F     		je	.L325
 5574              	.L324:
 5575 002b 4889C6   		movq	%rax, %rsi
 5576 002e 488D3D00 		leaq	.Lubsan_data476(%rip), %rdi
 5576      000000
 5577 0035 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5577      00
 5578              	.L325:
 5579              	.LBB19:
 809:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 810:/usr/include/c++/9/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 811:/usr/include/c++/9/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 812:/usr/include/c++/9/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 5580              		.loc 7 812 32
 5581 003a 488B45E0 		movq	-32(%rbp), %rax
 5582 003e 48837DE0 		cmpq	$0, -32(%rbp)
 5582      00
 5583 0043 740B     		je	.L326
 5584 0045 4889C2   		movq	%rax, %rdx
 5585 0048 83E207   		andl	$7, %edx
 5586 004b 4885D2   		testq	%rdx, %rdx
 5587 004e 740F     		je	.L327
 5588              	.L326:
 5589 0050 4889C6   		movq	%rax, %rsi
 5590 0053 488D3D00 		leaq	.Lubsan_data477(%rip), %rdi
 5590      000000
 5591 005a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5591      00
 5592              	.L327:
 5593 005f 488B45E0 		movq	-32(%rbp), %rax
 5594 0063 4889C7   		movq	%rax, %rdi
 5595 0066 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 5595      00
 5596 006b 4889C3   		movq	%rax, %rbx
 5597 006e 4889D8   		movq	%rbx, %rax
 5598 0071 4885DB   		testq	%rbx, %rbx
 5599 0074 740B     		je	.L328
 5600 0076 4889C2   		movq	%rax, %rdx
 5601 0079 83E207   		andl	$7, %edx
 5602 007c 4885D2   		testq	%rdx, %rdx
 5603 007f 740F     		je	.L329
 5604              	.L328:
 5605 0081 4889C6   		movq	%rax, %rsi
 5606 0084 488D3D00 		leaq	.Lubsan_data478(%rip), %rdi
 5606      000000
 5607 008b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5607      00
 5608              	.L329:
 5609 0090 4889D8   		movq	%rbx, %rax
 5610 0093 4889C2   		movq	%rax, %rdx
 5611 0096 48C1EA03 		shrq	$3, %rdx
 5612 009a 4881C200 		addq	$2147450880, %rdx
 5612      80FF7F
 5613 00a1 0FB612   		movzbl	(%rdx), %edx
 5614 00a4 84D2     		testb	%dl, %dl
 5615 00a6 7408     		je	.L330
 5616 00a8 4889C7   		movq	%rax, %rdi
 5617 00ab E8000000 		call	__asan_report_load8@PLT
 5617      00
 5618              	.L330:
 5619 00b0 488B1B   		movq	(%rbx), %rbx
 5620 00b3 488B45E8 		movq	-24(%rbp), %rax
 5621 00b7 48837DE8 		cmpq	$0, -24(%rbp)
 5621      00
 5622 00bc 740B     		je	.L331
 5623 00be 4889C2   		movq	%rax, %rdx
 5624 00c1 83E207   		andl	$7, %edx
 5625 00c4 4885D2   		testq	%rdx, %rdx
 5626 00c7 740F     		je	.L332
 5627              	.L331:
 5628 00c9 4889C6   		movq	%rax, %rsi
 5629 00cc 488D3D00 		leaq	.Lubsan_data479(%rip), %rdi
 5629      000000
 5630 00d3 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5630      00
 5631              	.L332:
 5632 00d8 488B45E8 		movq	-24(%rbp), %rax
 5633 00dc 4889C2   		movq	%rax, %rdx
 5634 00df 48C1EA03 		shrq	$3, %rdx
 5635 00e3 4881C200 		addq	$2147450880, %rdx
 5635      80FF7F
 5636 00ea 0FB612   		movzbl	(%rdx), %edx
 5637 00ed 84D2     		testb	%dl, %dl
 5638 00ef 7408     		je	.L333
 5639 00f1 4889C7   		movq	%rax, %rdi
 5640 00f4 E8000000 		call	__asan_report_store8@PLT
 5640      00
 5641              	.L333:
 5642 00f9 488B45E8 		movq	-24(%rbp), %rax
 5643 00fd 488918   		movq	%rbx, (%rax)
 5644              	.LBE19:
 5645              		.loc 7 812 36
 5646 0100 90       		nop
 5647 0101 4883C418 		addq	$24, %rsp
 5648 0105 5B       		popq	%rbx
 5649 0106 5D       		popq	%rbp
 5650              		.cfi_def_cfa 7, 8
 5651 0107 C3       		ret
 5652              		.cfi_endproc
 5653              	.LFE2677:
 5655              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6ve
 5656              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 5657              		.section	.data.rel.local
 5658              		.align 32
 5661              	.Lubsan_data480:
 5662 1880 00000000 		.quad	.LC3
 5662      00000000 
 5663 1888 94050000 		.long	1428
 5664 188c 3A000000 		.long	58
 5665 1890 00000000 		.quad	.Lubsan_type10
 5665      00000000 
 5666 1898 03       		.byte	3
 5667 1899 04       		.byte	4
 5668 189a 00000000 		.zero	6
 5668      0000
 5669 18a0 00000000 		.zero	32
 5669      00000000 
 5669      00000000 
 5669      00000000 
 5669      00000000 
 5670              		.align 32
 5673              	.Lubsan_data481:
 5674 18c0 00000000 		.quad	.LC3
 5674      00000000 
 5675 18c8 94050000 		.long	1428
 5676 18cc 2F000000 		.long	47
 5677 18d0 00000000 		.quad	.Lubsan_type10
 5677      00000000 
 5678 18d8 03       		.byte	3
 5679 18d9 04       		.byte	4
 5680 18da 00000000 		.zero	6
 5680      0000
 5681 18e0 00000000 		.zero	32
 5681      00000000 
 5681      00000000 
 5681      00000000 
 5681      00000000 
 5682              		.data
 5683              		.align 32
 5686              	.Lubsan_type32:
 5689 0744 27636F6E 		.string	"'const struct __normal_iterator'"
 5689      73742073 
 5689      74727563 
 5689      74205F5F 
 5689      6E6F726D 
 5690 0765 00000000 		.zero	59
 5690      00000000 
 5690      00000000 
 5690      00000000 
 5690      00000000 
 5691              		.section	.data.rel.local
 5692              		.align 32
 5695              	.Lubsan_data482:
 5696 1900 00000000 		.quad	.LC3
 5696      00000000 
 5697 1908 94050000 		.long	1428
 5698 190c 2F000000 		.long	47
 5699 1910 00000000 		.quad	.Lubsan_type32
 5699      00000000 
 5700 1918 03       		.byte	3
 5701 1919 02       		.byte	2
 5702 191a 00000000 		.zero	6
 5702      0000
 5703 1920 00000000 		.zero	32
 5703      00000000 
 5703      00000000 
 5703      00000000 
 5703      00000000 
 5704              		.align 32
 5707              	.Lubsan_data483:
 5708 1940 00000000 		.quad	.LC3
 5708      00000000 
 5709 1948 94050000 		.long	1428
 5710 194c 21000000 		.long	33
 5711 1950 00000000 		.quad	.Lubsan_type10
 5711      00000000 
 5712 1958 03       		.byte	3
 5713 1959 04       		.byte	4
 5714 195a 00000000 		.zero	6
 5714      0000
 5715 1960 00000000 		.zero	32
 5715      00000000 
 5715      00000000 
 5715      00000000 
 5715      00000000 
 5716              		.data
 5717              		.align 32
 5720              	.Lubsan_type33:
 5723 07a4 27737472 		.string	"'struct iterator'"
 5723      75637420 
 5723      69746572 
 5723      61746F72 
 5723      2700
 5724 07b6 00000000 		.zero	42
 5724      00000000 
 5724      00000000 
 5724      00000000 
 5724      00000000 
 5725              		.section	.data.rel.local
 5726              		.align 32
 5729              	.Lubsan_data484:
 5730 1980 00000000 		.quad	.LC3
 5730      00000000 
 5731 1988 94050000 		.long	1428
 5732 198c 21000000 		.long	33
 5733 1990 00000000 		.quad	.Lubsan_type33
 5733      00000000 
 5734 1998 03       		.byte	3
 5735 1999 04       		.byte	4
 5736 199a 00000000 		.zero	6
 5736      0000
 5737 19a0 00000000 		.zero	32
 5737      00000000 
 5737      00000000 
 5737      00000000 
 5737      00000000 
 5738              		.section	.rodata
 5739              		.align 8
 5740              	.LC14:
 5741 04c0 33203332 		.string	"3 32 8 9 <unknown> 64 8 9 <unknown> 96 8 15 __position:1427"
 5741      20382039 
 5741      203C756E 
 5741      6B6E6F77 
 5741      6E3E2036 
 5742              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5eraseEN9_
 5743              		.align 2
 5744              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5eraseEN9__gnu_cxx1
 5746              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5eraseEN9__gnu_cxx17__norm
 5747              	.LASANPC2679:
 5748              	.LFB2679:
1197:/usr/include/c++/9/bits/stl_vector.h **** 
1198:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1199:/usr/include/c++/9/bits/stl_vector.h ****       void
1200:/usr/include/c++/9/bits/stl_vector.h ****       push_back(value_type&& __x)
1201:/usr/include/c++/9/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
1202:/usr/include/c++/9/bits/stl_vector.h **** 
1203:/usr/include/c++/9/bits/stl_vector.h ****       template<typename... _Args>
1204:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus > 201402L
1205:/usr/include/c++/9/bits/stl_vector.h **** 	reference
1206:/usr/include/c++/9/bits/stl_vector.h **** #else
1207:/usr/include/c++/9/bits/stl_vector.h **** 	void
1208:/usr/include/c++/9/bits/stl_vector.h **** #endif
1209:/usr/include/c++/9/bits/stl_vector.h **** 	emplace_back(_Args&&... __args);
1210:/usr/include/c++/9/bits/stl_vector.h **** #endif
1211:/usr/include/c++/9/bits/stl_vector.h **** 
1212:/usr/include/c++/9/bits/stl_vector.h ****       /**
1213:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Removes last element.
1214:/usr/include/c++/9/bits/stl_vector.h ****        *
1215:/usr/include/c++/9/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1216:/usr/include/c++/9/bits/stl_vector.h ****        *
1217:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
1218:/usr/include/c++/9/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1219:/usr/include/c++/9/bits/stl_vector.h ****        *  called.
1220:/usr/include/c++/9/bits/stl_vector.h ****        */
1221:/usr/include/c++/9/bits/stl_vector.h ****       void
1222:/usr/include/c++/9/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1223:/usr/include/c++/9/bits/stl_vector.h ****       {
1224:/usr/include/c++/9/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1225:/usr/include/c++/9/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
1226:/usr/include/c++/9/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1227:/usr/include/c++/9/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1228:/usr/include/c++/9/bits/stl_vector.h ****       }
1229:/usr/include/c++/9/bits/stl_vector.h **** 
1230:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1231:/usr/include/c++/9/bits/stl_vector.h ****       /**
1232:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1233:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1234:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __args  Arguments.
1235:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1236:/usr/include/c++/9/bits/stl_vector.h ****        *
1237:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
1238:/usr/include/c++/9/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1239:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1240:/usr/include/c++/9/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
1241:/usr/include/c++/9/bits/stl_vector.h ****        *  std::list.
1242:/usr/include/c++/9/bits/stl_vector.h ****        */
1243:/usr/include/c++/9/bits/stl_vector.h ****       template<typename... _Args>
1244:/usr/include/c++/9/bits/stl_vector.h **** 	iterator
1245:/usr/include/c++/9/bits/stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1246:/usr/include/c++/9/bits/stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1247:/usr/include/c++/9/bits/stl_vector.h **** 
1248:/usr/include/c++/9/bits/stl_vector.h ****       /**
1249:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1250:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1251:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1252:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1253:/usr/include/c++/9/bits/stl_vector.h ****        *
1254:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1255:/usr/include/c++/9/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1256:/usr/include/c++/9/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1257:/usr/include/c++/9/bits/stl_vector.h ****        *  used the user should consider using std::list.
1258:/usr/include/c++/9/bits/stl_vector.h ****        */
1259:/usr/include/c++/9/bits/stl_vector.h ****       iterator
1260:/usr/include/c++/9/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1261:/usr/include/c++/9/bits/stl_vector.h **** #else
1262:/usr/include/c++/9/bits/stl_vector.h ****       /**
1263:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1264:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1265:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1266:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1267:/usr/include/c++/9/bits/stl_vector.h ****        *
1268:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1269:/usr/include/c++/9/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1270:/usr/include/c++/9/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1271:/usr/include/c++/9/bits/stl_vector.h ****        *  used the user should consider using std::list.
1272:/usr/include/c++/9/bits/stl_vector.h ****        */
1273:/usr/include/c++/9/bits/stl_vector.h ****       iterator
1274:/usr/include/c++/9/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1275:/usr/include/c++/9/bits/stl_vector.h **** #endif
1276:/usr/include/c++/9/bits/stl_vector.h **** 
1277:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1278:/usr/include/c++/9/bits/stl_vector.h ****       /**
1279:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1280:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1281:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1282:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1283:/usr/include/c++/9/bits/stl_vector.h ****        *
1284:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1285:/usr/include/c++/9/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1286:/usr/include/c++/9/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1287:/usr/include/c++/9/bits/stl_vector.h ****        *  used the user should consider using std::list.
1288:/usr/include/c++/9/bits/stl_vector.h ****        */
1289:/usr/include/c++/9/bits/stl_vector.h ****       iterator
1290:/usr/include/c++/9/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1291:/usr/include/c++/9/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1292:/usr/include/c++/9/bits/stl_vector.h **** 
1293:/usr/include/c++/9/bits/stl_vector.h ****       /**
1294:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1295:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1296:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1297:/usr/include/c++/9/bits/stl_vector.h ****        *
1298:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will insert copies of the data in the
1299:/usr/include/c++/9/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1300:/usr/include/c++/9/bits/stl_vector.h ****        *  specified by @a position.
1301:/usr/include/c++/9/bits/stl_vector.h ****        *
1302:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1303:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1304:/usr/include/c++/9/bits/stl_vector.h ****        *  consider using std::list.
1305:/usr/include/c++/9/bits/stl_vector.h ****        */
1306:/usr/include/c++/9/bits/stl_vector.h ****       iterator
1307:/usr/include/c++/9/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1308:/usr/include/c++/9/bits/stl_vector.h ****       {
1309:/usr/include/c++/9/bits/stl_vector.h **** 	auto __offset = __position - cbegin();
1310:/usr/include/c++/9/bits/stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1311:/usr/include/c++/9/bits/stl_vector.h **** 			std::random_access_iterator_tag());
1312:/usr/include/c++/9/bits/stl_vector.h **** 	return begin() + __offset;
1313:/usr/include/c++/9/bits/stl_vector.h ****       }
1314:/usr/include/c++/9/bits/stl_vector.h **** #endif
1315:/usr/include/c++/9/bits/stl_vector.h **** 
1316:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1317:/usr/include/c++/9/bits/stl_vector.h ****       /**
1318:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1319:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1320:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1321:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1322:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1323:/usr/include/c++/9/bits/stl_vector.h ****        *
1324:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1325:/usr/include/c++/9/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1326:/usr/include/c++/9/bits/stl_vector.h ****        *
1327:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1328:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1329:/usr/include/c++/9/bits/stl_vector.h ****        *  consider using std::list.
1330:/usr/include/c++/9/bits/stl_vector.h ****        */
1331:/usr/include/c++/9/bits/stl_vector.h ****       iterator
1332:/usr/include/c++/9/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1333:/usr/include/c++/9/bits/stl_vector.h ****       {
1334:/usr/include/c++/9/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1335:/usr/include/c++/9/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1336:/usr/include/c++/9/bits/stl_vector.h **** 	return begin() + __offset;
1337:/usr/include/c++/9/bits/stl_vector.h ****       }
1338:/usr/include/c++/9/bits/stl_vector.h **** #else
1339:/usr/include/c++/9/bits/stl_vector.h ****       /**
1340:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1341:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1342:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1343:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1344:/usr/include/c++/9/bits/stl_vector.h ****        *
1345:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1346:/usr/include/c++/9/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1347:/usr/include/c++/9/bits/stl_vector.h ****        *
1348:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1349:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1350:/usr/include/c++/9/bits/stl_vector.h ****        *  consider using std::list.
1351:/usr/include/c++/9/bits/stl_vector.h ****        */
1352:/usr/include/c++/9/bits/stl_vector.h ****       void
1353:/usr/include/c++/9/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1354:/usr/include/c++/9/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1355:/usr/include/c++/9/bits/stl_vector.h **** #endif
1356:/usr/include/c++/9/bits/stl_vector.h **** 
1357:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1358:/usr/include/c++/9/bits/stl_vector.h ****       /**
1359:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1360:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1361:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1362:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1363:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1364:/usr/include/c++/9/bits/stl_vector.h ****        *
1365:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1366:/usr/include/c++/9/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1367:/usr/include/c++/9/bits/stl_vector.h ****        *  by @a pos.
1368:/usr/include/c++/9/bits/stl_vector.h ****        *
1369:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1370:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1371:/usr/include/c++/9/bits/stl_vector.h ****        *  consider using std::list.
1372:/usr/include/c++/9/bits/stl_vector.h ****        */
1373:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator,
1374:/usr/include/c++/9/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1375:/usr/include/c++/9/bits/stl_vector.h **** 	iterator
1376:/usr/include/c++/9/bits/stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1377:/usr/include/c++/9/bits/stl_vector.h **** 	       _InputIterator __last)
1378:/usr/include/c++/9/bits/stl_vector.h **** 	{
1379:/usr/include/c++/9/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1380:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1381:/usr/include/c++/9/bits/stl_vector.h **** 			     __first, __last, __false_type());
1382:/usr/include/c++/9/bits/stl_vector.h **** 	  return begin() + __offset;
1383:/usr/include/c++/9/bits/stl_vector.h **** 	}
1384:/usr/include/c++/9/bits/stl_vector.h **** #else
1385:/usr/include/c++/9/bits/stl_vector.h ****       /**
1386:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1387:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1388:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1389:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1390:/usr/include/c++/9/bits/stl_vector.h ****        *
1391:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1392:/usr/include/c++/9/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1393:/usr/include/c++/9/bits/stl_vector.h ****        *  by @a pos.
1394:/usr/include/c++/9/bits/stl_vector.h ****        *
1395:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1396:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1397:/usr/include/c++/9/bits/stl_vector.h ****        *  consider using std::list.
1398:/usr/include/c++/9/bits/stl_vector.h ****        */
1399:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
1400:/usr/include/c++/9/bits/stl_vector.h **** 	void
1401:/usr/include/c++/9/bits/stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1402:/usr/include/c++/9/bits/stl_vector.h **** 	       _InputIterator __last)
1403:/usr/include/c++/9/bits/stl_vector.h **** 	{
1404:/usr/include/c++/9/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1405:/usr/include/c++/9/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1406:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1407:/usr/include/c++/9/bits/stl_vector.h **** 	}
1408:/usr/include/c++/9/bits/stl_vector.h **** #endif
1409:/usr/include/c++/9/bits/stl_vector.h **** 
1410:/usr/include/c++/9/bits/stl_vector.h ****       /**
1411:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1412:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1413:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1414:/usr/include/c++/9/bits/stl_vector.h ****        *
1415:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1416:/usr/include/c++/9/bits/stl_vector.h ****        *  shorten the %vector by one.
1417:/usr/include/c++/9/bits/stl_vector.h ****        *
1418:/usr/include/c++/9/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1419:/usr/include/c++/9/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1420:/usr/include/c++/9/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1421:/usr/include/c++/9/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1422:/usr/include/c++/9/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1423:/usr/include/c++/9/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1424:/usr/include/c++/9/bits/stl_vector.h ****        */
1425:/usr/include/c++/9/bits/stl_vector.h ****       iterator
1426:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1427:/usr/include/c++/9/bits/stl_vector.h ****       erase(const_iterator __position)
 5749              		.loc 4 1427 7
 5750              		.cfi_startproc
 5751 0000 F30F1EFA 		endbr64
 5752 0004 55       		pushq	%rbp
 5753              		.cfi_def_cfa_offset 16
 5754              		.cfi_offset 6, -16
 5755 0005 4889E5   		movq	%rsp, %rbp
 5756              		.cfi_def_cfa_register 6
 5757 0008 4157     		pushq	%r15
 5758 000a 4156     		pushq	%r14
 5759 000c 4155     		pushq	%r13
 5760 000e 4154     		pushq	%r12
 5761 0010 53       		pushq	%rbx
 5762 0011 4881ECB8 		subq	$184, %rsp
 5762      000000
 5763              		.cfi_offset 15, -24
 5764              		.cfi_offset 14, -32
 5765              		.cfi_offset 13, -40
 5766              		.cfi_offset 12, -48
 5767              		.cfi_offset 3, -56
 5768 0018 4889BD28 		movq	%rdi, -216(%rbp)
 5768      FFFFFF
 5769 001f 4889B520 		movq	%rsi, -224(%rbp)
 5769      FFFFFF
 5770 0026 488D9D30 		leaq	-208(%rbp), %rbx
 5770      FFFFFF
 5771 002d 4989DF   		movq	%rbx, %r15
 5772 0030 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 5772      000000
 5773 0037 7412     		je	.L334
 5774 0039 BF800000 		movl	$128, %edi
 5774      00
 5775 003e E8000000 		call	__asan_stack_malloc_1@PLT
 5775      00
 5776              	.LVL6:
 5777 0043 4885C0   		testq	%rax, %rax
 5778 0046 7403     		je	.L334
 5779 0048 4889C3   		movq	%rax, %rbx
 5780              	.L334:
 5781 004b 488D83A0 		leaq	160(%rbx), %rax
 5781      000000
 5782 0052 4989C4   		movq	%rax, %r12
 5783 0055 48C703B3 		movq	$1102416563, (%rbx)
 5783      8AB541
 5784 005c 488D0500 		leaq	.LC14(%rip), %rax
 5784      000000
 5785 0063 48894308 		movq	%rax, 8(%rbx)
 5786 0067 488D0592 		leaq	.LASANPC2679(%rip), %rax
 5786      FFFFFF
 5787 006e 48894310 		movq	%rax, 16(%rbx)
 5788 0072 4989DD   		movq	%rbx, %r13
 5789 0075 49C1ED03 		shrq	$3, %r13
 5790 0079 41C78500 		movl	$-235802127, 2147450880(%r13)
 5790      80FF7FF1 
 5790      F1F1F1
 5791 0084 41C78504 		movl	$-218959360, 2147450884(%r13)
 5791      80FF7F00 
 5791      F2F2F2
 5792 008f 41C78508 		movl	$-218959360, 2147450888(%r13)
 5792      80FF7F00 
 5792      F2F2F2
 5793 009a 41C7850C 		movl	$-202116352, 2147450892(%r13)
 5793      80FF7F00 
 5793      F3F3F3
 5794              		.loc 4 1427 7
 5795 00a5 64488B04 		movq	%fs:40, %rax
 5795      25280000 
 5795      00
 5796 00ae 488945C8 		movq	%rax, -56(%rbp)
 5797 00b2 31C0     		xorl	%eax, %eax
 5798              		.loc 4 1427 28
 5799 00b4 488B8520 		movq	-224(%rbp), %rax
 5799      FFFFFF
 5800 00bb 49894424 		movq	%rax, -64(%r12)
 5800      C0
1428:/usr/include/c++/9/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
 5801              		.loc 4 1428 58
 5802 00c0 488B8528 		movq	-216(%rbp), %rax
 5802      FFFFFF
 5803 00c7 4883BD28 		cmpq	$0, -216(%rbp)
 5803      FFFFFF00 
 5804 00cf 740B     		je	.L338
 5805 00d1 4889C2   		movq	%rax, %rdx
 5806 00d4 83E207   		andl	$7, %edx
 5807 00d7 4885D2   		testq	%rdx, %rdx
 5808 00da 740F     		je	.L339
 5809              	.L338:
 5810 00dc 4889C6   		movq	%rax, %rsi
 5811 00df 488D3D00 		leaq	.Lubsan_data480(%rip), %rdi
 5811      000000
 5812 00e6 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5812      00
 5813              	.L339:
 5814              		.loc 4 1428 47
 5815 00eb 488B8528 		movq	-216(%rbp), %rax
 5815      FFFFFF
 5816 00f2 4883BD28 		cmpq	$0, -216(%rbp)
 5816      FFFFFF00 
 5817 00fa 740B     		je	.L340
 5818 00fc 4889C2   		movq	%rax, %rdx
 5819 00ff 83E207   		andl	$7, %edx
 5820 0102 4885D2   		testq	%rdx, %rdx
 5821 0105 740F     		je	.L341
 5822              	.L340:
 5823 0107 4889C6   		movq	%rax, %rsi
 5824 010a 488D3D00 		leaq	.Lubsan_data481(%rip), %rdi
 5824      000000
 5825 0111 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5825      00
 5826              	.L341:
 5827 0116 498D4424 		leaq	-96(%r12), %rax
 5827      A0
 5828 011b 4889C2   		movq	%rax, %rdx
 5829 011e 48C1EA03 		shrq	$3, %rdx
 5830 0122 4881C200 		addq	$2147450880, %rdx
 5830      80FF7F
 5831 0129 0FB612   		movzbl	(%rdx), %edx
 5832 012c 84D2     		testb	%dl, %dl
 5833 012e 7408     		je	.L342
 5834 0130 4889C7   		movq	%rax, %rdi
 5835 0133 E8000000 		call	__asan_report_store8@PLT
 5835      00
 5836              	.L342:
 5837 0138 488B8528 		movq	-216(%rbp), %rax
 5837      FFFFFF
 5838 013f 4889C7   		movq	%rax, %rdi
 5839 0142 E8000000 		call	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE6cbeginEv
 5839      00
 5840 0147 49894424 		movq	%rax, -96(%r12)
 5840      A0
 5841 014c 4D8D7424 		leaq	-96(%r12), %r14
 5841      A0
 5842 0151 4C89F0   		movq	%r14, %rax
 5843 0154 4D85F6   		testq	%r14, %r14
 5844 0157 740B     		je	.L343
 5845 0159 4889C2   		movq	%rax, %rdx
 5846 015c 83E207   		andl	$7, %edx
 5847 015f 4885D2   		testq	%rdx, %rdx
 5848 0162 740F     		je	.L344
 5849              	.L343:
 5850 0164 4889C6   		movq	%rax, %rsi
 5851 0167 488D3D00 		leaq	.Lubsan_data482(%rip), %rdi
 5851      000000
 5852 016e E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5852      00
 5853              	.L344:
 5854              		.loc 4 1428 58
 5855 0173 498D4424 		leaq	-64(%r12), %rax
 5855      C0
 5856 0178 4C89F6   		movq	%r14, %rsi
 5857 017b 4889C7   		movq	%rax, %rdi
 5858 017e E8000000 		call	_ZN9__gnu_cxxmiIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEE
 5858      00
 5859 0183 4989C6   		movq	%rax, %r14
 5860              		.loc 4 1428 33
 5861 0186 488B8528 		movq	-216(%rbp), %rax
 5861      FFFFFF
 5862 018d 4883BD28 		cmpq	$0, -216(%rbp)
 5862      FFFFFF00 
 5863 0195 740B     		je	.L345
 5864 0197 4889C2   		movq	%rax, %rdx
 5865 019a 83E207   		andl	$7, %edx
 5866 019d 4885D2   		testq	%rdx, %rdx
 5867 01a0 740F     		je	.L346
 5868              	.L345:
 5869 01a2 4889C6   		movq	%rax, %rsi
 5870 01a5 488D3D00 		leaq	.Lubsan_data483(%rip), %rdi
 5870      000000
 5871 01ac E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5871      00
 5872              	.L346:
 5873 01b1 498D4424 		leaq	-128(%r12), %rax
 5873      80
 5874 01b6 4889C2   		movq	%rax, %rdx
 5875 01b9 48C1EA03 		shrq	$3, %rdx
 5876 01bd 4881C200 		addq	$2147450880, %rdx
 5876      80FF7F
 5877 01c4 0FB612   		movzbl	(%rdx), %edx
 5878 01c7 84D2     		testb	%dl, %dl
 5879 01c9 7408     		je	.L347
 5880 01cb 4889C7   		movq	%rax, %rdi
 5881 01ce E8000000 		call	__asan_report_store8@PLT
 5881      00
 5882              	.L347:
 5883 01d3 488B8528 		movq	-216(%rbp), %rax
 5883      FFFFFF
 5884 01da 4889C7   		movq	%rax, %rdi
 5885 01dd E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv
 5885      00
 5886 01e2 49894424 		movq	%rax, -128(%r12)
 5886      80
 5887 01e7 4983C480 		addq	$-128, %r12
 5888 01eb 4C89E0   		movq	%r12, %rax
 5889 01ee 4D85E4   		testq	%r12, %r12
 5890 01f1 740B     		je	.L348
 5891 01f3 4889C2   		movq	%rax, %rdx
 5892 01f6 83E207   		andl	$7, %edx
 5893 01f9 4885D2   		testq	%rdx, %rdx
 5894 01fc 740F     		je	.L349
 5895              	.L348:
 5896 01fe 4889C6   		movq	%rax, %rsi
 5897 0201 488D3D00 		leaq	.Lubsan_data484(%rip), %rdi
 5897      000000
 5898 0208 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5898      00
 5899              	.L349:
 5900              		.loc 4 1428 58
 5901 020d 4C89F6   		movq	%r14, %rsi
 5902 0210 4C89E7   		movq	%r12, %rdi
 5903 0213 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 5903      00
 5904 0218 4889C2   		movq	%rax, %rdx
 5905 021b 488B8528 		movq	-216(%rbp), %rax
 5905      FFFFFF
 5906 0222 4889D6   		movq	%rdx, %rsi
 5907 0225 4889C7   		movq	%rax, %rdi
 5908 0228 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8_M_eraseEN9__gnu_cx
 5908      00
 5909 022d 4889C2   		movq	%rax, %rdx
1427:/usr/include/c++/9/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
 5910              		.loc 4 1427 7
 5911 0230 4939DF   		cmpq	%rbx, %r15
 5912 0233 7432     		je	.L335
 5913 0235 48C7030E 		movq	$1172321806, (%rbx)
 5913      36E045
 5914 023c 48BEF5F5 		movabsq	$-723401728380766731, %rsi
 5914      F5F5F5F5 
 5914      F5F5
 5915 0246 48BFF5F5 		movabsq	$-723401728380766731, %rdi
 5915      F5F5F5F5 
 5915      F5F5
 5916 0250 4989B500 		movq	%rsi, 2147450880(%r13)
 5916      80FF7F
 5917 0257 4989BD08 		movq	%rdi, 2147450888(%r13)
 5917      80FF7F
 5918 025e 488B4378 		movq	120(%rbx), %rax
 5919 0262 C60000   		movb	$0, (%rax)
 5920 0265 EB16     		jmp	.L336
 5921              	.L335:
 5922 0267 49C78500 		movq	$0, 2147450880(%r13)
 5922      80FF7F00 
 5922      000000
 5923 0272 49C78508 		movq	$0, 2147450888(%r13)
 5923      80FF7F00 
 5923      000000
 5924              	.L336:
 5925              		.loc 4 1428 61
 5926 027d 488B45C8 		movq	-56(%rbp), %rax
 5927 0281 64483304 		xorq	%fs:40, %rax
 5927      25280000 
 5927      00
 5928 028a 7405     		je	.L351
 5929 028c E8000000 		call	__stack_chk_fail@PLT
 5929      00
 5930              	.L351:
 5931 0291 4889D0   		movq	%rdx, %rax
 5932 0294 4881C4B8 		addq	$184, %rsp
 5932      000000
 5933 029b 5B       		popq	%rbx
 5934 029c 415C     		popq	%r12
 5935 029e 415D     		popq	%r13
 5936 02a0 415E     		popq	%r14
 5937 02a2 415F     		popq	%r15
 5938 02a4 5D       		popq	%rbp
 5939              		.cfi_def_cfa 7, 8
 5940 02a5 C3       		ret
 5941              		.cfi_endproc
 5942              	.LFE2679:
 5944              		.section	.data.rel.local
 5945              		.align 32
 5948              	.Lubsan_data485:
 5949 19c0 00000000 		.quad	.LC9
 5949      00000000 
 5950 19c8 0E010000 		.long	270
 5951 19cc 04000000 		.long	4
 5952 19d0 00000000 		.quad	.Lubsan_type5
 5952      00000000 
 5953 19d8 03       		.byte	3
 5954 19d9 04       		.byte	4
 5955 19da 00000000 		.zero	6
 5955      0000
 5956 19e0 00000000 		.zero	32
 5956      00000000 
 5956      00000000 
 5956      00000000 
 5956      00000000 
 5957              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_,"ax
 5958              		.align 2
 5959              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_
 5961              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_:
 5962              	.LASANPC2703:
 5963              	.LFB2703:
 267:/usr/include/c++/9/bits/basic_string.h **** 	{
 5964              		.loc 5 267 9
 5965              		.cfi_startproc
 5966 0000 F30F1EFA 		endbr64
 5967 0004 55       		pushq	%rbp
 5968              		.cfi_def_cfa_offset 16
 5969              		.cfi_offset 6, -16
 5970 0005 4889E5   		movq	%rsp, %rbp
 5971              		.cfi_def_cfa_register 6
 5972 0008 4883EC20 		subq	$32, %rsp
 5973 000c 48897DF8 		movq	%rdi, -8(%rbp)
 5974 0010 488975F0 		movq	%rsi, -16(%rbp)
 5975 0014 488955E8 		movq	%rdx, -24(%rbp)
 270:/usr/include/c++/9/bits/basic_string.h ****         }
 5976              		.loc 5 270 4
 5977 0018 488B45F8 		movq	-8(%rbp), %rax
 5978 001c 48837DF8 		cmpq	$0, -8(%rbp)
 5978      00
 5979 0021 740B     		je	.L353
 5980 0023 4889C2   		movq	%rax, %rdx
 5981 0026 83E207   		andl	$7, %edx
 5982 0029 4885D2   		testq	%rdx, %rdx
 5983 002c 740F     		je	.L354
 5984              	.L353:
 5985 002e 4889C6   		movq	%rax, %rsi
 5986 0031 488D3D00 		leaq	.Lubsan_data485(%rip), %rdi
 5986      000000
 5987 0038 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 5987      00
 5988              	.L354:
 5989 003d 488B55E8 		movq	-24(%rbp), %rdx
 5990 0041 488B4DF0 		movq	-16(%rbp), %rcx
 5991 0045 488B45F8 		movq	-8(%rbp), %rax
 5992 0049 4889CE   		movq	%rcx, %rsi
 5993 004c 4889C7   		movq	%rax, %rdi
 5994 004f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__fals
 5994      00
 271:/usr/include/c++/9/bits/basic_string.h **** 
 5995              		.loc 5 271 9
 5996 0054 90       		nop
 5997 0055 C9       		leave
 5998              		.cfi_def_cfa 7, 8
 5999 0056 C3       		ret
 6000              		.cfi_endproc
 6001              	.LFE2703:
 6003              		.data
 6004              		.align 32
 6007              	.Lubsan_type34:
 6010 07e4 27737472 		.string	"'struct type'"
 6010      75637420 
 6010      74797065 
 6010      2700
 6011 07f2 00000000 		.zero	46
 6011      00000000 
 6011      00000000 
 6011      00000000 
 6011      00000000 
 6012              		.section	.rodata
 6013 04fc 00000000 		.align 32
 6014              	.LC15:
 6015 0500 2F757372 		.string	"/usr/include/c++/9/bits/move.h"
 6015      2F696E63 
 6015      6C756465 
 6015      2F632B2B 
 6015      2F392F62 
 6016 051f 00000000 		.zero	33
 6016      00000000 
 6016      00000000 
 6016      00000000 
 6016      00000000 
 6017              		.section	.data.rel.local
 6018              		.align 32
 6021              	.Lubsan_data486:
 6022 1a00 00000000 		.quad	.LC15
 6022      00000000 
 6023 1a08 64000000 		.long	100
 6024 1a0c 4A000000 		.long	74
 6025 1a10 00000000 		.quad	.Lubsan_type34
 6025      00000000 
 6026 1a18 03       		.byte	3
 6027 1a19 02       		.byte	2
 6028 1a1a 00000000 		.zero	6
 6028      0000
 6029 1a20 00000000 		.zero	32
 6029      00000000 
 6029      00000000 
 6029      00000000 
 6029      00000000 
 6030              		.section	.text._ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_refere
 6031              		.weak	_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4t
 6033              	_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8
 6034              	.LASANPC2745:
 6035              	.LFB2745:
 6036              		.file 8 "/usr/include/c++/9/bits/move.h"
   1:/usr/include/c++/9/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/c++/9/bits/move.h **** 
   3:/usr/include/c++/9/bits/move.h **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/move.h **** //
   5:/usr/include/c++/9/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/move.h **** // any later version.
  10:/usr/include/c++/9/bits/move.h **** 
  11:/usr/include/c++/9/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/move.h **** 
  16:/usr/include/c++/9/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/move.h **** 
  20:/usr/include/c++/9/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/move.h **** 
  25:/usr/include/c++/9/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/9/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/9/bits/move.h ****  */
  29:/usr/include/c++/9/bits/move.h **** 
  30:/usr/include/c++/9/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/9/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/9/bits/move.h **** 
  33:/usr/include/c++/9/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/9/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/9/bits/move.h **** 
  36:/usr/include/c++/9/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/9/bits/move.h **** {
  38:/usr/include/c++/9/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/9/bits/move.h **** 
  40:/usr/include/c++/9/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/9/bits/move.h ****   /**
  42:/usr/include/c++/9/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/9/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/9/bits/move.h ****    */
  45:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/9/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/usr/include/c++/9/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/usr/include/c++/9/bits/move.h ****     { return __builtin_addressof(__r); }
  49:/usr/include/c++/9/bits/move.h **** 
  50:/usr/include/c++/9/bits/move.h **** #if __cplusplus >= 201103L
  51:/usr/include/c++/9/bits/move.h **** 
  52:/usr/include/c++/9/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  53:/usr/include/c++/9/bits/move.h **** } // namespace
  54:/usr/include/c++/9/bits/move.h **** 
  55:/usr/include/c++/9/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  56:/usr/include/c++/9/bits/move.h **** 
  57:/usr/include/c++/9/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/usr/include/c++/9/bits/move.h **** {
  59:/usr/include/c++/9/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/c++/9/bits/move.h **** 
  61:/usr/include/c++/9/bits/move.h ****   /**
  62:/usr/include/c++/9/bits/move.h ****    *  @addtogroup utilities
  63:/usr/include/c++/9/bits/move.h ****    *  @{
  64:/usr/include/c++/9/bits/move.h ****    */
  65:/usr/include/c++/9/bits/move.h **** 
  66:/usr/include/c++/9/bits/move.h ****   /**
  67:/usr/include/c++/9/bits/move.h ****    *  @brief  Forward an lvalue.
  68:/usr/include/c++/9/bits/move.h ****    *  @return The parameter cast to the specified type.
  69:/usr/include/c++/9/bits/move.h ****    *
  70:/usr/include/c++/9/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  71:/usr/include/c++/9/bits/move.h ****    */
  72:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  73:/usr/include/c++/9/bits/move.h ****     constexpr _Tp&&
  74:/usr/include/c++/9/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  75:/usr/include/c++/9/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  76:/usr/include/c++/9/bits/move.h **** 
  77:/usr/include/c++/9/bits/move.h ****   /**
  78:/usr/include/c++/9/bits/move.h ****    *  @brief  Forward an rvalue.
  79:/usr/include/c++/9/bits/move.h ****    *  @return The parameter cast to the specified type.
  80:/usr/include/c++/9/bits/move.h ****    *
  81:/usr/include/c++/9/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  82:/usr/include/c++/9/bits/move.h ****    */
  83:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  84:/usr/include/c++/9/bits/move.h ****     constexpr _Tp&&
  85:/usr/include/c++/9/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  86:/usr/include/c++/9/bits/move.h ****     {
  87:/usr/include/c++/9/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  88:/usr/include/c++/9/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  89:/usr/include/c++/9/bits/move.h ****       return static_cast<_Tp&&>(__t);
  90:/usr/include/c++/9/bits/move.h ****     }
  91:/usr/include/c++/9/bits/move.h **** 
  92:/usr/include/c++/9/bits/move.h ****   /**
  93:/usr/include/c++/9/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  94:/usr/include/c++/9/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  95:/usr/include/c++/9/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  96:/usr/include/c++/9/bits/move.h ****   */
  97:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  98:/usr/include/c++/9/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
  99:/usr/include/c++/9/bits/move.h ****     move(_Tp&& __t) noexcept
 6037              		.loc 8 99 5
 6038              		.cfi_startproc
 6039 0000 F30F1EFA 		endbr64
 6040 0004 55       		pushq	%rbp
 6041              		.cfi_def_cfa_offset 16
 6042              		.cfi_offset 6, -16
 6043 0005 4889E5   		movq	%rsp, %rbp
 6044              		.cfi_def_cfa_register 6
 6045 0008 4883EC10 		subq	$16, %rsp
 6046 000c 48897DF8 		movq	%rdi, -8(%rbp)
 100:/usr/include/c++/9/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 6047              		.loc 8 100 74
 6048 0010 488B45F8 		movq	-8(%rbp), %rax
 6049 0014 48837DF8 		cmpq	$0, -8(%rbp)
 6049      00
 6050 0019 740B     		je	.L356
 6051 001b 4889C2   		movq	%rax, %rdx
 6052 001e 83E207   		andl	$7, %edx
 6053 0021 4885D2   		testq	%rdx, %rdx
 6054 0024 740F     		je	.L357
 6055              	.L356:
 6056 0026 4889C6   		movq	%rax, %rsi
 6057 0029 488D3D00 		leaq	.Lubsan_data486(%rip), %rdi
 6057      000000
 6058 0030 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6058      00
 6059              	.L357:
 6060 0035 488B45F8 		movq	-8(%rbp), %rax
 6061              		.loc 8 100 77
 6062 0039 C9       		leave
 6063              		.cfi_def_cfa 7, 8
 6064 003a C3       		ret
 6065              		.cfi_endproc
 6066              	.LFE2745:
 6068              		.section	.text._ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC
 6069              		.align 2
 6070              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev
 6072              	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
 6073              	.LASANPC2755:
 6074              	.LFB2755:
 6075              		.file 9 "/usr/include/c++/9/ext/new_allocator.h"
   1:/usr/include/c++/9/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/9/ext/new_allocator.h **** 
   3:/usr/include/c++/9/ext/new_allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/ext/new_allocator.h **** //
   5:/usr/include/c++/9/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/9/ext/new_allocator.h **** 
  11:/usr/include/c++/9/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/ext/new_allocator.h **** 
  16:/usr/include/c++/9/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/ext/new_allocator.h **** 
  20:/usr/include/c++/9/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/ext/new_allocator.h **** 
  25:/usr/include/c++/9/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/9/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/9/ext/new_allocator.h ****  */
  28:/usr/include/c++/9/ext/new_allocator.h **** 
  29:/usr/include/c++/9/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/9/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/9/ext/new_allocator.h **** 
  32:/usr/include/c++/9/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/9/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/9/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/9/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/9/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/9/ext/new_allocator.h **** #endif
  39:/usr/include/c++/9/ext/new_allocator.h **** 
  40:/usr/include/c++/9/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/9/ext/new_allocator.h **** {
  42:/usr/include/c++/9/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/9/ext/new_allocator.h **** 
  44:/usr/include/c++/9/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/9/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/9/ext/new_allocator.h **** 
  47:/usr/include/c++/9/ext/new_allocator.h ****   /**
  48:/usr/include/c++/9/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/9/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/9/ext/new_allocator.h ****    *
  51:/usr/include/c++/9/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  52:/usr/include/c++/9/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/9/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/9/ext/new_allocator.h ****    *
  55:/usr/include/c++/9/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/9/ext/new_allocator.h ****    */
  57:/usr/include/c++/9/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/9/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/9/ext/new_allocator.h ****     {
  60:/usr/include/c++/9/ext/new_allocator.h ****     public:
  61:/usr/include/c++/9/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/9/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/9/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/9/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/9/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/9/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/9/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/9/ext/new_allocator.h **** 
  69:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/9/ext/new_allocator.h **** 	struct rebind
  71:/usr/include/c++/9/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/9/ext/new_allocator.h **** 
  73:/usr/include/c++/9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/9/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/9/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/9/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/9/ext/new_allocator.h **** #endif
  78:/usr/include/c++/9/ext/new_allocator.h **** 
  79:/usr/include/c++/9/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  80:/usr/include/c++/9/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 6076              		.loc 9 80 7
 6077              		.cfi_startproc
 6078 0000 F30F1EFA 		endbr64
 6079 0004 55       		pushq	%rbp
 6080              		.cfi_def_cfa_offset 16
 6081              		.cfi_offset 6, -16
 6082 0005 4889E5   		movq	%rsp, %rbp
 6083              		.cfi_def_cfa_register 6
 6084 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6085              		.loc 9 80 47
 6086 000c 90       		nop
 6087 000d 5D       		popq	%rbp
 6088              		.cfi_def_cfa 7, 8
 6089 000e C3       		ret
 6090              		.cfi_endproc
 6091              	.LFE2755:
 6093              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev
 6094              		.set	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev,_ZN9__
 6095              		.section	.text._ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED
 6096              		.align 2
 6097              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 6099              	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
 6100              	.LASANPC2758:
 6101              	.LFB2758:
  81:/usr/include/c++/9/ext/new_allocator.h **** 
  82:/usr/include/c++/9/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  83:/usr/include/c++/9/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  84:/usr/include/c++/9/ext/new_allocator.h **** 
  85:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Tp1>
  86:/usr/include/c++/9/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  87:/usr/include/c++/9/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  88:/usr/include/c++/9/ext/new_allocator.h **** 
  89:/usr/include/c++/9/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 6102              		.loc 9 89 7
 6103              		.cfi_startproc
 6104 0000 F30F1EFA 		endbr64
 6105 0004 55       		pushq	%rbp
 6106              		.cfi_def_cfa_offset 16
 6107              		.cfi_offset 6, -16
 6108 0005 4889E5   		movq	%rsp, %rbp
 6109              		.cfi_def_cfa_register 6
 6110 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6111              		.loc 9 89 48
 6112 000c 90       		nop
 6113 000d 5D       		popq	%rbp
 6114              		.cfi_def_cfa 7, 8
 6115 000e C3       		ret
 6116              		.cfi_endproc
 6117              	.LFE2758:
 6119              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 6120              		.set	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev,_ZN9__
 6121              		.section	.data.rel.local
 6122              		.align 32
 6125              	.Lubsan_data487:
 6126 1a40 00000000 		.quad	.LC3
 6126      00000000 
 6127 1a48 22010000 		.long	290
 6128 1a4c 07000000 		.long	7
 6129 1a50 00000000 		.quad	.Lubsan_type26
 6129      00000000 
 6130 1a58 03       		.byte	3
 6131 1a59 02       		.byte	2
 6132 1a5a 00000000 		.zero	6
 6132      0000
 6133 1a60 00000000 		.zero	32
 6133      00000000 
 6133      00000000 
 6133      00000000 
 6133      00000000 
 6134              		.align 32
 6137              	.Lubsan_data488:
 6138 1a80 00000000 		.quad	.LC3
 6138      00000000 
 6139 1a88 23010000 		.long	291
 6140 1a8c 14000000 		.long	20
 6141 1a90 00000000 		.quad	.Lubsan_type8
 6141      00000000 
 6142 1a98 03       		.byte	3
 6143 1a99 03       		.byte	3
 6144 1a9a 00000000 		.zero	6
 6144      0000
 6145 1aa0 00000000 		.zero	32
 6145      00000000 
 6145      00000000 
 6145      00000000 
 6145      00000000 
 6146              		.align 32
 6149              	.Lubsan_data489:
 6150 1ac0 00000000 		.quad	.LC3
 6150      00000000 
 6151 1ac8 23010000 		.long	291
 6152 1acc 14000000 		.long	20
 6153 1ad0 00000000 		.quad	.Lubsan_type9
 6153      00000000 
 6154 1ad8 03       		.byte	3
 6155 1ad9 05       		.byte	5
 6156 1ada 00000000 		.zero	6
 6156      0000
 6157 1ae0 00000000 		.zero	32
 6157      00000000 
 6157      00000000 
 6157      00000000 
 6157      00000000 
 6158              		.data
 6159              		.align 32
 6162              	.Lubsan_type35:
 6165 0824 27636F6E 		.string	"'const struct _Tp_alloc_type'"
 6165      73742073 
 6165      74727563 
 6165      74205F54 
 6165      705F616C 
 6166 0842 00000000 		.zero	62
 6166      00000000 
 6166      00000000 
 6166      00000000 
 6166      00000000 
 6167              		.section	.data.rel.local
 6168              		.align 32
 6171              	.Lubsan_data490:
 6172 1b00 00000000 		.quad	.LC3
 6172      00000000 
 6173 1b08 23010000 		.long	291
 6174 1b0c 14000000 		.long	20
 6175 1b10 00000000 		.quad	.Lubsan_type35
 6175      00000000 
 6176 1b18 00       		.byte	0
 6177 1b19 02       		.byte	2
 6178 1b1a 00000000 		.zero	6
 6178      0000
 6179 1b20 00000000 		.zero	32
 6179      00000000 
 6179      00000000 
 6179      00000000 
 6179      00000000 
 6180              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2E
 6181              		.align 2
 6182              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2ERKS6_
 6184              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC2ERKS6_:
 6185              	.LASANPC2761:
 6186              	.LFB2761:
 290:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(__a) { }
 6187              		.loc 4 290 7
 6188              		.cfi_startproc
 6189 0000 F30F1EFA 		endbr64
 6190 0004 55       		pushq	%rbp
 6191              		.cfi_def_cfa_offset 16
 6192              		.cfi_offset 6, -16
 6193 0005 4889E5   		movq	%rsp, %rbp
 6194              		.cfi_def_cfa_register 6
 6195 0008 53       		pushq	%rbx
 6196 0009 4883EC18 		subq	$24, %rsp
 6197              		.cfi_offset 3, -24
 6198 000d 48897DE8 		movq	%rdi, -24(%rbp)
 6199 0011 488975E0 		movq	%rsi, -32(%rbp)
 290:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(__a) { }
 6200              		.loc 4 290 7
 6201 0015 488B45E8 		movq	-24(%rbp), %rax
 6202 0019 48837DE8 		cmpq	$0, -24(%rbp)
 6202      00
 6203 001e 740B     		je	.L362
 6204 0020 4889C2   		movq	%rax, %rdx
 6205 0023 83E207   		andl	$7, %edx
 6206 0026 4885D2   		testq	%rdx, %rdx
 6207 0029 740F     		je	.L363
 6208              	.L362:
 6209 002b 4889C6   		movq	%rax, %rsi
 6210 002e 488D3D00 		leaq	.Lubsan_data487(%rip), %rdi
 6210      000000
 6211 0035 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6211      00
 6212              	.L363:
 6213              	.LBB20:
 291:/usr/include/c++/9/bits/stl_vector.h **** 
 6214              		.loc 4 291 20
 6215 003a 488B45E8 		movq	-24(%rbp), %rax
 6216 003e 48837DE8 		cmpq	$0, -24(%rbp)
 6216      00
 6217 0043 740B     		je	.L364
 6218 0045 4889C2   		movq	%rax, %rdx
 6219 0048 83E207   		andl	$7, %edx
 6220 004b 4885D2   		testq	%rdx, %rdx
 6221 004e 740F     		je	.L365
 6222              	.L364:
 6223 0050 4889C6   		movq	%rax, %rsi
 6224 0053 488D3D00 		leaq	.Lubsan_data488(%rip), %rdi
 6224      000000
 6225 005a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6225      00
 6226              	.L365:
 6227 005f 488B5DE8 		movq	-24(%rbp), %rbx
 6228 0063 4889D8   		movq	%rbx, %rax
 6229 0066 4885DB   		testq	%rbx, %rbx
 6230 0069 740B     		je	.L366
 6231 006b 4889C2   		movq	%rax, %rdx
 6232 006e 83E207   		andl	$7, %edx
 6233 0071 4885D2   		testq	%rdx, %rdx
 6234 0074 740F     		je	.L367
 6235              	.L366:
 6236 0076 4889C6   		movq	%rax, %rsi
 6237 0079 488D3D00 		leaq	.Lubsan_data489(%rip), %rdi
 6237      000000
 6238 0080 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6238      00
 6239              	.L367:
 6240 0085 48837DE0 		cmpq	$0, -32(%rbp)
 6240      00
 6241 008a 7511     		jne	.L368
 6242 008c BE000000 		movl	$0, %esi
 6242      00
 6243 0091 488D3D00 		leaq	.Lubsan_data490(%rip), %rdi
 6243      000000
 6244 0098 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6244      00
 6245              	.L368:
 6246 009d 488B45E0 		movq	-32(%rbp), %rax
 6247 00a1 4889C6   		movq	%rax, %rsi
 6248 00a4 4889DF   		movq	%rbx, %rdi
 6249 00a7 E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_imp
 6249      00
 6250              	.LBE20:
 291:/usr/include/c++/9/bits/stl_vector.h **** 
 6251              		.loc 4 291 24
 6252 00ac 90       		nop
 6253 00ad 4883C418 		addq	$24, %rsp
 6254 00b1 5B       		popq	%rbx
 6255 00b2 5D       		popq	%rbp
 6256              		.cfi_def_cfa 7, 8
 6257 00b3 C3       		ret
 6258              		.cfi_endproc
 6259              	.LFE2761:
 6261              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ERKS6_
 6262              		.set	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ERKS6_,_ZNS
 6263              		.data
 6264              		.align 32
 6267              	.Lubsan_type36:
 6270 0884 27636F6E 		.string	"'const struct initializer_list'"
 6270      73742073 
 6270      74727563 
 6270      7420696E 
 6270      69746961 
 6271 08a4 00000000 		.zero	60
 6271      00000000 
 6271      00000000 
 6271      00000000 
 6271      00000000 
 6272              		.section	.rodata
 6273              		.align 32
 6274              	.LC16:
 6275 0540 2F757372 		.string	"/usr/include/c++/9/initializer_list"
 6275      2F696E63 
 6275      6C756465 
 6275      2F632B2B 
 6275      2F392F69 
 6276 0564 00000000 		.zero	60
 6276      00000000 
 6276      00000000 
 6276      00000000 
 6276      00000000 
 6277              		.section	.data.rel.local
 6278              		.align 32
 6281              	.Lubsan_data491:
 6282 1b40 00000000 		.quad	.LC16
 6282      00000000 
 6283 1b48 4B000000 		.long	75
 6284 1b4c 27000000 		.long	39
 6285 1b50 00000000 		.quad	.Lubsan_type36
 6285      00000000 
 6286 1b58 03       		.byte	3
 6287 1b59 03       		.byte	3
 6288 1b5a 00000000 		.zero	6
 6288      0000
 6289 1b60 00000000 		.zero	32
 6289      00000000 
 6289      00000000 
 6289      00000000 
 6289      00000000 
 6290              		.section	.text._ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5begi
 6291              		.align 2
 6292              		.weak	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv
 6294              	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv:
 6295              	.LASANPC2763:
 6296              	.LFB2763:
 6297              		.file 10 "/usr/include/c++/9/initializer_list"
   1:/usr/include/c++/9/initializer_list **** // std::initializer_list support -*- C++ -*-
   2:/usr/include/c++/9/initializer_list **** 
   3:/usr/include/c++/9/initializer_list **** // Copyright (C) 2008-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/initializer_list **** //
   5:/usr/include/c++/9/initializer_list **** // This file is part of GCC.
   6:/usr/include/c++/9/initializer_list **** //
   7:/usr/include/c++/9/initializer_list **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/9/initializer_list **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/c++/9/initializer_list **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/9/initializer_list **** // any later version.
  11:/usr/include/c++/9/initializer_list **** //
  12:/usr/include/c++/9/initializer_list **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/9/initializer_list **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/9/initializer_list **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/9/initializer_list **** // GNU General Public License for more details.
  16:/usr/include/c++/9/initializer_list **** //
  17:/usr/include/c++/9/initializer_list **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/9/initializer_list **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/9/initializer_list **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/9/initializer_list **** 
  21:/usr/include/c++/9/initializer_list **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/9/initializer_list **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/9/initializer_list **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/9/initializer_list **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/9/initializer_list **** 
  26:/usr/include/c++/9/initializer_list **** /** @file initializer_list
  27:/usr/include/c++/9/initializer_list ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/9/initializer_list ****  */
  29:/usr/include/c++/9/initializer_list **** 
  30:/usr/include/c++/9/initializer_list **** #ifndef _INITIALIZER_LIST
  31:/usr/include/c++/9/initializer_list **** #define _INITIALIZER_LIST
  32:/usr/include/c++/9/initializer_list **** 
  33:/usr/include/c++/9/initializer_list **** #pragma GCC system_header
  34:/usr/include/c++/9/initializer_list **** 
  35:/usr/include/c++/9/initializer_list **** #if __cplusplus < 201103L
  36:/usr/include/c++/9/initializer_list **** # include <bits/c++0x_warning.h>
  37:/usr/include/c++/9/initializer_list **** #else // C++0x
  38:/usr/include/c++/9/initializer_list **** 
  39:/usr/include/c++/9/initializer_list **** #pragma GCC visibility push(default)
  40:/usr/include/c++/9/initializer_list **** 
  41:/usr/include/c++/9/initializer_list **** #include <bits/c++config.h>
  42:/usr/include/c++/9/initializer_list **** 
  43:/usr/include/c++/9/initializer_list **** namespace std
  44:/usr/include/c++/9/initializer_list **** {
  45:/usr/include/c++/9/initializer_list ****   /// initializer_list
  46:/usr/include/c++/9/initializer_list ****   template<class _E>
  47:/usr/include/c++/9/initializer_list ****     class initializer_list
  48:/usr/include/c++/9/initializer_list ****     {
  49:/usr/include/c++/9/initializer_list ****     public:
  50:/usr/include/c++/9/initializer_list ****       typedef _E 		value_type;
  51:/usr/include/c++/9/initializer_list ****       typedef const _E& 	reference;
  52:/usr/include/c++/9/initializer_list ****       typedef const _E& 	const_reference;
  53:/usr/include/c++/9/initializer_list ****       typedef size_t 		size_type;
  54:/usr/include/c++/9/initializer_list ****       typedef const _E* 	iterator;
  55:/usr/include/c++/9/initializer_list ****       typedef const _E* 	const_iterator;
  56:/usr/include/c++/9/initializer_list **** 
  57:/usr/include/c++/9/initializer_list ****     private:
  58:/usr/include/c++/9/initializer_list ****       iterator			_M_array;
  59:/usr/include/c++/9/initializer_list ****       size_type			_M_len;
  60:/usr/include/c++/9/initializer_list **** 
  61:/usr/include/c++/9/initializer_list ****       // The compiler can call a private constructor.
  62:/usr/include/c++/9/initializer_list ****       constexpr initializer_list(const_iterator __a, size_type __l)
  63:/usr/include/c++/9/initializer_list ****       : _M_array(__a), _M_len(__l) { }
  64:/usr/include/c++/9/initializer_list **** 
  65:/usr/include/c++/9/initializer_list ****     public:
  66:/usr/include/c++/9/initializer_list ****       constexpr initializer_list() noexcept
  67:/usr/include/c++/9/initializer_list ****       : _M_array(0), _M_len(0) { }
  68:/usr/include/c++/9/initializer_list **** 
  69:/usr/include/c++/9/initializer_list ****       // Number of elements.
  70:/usr/include/c++/9/initializer_list ****       constexpr size_type
  71:/usr/include/c++/9/initializer_list ****       size() const noexcept { return _M_len; }
  72:/usr/include/c++/9/initializer_list **** 
  73:/usr/include/c++/9/initializer_list ****       // First element.
  74:/usr/include/c++/9/initializer_list ****       constexpr const_iterator
  75:/usr/include/c++/9/initializer_list ****       begin() const noexcept { return _M_array; }
 6298              		.loc 10 75 7
 6299              		.cfi_startproc
 6300 0000 F30F1EFA 		endbr64
 6301 0004 55       		pushq	%rbp
 6302              		.cfi_def_cfa_offset 16
 6303              		.cfi_offset 6, -16
 6304 0005 4889E5   		movq	%rsp, %rbp
 6305              		.cfi_def_cfa_register 6
 6306 0008 4883EC10 		subq	$16, %rsp
 6307 000c 48897DF8 		movq	%rdi, -8(%rbp)
 6308              		.loc 10 75 39
 6309 0010 488B45F8 		movq	-8(%rbp), %rax
 6310 0014 48837DF8 		cmpq	$0, -8(%rbp)
 6310      00
 6311 0019 740B     		je	.L370
 6312 001b 4889C2   		movq	%rax, %rdx
 6313 001e 83E207   		andl	$7, %edx
 6314 0021 4885D2   		testq	%rdx, %rdx
 6315 0024 740F     		je	.L371
 6316              	.L370:
 6317 0026 4889C6   		movq	%rax, %rsi
 6318 0029 488D3D00 		leaq	.Lubsan_data491(%rip), %rdi
 6318      000000
 6319 0030 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6319      00
 6320              	.L371:
 6321 0035 488B45F8 		movq	-8(%rbp), %rax
 6322 0039 4889C2   		movq	%rax, %rdx
 6323 003c 48C1EA03 		shrq	$3, %rdx
 6324 0040 4881C200 		addq	$2147450880, %rdx
 6324      80FF7F
 6325 0047 0FB612   		movzbl	(%rdx), %edx
 6326 004a 84D2     		testb	%dl, %dl
 6327 004c 7408     		je	.L372
 6328 004e 4889C7   		movq	%rax, %rdi
 6329 0051 E8000000 		call	__asan_report_load8@PLT
 6329      00
 6330              	.L372:
 6331 0056 488B45F8 		movq	-8(%rbp), %rax
 6332 005a 488B00   		movq	(%rax), %rax
 6333              		.loc 10 75 49
 6334 005d C9       		leave
 6335              		.cfi_def_cfa 7, 8
 6336 005e C3       		ret
 6337              		.cfi_endproc
 6338              	.LFE2763:
 6340              		.section	.data.rel.local
 6341              		.align 32
 6344              	.Lubsan_data492:
 6345 1b80 00000000 		.quad	.LC16
 6345      00000000 
 6346 1b88 4F000000 		.long	79
 6347 1b8c 2D000000 		.long	45
 6348 1b90 00000000 		.quad	.Lubsan_type36
 6348      00000000 
 6349 1b98 03       		.byte	3
 6350 1b99 04       		.byte	4
 6351 1b9a 00000000 		.zero	6
 6351      0000
 6352 1ba0 00000000 		.zero	32
 6352      00000000 
 6352      00000000 
 6352      00000000 
 6352      00000000 
 6353              		.align 32
 6356              	.Lubsan_data493:
 6357 1bc0 00000000 		.quad	.LC16
 6357      00000000 
 6358 1bc8 4F000000 		.long	79
 6359 1bcc 2D000000 		.long	45
 6360 1bd0 00000000 		.quad	.Lubsan_type36
 6360      00000000 
 6361 1bd8 03       		.byte	3
 6362 1bd9 04       		.byte	4
 6363 1bda 00000000 		.zero	6
 6363      0000
 6364 1be0 00000000 		.zero	32
 6364      00000000 
 6364      00000000 
 6364      00000000 
 6364      00000000 
 6365              		.align 32
 6368              	.Lubsan_data494:
 6369 1c00 00000000 		.quad	.LC16
 6369      00000000 
 6370 1c08 4F000000 		.long	79
 6371 1c0c 34000000 		.long	52
 6372 1c10 00000000 		.zero	48
 6372      00000000 
 6372      00000000 
 6372      00000000 
 6372      00000000 
 6373              		.section	.text._ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3endE
 6374              		.align 2
 6375              		.weak	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3endEv
 6377              	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3endEv:
 6378              	.LASANPC2764:
 6379              	.LFB2764:
  76:/usr/include/c++/9/initializer_list **** 
  77:/usr/include/c++/9/initializer_list ****       // One past the last element.
  78:/usr/include/c++/9/initializer_list ****       constexpr const_iterator
  79:/usr/include/c++/9/initializer_list ****       end() const noexcept { return begin() + size(); }
 6380              		.loc 10 79 7
 6381              		.cfi_startproc
 6382 0000 F30F1EFA 		endbr64
 6383 0004 55       		pushq	%rbp
 6384              		.cfi_def_cfa_offset 16
 6385              		.cfi_offset 6, -16
 6386 0005 4889E5   		movq	%rsp, %rbp
 6387              		.cfi_def_cfa_register 6
 6388 0008 4154     		pushq	%r12
 6389 000a 53       		pushq	%rbx
 6390 000b 4883EC10 		subq	$16, %rsp
 6391              		.cfi_offset 12, -24
 6392              		.cfi_offset 3, -32
 6393 000f 48897DE8 		movq	%rdi, -24(%rbp)
 6394              		.loc 10 79 45
 6395 0013 488B45E8 		movq	-24(%rbp), %rax
 6396 0017 48837DE8 		cmpq	$0, -24(%rbp)
 6396      00
 6397 001c 740B     		je	.L375
 6398 001e 4889C2   		movq	%rax, %rdx
 6399 0021 83E207   		andl	$7, %edx
 6400 0024 4885D2   		testq	%rdx, %rdx
 6401 0027 740F     		je	.L376
 6402              	.L375:
 6403 0029 4889C6   		movq	%rax, %rsi
 6404 002c 488D3D00 		leaq	.Lubsan_data492(%rip), %rdi
 6404      000000
 6405 0033 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6405      00
 6406              	.L376:
 6407 0038 488B45E8 		movq	-24(%rbp), %rax
 6408 003c 4889C7   		movq	%rax, %rdi
 6409 003f E8000000 		call	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5beginEv
 6409      00
 6410 0044 4989C4   		movq	%rax, %r12
 6411 0047 488B45E8 		movq	-24(%rbp), %rax
 6412 004b 48837DE8 		cmpq	$0, -24(%rbp)
 6412      00
 6413 0050 740B     		je	.L377
 6414 0052 4889C2   		movq	%rax, %rdx
 6415 0055 83E207   		andl	$7, %edx
 6416 0058 4885D2   		testq	%rdx, %rdx
 6417 005b 740F     		je	.L378
 6418              	.L377:
 6419 005d 4889C6   		movq	%rax, %rsi
 6420 0060 488D3D00 		leaq	.Lubsan_data493(%rip), %rdi
 6420      000000
 6421 0067 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6421      00
 6422              	.L378:
 6423 006c 488B45E8 		movq	-24(%rbp), %rax
 6424 0070 4889C7   		movq	%rax, %rdi
 6425 0073 E8000000 		call	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4sizeEv
 6425      00
 6426 0078 48C1E005 		salq	$5, %rax
 6427 007c 4889C3   		movq	%rax, %rbx
 6428              		.loc 10 79 52
 6429 007f 4C89E2   		movq	%r12, %rdx
 6430 0082 488D041A 		leaq	(%rdx,%rbx), %rax
 6431 0086 4889D9   		movq	%rbx, %rcx
 6432 0089 48F7D1   		notq	%rcx
 6433 008c 48C1E93F 		shrq	$63, %rcx
 6434 0090 84C9     		testb	%cl, %cl
 6435 0092 7419     		je	.L379
 6436 0094 4839D0   		cmpq	%rdx, %rax
 6437 0097 7319     		jnb	.L380
 6438              	.L381:
 6439 0099 4889C2   		movq	%rax, %rdx
 6440 009c 4C89E6   		movq	%r12, %rsi
 6441 009f 488D3D00 		leaq	.Lubsan_data494(%rip), %rdi
 6441      000000
 6442 00a6 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 6442      00
 6443 00ab EB05     		jmp	.L380
 6444              	.L379:
 6445 00ad 4839D0   		cmpq	%rdx, %rax
 6446 00b0 77E7     		ja	.L381
 6447              	.L380:
 6448 00b2 498D041C 		leaq	(%r12,%rbx), %rax
 6449              		.loc 10 79 55
 6450 00b6 4883C410 		addq	$16, %rsp
 6451 00ba 5B       		popq	%rbx
 6452 00bb 415C     		popq	%r12
 6453 00bd 5D       		popq	%rbp
 6454              		.cfi_def_cfa 7, 8
 6455 00be C3       		ret
 6456              		.cfi_endproc
 6457              	.LFE2764:
 6459              		.section	.rodata
 6460              	.LC17:
 6461 05a0 31203332 		.string	"1 32 8 11 __first:138"
 6461      20382031 
 6461      31205F5F 
 6461      66697273 
 6461      743A3133 
 6462              		.section	.text._ZSt8distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_
 6463              		.weak	_ZSt8distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_
 6465              	_ZSt8distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E15diff
 6466              	.LASANPC2766:
 6467              	.LFB2766:
 6468              		.file 11 "/usr/include/c++/9/bits/stl_iterator_base_funcs.h"
   1:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // Functions used by iterators -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
   3:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** //
   5:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  11:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  16:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  20:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  25:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** /*
  26:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *
  27:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *
  30:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *
  38:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *
  39:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *
  42:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  */
  50:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  51:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** /** @file bits/stl_iterator_base_funcs.h
  52:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *
  55:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *  This file contains all of the general iterator-related utility
  56:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  *  functions, such as distance() and advance().
  57:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****  */
  58:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  59:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** #ifndef _STL_ITERATOR_BASE_FUNCS_H
  60:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** #define _STL_ITERATOR_BASE_FUNCS_H 1
  61:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  62:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** #pragma GCC system_header
  63:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  64:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** #include <bits/concept_check.h>
  65:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** #include <debug/assertions.h>
  66:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  67:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** {
  69:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  71:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  72:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   // Forward declaration for the overloads of __distance.
  73:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_iterator;
  74:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_const_iterator;
  75:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
  76:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  77:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
  78:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  79:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
  80:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     __distance(_InputIterator __first, _InputIterator __last,
  81:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****                input_iterator_tag)
  82:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     {
  83:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       // concept requirements
  84:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
  85:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  86:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
  87:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       while (__first != __last)
  88:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 	{
  89:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 	  ++__first;
  90:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 	  ++__n;
  91:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 	}
  92:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       return __n;
  93:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     }
  94:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
  95:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   template<typename _RandomAccessIterator>
  96:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  97:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_RandomAccessIterator>::difference_type
  98:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
  99:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 100:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     {
 101:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       // concept requirements
 102:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_RandomAccessIteratorConcept<
 103:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 				  _RandomAccessIterator>)
 104:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       return __last - __first;
 105:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     }
 106:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
 107:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** #if _GLIBCXX_USE_CXX11_ABI
 108:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   // Forward declaration because of the qualified call in distance.
 109:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 110:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 111:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
 112:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
 113:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 114:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
 115:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 116:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 117:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 118:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 119:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 120:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** #endif
 121:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
 122:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   /**
 123:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *  @brief A generalization of pointer arithmetic.
 124:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *  @param  __first  An input iterator.
 125:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *  @param  __last  An input iterator.
 126:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *  @return  The distance between them.
 127:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *
 128:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *  Returns @c n such that __first + n == __last.  This requires
 129:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *  that @p __last must be reachable from @p __first.  Note that @c
 130:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *  n may be negative.
 131:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *
 132:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *  For random access iterators, this uses their @c + and @c - operations
 133:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****    *  and are constant time.  For other %iterator classes they are linear time.
 134:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   */
 135:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
 136:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX17_CONSTEXPR
 137:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
 138:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     distance(_InputIterator __first, _InputIterator __last)
 6469              		.loc 11 138 5
 6470              		.cfi_startproc
 6471 0000 F30F1EFA 		endbr64
 6472 0004 55       		pushq	%rbp
 6473              		.cfi_def_cfa_offset 16
 6474              		.cfi_offset 6, -16
 6475 0005 4889E5   		movq	%rsp, %rbp
 6476              		.cfi_def_cfa_register 6
 6477 0008 4156     		pushq	%r14
 6478 000a 4155     		pushq	%r13
 6479 000c 4154     		pushq	%r12
 6480 000e 53       		pushq	%rbx
 6481 000f 4883EC70 		subq	$112, %rsp
 6482              		.cfi_offset 14, -24
 6483              		.cfi_offset 13, -32
 6484              		.cfi_offset 12, -40
 6485              		.cfi_offset 3, -48
 6486 0013 4889BD78 		movq	%rdi, -136(%rbp)
 6486      FFFFFF
 6487 001a 4889B570 		movq	%rsi, -144(%rbp)
 6487      FFFFFF
 6488 0021 488D5D80 		leaq	-128(%rbp), %rbx
 6489 0025 4989DE   		movq	%rbx, %r14
 6490 0028 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 6490      000000
 6491 002f 7412     		je	.L383
 6492 0031 BF400000 		movl	$64, %edi
 6492      00
 6493 0036 E8000000 		call	__asan_stack_malloc_0@PLT
 6493      00
 6494              	.LVL7:
 6495 003b 4885C0   		testq	%rax, %rax
 6496 003e 7403     		je	.L383
 6497 0040 4889C3   		movq	%rax, %rbx
 6498              	.L383:
 6499 0043 488D4360 		leaq	96(%rbx), %rax
 6500 0047 4989C5   		movq	%rax, %r13
 6501 004a 48C703B3 		movq	$1102416563, (%rbx)
 6501      8AB541
 6502 0051 488D0500 		leaq	.LC17(%rip), %rax
 6502      000000
 6503 0058 48894308 		movq	%rax, 8(%rbx)
 6504 005c 488D059D 		leaq	.LASANPC2766(%rip), %rax
 6504      FFFFFF
 6505 0063 48894310 		movq	%rax, 16(%rbx)
 6506 0067 4989DC   		movq	%rbx, %r12
 6507 006a 49C1EC03 		shrq	$3, %r12
 6508 006e 41C78424 		movl	$-235802127, 2147450880(%r12)
 6508      0080FF7F 
 6508      F1F1F1F1 
 6509 007a 41C78424 		movl	$-202116352, 2147450884(%r12)
 6509      0480FF7F 
 6509      00F3F3F3 
 6510              		.loc 11 138 5
 6511 0086 64488B04 		movq	%fs:40, %rax
 6511      25280000 
 6511      00
 6512 008f 488945D8 		movq	%rax, -40(%rbp)
 6513 0093 31C0     		xorl	%eax, %eax
 6514              		.loc 11 138 29
 6515 0095 488B8578 		movq	-136(%rbp), %rax
 6515      FFFFFF
 6516 009c 498945C0 		movq	%rax, -64(%r13)
 139:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     {
 140:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       // concept requirements -- taken care of in __distance
 141:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****       return std::__distance(__first, __last,
 142:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 			     std::__iterator_category(__first));
 6517              		.loc 11 142 33
 6518 00a0 498D45C0 		leaq	-64(%r13), %rax
 6519 00a4 4889C7   		movq	%rax, %rdi
 6520 00a7 E8000000 		call	_ZSt19__iterator_categoryIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterato
 6520      00
 141:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 			     std::__iterator_category(__first));
 6521              		.loc 11 141 29
 6522 00ac 498B45C0 		movq	-64(%r13), %rax
 6523 00b0 488B9570 		movq	-144(%rbp), %rdx
 6523      FFFFFF
 6524 00b7 4889D6   		movq	%rdx, %rsi
 6525 00ba 4889C7   		movq	%rax, %rdi
 6526 00bd E8000000 		call	_ZSt10__distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsI
 6526      00
 6527              		.loc 11 142 42
 6528 00c2 4889C2   		movq	%rax, %rdx
 138:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     {
 6529              		.loc 11 138 5
 6530 00c5 4939DE   		cmpq	%rbx, %r14
 6531 00c8 7422     		je	.L384
 6532 00ca 48C7030E 		movq	$1172321806, (%rbx)
 6532      36E045
 6533 00d1 48B8F5F5 		movabsq	$-723401728380766731, %rax
 6533      F5F5F5F5 
 6533      F5F5
 6534 00db 49898424 		movq	%rax, 2147450880(%r12)
 6534      0080FF7F 
 6535 00e3 488B4338 		movq	56(%rbx), %rax
 6536 00e7 C60000   		movb	$0, (%rax)
 6537 00ea EB0C     		jmp	.L385
 6538              	.L384:
 6539 00ec 49C78424 		movq	$0, 2147450880(%r12)
 6539      0080FF7F 
 6539      00000000 
 6540              	.L385:
 143:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     }
 6541              		.loc 11 143 5
 6542 00f8 488B45D8 		movq	-40(%rbp), %rax
 6543 00fc 64483304 		xorq	%fs:40, %rax
 6543      25280000 
 6543      00
 6544 0105 7405     		je	.L388
 6545 0107 E8000000 		call	__stack_chk_fail@PLT
 6545      00
 6546              	.L388:
 6547 010c 4889D0   		movq	%rdx, %rax
 6548 010f 4883C470 		addq	$112, %rsp
 6549 0113 5B       		popq	%rbx
 6550 0114 415C     		popq	%r12
 6551 0116 415D     		popq	%r13
 6552 0118 415E     		popq	%r14
 6553 011a 5D       		popq	%rbp
 6554              		.cfi_def_cfa 7, 8
 6555 011b C3       		ret
 6556              		.cfi_endproc
 6557              	.LFE2766:
 6559              		.section	.data.rel.local
 6560              		.align 32
 6563              	.Lubsan_data495:
 6564 1c40 00000000 		.quad	.LC3
 6564      00000000 
 6565 1c48 2B060000 		.long	1579
 6566 1c4c 06000000 		.long	6
 6567 1c50 00000000 		.quad	.Lubsan_type10
 6567      00000000 
 6568 1c58 03       		.byte	3
 6569 1c59 03       		.byte	3
 6570 1c5a 00000000 		.zero	6
 6570      0000
 6571 1c60 00000000 		.zero	32
 6571      00000000 
 6571      00000000 
 6571      00000000 
 6571      00000000 
 6572              		.align 32
 6575              	.Lubsan_data496:
 6576 1c80 00000000 		.quad	.LC3
 6576      00000000 
 6577 1c88 2B060000 		.long	1579
 6578 1c8c 06000000 		.long	6
 6579 1c90 00000000 		.quad	.Lubsan_type8
 6579      00000000 
 6580 1c98 03       		.byte	3
 6581 1c99 04       		.byte	4
 6582 1c9a 00000000 		.zero	6
 6582      0000
 6583 1ca0 00000000 		.zero	32
 6583      00000000 
 6583      00000000 
 6583      00000000 
 6583      00000000 
 6584              		.align 32
 6587              	.Lubsan_data497:
 6588 1cc0 00000000 		.quad	.LC3
 6588      00000000 
 6589 1cc8 2B060000 		.long	1579
 6590 1ccc 44000000 		.long	68
 6591 1cd0 00000000 		.quad	.Lubsan_type10
 6591      00000000 
 6592 1cd8 03       		.byte	3
 6593 1cd9 03       		.byte	3
 6594 1cda 00000000 		.zero	6
 6594      0000
 6595 1ce0 00000000 		.zero	32
 6595      00000000 
 6595      00000000 
 6595      00000000 
 6595      00000000 
 6596              		.align 32
 6599              	.Lubsan_data498:
 6600 1d00 00000000 		.quad	.LC3
 6600      00000000 
 6601 1d08 2B060000 		.long	1579
 6602 1d0c 44000000 		.long	68
 6603 1d10 00000000 		.quad	.Lubsan_type8
 6603      00000000 
 6604 1d18 03       		.byte	3
 6605 1d19 04       		.byte	4
 6606 1d1a 00000000 		.zero	6
 6606      0000
 6607 1d20 00000000 		.zero	32
 6607      00000000 
 6607      00000000 
 6607      00000000 
 6607      00000000 
 6608              		.data
 6609              		.align 32
 6612              	.Lubsan_type37:
 6615 08e4 27636F6E 		.string	"'const struct allocator_type'"
 6615      73742073 
 6615      74727563 
 6615      7420616C 
 6615      6C6F6361 
 6616 0902 00000000 		.zero	62
 6616      00000000 
 6616      00000000 
 6616      00000000 
 6616      00000000 
 6617              		.section	.data.rel.local
 6618              		.align 32
 6621              	.Lubsan_data499:
 6622 1d40 00000000 		.quad	.LC3
 6622      00000000 
 6623 1d48 2B060000 		.long	1579
 6624 1d4c 06000000 		.long	6
 6625 1d50 00000000 		.quad	.Lubsan_type37
 6625      00000000 
 6626 1d58 00       		.byte	0
 6627 1d59 02       		.byte	2
 6628 1d5a 00000000 		.zero	6
 6628      0000
 6629 1d60 00000000 		.zero	32
 6629      00000000 
 6629      00000000 
 6629      00000000 
 6629      00000000 
 6630              		.align 32
 6633              	.Lubsan_data500:
 6634 1d80 00000000 		.quad	.LC3
 6634      00000000 
 6635 1d88 2A060000 		.long	1578
 6636 1d8c 04000000 		.long	4
 6637 1d90 00000000 		.quad	.Lubsan_type10
 6637      00000000 
 6638 1d98 03       		.byte	3
 6639 1d99 03       		.byte	3
 6640 1d9a 00000000 		.zero	6
 6640      0000
 6641 1da0 00000000 		.zero	32
 6641      00000000 
 6641      00000000 
 6641      00000000 
 6641      00000000 
 6642              		.align 32
 6645              	.Lubsan_data501:
 6646 1dc0 00000000 		.quad	.LC3
 6646      00000000 
 6647 1dc8 2C060000 		.long	1580
 6648 1dcc 34000000 		.long	52
 6649 1dd0 00000000 		.quad	.Lubsan_type10
 6649      00000000 
 6650 1dd8 03       		.byte	3
 6651 1dd9 03       		.byte	3
 6652 1dda 00000000 		.zero	6
 6652      0000
 6653 1de0 00000000 		.zero	32
 6653      00000000 
 6653      00000000 
 6653      00000000 
 6653      00000000 
 6654              		.align 32
 6657              	.Lubsan_data502:
 6658 1e00 00000000 		.quad	.LC3
 6658      00000000 
 6659 1e08 2C060000 		.long	1580
 6660 1e0c 3D000000 		.long	61
 6661 1e10 00000000 		.zero	48
 6661      00000000 
 6661      00000000 
 6661      00000000 
 6661      00000000 
 6662              		.align 32
 6665              	.Lubsan_data503:
 6666 1e40 00000000 		.quad	.LC3
 6666      00000000 
 6667 1e48 2C060000 		.long	1580
 6668 1e4c 04000000 		.long	4
 6669 1e50 00000000 		.quad	.Lubsan_type10
 6669      00000000 
 6670 1e58 03       		.byte	3
 6671 1e59 03       		.byte	3
 6672 1e5a 00000000 		.zero	6
 6672      0000
 6673 1e60 00000000 		.zero	32
 6673      00000000 
 6673      00000000 
 6673      00000000 
 6673      00000000 
 6674              		.align 32
 6677              	.Lubsan_data504:
 6678 1e80 00000000 		.quad	.LC3
 6678      00000000 
 6679 1e88 2C060000 		.long	1580
 6680 1e8c 04000000 		.long	4
 6681 1e90 00000000 		.zero	48
 6681      00000000 
 6681      00000000 
 6681      00000000 
 6681      00000000 
 6682              		.align 32
 6685              	.Lubsan_data505:
 6686 1ec0 00000000 		.quad	.LC3
 6686      00000000 
 6687 1ec8 30060000 		.long	1584
 6688 1ecc 19000000 		.long	25
 6689 1ed0 00000000 		.quad	.Lubsan_type10
 6689      00000000 
 6690 1ed8 03       		.byte	3
 6691 1ed9 03       		.byte	3
 6692 1eda 00000000 		.zero	6
 6692      0000
 6693 1ee0 00000000 		.zero	32
 6693      00000000 
 6693      00000000 
 6693      00000000 
 6693      00000000 
 6694              		.align 32
 6697              	.Lubsan_data506:
 6698 1f00 00000000 		.quad	.LC3
 6698      00000000 
 6699 1f08 30060000 		.long	1584
 6700 1f0c 19000000 		.long	25
 6701 1f10 00000000 		.quad	.Lubsan_type8
 6701      00000000 
 6702 1f18 03       		.byte	3
 6703 1f19 04       		.byte	4
 6704 1f1a 00000000 		.zero	6
 6704      0000
 6705 1f20 00000000 		.zero	32
 6705      00000000 
 6705      00000000 
 6705      00000000 
 6705      00000000 
 6706              		.align 32
 6709              	.Lubsan_data507:
 6710 1f40 00000000 		.quad	.LC3
 6710      00000000 
 6711 1f48 2E060000 		.long	1582
 6712 1f4c 21000000 		.long	33
 6713 1f50 00000000 		.quad	.Lubsan_type6
 6713      00000000 
 6714 1f58 00       		.byte	0
 6715 1f59 02       		.byte	2
 6716 1f5a 00000000 		.zero	6
 6716      0000
 6717 1f60 00000000 		.zero	32
 6717      00000000 
 6717      00000000 
 6717      00000000 
 6717      00000000 
 6718              		.align 32
 6721              	.Lubsan_data508:
 6722 1f80 00000000 		.quad	.LC3
 6722      00000000 
 6723 1f88 2E060000 		.long	1582
 6724 1f8c 21000000 		.long	33
 6725 1f90 00000000 		.quad	.Lubsan_type10
 6725      00000000 
 6726 1f98 03       		.byte	3
 6727 1f99 03       		.byte	3
 6728 1f9a 00000000 		.zero	6
 6728      0000
 6729 1fa0 00000000 		.zero	32
 6729      00000000 
 6729      00000000 
 6729      00000000 
 6729      00000000 
 6730              		.align 32
 6733              	.Lubsan_data509:
 6734 1fc0 00000000 		.quad	.LC3
 6734      00000000 
 6735 1fc8 2D060000 		.long	1581
 6736 1fcc 04000000 		.long	4
 6737 1fd0 00000000 		.quad	.Lubsan_type10
 6737      00000000 
 6738 1fd8 03       		.byte	3
 6739 1fd9 03       		.byte	3
 6740 1fda 00000000 		.zero	6
 6740      0000
 6741 1fe0 00000000 		.zero	32
 6741      00000000 
 6741      00000000 
 6741      00000000 
 6741      00000000 
 6742              		.align 32
 6745              	.Lubsan_data510:
 6746 2000 00000000 		.quad	.LC3
 6746      00000000 
 6747 2008 2D060000 		.long	1581
 6748 200c 04000000 		.long	4
 6749 2010 00000000 		.zero	48
 6749      00000000 
 6749      00000000 
 6749      00000000 
 6749      00000000 
 6750              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range
 6751              		.align 2
 6752              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initiali
 6754              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5
 6755              	.LASANPC2765:
 6756              	.LFB2765:
1429:/usr/include/c++/9/bits/stl_vector.h **** #else
1430:/usr/include/c++/9/bits/stl_vector.h ****       erase(iterator __position)
1431:/usr/include/c++/9/bits/stl_vector.h ****       { return _M_erase(__position); }
1432:/usr/include/c++/9/bits/stl_vector.h **** #endif
1433:/usr/include/c++/9/bits/stl_vector.h **** 
1434:/usr/include/c++/9/bits/stl_vector.h ****       /**
1435:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1436:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1437:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1438:/usr/include/c++/9/bits/stl_vector.h ****        *                  erased.
1439:/usr/include/c++/9/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1440:/usr/include/c++/9/bits/stl_vector.h ****        *           prior to erasing (or end()).
1441:/usr/include/c++/9/bits/stl_vector.h ****        *
1442:/usr/include/c++/9/bits/stl_vector.h ****        *  This function will erase the elements in the range
1443:/usr/include/c++/9/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1444:/usr/include/c++/9/bits/stl_vector.h ****        *
1445:/usr/include/c++/9/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1446:/usr/include/c++/9/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1447:/usr/include/c++/9/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1448:/usr/include/c++/9/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1449:/usr/include/c++/9/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1450:/usr/include/c++/9/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1451:/usr/include/c++/9/bits/stl_vector.h ****        */
1452:/usr/include/c++/9/bits/stl_vector.h ****       iterator
1453:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1454:/usr/include/c++/9/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1455:/usr/include/c++/9/bits/stl_vector.h ****       {
1456:/usr/include/c++/9/bits/stl_vector.h **** 	const auto __beg = begin();
1457:/usr/include/c++/9/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1458:/usr/include/c++/9/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1459:/usr/include/c++/9/bits/stl_vector.h ****       }
1460:/usr/include/c++/9/bits/stl_vector.h **** #else
1461:/usr/include/c++/9/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1462:/usr/include/c++/9/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1463:/usr/include/c++/9/bits/stl_vector.h **** #endif
1464:/usr/include/c++/9/bits/stl_vector.h **** 
1465:/usr/include/c++/9/bits/stl_vector.h ****       /**
1466:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1467:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1468:/usr/include/c++/9/bits/stl_vector.h ****        *
1469:/usr/include/c++/9/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1470:/usr/include/c++/9/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1471:/usr/include/c++/9/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1472:/usr/include/c++/9/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1473:/usr/include/c++/9/bits/stl_vector.h ****        *
1474:/usr/include/c++/9/bits/stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1475:/usr/include/c++/9/bits/stl_vector.h ****        */
1476:/usr/include/c++/9/bits/stl_vector.h ****       void
1477:/usr/include/c++/9/bits/stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1478:/usr/include/c++/9/bits/stl_vector.h ****       {
1479:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1480:/usr/include/c++/9/bits/stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1481:/usr/include/c++/9/bits/stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1482:/usr/include/c++/9/bits/stl_vector.h **** #endif
1483:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1484:/usr/include/c++/9/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1485:/usr/include/c++/9/bits/stl_vector.h **** 				  __x._M_get_Tp_allocator());
1486:/usr/include/c++/9/bits/stl_vector.h ****       }
1487:/usr/include/c++/9/bits/stl_vector.h **** 
1488:/usr/include/c++/9/bits/stl_vector.h ****       /**
1489:/usr/include/c++/9/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1490:/usr/include/c++/9/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1491:/usr/include/c++/9/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1492:/usr/include/c++/9/bits/stl_vector.h ****        *  the user's responsibility.
1493:/usr/include/c++/9/bits/stl_vector.h ****        */
1494:/usr/include/c++/9/bits/stl_vector.h ****       void
1495:/usr/include/c++/9/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1496:/usr/include/c++/9/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1497:/usr/include/c++/9/bits/stl_vector.h **** 
1498:/usr/include/c++/9/bits/stl_vector.h ****     protected:
1499:/usr/include/c++/9/bits/stl_vector.h ****       /**
1500:/usr/include/c++/9/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1501:/usr/include/c++/9/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1502:/usr/include/c++/9/bits/stl_vector.h ****        */
1503:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _ForwardIterator>
1504:/usr/include/c++/9/bits/stl_vector.h **** 	pointer
1505:/usr/include/c++/9/bits/stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1506:/usr/include/c++/9/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1507:/usr/include/c++/9/bits/stl_vector.h **** 	{
1508:/usr/include/c++/9/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1509:/usr/include/c++/9/bits/stl_vector.h **** 	  __try
1510:/usr/include/c++/9/bits/stl_vector.h **** 	    {
1511:/usr/include/c++/9/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1512:/usr/include/c++/9/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1513:/usr/include/c++/9/bits/stl_vector.h **** 	      return __result;
1514:/usr/include/c++/9/bits/stl_vector.h **** 	    }
1515:/usr/include/c++/9/bits/stl_vector.h **** 	  __catch(...)
1516:/usr/include/c++/9/bits/stl_vector.h **** 	    {
1517:/usr/include/c++/9/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1518:/usr/include/c++/9/bits/stl_vector.h **** 	      __throw_exception_again;
1519:/usr/include/c++/9/bits/stl_vector.h **** 	    }
1520:/usr/include/c++/9/bits/stl_vector.h **** 	}
1521:/usr/include/c++/9/bits/stl_vector.h **** 
1522:/usr/include/c++/9/bits/stl_vector.h **** 
1523:/usr/include/c++/9/bits/stl_vector.h ****       // Internal constructor functions follow.
1524:/usr/include/c++/9/bits/stl_vector.h **** 
1525:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1526:/usr/include/c++/9/bits/stl_vector.h **** 
1527:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus < 201103L
1528:/usr/include/c++/9/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1529:/usr/include/c++/9/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1530:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _Integer>
1531:/usr/include/c++/9/bits/stl_vector.h **** 	void
1532:/usr/include/c++/9/bits/stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1533:/usr/include/c++/9/bits/stl_vector.h **** 	{
1534:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1535:/usr/include/c++/9/bits/stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1536:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1537:/usr/include/c++/9/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1538:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1539:/usr/include/c++/9/bits/stl_vector.h **** 	}
1540:/usr/include/c++/9/bits/stl_vector.h **** 
1541:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1542:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
1543:/usr/include/c++/9/bits/stl_vector.h **** 	void
1544:/usr/include/c++/9/bits/stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1545:/usr/include/c++/9/bits/stl_vector.h **** 			       __false_type)
1546:/usr/include/c++/9/bits/stl_vector.h **** 	{
1547:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
1548:/usr/include/c++/9/bits/stl_vector.h **** 			      std::__iterator_category(__first));
1549:/usr/include/c++/9/bits/stl_vector.h **** 	}
1550:/usr/include/c++/9/bits/stl_vector.h **** #endif
1551:/usr/include/c++/9/bits/stl_vector.h **** 
1552:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1553:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
1554:/usr/include/c++/9/bits/stl_vector.h **** 	void
1555:/usr/include/c++/9/bits/stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1556:/usr/include/c++/9/bits/stl_vector.h **** 			    std::input_iterator_tag)
1557:/usr/include/c++/9/bits/stl_vector.h **** 	{
1558:/usr/include/c++/9/bits/stl_vector.h **** 	  __try {
1559:/usr/include/c++/9/bits/stl_vector.h **** 	    for (; __first != __last; ++__first)
1560:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1561:/usr/include/c++/9/bits/stl_vector.h **** 	      emplace_back(*__first);
1562:/usr/include/c++/9/bits/stl_vector.h **** #else
1563:/usr/include/c++/9/bits/stl_vector.h **** 	      push_back(*__first);
1564:/usr/include/c++/9/bits/stl_vector.h **** #endif
1565:/usr/include/c++/9/bits/stl_vector.h **** 	  } __catch(...) {
1566:/usr/include/c++/9/bits/stl_vector.h **** 	    clear();
1567:/usr/include/c++/9/bits/stl_vector.h **** 	    __throw_exception_again;
1568:/usr/include/c++/9/bits/stl_vector.h **** 	  }
1569:/usr/include/c++/9/bits/stl_vector.h **** 	}
1570:/usr/include/c++/9/bits/stl_vector.h **** 
1571:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1572:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _ForwardIterator>
1573:/usr/include/c++/9/bits/stl_vector.h **** 	void
1574:/usr/include/c++/9/bits/stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 6757              		.loc 4 1574 2
 6758              		.cfi_startproc
 6759 0000 F30F1EFA 		endbr64
 6760 0004 55       		pushq	%rbp
 6761              		.cfi_def_cfa_offset 16
 6762              		.cfi_offset 6, -16
 6763 0005 4889E5   		movq	%rsp, %rbp
 6764              		.cfi_def_cfa_register 6
 6765 0008 4154     		pushq	%r12
 6766 000a 53       		pushq	%rbx
 6767 000b 4883EC30 		subq	$48, %rsp
 6768              		.cfi_offset 12, -24
 6769              		.cfi_offset 3, -32
 6770 000f 48897DD8 		movq	%rdi, -40(%rbp)
 6771 0013 488975D0 		movq	%rsi, -48(%rbp)
 6772 0017 488955C8 		movq	%rdx, -56(%rbp)
1575:/usr/include/c++/9/bits/stl_vector.h **** 			    std::forward_iterator_tag)
1576:/usr/include/c++/9/bits/stl_vector.h **** 	{
1577:/usr/include/c++/9/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
 6773              		.loc 4 1577 39
 6774 001b 488B55C8 		movq	-56(%rbp), %rdx
 6775 001f 488B45D0 		movq	-48(%rbp), %rax
 6776 0023 4889D6   		movq	%rdx, %rsi
 6777 0026 4889C7   		movq	%rax, %rdi
 6778 0029 E8000000 		call	_ZSt8distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E
 6778      00
 6779              		.loc 4 1577 20
 6780 002e 488945E8 		movq	%rax, -24(%rbp)
1578:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_start
1579:/usr/include/c++/9/bits/stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 6781              		.loc 4 1579 6
 6782 0032 488B45D8 		movq	-40(%rbp), %rax
 6783 0036 48837DD8 		cmpq	$0, -40(%rbp)
 6783      00
 6784 003b 740B     		je	.L390
 6785 003d 4889C2   		movq	%rax, %rdx
 6786 0040 83E207   		andl	$7, %edx
 6787 0043 4885D2   		testq	%rdx, %rdx
 6788 0046 740F     		je	.L391
 6789              	.L390:
 6790 0048 4889C6   		movq	%rax, %rsi
 6791 004b 488D3D00 		leaq	.Lubsan_data495(%rip), %rdi
 6791      000000
 6792 0052 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6792      00
 6793              	.L391:
 6794 0057 488B5DD8 		movq	-40(%rbp), %rbx
 6795 005b 4889D8   		movq	%rbx, %rax
 6796 005e 4885DB   		testq	%rbx, %rbx
 6797 0061 740B     		je	.L392
 6798 0063 4889C2   		movq	%rax, %rdx
 6799 0066 83E207   		andl	$7, %edx
 6800 0069 4885D2   		testq	%rdx, %rdx
 6801 006c 740F     		je	.L393
 6802              	.L392:
 6803 006e 4889C6   		movq	%rax, %rsi
 6804 0071 488D3D00 		leaq	.Lubsan_data496(%rip), %rdi
 6804      000000
 6805 0078 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6805      00
 6806              	.L393:
 6807              		.loc 4 1579 68
 6808 007d 488B45D8 		movq	-40(%rbp), %rax
 6809 0081 48837DD8 		cmpq	$0, -40(%rbp)
 6809      00
 6810 0086 740B     		je	.L394
 6811 0088 4889C2   		movq	%rax, %rdx
 6812 008b 83E207   		andl	$7, %edx
 6813 008e 4885D2   		testq	%rdx, %rdx
 6814 0091 740F     		je	.L395
 6815              	.L394:
 6816 0093 4889C6   		movq	%rax, %rsi
 6817 0096 488D3D00 		leaq	.Lubsan_data497(%rip), %rdi
 6817      000000
 6818 009d E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6818      00
 6819              	.L395:
 6820 00a2 4C8B65D8 		movq	-40(%rbp), %r12
 6821 00a6 4C89E0   		movq	%r12, %rax
 6822 00a9 4D85E4   		testq	%r12, %r12
 6823 00ac 740B     		je	.L396
 6824 00ae 4889C2   		movq	%rax, %rdx
 6825 00b1 83E207   		andl	$7, %edx
 6826 00b4 4885D2   		testq	%rdx, %rdx
 6827 00b7 740F     		je	.L397
 6828              	.L396:
 6829 00b9 4889C6   		movq	%rax, %rsi
 6830 00bc 488D3D00 		leaq	.Lubsan_data498(%rip), %rdi
 6830      000000
 6831 00c3 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6831      00
 6832              	.L397:
 6833 00c8 4C89E7   		movq	%r12, %rdi
 6834 00cb E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_a
 6834      00
 6835 00d0 4989C4   		movq	%rax, %r12
 6836              		.loc 4 1579 6
 6837 00d3 4D85E4   		testq	%r12, %r12
 6838 00d6 7511     		jne	.L398
 6839 00d8 BE000000 		movl	$0, %esi
 6839      00
 6840 00dd 488D3D00 		leaq	.Lubsan_data499(%rip), %rdi
 6840      000000
 6841 00e4 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6841      00
 6842              	.L398:
 6843 00e9 488B45E8 		movq	-24(%rbp), %rax
 6844 00ed 4C89E6   		movq	%r12, %rsi
 6845 00f0 4889C7   		movq	%rax, %rdi
 6846 00f3 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_S_check_init_lenE
 6846      00
 6847 00f8 4889C6   		movq	%rax, %rsi
 6848 00fb 4889DF   		movq	%rbx, %rdi
 6849 00fe E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocate
 6849      00
 6850 0103 4889C3   		movq	%rax, %rbx
1578:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_start
 6851              		.loc 4 1578 4
 6852 0106 488B45D8 		movq	-40(%rbp), %rax
 6853 010a 48837DD8 		cmpq	$0, -40(%rbp)
 6853      00
 6854 010f 740B     		je	.L399
 6855 0111 4889C2   		movq	%rax, %rdx
 6856 0114 83E207   		andl	$7, %edx
 6857 0117 4885D2   		testq	%rdx, %rdx
 6858 011a 740F     		je	.L400
 6859              	.L399:
 6860 011c 4889C6   		movq	%rax, %rsi
 6861 011f 488D3D00 		leaq	.Lubsan_data500(%rip), %rdi
 6861      000000
 6862 0126 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6862      00
 6863              	.L400:
 6864 012b 488B45D8 		movq	-40(%rbp), %rax
 6865 012f 4889C2   		movq	%rax, %rdx
 6866 0132 48C1EA03 		shrq	$3, %rdx
 6867 0136 4881C200 		addq	$2147450880, %rdx
 6867      80FF7F
 6868 013d 0FB612   		movzbl	(%rdx), %edx
 6869 0140 84D2     		testb	%dl, %dl
 6870 0142 7408     		je	.L401
 6871 0144 4889C7   		movq	%rax, %rdi
 6872 0147 E8000000 		call	__asan_report_store8@PLT
 6872      00
 6873              	.L401:
 6874 014c 488B45D8 		movq	-40(%rbp), %rax
 6875 0150 488918   		movq	%rbx, (%rax)
1580:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 6876              		.loc 4 1580 52
 6877 0153 488B45D8 		movq	-40(%rbp), %rax
 6878 0157 48837DD8 		cmpq	$0, -40(%rbp)
 6878      00
 6879 015c 740B     		je	.L402
 6880 015e 4889C2   		movq	%rax, %rdx
 6881 0161 83E207   		andl	$7, %edx
 6882 0164 4885D2   		testq	%rdx, %rdx
 6883 0167 740F     		je	.L403
 6884              	.L402:
 6885 0169 4889C6   		movq	%rax, %rsi
 6886 016c 488D3D00 		leaq	.Lubsan_data501(%rip), %rdi
 6886      000000
 6887 0173 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6887      00
 6888              	.L403:
 6889 0178 488B45D8 		movq	-40(%rbp), %rax
 6890 017c 4C8B20   		movq	(%rax), %r12
 6891              		.loc 4 1580 61
 6892 017f 488B45E8 		movq	-24(%rbp), %rax
 6893 0183 48C1E005 		salq	$5, %rax
 6894 0187 4889C3   		movq	%rax, %rbx
 6895 018a 4C89E2   		movq	%r12, %rdx
 6896 018d 488D041A 		leaq	(%rdx,%rbx), %rax
 6897 0191 4889D9   		movq	%rbx, %rcx
 6898 0194 48F7D1   		notq	%rcx
 6899 0197 48C1E93F 		shrq	$63, %rcx
 6900 019b 84C9     		testb	%cl, %cl
 6901 019d 7419     		je	.L404
 6902 019f 4839D0   		cmpq	%rdx, %rax
 6903 01a2 7319     		jnb	.L405
 6904              	.L406:
 6905 01a4 4889C2   		movq	%rax, %rdx
 6906 01a7 4C89E6   		movq	%r12, %rsi
 6907 01aa 488D3D00 		leaq	.Lubsan_data502(%rip), %rdi
 6907      000000
 6908 01b1 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 6908      00
 6909 01b6 EB05     		jmp	.L405
 6910              	.L404:
 6911 01b8 4839D0   		cmpq	%rdx, %rax
 6912 01bb 77E7     		ja	.L406
 6913              	.L405:
 6914 01bd 4C01E3   		addq	%r12, %rbx
 6915              		.loc 4 1580 4
 6916 01c0 488B45D8 		movq	-40(%rbp), %rax
 6917 01c4 48837DD8 		cmpq	$0, -40(%rbp)
 6917      00
 6918 01c9 740B     		je	.L407
 6919 01cb 4889C2   		movq	%rax, %rdx
 6920 01ce 83E207   		andl	$7, %edx
 6921 01d1 4885D2   		testq	%rdx, %rdx
 6922 01d4 740F     		je	.L408
 6923              	.L407:
 6924 01d6 4889C6   		movq	%rax, %rsi
 6925 01d9 488D3D00 		leaq	.Lubsan_data503(%rip), %rdi
 6925      000000
 6926 01e0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6926      00
 6927              	.L408:
 6928 01e5 488B45D8 		movq	-40(%rbp), %rax
 6929 01e9 488D5010 		leaq	16(%rax), %rdx
 6930 01ed 4883F8F0 		cmpq	$-16, %rax
 6931 01f1 7213     		jb	.L409
 6932 01f3 488B45D8 		movq	-40(%rbp), %rax
 6933 01f7 4889C6   		movq	%rax, %rsi
 6934 01fa 488D3D00 		leaq	.Lubsan_data504(%rip), %rdi
 6934      000000
 6935 0201 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 6935      00
 6936              	.L409:
 6937 0206 488B45D8 		movq	-40(%rbp), %rax
 6938 020a 4883C010 		addq	$16, %rax
 6939 020e 4889C2   		movq	%rax, %rdx
 6940 0211 48C1EA03 		shrq	$3, %rdx
 6941 0215 4881C200 		addq	$2147450880, %rdx
 6941      80FF7F
 6942 021c 0FB612   		movzbl	(%rdx), %edx
 6943 021f 84D2     		testb	%dl, %dl
 6944 0221 7408     		je	.L410
 6945 0223 4889C7   		movq	%rax, %rdi
 6946 0226 E8000000 		call	__asan_report_store8@PLT
 6946      00
 6947              	.L410:
 6948 022b 488B45D8 		movq	-40(%rbp), %rax
 6949 022f 48895810 		movq	%rbx, 16(%rax)
1581:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1582:/usr/include/c++/9/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1583:/usr/include/c++/9/bits/stl_vector.h **** 					this->_M_impl._M_start,
1584:/usr/include/c++/9/bits/stl_vector.h **** 					_M_get_Tp_allocator());
 6950              		.loc 4 1584 25
 6951 0233 488B45D8 		movq	-40(%rbp), %rax
 6952 0237 48837DD8 		cmpq	$0, -40(%rbp)
 6952      00
 6953 023c 740B     		je	.L411
 6954 023e 4889C2   		movq	%rax, %rdx
 6955 0241 83E207   		andl	$7, %edx
 6956 0244 4885D2   		testq	%rdx, %rdx
 6957 0247 740F     		je	.L412
 6958              	.L411:
 6959 0249 4889C6   		movq	%rax, %rsi
 6960 024c 488D3D00 		leaq	.Lubsan_data505(%rip), %rdi
 6960      000000
 6961 0253 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6961      00
 6962              	.L412:
 6963 0258 488B5DD8 		movq	-40(%rbp), %rbx
 6964 025c 4889D8   		movq	%rbx, %rax
 6965 025f 4885DB   		testq	%rbx, %rbx
 6966 0262 740B     		je	.L413
 6967 0264 4889C2   		movq	%rax, %rdx
 6968 0267 83E207   		andl	$7, %edx
 6969 026a 4885D2   		testq	%rdx, %rdx
 6970 026d 740F     		je	.L414
 6971              	.L413:
 6972 026f 4889C6   		movq	%rax, %rsi
 6973 0272 488D3D00 		leaq	.Lubsan_data506(%rip), %rdi
 6973      000000
 6974 0279 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6974      00
 6975              	.L414:
 6976 027e 4889DF   		movq	%rbx, %rdi
 6977 0281 E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_a
 6977      00
 6978 0286 4889C3   		movq	%rax, %rbx
1582:/usr/include/c++/9/bits/stl_vector.h **** 					this->_M_impl._M_start,
 6979              		.loc 4 1582 33
 6980 0289 4885DB   		testq	%rbx, %rbx
 6981 028c 7511     		jne	.L415
 6982 028e BE000000 		movl	$0, %esi
 6982      00
 6983 0293 488D3D00 		leaq	.Lubsan_data507(%rip), %rdi
 6983      000000
 6984 029a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6984      00
 6985              	.L415:
 6986 029f 488B45D8 		movq	-40(%rbp), %rax
 6987 02a3 48837DD8 		cmpq	$0, -40(%rbp)
 6987      00
 6988 02a8 740B     		je	.L416
 6989 02aa 4889C2   		movq	%rax, %rdx
 6990 02ad 83E207   		andl	$7, %edx
 6991 02b0 4885D2   		testq	%rdx, %rdx
 6992 02b3 740F     		je	.L417
 6993              	.L416:
 6994 02b5 4889C6   		movq	%rax, %rsi
 6995 02b8 488D3D00 		leaq	.Lubsan_data508(%rip), %rdi
 6995      000000
 6996 02bf E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 6996      00
 6997              	.L417:
 6998 02c4 488B45D8 		movq	-40(%rbp), %rax
 6999 02c8 4889C2   		movq	%rax, %rdx
 7000 02cb 48C1EA03 		shrq	$3, %rdx
 7001 02cf 4881C200 		addq	$2147450880, %rdx
 7001      80FF7F
 7002 02d6 0FB612   		movzbl	(%rdx), %edx
 7003 02d9 84D2     		testb	%dl, %dl
 7004 02db 7408     		je	.L418
 7005 02dd 4889C7   		movq	%rax, %rdi
 7006 02e0 E8000000 		call	__asan_report_load8@PLT
 7006      00
 7007              	.L418:
 7008 02e5 488B45D8 		movq	-40(%rbp), %rax
 7009 02e9 488B10   		movq	(%rax), %rdx
 7010 02ec 488B75C8 		movq	-56(%rbp), %rsi
 7011 02f0 488B45D0 		movq	-48(%rbp), %rax
 7012 02f4 4889D9   		movq	%rbx, %rcx
 7013 02f7 4889C7   		movq	%rax, %rdi
 7014 02fa E8000000 		call	_ZSt22__uninitialized_copy_aIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_S5_ET0
 7014      00
 7015 02ff 4889C3   		movq	%rax, %rbx
1581:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
 7016              		.loc 4 1581 4
 7017 0302 488B45D8 		movq	-40(%rbp), %rax
 7018 0306 48837DD8 		cmpq	$0, -40(%rbp)
 7018      00
 7019 030b 740B     		je	.L419
 7020 030d 4889C2   		movq	%rax, %rdx
 7021 0310 83E207   		andl	$7, %edx
 7022 0313 4885D2   		testq	%rdx, %rdx
 7023 0316 740F     		je	.L420
 7024              	.L419:
 7025 0318 4889C6   		movq	%rax, %rsi
 7026 031b 488D3D00 		leaq	.Lubsan_data509(%rip), %rdi
 7026      000000
 7027 0322 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7027      00
 7028              	.L420:
 7029 0327 488B45D8 		movq	-40(%rbp), %rax
 7030 032b 488D5008 		leaq	8(%rax), %rdx
 7031 032f 4883F8F8 		cmpq	$-8, %rax
 7032 0333 7213     		jb	.L421
 7033 0335 488B45D8 		movq	-40(%rbp), %rax
 7034 0339 4889C6   		movq	%rax, %rsi
 7035 033c 488D3D00 		leaq	.Lubsan_data510(%rip), %rdi
 7035      000000
 7036 0343 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 7036      00
 7037              	.L421:
 7038 0348 488B45D8 		movq	-40(%rbp), %rax
 7039 034c 4883C008 		addq	$8, %rax
 7040 0350 4889C2   		movq	%rax, %rdx
 7041 0353 48C1EA03 		shrq	$3, %rdx
 7042 0357 4881C200 		addq	$2147450880, %rdx
 7042      80FF7F
 7043 035e 0FB612   		movzbl	(%rdx), %edx
 7044 0361 84D2     		testb	%dl, %dl
 7045 0363 7408     		je	.L422
 7046 0365 4889C7   		movq	%rax, %rdi
 7047 0368 E8000000 		call	__asan_report_store8@PLT
 7047      00
 7048              	.L422:
 7049 036d 488B45D8 		movq	-40(%rbp), %rax
 7050 0371 48895808 		movq	%rbx, 8(%rax)
1585:/usr/include/c++/9/bits/stl_vector.h **** 	}
 7051              		.loc 4 1585 2
 7052 0375 90       		nop
 7053 0376 4883C430 		addq	$48, %rsp
 7054 037a 5B       		popq	%rbx
 7055 037b 415C     		popq	%r12
 7056 037d 5D       		popq	%rbp
 7057              		.cfi_def_cfa 7, 8
 7058 037e C3       		ret
 7059              		.cfi_endproc
 7060              	.LFE2765:
 7062              		.section	.data.rel.local
 7063              		.align 32
 7066              	.Lubsan_data511:
 7067 2040 00000000 		.quad	.LC3
 7067      00000000 
 7068 2048 12010000 		.long	274
 7069 204c 16000000 		.long	22
 7070 2050 00000000 		.quad	.Lubsan_type8
 7070      00000000 
 7071 2058 03       		.byte	3
 7072 2059 03       		.byte	3
 7073 205a 00000000 		.zero	6
 7073      0000
 7074 2060 00000000 		.zero	32
 7074      00000000 
 7074      00000000 
 7074      00000000 
 7074      00000000 
 7075              		.data
 7076              		.align 32
 7079              	.Lubsan_type38:
 7082 0944 27737472 		.string	"'struct _Tp_alloc_type'"
 7082      75637420 
 7082      5F54705F 
 7082      616C6C6F 
 7082      635F7479 
 7083 095c 00000000 		.zero	36
 7083      00000000 
 7083      00000000 
 7083      00000000 
 7083      00000000 
 7084              		.section	.data.rel.local
 7085              		.align 32
 7088              	.Lubsan_data512:
 7089 2080 00000000 		.quad	.LC3
 7089      00000000 
 7090 2088 12010000 		.long	274
 7091 208c 16000000 		.long	22
 7092 2090 00000000 		.quad	.Lubsan_type38
 7092      00000000 
 7093 2098 00       		.byte	0
 7094 2099 02       		.byte	2
 7095 209a 00000000 		.zero	6
 7095      0000
 7096 20a0 00000000 		.zero	32
 7096      00000000 
 7096      00000000 
 7096      00000000 
 7096      00000000 
 7097              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_
 7098              		.align 2
 7099              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_
 7101              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocat
 7102              	.LASANPC2767:
 7103              	.LFB2767:
 273:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 7104              		.loc 4 273 7
 7105              		.cfi_startproc
 7106 0000 F30F1EFA 		endbr64
 7107 0004 55       		pushq	%rbp
 7108              		.cfi_def_cfa_offset 16
 7109              		.cfi_offset 6, -16
 7110 0005 4889E5   		movq	%rsp, %rbp
 7111              		.cfi_def_cfa_register 6
 7112 0008 53       		pushq	%rbx
 7113 0009 4883EC18 		subq	$24, %rsp
 7114              		.cfi_offset 3, -24
 7115 000d 48897DE8 		movq	%rdi, -24(%rbp)
 274:/usr/include/c++/9/bits/stl_vector.h **** 
 7116              		.loc 4 274 22
 7117 0011 488B45E8 		movq	-24(%rbp), %rax
 7118 0015 48837DE8 		cmpq	$0, -24(%rbp)
 7118      00
 7119 001a 740B     		je	.L424
 7120 001c 4889C2   		movq	%rax, %rdx
 7121 001f 83E207   		andl	$7, %edx
 7122 0022 4885D2   		testq	%rdx, %rdx
 7123 0025 740F     		je	.L425
 7124              	.L424:
 7125 0027 4889C6   		movq	%rax, %rsi
 7126 002a 488D3D00 		leaq	.Lubsan_data511(%rip), %rdi
 7126      000000
 7127 0031 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7127      00
 7128              	.L425:
 7129 0036 488B5DE8 		movq	-24(%rbp), %rbx
 7130 003a 4885DB   		testq	%rbx, %rbx
 7131 003d 7511     		jne	.L427
 7132 003f BE000000 		movl	$0, %esi
 7132      00
 7133 0044 488D3D00 		leaq	.Lubsan_data512(%rip), %rdi
 7133      000000
 7134 004b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7134      00
 7135              	.L427:
 274:/usr/include/c++/9/bits/stl_vector.h **** 
 7136              		.loc 4 274 22 is_stmt 0 discriminator 1
 7137 0050 4889D8   		movq	%rbx, %rax
 274:/usr/include/c++/9/bits/stl_vector.h **** 
 7138              		.loc 4 274 31 is_stmt 1 discriminator 1
 7139 0053 4883C418 		addq	$24, %rsp
 7140 0057 5B       		popq	%rbx
 7141 0058 5D       		popq	%rbp
 7142              		.cfi_def_cfa 7, 8
 7143 0059 C3       		ret
 7144              		.cfi_endproc
 7145              	.LFE2767:
 7147              		.section	.text._ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0
 7148              		.weak	_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E
 7150              	_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E:
 7151              	.LASANPC2768:
 7152              	.LFB2768:
 7153              		.file 12 "/usr/include/c++/9/bits/stl_construct.h"
   1:/usr/include/c++/9/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_construct.h **** 
   3:/usr/include/c++/9/bits/stl_construct.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_construct.h **** //
   5:/usr/include/c++/9/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_construct.h **** 
  11:/usr/include/c++/9/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_construct.h **** 
  16:/usr/include/c++/9/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_construct.h **** 
  20:/usr/include/c++/9/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_construct.h **** 
  25:/usr/include/c++/9/bits/stl_construct.h **** /*
  26:/usr/include/c++/9/bits/stl_construct.h ****  *
  27:/usr/include/c++/9/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_construct.h ****  *
  30:/usr/include/c++/9/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_construct.h ****  *
  38:/usr/include/c++/9/bits/stl_construct.h ****  *
  39:/usr/include/c++/9/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/9/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_construct.h ****  *
  42:/usr/include/c++/9/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/9/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_construct.h ****  */
  50:/usr/include/c++/9/bits/stl_construct.h **** 
  51:/usr/include/c++/9/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/9/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/9/bits/stl_construct.h ****  */
  55:/usr/include/c++/9/bits/stl_construct.h **** 
  56:/usr/include/c++/9/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/9/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/9/bits/stl_construct.h **** 
  59:/usr/include/c++/9/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/9/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/9/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/9/bits/stl_construct.h **** 
  63:/usr/include/c++/9/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/9/bits/stl_construct.h **** {
  65:/usr/include/c++/9/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/9/bits/stl_construct.h **** 
  67:/usr/include/c++/9/bits/stl_construct.h ****   /**
  68:/usr/include/c++/9/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/9/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/9/bits/stl_construct.h ****    */
  71:/usr/include/c++/9/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/9/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/9/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/9/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/9/bits/stl_construct.h **** #else
  77:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/9/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/9/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/9/bits/stl_construct.h ****     {
  81:/usr/include/c++/9/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/9/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/9/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/9/bits/stl_construct.h ****     }
  85:/usr/include/c++/9/bits/stl_construct.h **** #endif
  86:/usr/include/c++/9/bits/stl_construct.h **** 
  87:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _T1>
  88:/usr/include/c++/9/bits/stl_construct.h ****     inline void
  89:/usr/include/c++/9/bits/stl_construct.h ****     _Construct_novalue(_T1* __p)
  90:/usr/include/c++/9/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1; }
  91:/usr/include/c++/9/bits/stl_construct.h **** 
  92:/usr/include/c++/9/bits/stl_construct.h ****   /**
  93:/usr/include/c++/9/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  94:/usr/include/c++/9/bits/stl_construct.h ****    */
  95:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _Tp>
  96:/usr/include/c++/9/bits/stl_construct.h ****     inline void
  97:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  98:/usr/include/c++/9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  99:/usr/include/c++/9/bits/stl_construct.h **** 
 100:/usr/include/c++/9/bits/stl_construct.h ****   template<bool>
 101:/usr/include/c++/9/bits/stl_construct.h ****     struct _Destroy_aux
 102:/usr/include/c++/9/bits/stl_construct.h ****     {
 103:/usr/include/c++/9/bits/stl_construct.h ****       template<typename _ForwardIterator>
 104:/usr/include/c++/9/bits/stl_construct.h ****         static void
 105:/usr/include/c++/9/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 106:/usr/include/c++/9/bits/stl_construct.h **** 	{
 107:/usr/include/c++/9/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 108:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 109:/usr/include/c++/9/bits/stl_construct.h **** 	}
 110:/usr/include/c++/9/bits/stl_construct.h ****     };
 111:/usr/include/c++/9/bits/stl_construct.h **** 
 112:/usr/include/c++/9/bits/stl_construct.h ****   template<>
 113:/usr/include/c++/9/bits/stl_construct.h ****     struct _Destroy_aux<true>
 114:/usr/include/c++/9/bits/stl_construct.h ****     {
 115:/usr/include/c++/9/bits/stl_construct.h ****       template<typename _ForwardIterator>
 116:/usr/include/c++/9/bits/stl_construct.h ****         static void
 117:/usr/include/c++/9/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 118:/usr/include/c++/9/bits/stl_construct.h ****     };
 119:/usr/include/c++/9/bits/stl_construct.h **** 
 120:/usr/include/c++/9/bits/stl_construct.h ****   /**
 121:/usr/include/c++/9/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 122:/usr/include/c++/9/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 123:/usr/include/c++/9/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 124:/usr/include/c++/9/bits/stl_construct.h ****    */
 125:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _ForwardIterator>
 126:/usr/include/c++/9/bits/stl_construct.h ****     inline void
 127:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 128:/usr/include/c++/9/bits/stl_construct.h ****     {
 129:/usr/include/c++/9/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 130:/usr/include/c++/9/bits/stl_construct.h ****                        _Value_type;
 131:/usr/include/c++/9/bits/stl_construct.h **** #if __cplusplus >= 201103L
 132:/usr/include/c++/9/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 133:/usr/include/c++/9/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 134:/usr/include/c++/9/bits/stl_construct.h **** 		    "value type is destructible");
 135:/usr/include/c++/9/bits/stl_construct.h **** #endif
 136:/usr/include/c++/9/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 137:/usr/include/c++/9/bits/stl_construct.h **** 	__destroy(__first, __last);
 138:/usr/include/c++/9/bits/stl_construct.h ****     }
 139:/usr/include/c++/9/bits/stl_construct.h **** 
 140:/usr/include/c++/9/bits/stl_construct.h ****   template<bool>
 141:/usr/include/c++/9/bits/stl_construct.h ****     struct _Destroy_n_aux
 142:/usr/include/c++/9/bits/stl_construct.h ****     {
 143:/usr/include/c++/9/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 144:/usr/include/c++/9/bits/stl_construct.h ****         static _ForwardIterator
 145:/usr/include/c++/9/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 146:/usr/include/c++/9/bits/stl_construct.h **** 	{
 147:/usr/include/c++/9/bits/stl_construct.h **** 	  for (; __count > 0; (void)++__first, --__count)
 148:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 149:/usr/include/c++/9/bits/stl_construct.h **** 	  return __first;
 150:/usr/include/c++/9/bits/stl_construct.h **** 	}
 151:/usr/include/c++/9/bits/stl_construct.h ****     };
 152:/usr/include/c++/9/bits/stl_construct.h **** 
 153:/usr/include/c++/9/bits/stl_construct.h ****   template<>
 154:/usr/include/c++/9/bits/stl_construct.h ****     struct _Destroy_n_aux<true>
 155:/usr/include/c++/9/bits/stl_construct.h ****     {
 156:/usr/include/c++/9/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 157:/usr/include/c++/9/bits/stl_construct.h ****         static _ForwardIterator
 158:/usr/include/c++/9/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 159:/usr/include/c++/9/bits/stl_construct.h **** 	{
 160:/usr/include/c++/9/bits/stl_construct.h **** 	  std::advance(__first, __count);
 161:/usr/include/c++/9/bits/stl_construct.h **** 	  return __first;
 162:/usr/include/c++/9/bits/stl_construct.h **** 	}
 163:/usr/include/c++/9/bits/stl_construct.h ****     };
 164:/usr/include/c++/9/bits/stl_construct.h **** 
 165:/usr/include/c++/9/bits/stl_construct.h ****   /**
 166:/usr/include/c++/9/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 167:/usr/include/c++/9/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 168:/usr/include/c++/9/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 169:/usr/include/c++/9/bits/stl_construct.h ****    */
 170:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Size>
 171:/usr/include/c++/9/bits/stl_construct.h ****     inline _ForwardIterator
 172:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy_n(_ForwardIterator __first, _Size __count)
 173:/usr/include/c++/9/bits/stl_construct.h ****     {
 174:/usr/include/c++/9/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 175:/usr/include/c++/9/bits/stl_construct.h ****                        _Value_type;
 176:/usr/include/c++/9/bits/stl_construct.h **** #if __cplusplus >= 201103L
 177:/usr/include/c++/9/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 178:/usr/include/c++/9/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 179:/usr/include/c++/9/bits/stl_construct.h **** 		    "value type is destructible");
 180:/usr/include/c++/9/bits/stl_construct.h **** #endif
 181:/usr/include/c++/9/bits/stl_construct.h ****       return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 182:/usr/include/c++/9/bits/stl_construct.h **** 	__destroy_n(__first, __count);
 183:/usr/include/c++/9/bits/stl_construct.h ****     }
 184:/usr/include/c++/9/bits/stl_construct.h **** 
 185:/usr/include/c++/9/bits/stl_construct.h ****   /**
 186:/usr/include/c++/9/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 187:/usr/include/c++/9/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 188:/usr/include/c++/9/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 189:/usr/include/c++/9/bits/stl_construct.h ****    */
 190:/usr/include/c++/9/bits/stl_construct.h **** 
 191:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 192:/usr/include/c++/9/bits/stl_construct.h ****     void
 193:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 194:/usr/include/c++/9/bits/stl_construct.h **** 	     _Allocator& __alloc)
 195:/usr/include/c++/9/bits/stl_construct.h ****     {
 196:/usr/include/c++/9/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 197:/usr/include/c++/9/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 198:/usr/include/c++/9/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 199:/usr/include/c++/9/bits/stl_construct.h ****     }
 200:/usr/include/c++/9/bits/stl_construct.h **** 
 201:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 202:/usr/include/c++/9/bits/stl_construct.h ****     inline void
 203:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 7154              		.loc 12 203 5
 7155              		.cfi_startproc
 7156 0000 F30F1EFA 		endbr64
 7157 0004 55       		pushq	%rbp
 7158              		.cfi_def_cfa_offset 16
 7159              		.cfi_offset 6, -16
 7160 0005 4889E5   		movq	%rsp, %rbp
 7161              		.cfi_def_cfa_register 6
 7162 0008 4883EC20 		subq	$32, %rsp
 7163 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7164 0010 488975F0 		movq	%rsi, -16(%rbp)
 7165 0014 488955E8 		movq	%rdx, -24(%rbp)
 204:/usr/include/c++/9/bits/stl_construct.h **** 	     allocator<_Tp>&)
 205:/usr/include/c++/9/bits/stl_construct.h ****     {
 206:/usr/include/c++/9/bits/stl_construct.h ****       _Destroy(__first, __last);
 7166              		.loc 12 206 15
 7167 0018 488B55F0 		movq	-16(%rbp), %rdx
 7168 001c 488B45F8 		movq	-8(%rbp), %rax
 7169 0020 4889D6   		movq	%rdx, %rsi
 7170 0023 4889C7   		movq	%rax, %rdi
 7171 0026 E8000000 		call	_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_
 7171      00
 207:/usr/include/c++/9/bits/stl_construct.h ****     }
 7172              		.loc 12 207 5
 7173 002b 90       		nop
 7174 002c C9       		leave
 7175              		.cfi_def_cfa 7, 8
 7176 002d C3       		ret
 7177              		.cfi_endproc
 7178              	.LFE2768:
 7180              		.data
 7181              		.align 32
 7184              	.Lubsan_type39:
 7187 0984 27737472 		.string	"'struct <unknown>'"
 7187      75637420 
 7187      3C756E6B 
 7187      6E6F776E 
 7187      3E2700
 7188 0997 00000000 		.zero	41
 7188      00000000 
 7188      00000000 
 7188      00000000 
 7188      00000000 
 7189              		.section	.data.rel.local
 7190              		.align 32
 7193              	.Lubsan_data513:
 7194 20c0 00000000 		.quad	.LC3
 7194      00000000 
 7195 20c8 5E000000 		.long	94
 7196 20cc 02000000 		.long	2
 7197 20d0 00000000 		.quad	.Lubsan_type39
 7197      00000000 
 7198 20d8 03       		.byte	3
 7199 20d9 02       		.byte	2
 7200 20da 00000000 		.zero	6
 7200      0000
 7201 20e0 00000000 		.zero	32
 7201      00000000 
 7201      00000000 
 7201      00000000 
 7201      00000000 
 7202              		.align 32
 7205              	.Lubsan_data514:
 7206 2100 00000000 		.quad	.LC3
 7206      00000000 
 7207 2108 5F000000 		.long	95
 7208 210c 2F000000 		.long	47
 7209 2110 00000000 		.quad	.Lubsan_type25
 7209      00000000 
 7210 2118 03       		.byte	3
 7211 2119 03       		.byte	3
 7212 211a 00000000 		.zero	6
 7212      0000
 7213 2120 00000000 		.zero	32
 7213      00000000 
 7213      00000000 
 7213      00000000 
 7213      00000000 
 7214              		.align 32
 7217              	.Lubsan_data515:
 7218 2140 00000000 		.quad	.LC3
 7218      00000000 
 7219 2148 5F000000 		.long	95
 7220 214c 2F000000 		.long	47
 7221 2150 00000000 		.quad	.Lubsan_type25
 7221      00000000 
 7222 2158 03       		.byte	3
 7223 2159 03       		.byte	3
 7224 215a 00000000 		.zero	6
 7224      0000
 7225 2160 00000000 		.zero	32
 7225      00000000 
 7225      00000000 
 7225      00000000 
 7225      00000000 
 7226              		.align 32
 7229              	.Lubsan_data516:
 7230 2180 00000000 		.quad	.LC3
 7230      00000000 
 7231 2188 5F000000 		.long	95
 7232 218c 2F000000 		.long	47
 7233 2190 00000000 		.zero	48
 7233      00000000 
 7233      00000000 
 7233      00000000 
 7233      00000000 
 7234              		.align 32
 7237              	.Lubsan_data517:
 7238 21c0 00000000 		.quad	.LC3
 7238      00000000 
 7239 21c8 5F000000 		.long	95
 7240 21cc 2F000000 		.long	47
 7241 21d0 00000000 		.quad	.Lubsan_type25
 7241      00000000 
 7242 21d8 03       		.byte	3
 7243 21d9 03       		.byte	3
 7244 21da 00000000 		.zero	6
 7244      0000
 7245 21e0 00000000 		.zero	32
 7245      00000000 
 7245      00000000 
 7245      00000000 
 7245      00000000 
 7246              		.align 32
 7249              	.Lubsan_data518:
 7250 2200 00000000 		.quad	.LC3
 7250      00000000 
 7251 2208 5F000000 		.long	95
 7252 220c 2F000000 		.long	47
 7253 2210 00000000 		.zero	48
 7253      00000000 
 7253      00000000 
 7253      00000000 
 7253      00000000 
 7254              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_
 7255              		.align 2
 7256              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_im
 7258              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_data
 7259              	.LASANPC2802:
 7260              	.LFB2802:
  94:/usr/include/c++/9/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 7261              		.loc 4 94 2
 7262              		.cfi_startproc
 7263 0000 F30F1EFA 		endbr64
 7264 0004 55       		pushq	%rbp
 7265              		.cfi_def_cfa_offset 16
 7266              		.cfi_offset 6, -16
 7267 0005 4889E5   		movq	%rsp, %rbp
 7268              		.cfi_def_cfa_register 6
 7269 0008 4883EC10 		subq	$16, %rsp
 7270 000c 48897DF8 		movq	%rdi, -8(%rbp)
  94:/usr/include/c++/9/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 7271              		.loc 4 94 2
 7272 0010 488B45F8 		movq	-8(%rbp), %rax
 7273 0014 48837DF8 		cmpq	$0, -8(%rbp)
 7273      00
 7274 0019 740B     		je	.L430
 7275 001b 4889C2   		movq	%rax, %rdx
 7276 001e 83E207   		andl	$7, %edx
 7277 0021 4885D2   		testq	%rdx, %rdx
 7278 0024 740F     		je	.L431
 7279              	.L430:
 7280 0026 4889C6   		movq	%rax, %rsi
 7281 0029 488D3D00 		leaq	.Lubsan_data513(%rip), %rdi
 7281      000000
 7282 0030 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7282      00
 7283              	.L431:
 7284              	.LBB21:
  95:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 7285              		.loc 4 95 47
 7286 0035 488B45F8 		movq	-8(%rbp), %rax
 7287 0039 48837DF8 		cmpq	$0, -8(%rbp)
 7287      00
 7288 003e 740B     		je	.L432
 7289 0040 4889C2   		movq	%rax, %rdx
 7290 0043 83E207   		andl	$7, %edx
 7291 0046 4885D2   		testq	%rdx, %rdx
 7292 0049 740F     		je	.L433
 7293              	.L432:
 7294 004b 4889C6   		movq	%rax, %rsi
 7295 004e 488D3D00 		leaq	.Lubsan_data514(%rip), %rdi
 7295      000000
 7296 0055 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7296      00
 7297              	.L433:
 7298 005a 488B45F8 		movq	-8(%rbp), %rax
 7299 005e 4889C2   		movq	%rax, %rdx
 7300 0061 48C1EA03 		shrq	$3, %rdx
 7301 0065 4881C200 		addq	$2147450880, %rdx
 7301      80FF7F
 7302 006c 0FB612   		movzbl	(%rdx), %edx
 7303 006f 84D2     		testb	%dl, %dl
 7304 0071 7408     		je	.L434
 7305 0073 4889C7   		movq	%rax, %rdi
 7306 0076 E8000000 		call	__asan_report_store8@PLT
 7306      00
 7307              	.L434:
 7308 007b 488B45F8 		movq	-8(%rbp), %rax
 7309 007f 48C70000 		movq	$0, (%rax)
 7309      000000
 7310 0086 488B45F8 		movq	-8(%rbp), %rax
 7311 008a 48837DF8 		cmpq	$0, -8(%rbp)
 7311      00
 7312 008f 740B     		je	.L435
 7313 0091 4889C2   		movq	%rax, %rdx
 7314 0094 83E207   		andl	$7, %edx
 7315 0097 4885D2   		testq	%rdx, %rdx
 7316 009a 740F     		je	.L436
 7317              	.L435:
 7318 009c 4889C6   		movq	%rax, %rsi
 7319 009f 488D3D00 		leaq	.Lubsan_data515(%rip), %rdi
 7319      000000
 7320 00a6 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7320      00
 7321              	.L436:
 7322 00ab 488B45F8 		movq	-8(%rbp), %rax
 7323 00af 488D5008 		leaq	8(%rax), %rdx
 7324 00b3 4883F8F8 		cmpq	$-8, %rax
 7325 00b7 7213     		jb	.L437
 7326 00b9 488B45F8 		movq	-8(%rbp), %rax
 7327 00bd 4889C6   		movq	%rax, %rsi
 7328 00c0 488D3D00 		leaq	.Lubsan_data516(%rip), %rdi
 7328      000000
 7329 00c7 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 7329      00
 7330              	.L437:
 7331 00cc 488B45F8 		movq	-8(%rbp), %rax
 7332 00d0 4883C008 		addq	$8, %rax
 7333 00d4 4889C2   		movq	%rax, %rdx
 7334 00d7 48C1EA03 		shrq	$3, %rdx
 7335 00db 4881C200 		addq	$2147450880, %rdx
 7335      80FF7F
 7336 00e2 0FB612   		movzbl	(%rdx), %edx
 7337 00e5 84D2     		testb	%dl, %dl
 7338 00e7 7408     		je	.L438
 7339 00e9 4889C7   		movq	%rax, %rdi
 7340 00ec E8000000 		call	__asan_report_store8@PLT
 7340      00
 7341              	.L438:
 7342 00f1 488B45F8 		movq	-8(%rbp), %rax
 7343 00f5 48C74008 		movq	$0, 8(%rax)
 7343      00000000 
 7344 00fd 488B45F8 		movq	-8(%rbp), %rax
 7345 0101 48837DF8 		cmpq	$0, -8(%rbp)
 7345      00
 7346 0106 740B     		je	.L439
 7347 0108 4889C2   		movq	%rax, %rdx
 7348 010b 83E207   		andl	$7, %edx
 7349 010e 4885D2   		testq	%rdx, %rdx
 7350 0111 740F     		je	.L440
 7351              	.L439:
 7352 0113 4889C6   		movq	%rax, %rsi
 7353 0116 488D3D00 		leaq	.Lubsan_data517(%rip), %rdi
 7353      000000
 7354 011d E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7354      00
 7355              	.L440:
 7356 0122 488B45F8 		movq	-8(%rbp), %rax
 7357 0126 488D5010 		leaq	16(%rax), %rdx
 7358 012a 4883F8F0 		cmpq	$-16, %rax
 7359 012e 7213     		jb	.L441
 7360 0130 488B45F8 		movq	-8(%rbp), %rax
 7361 0134 4889C6   		movq	%rax, %rsi
 7362 0137 488D3D00 		leaq	.Lubsan_data518(%rip), %rdi
 7362      000000
 7363 013e E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 7363      00
 7364              	.L441:
 7365 0143 488B45F8 		movq	-8(%rbp), %rax
 7366 0147 4883C010 		addq	$16, %rax
 7367 014b 4889C2   		movq	%rax, %rdx
 7368 014e 48C1EA03 		shrq	$3, %rdx
 7369 0152 4881C200 		addq	$2147450880, %rdx
 7369      80FF7F
 7370 0159 0FB612   		movzbl	(%rdx), %edx
 7371 015c 84D2     		testb	%dl, %dl
 7372 015e 7408     		je	.L442
 7373 0160 4889C7   		movq	%rax, %rdi
 7374 0163 E8000000 		call	__asan_report_store8@PLT
 7374      00
 7375              	.L442:
 7376 0168 488B45F8 		movq	-8(%rbp), %rax
 7377 016c 48C74010 		movq	$0, 16(%rax)
 7377      00000000 
 7378              	.LBE21:
  96:/usr/include/c++/9/bits/stl_vector.h **** 
 7379              		.loc 4 96 4
 7380 0174 90       		nop
 7381 0175 C9       		leave
 7382              		.cfi_def_cfa 7, 8
 7383 0176 C3       		ret
 7384              		.cfi_endproc
 7385              	.LFE2802:
 7387              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_im
 7388              		.set	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_imp
 7389              		.section	.data.rel.local
 7390              		.align 32
 7393              	.Lubsan_data519:
 7394 2240 00000000 		.quad	.LC3
 7394      00000000 
 7395 2248 5F010000 		.long	351
 7396 224c 14000000 		.long	20
 7397 2250 00000000 		.quad	.Lubsan_type8
 7397      00000000 
 7398 2258 03       		.byte	3
 7399 2259 03       		.byte	3
 7400 225a 00000000 		.zero	6
 7400      0000
 7401 2260 00000000 		.zero	32
 7401      00000000 
 7401      00000000 
 7401      00000000 
 7401      00000000 
 7402              		.align 32
 7405              	.Lubsan_data520:
 7406 2280 00000000 		.quad	.LC3
 7406      00000000 
 7407 2288 5F010000 		.long	351
 7408 228c 13000000 		.long	19
 7409 2290 00000000 		.quad	.Lubsan_type28
 7409      00000000 
 7410 2298 00       		.byte	0
 7411 2299 02       		.byte	2
 7412 229a 00000000 		.zero	6
 7412      0000
 7413 22a0 00000000 		.zero	32
 7413      00000000 
 7413      00000000 
 7413      00000000 
 7413      00000000 
 7414              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_
 7415              		.align 2
 7416              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_dealloc
 7418              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5
 7419              	.LASANPC2804:
 7420              	.LFB2804:
 347:/usr/include/c++/9/bits/stl_vector.h ****       {
 7421              		.loc 4 347 7
 7422              		.cfi_startproc
 7423 0000 F30F1EFA 		endbr64
 7424 0004 55       		pushq	%rbp
 7425              		.cfi_def_cfa_offset 16
 7426              		.cfi_offset 6, -16
 7427 0005 4889E5   		movq	%rsp, %rbp
 7428              		.cfi_def_cfa_register 6
 7429 0008 53       		pushq	%rbx
 7430 0009 4883EC28 		subq	$40, %rsp
 7431              		.cfi_offset 3, -24
 7432 000d 48897DE8 		movq	%rdi, -24(%rbp)
 7433 0011 488975E0 		movq	%rsi, -32(%rbp)
 7434 0015 488955D8 		movq	%rdx, -40(%rbp)
 350:/usr/include/c++/9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 7435              		.loc 4 350 2
 7436 0019 48837DE0 		cmpq	$0, -32(%rbp)
 7436      00
 7437 001e 7452     		je	.L448
 351:/usr/include/c++/9/bits/stl_vector.h ****       }
 7438              		.loc 4 351 20
 7439 0020 488B45E8 		movq	-24(%rbp), %rax
 7440 0024 48837DE8 		cmpq	$0, -24(%rbp)
 7440      00
 7441 0029 740B     		je	.L445
 7442 002b 4889C2   		movq	%rax, %rdx
 7443 002e 83E207   		andl	$7, %edx
 7444 0031 4885D2   		testq	%rdx, %rdx
 7445 0034 740F     		je	.L446
 7446              	.L445:
 7447 0036 4889C6   		movq	%rax, %rsi
 7448 0039 488D3D00 		leaq	.Lubsan_data519(%rip), %rdi
 7448      000000
 7449 0040 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7449      00
 7450              	.L446:
 7451 0045 488B5DE8 		movq	-24(%rbp), %rbx
 351:/usr/include/c++/9/bits/stl_vector.h ****       }
 7452              		.loc 4 351 19
 7453 0049 4885DB   		testq	%rbx, %rbx
 7454 004c 7511     		jne	.L447
 7455 004e BE000000 		movl	$0, %esi
 7455      00
 7456 0053 488D3D00 		leaq	.Lubsan_data520(%rip), %rdi
 7456      000000
 7457 005a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7457      00
 7458              	.L447:
 7459 005f 488B55D8 		movq	-40(%rbp), %rdx
 7460 0063 488B45E0 		movq	-32(%rbp), %rax
 7461 0067 4889C6   		movq	%rax, %rsi
 7462 006a 4889DF   		movq	%rbx, %rdi
 7463 006d E8000000 		call	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocate
 7463      00
 7464              	.L448:
 352:/usr/include/c++/9/bits/stl_vector.h **** 
 7465              		.loc 4 352 7
 7466 0072 90       		nop
 7467 0073 4883C428 		addq	$40, %rsp
 7468 0077 5B       		popq	%rbx
 7469 0078 5D       		popq	%rbp
 7470              		.cfi_def_cfa 7, 8
 7471 0079 C3       		ret
 7472              		.cfi_endproc
 7473              	.LFE2804:
 7475              		.section	.rodata
 7476 05b6 00000000 		.align 32
 7476      00000000 
 7476      0000
 7477              	.LC18:
 7478 05c0 2F757372 		.string	"/usr/include/c++/9/bits/alloc_traits.h"
 7478      2F696E63 
 7478      6C756465 
 7478      2F632B2B 
 7478      2F392F62 
 7479 05e7 00000000 		.zero	57
 7479      00000000 
 7479      00000000 
 7479      00000000 
 7479      00000000 
 7480              		.section	.data.rel.local
 7481              		.align 32
 7484              	.Lubsan_data521:
 7485 22c0 00000000 		.quad	.LC18
 7485      00000000 
 7486 22c8 E3010000 		.long	483
 7487 22cc 04000000 		.long	4
 7488 22d0 00000000 		.quad	.Lubsan_type22
 7488      00000000 
 7489 22d8 00       		.byte	0
 7490 22d9 04       		.byte	4
 7491 22da 00000000 		.zero	6
 7491      0000
 7492 22e0 00000000 		.zero	32
 7492      00000000 
 7492      00000000 
 7492      00000000 
 7492      00000000 
 7493              		.data
 7494              		.align 32
 7497              	.Lubsan_type40:
 7500 09c4 27636F6E 		.string	"'const struct type'"
 7500      73742073 
 7500      74727563 
 7500      74207479 
 7500      70652700 
 7501 09d8 00000000 		.zero	40
 7501      00000000 
 7501      00000000 
 7501      00000000 
 7501      00000000 
 7502              		.section	.data.rel.local
 7503              		.align 32
 7506              	.Lubsan_data522:
 7507 2300 00000000 		.quad	.LC18
 7507      00000000 
 7508 2308 E3010000 		.long	483
 7509 230c 04000000 		.long	4
 7510 2310 00000000 		.quad	.Lubsan_type40
 7510      00000000 
 7511 2318 03       		.byte	3
 7512 2319 02       		.byte	2
 7513 231a 00000000 		.zero	6
 7513      0000
 7514 2320 00000000 		.zero	32
 7514      00000000 
 7514      00000000 
 7514      00000000 
 7514      00000000 
 7515              		.section	.text._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9c
 7516              		.weak	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructI
 7518              	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS
 7519              	.LASANPC2808:
 7520              	.LFB2808:
 7521              		.file 13 "/usr/include/c++/9/bits/alloc_traits.h"
   1:/usr/include/c++/9/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/9/bits/alloc_traits.h **** 
   3:/usr/include/c++/9/bits/alloc_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/alloc_traits.h **** //
   5:/usr/include/c++/9/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/alloc_traits.h **** // any later version.
  10:/usr/include/c++/9/bits/alloc_traits.h **** 
  11:/usr/include/c++/9/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/alloc_traits.h **** 
  16:/usr/include/c++/9/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/alloc_traits.h **** 
  20:/usr/include/c++/9/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/alloc_traits.h **** 
  25:/usr/include/c++/9/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/c++/9/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/9/bits/alloc_traits.h ****  */
  29:/usr/include/c++/9/bits/alloc_traits.h **** 
  30:/usr/include/c++/9/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/c++/9/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/c++/9/bits/alloc_traits.h **** 
  33:/usr/include/c++/9/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  34:/usr/include/c++/9/bits/alloc_traits.h **** 
  35:/usr/include/c++/9/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  36:/usr/include/c++/9/bits/alloc_traits.h **** #include <bits/ptr_traits.h>
  37:/usr/include/c++/9/bits/alloc_traits.h **** #include <ext/numeric_traits.h>
  38:/usr/include/c++/9/bits/alloc_traits.h **** 
  39:/usr/include/c++/9/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  40:/usr/include/c++/9/bits/alloc_traits.h **** 
  41:/usr/include/c++/9/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/9/bits/alloc_traits.h **** {
  43:/usr/include/c++/9/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/9/bits/alloc_traits.h **** 
  45:/usr/include/c++/9/bits/alloc_traits.h ****   struct __allocator_traits_base
  46:/usr/include/c++/9/bits/alloc_traits.h ****   {
  47:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  48:/usr/include/c++/9/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  49:/usr/include/c++/9/bits/alloc_traits.h **** 
  50:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  51:/usr/include/c++/9/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  52:/usr/include/c++/9/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  53:/usr/include/c++/9/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  54:/usr/include/c++/9/bits/alloc_traits.h **** 
  55:/usr/include/c++/9/bits/alloc_traits.h ****   protected:
  56:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  57:/usr/include/c++/9/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  58:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  59:/usr/include/c++/9/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  60:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  61:/usr/include/c++/9/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  62:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  63:/usr/include/c++/9/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  64:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  65:/usr/include/c++/9/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  66:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  67:/usr/include/c++/9/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  68:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  69:/usr/include/c++/9/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  70:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  71:/usr/include/c++/9/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  72:/usr/include/c++/9/bits/alloc_traits.h ****   };
  73:/usr/include/c++/9/bits/alloc_traits.h **** 
  74:/usr/include/c++/9/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  75:/usr/include/c++/9/bits/alloc_traits.h ****     using __alloc_rebind
  76:/usr/include/c++/9/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  77:/usr/include/c++/9/bits/alloc_traits.h **** 
  78:/usr/include/c++/9/bits/alloc_traits.h ****   /**
  79:/usr/include/c++/9/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  80:/usr/include/c++/9/bits/alloc_traits.h ****    * @ingroup allocators
  81:/usr/include/c++/9/bits/alloc_traits.h ****   */
  82:/usr/include/c++/9/bits/alloc_traits.h ****   template<typename _Alloc>
  83:/usr/include/c++/9/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  84:/usr/include/c++/9/bits/alloc_traits.h ****     {
  85:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator type
  86:/usr/include/c++/9/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  87:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocated type
  88:/usr/include/c++/9/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  89:/usr/include/c++/9/bits/alloc_traits.h **** 
  90:/usr/include/c++/9/bits/alloc_traits.h ****       /**
  91:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  92:/usr/include/c++/9/bits/alloc_traits.h ****        *
  93:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  94:/usr/include/c++/9/bits/alloc_traits.h ****       */
  95:/usr/include/c++/9/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  96:/usr/include/c++/9/bits/alloc_traits.h **** 
  97:/usr/include/c++/9/bits/alloc_traits.h ****     private:
  98:/usr/include/c++/9/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
  99:/usr/include/c++/9/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 100:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Ptr
 101:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 102:/usr/include/c++/9/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 103:/usr/include/c++/9/bits/alloc_traits.h **** 	};
 104:/usr/include/c++/9/bits/alloc_traits.h **** 
 105:/usr/include/c++/9/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 106:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 107:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 108:/usr/include/c++/9/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 109:/usr/include/c++/9/bits/alloc_traits.h **** 	};
 110:/usr/include/c++/9/bits/alloc_traits.h **** 
 111:/usr/include/c++/9/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 112:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 113:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Diff
 114:/usr/include/c++/9/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 115:/usr/include/c++/9/bits/alloc_traits.h **** 
 116:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 117:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 118:/usr/include/c++/9/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 119:/usr/include/c++/9/bits/alloc_traits.h **** 
 120:/usr/include/c++/9/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 121:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 122:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 123:/usr/include/c++/9/bits/alloc_traits.h **** 
 124:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 125:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 126:/usr/include/c++/9/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 127:/usr/include/c++/9/bits/alloc_traits.h **** 
 128:/usr/include/c++/9/bits/alloc_traits.h ****     public:
 129:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 130:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 131:/usr/include/c++/9/bits/alloc_traits.h ****        *
 132:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 133:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 134:/usr/include/c++/9/bits/alloc_traits.h ****       */
 135:/usr/include/c++/9/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 136:/usr/include/c++/9/bits/alloc_traits.h **** 
 137:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 138:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 139:/usr/include/c++/9/bits/alloc_traits.h ****        *
 140:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 141:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 142:/usr/include/c++/9/bits/alloc_traits.h ****       */
 143:/usr/include/c++/9/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 144:/usr/include/c++/9/bits/alloc_traits.h **** 
 145:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 146:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 147:/usr/include/c++/9/bits/alloc_traits.h ****        *
 148:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 149:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 150:/usr/include/c++/9/bits/alloc_traits.h ****       */
 151:/usr/include/c++/9/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 152:/usr/include/c++/9/bits/alloc_traits.h **** 
 153:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 154:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 155:/usr/include/c++/9/bits/alloc_traits.h ****        *
 156:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 157:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 158:/usr/include/c++/9/bits/alloc_traits.h ****       */
 159:/usr/include/c++/9/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 160:/usr/include/c++/9/bits/alloc_traits.h **** 
 161:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 162:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's size type
 163:/usr/include/c++/9/bits/alloc_traits.h ****        *
 164:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 165:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 166:/usr/include/c++/9/bits/alloc_traits.h ****       */
 167:/usr/include/c++/9/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 168:/usr/include/c++/9/bits/alloc_traits.h **** 
 169:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 170:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 171:/usr/include/c++/9/bits/alloc_traits.h ****        *
 172:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 173:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c false_type
 174:/usr/include/c++/9/bits/alloc_traits.h ****       */
 175:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 176:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 177:/usr/include/c++/9/bits/alloc_traits.h **** 
 178:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 179:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 180:/usr/include/c++/9/bits/alloc_traits.h ****        *
 181:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 182:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c false_type
 183:/usr/include/c++/9/bits/alloc_traits.h ****       */
 184:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 185:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 186:/usr/include/c++/9/bits/alloc_traits.h **** 
 187:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 188:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 189:/usr/include/c++/9/bits/alloc_traits.h ****        *
 190:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 191:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c false_type
 192:/usr/include/c++/9/bits/alloc_traits.h ****       */
 193:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_swap
 194:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 195:/usr/include/c++/9/bits/alloc_traits.h **** 
 196:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 197:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 198:/usr/include/c++/9/bits/alloc_traits.h ****        *
 199:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 200:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 201:/usr/include/c++/9/bits/alloc_traits.h ****       */
 202:/usr/include/c++/9/bits/alloc_traits.h ****       using is_always_equal
 203:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 204:/usr/include/c++/9/bits/alloc_traits.h **** 
 205:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp>
 206:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 207:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp>
 208:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 209:/usr/include/c++/9/bits/alloc_traits.h **** 
 210:/usr/include/c++/9/bits/alloc_traits.h ****     private:
 211:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 212:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 213:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 214:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 215:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 216:/usr/include/c++/9/bits/alloc_traits.h **** 
 217:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 218:/usr/include/c++/9/bits/alloc_traits.h **** 	static pointer
 219:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 220:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 221:/usr/include/c++/9/bits/alloc_traits.h **** 
 222:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 223:/usr/include/c++/9/bits/alloc_traits.h **** 	struct __construct_helper
 224:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 225:/usr/include/c++/9/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 226:/usr/include/c++/9/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 227:/usr/include/c++/9/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 228:/usr/include/c++/9/bits/alloc_traits.h **** 	    static true_type __test(int);
 229:/usr/include/c++/9/bits/alloc_traits.h **** 
 230:/usr/include/c++/9/bits/alloc_traits.h **** 	  template<typename>
 231:/usr/include/c++/9/bits/alloc_traits.h **** 	    static false_type __test(...);
 232:/usr/include/c++/9/bits/alloc_traits.h **** 
 233:/usr/include/c++/9/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 234:/usr/include/c++/9/bits/alloc_traits.h **** 	};
 235:/usr/include/c++/9/bits/alloc_traits.h **** 
 236:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 237:/usr/include/c++/9/bits/alloc_traits.h **** 	using __has_construct
 238:/usr/include/c++/9/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 239:/usr/include/c++/9/bits/alloc_traits.h **** 
 240:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 241:/usr/include/c++/9/bits/alloc_traits.h **** 	static _Require<__has_construct<_Tp, _Args...>>
 242:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 243:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 244:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 245:/usr/include/c++/9/bits/alloc_traits.h **** 
 246:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 247:/usr/include/c++/9/bits/alloc_traits.h **** 	static
 248:/usr/include/c++/9/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 249:/usr/include/c++/9/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 250:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 251:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 252:/usr/include/c++/9/bits/alloc_traits.h **** 	{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }
 253:/usr/include/c++/9/bits/alloc_traits.h **** 
 254:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 255:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 256:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 257:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 258:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 259:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 260:/usr/include/c++/9/bits/alloc_traits.h **** 
 261:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 262:/usr/include/c++/9/bits/alloc_traits.h **** 	static void
 263:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 264:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 265:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __p->~_Tp(); }
 266:/usr/include/c++/9/bits/alloc_traits.h **** 
 267:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 268:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 269:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 270:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 271:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 272:/usr/include/c++/9/bits/alloc_traits.h **** 
 273:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 274:/usr/include/c++/9/bits/alloc_traits.h **** 	static size_type
 275:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 276:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 277:/usr/include/c++/9/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 278:/usr/include/c++/9/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 279:/usr/include/c++/9/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 280:/usr/include/c++/9/bits/alloc_traits.h **** 	    / sizeof(value_type);
 281:/usr/include/c++/9/bits/alloc_traits.h **** 	}
 282:/usr/include/c++/9/bits/alloc_traits.h **** 
 283:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 284:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 285:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 286:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 287:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 288:/usr/include/c++/9/bits/alloc_traits.h **** 
 289:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 290:/usr/include/c++/9/bits/alloc_traits.h **** 	static _Alloc2
 291:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 292:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a; }
 293:/usr/include/c++/9/bits/alloc_traits.h **** 
 294:/usr/include/c++/9/bits/alloc_traits.h ****     public:
 295:/usr/include/c++/9/bits/alloc_traits.h **** 
 296:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 297:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 298:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 299:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 300:/usr/include/c++/9/bits/alloc_traits.h ****        *
 301:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 302:/usr/include/c++/9/bits/alloc_traits.h ****       */
 303:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 304:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 305:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 306:/usr/include/c++/9/bits/alloc_traits.h **** 
 307:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 308:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 309:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 310:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 311:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 312:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 313:/usr/include/c++/9/bits/alloc_traits.h ****        *          of type @c value_type
 314:/usr/include/c++/9/bits/alloc_traits.h ****        *
 315:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 316:/usr/include/c++/9/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 317:/usr/include/c++/9/bits/alloc_traits.h ****       */
 318:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 319:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 320:/usr/include/c++/9/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 321:/usr/include/c++/9/bits/alloc_traits.h **** 
 322:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 323:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 324:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 325:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 326:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 327:/usr/include/c++/9/bits/alloc_traits.h ****        *
 328:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 329:/usr/include/c++/9/bits/alloc_traits.h ****       */
 330:/usr/include/c++/9/bits/alloc_traits.h ****       static void
 331:/usr/include/c++/9/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 332:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 333:/usr/include/c++/9/bits/alloc_traits.h **** 
 334:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 335:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 336:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 337:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 338:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 339:/usr/include/c++/9/bits/alloc_traits.h ****        *
 340:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 341:/usr/include/c++/9/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 342:/usr/include/c++/9/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 343:/usr/include/c++/9/bits/alloc_traits.h ****        *  arguments @a __args...
 344:/usr/include/c++/9/bits/alloc_traits.h ****       */
 345:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 346:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 347:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 348:/usr/include/c++/9/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 349:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 350:/usr/include/c++/9/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 351:/usr/include/c++/9/bits/alloc_traits.h **** 
 352:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 353:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 354:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 355:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 356:/usr/include/c++/9/bits/alloc_traits.h ****        *
 357:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 358:/usr/include/c++/9/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 359:/usr/include/c++/9/bits/alloc_traits.h ****       */
 360:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp>
 361:/usr/include/c++/9/bits/alloc_traits.h **** 	static void destroy(_Alloc& __a, _Tp* __p)
 362:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 363:/usr/include/c++/9/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 364:/usr/include/c++/9/bits/alloc_traits.h **** 
 365:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 366:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 367:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 368:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 369:/usr/include/c++/9/bits/alloc_traits.h ****        *
 370:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 371:/usr/include/c++/9/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 372:/usr/include/c++/9/bits/alloc_traits.h ****       */
 373:/usr/include/c++/9/bits/alloc_traits.h ****       static size_type max_size(const _Alloc& __a) noexcept
 374:/usr/include/c++/9/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 375:/usr/include/c++/9/bits/alloc_traits.h **** 
 376:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 377:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 378:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 379:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 380:/usr/include/c++/9/bits/alloc_traits.h ****        *
 381:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 382:/usr/include/c++/9/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 383:/usr/include/c++/9/bits/alloc_traits.h ****       */
 384:/usr/include/c++/9/bits/alloc_traits.h ****       static _Alloc
 385:/usr/include/c++/9/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 386:/usr/include/c++/9/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 387:/usr/include/c++/9/bits/alloc_traits.h ****     };
 388:/usr/include/c++/9/bits/alloc_traits.h **** 
 389:/usr/include/c++/9/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 390:/usr/include/c++/9/bits/alloc_traits.h ****   template<typename _Tp>
 391:/usr/include/c++/9/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 392:/usr/include/c++/9/bits/alloc_traits.h ****     {
 393:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator type
 394:/usr/include/c++/9/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 395:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocated type
 396:/usr/include/c++/9/bits/alloc_traits.h ****       using value_type = _Tp;
 397:/usr/include/c++/9/bits/alloc_traits.h **** 
 398:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's pointer type.
 399:/usr/include/c++/9/bits/alloc_traits.h ****       using pointer = _Tp*;
 400:/usr/include/c++/9/bits/alloc_traits.h **** 
 401:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 402:/usr/include/c++/9/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 403:/usr/include/c++/9/bits/alloc_traits.h **** 
 404:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 405:/usr/include/c++/9/bits/alloc_traits.h ****       using void_pointer = void*;
 406:/usr/include/c++/9/bits/alloc_traits.h **** 
 407:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 408:/usr/include/c++/9/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 409:/usr/include/c++/9/bits/alloc_traits.h **** 
 410:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's difference type
 411:/usr/include/c++/9/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 412:/usr/include/c++/9/bits/alloc_traits.h **** 
 413:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's size type
 414:/usr/include/c++/9/bits/alloc_traits.h ****       using size_type = std::size_t;
 415:/usr/include/c++/9/bits/alloc_traits.h **** 
 416:/usr/include/c++/9/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 417:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 418:/usr/include/c++/9/bits/alloc_traits.h **** 
 419:/usr/include/c++/9/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 420:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 421:/usr/include/c++/9/bits/alloc_traits.h **** 
 422:/usr/include/c++/9/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 423:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 424:/usr/include/c++/9/bits/alloc_traits.h **** 
 425:/usr/include/c++/9/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 426:/usr/include/c++/9/bits/alloc_traits.h ****       using is_always_equal = true_type;
 427:/usr/include/c++/9/bits/alloc_traits.h **** 
 428:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up>
 429:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 430:/usr/include/c++/9/bits/alloc_traits.h **** 
 431:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up>
 432:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 433:/usr/include/c++/9/bits/alloc_traits.h **** 
 434:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 435:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 436:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 437:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 438:/usr/include/c++/9/bits/alloc_traits.h ****        *
 439:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 440:/usr/include/c++/9/bits/alloc_traits.h ****       */
 441:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 442:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 443:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 444:/usr/include/c++/9/bits/alloc_traits.h **** 
 445:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 446:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 447:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 448:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 449:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 450:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 451:/usr/include/c++/9/bits/alloc_traits.h ****        *          of type @c value_type
 452:/usr/include/c++/9/bits/alloc_traits.h ****        *
 453:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 454:/usr/include/c++/9/bits/alloc_traits.h ****       */
 455:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 456:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 457:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 458:/usr/include/c++/9/bits/alloc_traits.h **** 
 459:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 460:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 461:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 462:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 463:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 464:/usr/include/c++/9/bits/alloc_traits.h ****        *
 465:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 466:/usr/include/c++/9/bits/alloc_traits.h ****       */
 467:/usr/include/c++/9/bits/alloc_traits.h ****       static void
 468:/usr/include/c++/9/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 470:/usr/include/c++/9/bits/alloc_traits.h **** 
 471:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 472:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Up
 473:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 474:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 475:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 476:/usr/include/c++/9/bits/alloc_traits.h ****        *
 477:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 478:/usr/include/c++/9/bits/alloc_traits.h ****       */
 479:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 480:/usr/include/c++/9/bits/alloc_traits.h **** 	static void
 481:/usr/include/c++/9/bits/alloc_traits.h **** 	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 7522              		.loc 13 481 2
 7523              		.cfi_startproc
 7524 0000 F30F1EFA 		endbr64
 7525 0004 55       		pushq	%rbp
 7526              		.cfi_def_cfa_offset 16
 7527              		.cfi_offset 6, -16
 7528 0005 4889E5   		movq	%rsp, %rbp
 7529              		.cfi_def_cfa_register 6
 7530 0008 4883EC20 		subq	$32, %rsp
 7531 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7532 0010 488975F0 		movq	%rsi, -16(%rbp)
 7533 0014 488955E8 		movq	%rdx, -24(%rbp)
 482:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 483:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 7534              		.loc 13 483 4
 7535 0018 48837DF8 		cmpq	$0, -8(%rbp)
 7535      00
 7536 001d 7511     		jne	.L450
 7537 001f BE000000 		movl	$0, %esi
 7537      00
 7538 0024 488D3D00 		leaq	.Lubsan_data521(%rip), %rdi
 7538      000000
 7539 002b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7539      00
 7540              	.L450:
 7541 0030 488B45E8 		movq	-24(%rbp), %rax
 7542 0034 48837DE8 		cmpq	$0, -24(%rbp)
 7542      00
 7543 0039 740B     		je	.L451
 7544 003b 4889C2   		movq	%rax, %rdx
 7545 003e 83E207   		andl	$7, %edx
 7546 0041 4885D2   		testq	%rdx, %rdx
 7547 0044 740F     		je	.L452
 7548              	.L451:
 7549 0046 4889C6   		movq	%rax, %rsi
 7550 0049 488D3D00 		leaq	.Lubsan_data522(%rip), %rdi
 7550      000000
 7551 0050 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7551      00
 7552              	.L452:
 7553 0055 488B45E8 		movq	-24(%rbp), %rax
 7554 0059 4889C7   		movq	%rax, %rdi
 7555 005c E8000000 		call	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_reference
 7555      00
 7556 0061 4889C2   		movq	%rax, %rdx
 7557 0064 488B4DF0 		movq	-16(%rbp), %rcx
 7558 0068 488B45F8 		movq	-8(%rbp), %rax
 7559 006c 4889CE   		movq	%rcx, %rsi
 7560 006f 4889C7   		movq	%rax, %rdi
 7561 0072 E8000000 		call	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructI
 7561      00
 7562              		.loc 13 483 56
 7563 0077 90       		nop
 7564 0078 C9       		leave
 7565              		.cfi_def_cfa 7, 8
 7566 0079 C3       		ret
 7567              		.cfi_endproc
 7568              	.LFE2808:
 7570              		.section	.data.rel.local
 7571              		.align 32
 7574              	.Lubsan_data523:
 7575 2340 00000000 		.quad	.LC3
 7575      00000000 
 7576 2348 3B030000 		.long	827
 7577 234c 27000000 		.long	39
 7578 2350 00000000 		.quad	.Lubsan_type10
 7578      00000000 
 7579 2358 03       		.byte	3
 7580 2359 03       		.byte	3
 7581 235a 00000000 		.zero	6
 7581      0000
 7582 2360 00000000 		.zero	32
 7582      00000000 
 7582      00000000 
 7582      00000000 
 7582      00000000 
 7583              		.align 32
 7586              	.Lubsan_data524:
 7587 2380 00000000 		.quad	.LC3
 7587      00000000 
 7588 2388 3B030000 		.long	827
 7589 238c 27000000 		.long	39
 7590 2390 00000000 		.zero	48
 7590      00000000 
 7590      00000000 
 7590      00000000 
 7590      00000000 
 7591              		.align 32
 7594              	.Lubsan_data525:
 7595 23c0 00000000 		.quad	.LC3
 7595      00000000 
 7596 23c8 3B030000 		.long	827
 7597 23cc 27000000 		.long	39
 7598 23d0 00000000 		.quad	.Lubsan_type29
 7598      00000000 
 7599 23d8 03       		.byte	3
 7600 23d9 02       		.byte	2
 7601 23da 00000000 		.zero	6
 7601      0000
 7602 23e0 00000000 		.zero	32
 7602      00000000 
 7602      00000000 
 7602      00000000 
 7602      00000000 
 7603              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv,"ax
 7604              		.align 2
 7605              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv
 7607              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv:
 7608              	.LASANPC2809:
 7609              	.LFB2809:
 826:/usr/include/c++/9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 7610              		.loc 4 826 7
 7611              		.cfi_startproc
 7612 0000 F30F1EFA 		endbr64
 7613 0004 55       		pushq	%rbp
 7614              		.cfi_def_cfa_offset 16
 7615              		.cfi_offset 6, -16
 7616 0005 4889E5   		movq	%rsp, %rbp
 7617              		.cfi_def_cfa_register 6
 7618 0008 4157     		pushq	%r15
 7619 000a 4156     		pushq	%r14
 7620 000c 4155     		pushq	%r13
 7621 000e 4154     		pushq	%r12
 7622 0010 53       		pushq	%rbx
 7623 0011 4883EC78 		subq	$120, %rsp
 7624              		.cfi_offset 15, -24
 7625              		.cfi_offset 14, -32
 7626              		.cfi_offset 13, -40
 7627              		.cfi_offset 12, -48
 7628              		.cfi_offset 3, -56
 7629 0015 4889BD68 		movq	%rdi, -152(%rbp)
 7629      FFFFFF
 7630 001c 488D9D70 		leaq	-144(%rbp), %rbx
 7630      FFFFFF
 7631 0023 4989DF   		movq	%rbx, %r15
 7632 0026 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 7632      000000
 7633 002d 7412     		je	.L453
 7634 002f BF400000 		movl	$64, %edi
 7634      00
 7635 0034 E8000000 		call	__asan_stack_malloc_0@PLT
 7635      00
 7636              	.LVL8:
 7637 0039 4885C0   		testq	%rax, %rax
 7638 003c 7403     		je	.L453
 7639 003e 4889C3   		movq	%rax, %rbx
 7640              	.L453:
 7641 0041 488D4360 		leaq	96(%rbx), %rax
 7642 0045 4989C6   		movq	%rax, %r14
 7643 0048 48C703B3 		movq	$1102416563, (%rbx)
 7643      8AB541
 7644 004f 488D0500 		leaq	.LC12(%rip), %rax
 7644      000000
 7645 0056 48894308 		movq	%rax, 8(%rbx)
 7646 005a 488D059F 		leaq	.LASANPC2809(%rip), %rax
 7646      FFFFFF
 7647 0061 48894310 		movq	%rax, 16(%rbx)
 7648 0065 4989DC   		movq	%rbx, %r12
 7649 0068 49C1EC03 		shrq	$3, %r12
 7650 006c 41C78424 		movl	$-235802127, 2147450880(%r12)
 7650      0080FF7F 
 7650      F1F1F1F1 
 7651 0078 41C78424 		movl	$-202116352, 2147450884(%r12)
 7651      0480FF7F 
 7651      00F3F3F3 
 826:/usr/include/c++/9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 7652              		.loc 4 826 7
 7653 0084 64488B04 		movq	%fs:40, %rax
 7653      25280000 
 7653      00
 7654 008d 488945C8 		movq	%rax, -56(%rbp)
 7655 0091 31C0     		xorl	%eax, %eax
 827:/usr/include/c++/9/bits/stl_vector.h **** 
 7656              		.loc 4 827 39
 7657 0093 488B8568 		movq	-152(%rbp), %rax
 7657      FFFFFF
 7658 009a 4883BD68 		cmpq	$0, -152(%rbp)
 7658      FFFFFF00 
 7659 00a2 740B     		je	.L457
 7660 00a4 4889C2   		movq	%rax, %rdx
 7661 00a7 83E207   		andl	$7, %edx
 7662 00aa 4885D2   		testq	%rdx, %rdx
 7663 00ad 740F     		je	.L458
 7664              	.L457:
 7665 00af 4889C6   		movq	%rax, %rsi
 7666 00b2 488D3D00 		leaq	.Lubsan_data523(%rip), %rdi
 7666      000000
 7667 00b9 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7667      00
 7668              	.L458:
 7669 00be 488B8568 		movq	-152(%rbp), %rax
 7669      FFFFFF
 7670 00c5 488D5008 		leaq	8(%rax), %rdx
 7671 00c9 4883F8F8 		cmpq	$-8, %rax
 7672 00cd 7216     		jb	.L459
 7673 00cf 488B8568 		movq	-152(%rbp), %rax
 7673      FFFFFF
 7674 00d6 4889C6   		movq	%rax, %rsi
 7675 00d9 488D3D00 		leaq	.Lubsan_data524(%rip), %rdi
 7675      000000
 7676 00e0 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 7676      00
 7677              	.L459:
 7678 00e5 488B8568 		movq	-152(%rbp), %rax
 7678      FFFFFF
 7679 00ec 4C8D6808 		leaq	8(%rax), %r13
 7680 00f0 4C89E8   		movq	%r13, %rax
 7681 00f3 4D85ED   		testq	%r13, %r13
 7682 00f6 740B     		je	.L460
 7683 00f8 4889C2   		movq	%rax, %rdx
 7684 00fb 83E207   		andl	$7, %edx
 7685 00fe 4885D2   		testq	%rdx, %rdx
 7686 0101 740F     		je	.L461
 7687              	.L460:
 7688 0103 4889C6   		movq	%rax, %rsi
 7689 0106 488D3D00 		leaq	.Lubsan_data525(%rip), %rdi
 7689      000000
 7690 010d E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 7690      00
 7691              	.L461:
 827:/usr/include/c++/9/bits/stl_vector.h **** 
 7692              		.loc 4 827 48
 7693 0112 498D46C0 		leaq	-64(%r14), %rax
 7694 0116 4C89EE   		movq	%r13, %rsi
 7695 0119 4889C7   		movq	%rax, %rdi
 7696 011c E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vect
 7696      00
 7697 0121 498D46C0 		leaq	-64(%r14), %rax
 7698 0125 4889C2   		movq	%rax, %rdx
 7699 0128 48C1EA03 		shrq	$3, %rdx
 7700 012c 4881C200 		addq	$2147450880, %rdx
 7700      80FF7F
 7701 0133 0FB612   		movzbl	(%rdx), %edx
 7702 0136 84D2     		testb	%dl, %dl
 7703 0138 7408     		je	.L462
 7704 013a 4889C7   		movq	%rax, %rdi
 7705 013d E8000000 		call	__asan_report_load8@PLT
 7705      00
 7706              	.L462:
 7707 0142 498B46C0 		movq	-64(%r14), %rax
 7708 0146 4889C2   		movq	%rax, %rdx
 826:/usr/include/c++/9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 7709              		.loc 4 826 7
 7710 0149 4939DF   		cmpq	%rbx, %r15
 7711 014c 7422     		je	.L454
 7712 014e 48C7030E 		movq	$1172321806, (%rbx)
 7712      36E045
 7713 0155 48B8F5F5 		movabsq	$-723401728380766731, %rax
 7713      F5F5F5F5 
 7713      F5F5
 7714 015f 49898424 		movq	%rax, 2147450880(%r12)
 7714      0080FF7F 
 7715 0167 488B4338 		movq	56(%rbx), %rax
 7716 016b C60000   		movb	$0, (%rax)
 7717 016e EB0C     		jmp	.L455
 7718              	.L454:
 7719 0170 49C78424 		movq	$0, 2147450880(%r12)
 7719      0080FF7F 
 7719      00000000 
 7720              	.L455:
 827:/usr/include/c++/9/bits/stl_vector.h **** 
 7721              		.loc 4 827 51
 7722 017c 488B45C8 		movq	-56(%rbp), %rax
 7723 0180 64483304 		xorq	%fs:40, %rax
 7723      25280000 
 7723      00
 7724 0189 7405     		je	.L464
 7725 018b E8000000 		call	__stack_chk_fail@PLT
 7725      00
 7726              	.L464:
 7727 0190 4889D0   		movq	%rdx, %rax
 7728 0193 4883C478 		addq	$120, %rsp
 7729 0197 5B       		popq	%rbx
 7730 0198 415C     		popq	%r12
 7731 019a 415D     		popq	%r13
 7732 019c 415E     		popq	%r14
 7733 019e 415F     		popq	%r15
 7734 01a0 5D       		popq	%rbp
 7735              		.cfi_def_cfa 7, 8
 7736 01a1 C3       		ret
 7737              		.cfi_endproc
 7738              	.LFE2809:
 7740              		.section	.rodata
 7741              		.align 32
 7742              	.LC19:
 7743 0620 2F757372 		.string	"/usr/include/c++/9/bits/vector.tcc"
 7743      2F696E63 
 7743      6C756465 
 7743      2F632B2B 
 7743      2F392F62 
 7744 0643 00000000 		.zero	61
 7744      00000000 
 7744      00000000 
 7744      00000000 
 7744      00000000 
 7745              		.section	.data.rel.local
 7746              		.align 32
 7749              	.Lubsan_data526:
 7750 2400 00000000 		.quad	.LC19
 7750      00000000 
 7751 2408 B3010000 		.long	435
 7752 240c 17000000 		.long	23
 7753 2410 00000000 		.quad	.Lubsan_type10
 7753      00000000 
 7754 2418 03       		.byte	3
 7755 2419 04       		.byte	4
 7756 241a 00000000 		.zero	6
 7756      0000
 7757 2420 00000000 		.zero	32
 7757      00000000 
 7757      00000000 
 7757      00000000 
 7757      00000000 
 7758              		.align 32
 7761              	.Lubsan_data527:
 7762 2440 00000000 		.quad	.LC19
 7762      00000000 
 7763 2448 B5010000 		.long	437
 7764 244c 0F000000 		.long	15
 7765 2450 00000000 		.quad	.Lubsan_type10
 7765      00000000 
 7766 2458 03       		.byte	3
 7767 2459 03       		.byte	3
 7768 245a 00000000 		.zero	6
 7768      0000
 7769 2460 00000000 		.zero	32
 7769      00000000 
 7769      00000000 
 7769      00000000 
 7769      00000000 
 7770              		.align 32
 7773              	.Lubsan_data528:
 7774 2480 00000000 		.quad	.LC19
 7774      00000000 
 7775 2488 B6010000 		.long	438
 7776 248c 0F000000 		.long	15
 7777 2490 00000000 		.quad	.Lubsan_type10
 7777      00000000 
 7778 2498 03       		.byte	3
 7779 2499 03       		.byte	3
 7780 249a 00000000 		.zero	6
 7780      0000
 7781 24a0 00000000 		.zero	32
 7781      00000000 
 7781      00000000 
 7781      00000000 
 7781      00000000 
 7782              		.align 32
 7785              	.Lubsan_data529:
 7786 24c0 00000000 		.quad	.LC19
 7786      00000000 
 7787 24c8 B6010000 		.long	438
 7788 24cc 0F000000 		.long	15
 7789 24d0 00000000 		.zero	48
 7789      00000000 
 7789      00000000 
 7789      00000000 
 7789      00000000 
 7790              		.align 32
 7793              	.Lubsan_data530:
 7794 2500 00000000 		.quad	.LC19
 7794      00000000 
 7795 2508 B7010000 		.long	439
 7796 250c 33000000 		.long	51
 7797 2510 00000000 		.quad	.Lubsan_type10
 7797      00000000 
 7798 2518 03       		.byte	3
 7799 2519 04       		.byte	4
 7800 251a 00000000 		.zero	6
 7800      0000
 7801 2520 00000000 		.zero	32
 7801      00000000 
 7801      00000000 
 7801      00000000 
 7801      00000000 
 7802              		.align 32
 7805              	.Lubsan_data531:
 7806 2540 00000000 		.quad	.LC19
 7806      00000000 
 7807 2548 B7010000 		.long	439
 7808 254c 33000000 		.long	51
 7809 2550 00000000 		.quad	.Lubsan_type16
 7809      00000000 
 7810 2558 03       		.byte	3
 7811 2559 02       		.byte	2
 7812 255a 00000000 		.zero	6
 7812      0000
 7813 2560 00000000 		.zero	32
 7813      00000000 
 7813      00000000 
 7813      00000000 
 7813      00000000 
 7814              		.align 32
 7817              	.Lubsan_data532:
 7818 2580 00000000 		.quad	.LC19
 7818      00000000 
 7819 2588 B8010000 		.long	440
 7820 258c 0F000000 		.long	15
 7821 2590 00000000 		.quad	.Lubsan_type10
 7821      00000000 
 7822 2598 03       		.byte	3
 7823 2599 03       		.byte	3
 7824 259a 00000000 		.zero	6
 7824      0000
 7825 25a0 00000000 		.zero	32
 7825      00000000 
 7825      00000000 
 7825      00000000 
 7825      00000000 
 7826              		.align 32
 7829              	.Lubsan_data533:
 7830 25c0 00000000 		.quad	.LC19
 7830      00000000 
 7831 25c8 B8010000 		.long	440
 7832 25cc 0F000000 		.long	15
 7833 25d0 00000000 		.quad	.Lubsan_type8
 7833      00000000 
 7834 25d8 03       		.byte	3
 7835 25d9 04       		.byte	4
 7836 25da 00000000 		.zero	6
 7836      0000
 7837 25e0 00000000 		.zero	32
 7837      00000000 
 7837      00000000 
 7837      00000000 
 7837      00000000 
 7838              		.align 32
 7841              	.Lubsan_data534:
 7842 2600 00000000 		.quad	.LC19
 7842      00000000 
 7843 2608 C1010000 		.long	449
 7844 260c 1C000000 		.long	28
 7845 2610 00000000 		.quad	.Lubsan_type40
 7845      00000000 
 7846 2618 03       		.byte	3
 7847 2619 02       		.byte	2
 7848 261a 00000000 		.zero	6
 7848      0000
 7849 2620 00000000 		.zero	32
 7849      00000000 
 7849      00000000 
 7849      00000000 
 7849      00000000 
 7850              		.align 32
 7853              	.Lubsan_data535:
 7854 2640 00000000 		.quad	.LC19
 7854      00000000 
 7855 2648 C1010000 		.long	449
 7856 264c 1C000000 		.long	28
 7857 2650 00000000 		.zero	48
 7857      00000000 
 7857      00000000 
 7857      00000000 
 7857      00000000 
 7858              		.align 32
 7861              	.Lubsan_data536:
 7862 2680 00000000 		.quad	.LC19
 7862      00000000 
 7863 2688 C1010000 		.long	449
 7864 268c 23000000 		.long	35
 7865 2690 00000000 		.quad	.Lubsan_type10
 7865      00000000 
 7866 2698 03       		.byte	3
 7867 2699 03       		.byte	3
 7868 269a 00000000 		.zero	6
 7868      0000
 7869 26a0 00000000 		.zero	32
 7869      00000000 
 7869      00000000 
 7869      00000000 
 7869      00000000 
 7870              		.align 32
 7873              	.Lubsan_data537:
 7874 26c0 00000000 		.quad	.LC19
 7874      00000000 
 7875 26c8 C1010000 		.long	449
 7876 26cc 1C000000 		.long	28
 7877 26d0 00000000 		.quad	.Lubsan_type28
 7877      00000000 
 7878 26d8 00       		.byte	0
 7879 26d9 02       		.byte	2
 7880 26da 00000000 		.zero	6
 7880      0000
 7881 26e0 00000000 		.zero	32
 7881      00000000 
 7881      00000000 
 7881      00000000 
 7881      00000000 
 7882              		.align 32
 7885              	.Lubsan_data538:
 7886 2700 00000000 		.quad	.LC19
 7886      00000000 
 7887 2708 CE010000 		.long	462
 7888 270c 27000000 		.long	39
 7889 2710 00000000 		.quad	.Lubsan_type10
 7889      00000000 
 7890 2718 03       		.byte	3
 7891 2719 03       		.byte	3
 7892 271a 00000000 		.zero	6
 7892      0000
 7893 2720 00000000 		.zero	32
 7893      00000000 
 7893      00000000 
 7893      00000000 
 7893      00000000 
 7894              		.align 32
 7897              	.Lubsan_data539:
 7898 2740 00000000 		.quad	.LC19
 7898      00000000 
 7899 2748 CE010000 		.long	462
 7900 274c 27000000 		.long	39
 7901 2750 00000000 		.quad	.Lubsan_type8
 7901      00000000 
 7902 2758 03       		.byte	3
 7903 2759 04       		.byte	4
 7904 275a 00000000 		.zero	6
 7904      0000
 7905 2760 00000000 		.zero	32
 7905      00000000 
 7905      00000000 
 7905      00000000 
 7905      00000000 
 7906              		.data
 7907              		.align 32
 7910              	.Lubsan_type41:
 7913 0a04 27737472 		.string	"'struct _Tp_alloc_type'"
 7913      75637420 
 7913      5F54705F 
 7913      616C6C6F 
 7913      635F7479 
 7914 0a1c 00000000 		.zero	36
 7914      00000000 
 7914      00000000 
 7914      00000000 
 7914      00000000 
 7915              		.section	.data.rel.local
 7916              		.align 32
 7919              	.Lubsan_data540:
 7920 2780 00000000 		.quad	.LC19
 7920      00000000 
 7921 2788 CD010000 		.long	461
 7922 278c 22000000 		.long	34
 7923 2790 00000000 		.quad	.Lubsan_type41
 7923      00000000 
 7924 2798 00       		.byte	0
 7925 2799 02       		.byte	2
 7926 279a 00000000 		.zero	6
 7926      0000
 7927 27a0 00000000 		.zero	32
 7927      00000000 
 7927      00000000 
 7927      00000000 
 7927      00000000 
 7928              		.align 32
 7931              	.Lubsan_data541:
 7932 27c0 00000000 		.quad	.LC19
 7932      00000000 
 7933 27c8 CD010000 		.long	461
 7934 27cc 22000000 		.long	34
 7935 27d0 00000000 		.quad	.Lubsan_type29
 7935      00000000 
 7936 27d8 03       		.byte	3
 7937 27d9 00       		.byte	0
 7938 27da 00000000 		.zero	6
 7938      0000
 7939 27e0 00000000 		.zero	32
 7939      00000000 
 7939      00000000 
 7939      00000000 
 7939      00000000 
 7940              		.align 32
 7943              	.Lubsan_data542:
 7944 2800 00000000 		.quad	.LC19
 7944      00000000 
 7945 2808 D0010000 		.long	464
 7946 280c 08000000 		.long	8
 7947 2810 00000000 		.zero	48
 7947      00000000 
 7947      00000000 
 7947      00000000 
 7947      00000000 
 7948              		.align 32
 7951              	.Lubsan_data543:
 7952 2840 00000000 		.quad	.LC19
 7952      00000000 
 7953 2848 D3010000 		.long	467
 7954 284c 28000000 		.long	40
 7955 2850 00000000 		.quad	.Lubsan_type10
 7955      00000000 
 7956 2858 03       		.byte	3
 7957 2859 03       		.byte	3
 7958 285a 00000000 		.zero	6
 7958      0000
 7959 2860 00000000 		.zero	32
 7959      00000000 
 7959      00000000 
 7959      00000000 
 7959      00000000 
 7960              		.align 32
 7963              	.Lubsan_data544:
 7964 2880 00000000 		.quad	.LC19
 7964      00000000 
 7965 2888 D3010000 		.long	467
 7966 288c 28000000 		.long	40
 7967 2890 00000000 		.quad	.Lubsan_type8
 7967      00000000 
 7968 2898 03       		.byte	3
 7969 2899 04       		.byte	4
 7970 289a 00000000 		.zero	6
 7970      0000
 7971 28a0 00000000 		.zero	32
 7971      00000000 
 7971      00000000 
 7971      00000000 
 7971      00000000 
 7972              		.align 32
 7975              	.Lubsan_data545:
 7976 28c0 00000000 		.quad	.LC19
 7976      00000000 
 7977 28c8 D2010000 		.long	466
 7978 28cc 22000000 		.long	34
 7979 28d0 00000000 		.quad	.Lubsan_type41
 7979      00000000 
 7980 28d8 00       		.byte	0
 7981 28d9 02       		.byte	2
 7982 28da 00000000 		.zero	6
 7982      0000
 7983 28e0 00000000 		.zero	32
 7983      00000000 
 7983      00000000 
 7983      00000000 
 7983      00000000 
 7984              		.align 32
 7987              	.Lubsan_data546:
 7988 2900 00000000 		.quad	.LC19
 7988      00000000 
 7989 2908 D2010000 		.long	466
 7990 290c 22000000 		.long	34
 7991 2910 00000000 		.quad	.Lubsan_type29
 7991      00000000 
 7992 2918 03       		.byte	3
 7993 2919 00       		.byte	0
 7994 291a 00000000 		.zero	6
 7994      0000
 7995 2920 00000000 		.zero	32
 7995      00000000 
 7995      00000000 
 7995      00000000 
 7995      00000000 
 7996              		.align 32
 7999              	.Lubsan_data547:
 8000 2940 00000000 		.quad	.LC19
 8000      00000000 
 8001 2948 F4010000 		.long	500
 8002 294c 14000000 		.long	20
 8003 2950 00000000 		.quad	.Lubsan_type10
 8003      00000000 
 8004 2958 03       		.byte	3
 8005 2959 03       		.byte	3
 8006 295a 00000000 		.zero	6
 8006      0000
 8007 2960 00000000 		.zero	32
 8007      00000000 
 8007      00000000 
 8007      00000000 
 8007      00000000 
 8008              		.align 32
 8011              	.Lubsan_data548:
 8012 2980 00000000 		.quad	.LC19
 8012      00000000 
 8013 2988 F4010000 		.long	500
 8014 298c 14000000 		.long	20
 8015 2990 00000000 		.quad	.Lubsan_type8
 8015      00000000 
 8016 2998 03       		.byte	3
 8017 2999 04       		.byte	4
 8018 299a 00000000 		.zero	6
 8018      0000
 8019 29a0 00000000 		.zero	32
 8019      00000000 
 8019      00000000 
 8019      00000000 
 8019      00000000 
 8020              		.align 32
 8023              	.Lubsan_data549:
 8024 29c0 00000000 		.quad	.LC19
 8024      00000000 
 8025 29c8 F5010000 		.long	501
 8026 29cc 15000000 		.long	21
 8027 29d0 00000000 		.quad	.Lubsan_type10
 8027      00000000 
 8028 29d8 03       		.byte	3
 8029 29d9 03       		.byte	3
 8030 29da 00000000 		.zero	6
 8030      0000
 8031 29e0 00000000 		.zero	32
 8031      00000000 
 8031      00000000 
 8031      00000000 
 8031      00000000 
 8032              		.align 32
 8035              	.Lubsan_data550:
 8036 2a00 00000000 		.quad	.LC19
 8036      00000000 
 8037 2a08 F5010000 		.long	501
 8038 2a0c 15000000 		.long	21
 8039 2a10 00000000 		.zero	48
 8039      00000000 
 8039      00000000 
 8039      00000000 
 8039      00000000 
 8040              		.align 32
 8043              	.Lubsan_data551:
 8044 2a40 00000000 		.quad	.LC19
 8044      00000000 
 8045 2a48 F6010000 		.long	502
 8046 2a4c 07000000 		.long	7
 8047 2a50 00000000 		.quad	.Lubsan_type10
 8047      00000000 
 8048 2a58 03       		.byte	3
 8049 2a59 03       		.byte	3
 8050 2a5a 00000000 		.zero	6
 8050      0000
 8051 2a60 00000000 		.zero	32
 8051      00000000 
 8051      00000000 
 8051      00000000 
 8051      00000000 
 8052              		.align 32
 8055              	.Lubsan_data552:
 8056 2a80 00000000 		.quad	.LC19
 8056      00000000 
 8057 2a88 F7010000 		.long	503
 8058 2a8c 07000000 		.long	7
 8059 2a90 00000000 		.quad	.Lubsan_type10
 8059      00000000 
 8060 2a98 03       		.byte	3
 8061 2a99 03       		.byte	3
 8062 2a9a 00000000 		.zero	6
 8062      0000
 8063 2aa0 00000000 		.zero	32
 8063      00000000 
 8063      00000000 
 8063      00000000 
 8063      00000000 
 8064              		.align 32
 8067              	.Lubsan_data553:
 8068 2ac0 00000000 		.quad	.LC19
 8068      00000000 
 8069 2ac8 F7010000 		.long	503
 8070 2acc 07000000 		.long	7
 8071 2ad0 00000000 		.zero	48
 8071      00000000 
 8071      00000000 
 8071      00000000 
 8071      00000000 
 8072              		.align 32
 8075              	.Lubsan_data554:
 8076 2b00 00000000 		.quad	.LC19
 8076      00000000 
 8077 2b08 F8010000 		.long	504
 8078 2b0c 35000000 		.long	53
 8079 2b10 00000000 		.zero	48
 8079      00000000 
 8079      00000000 
 8079      00000000 
 8079      00000000 
 8080              		.align 32
 8083              	.Lubsan_data555:
 8084 2b40 00000000 		.quad	.LC19
 8084      00000000 
 8085 2b48 F8010000 		.long	504
 8086 2b4c 07000000 		.long	7
 8087 2b50 00000000 		.quad	.Lubsan_type10
 8087      00000000 
 8088 2b58 03       		.byte	3
 8089 2b59 03       		.byte	3
 8090 2b5a 00000000 		.zero	6
 8090      0000
 8091 2b60 00000000 		.zero	32
 8091      00000000 
 8091      00000000 
 8091      00000000 
 8091      00000000 
 8092              		.align 32
 8095              	.Lubsan_data556:
 8096 2b80 00000000 		.quad	.LC19
 8096      00000000 
 8097 2b88 F8010000 		.long	504
 8098 2b8c 07000000 		.long	7
 8099 2b90 00000000 		.zero	48
 8099      00000000 
 8099      00000000 
 8099      00000000 
 8099      00000000 
 8100              		.align 32
 8103              	.Lubsan_data557:
 8104 2bc0 00000000 		.quad	.LC19
 8104      00000000 
 8105 2bc8 E8010000 		.long	488
 8106 2bcc 1C000000 		.long	28
 8107 2bd0 00000000 		.zero	48
 8107      00000000 
 8107      00000000 
 8107      00000000 
 8107      00000000 
 8108              		.align 32
 8111              	.Lubsan_data558:
 8112 2c00 00000000 		.quad	.LC19
 8112      00000000 
 8113 2c08 E8010000 		.long	488
 8114 2c0c 23000000 		.long	35
 8115 2c10 00000000 		.quad	.Lubsan_type10
 8115      00000000 
 8116 2c18 03       		.byte	3
 8117 2c19 03       		.byte	3
 8118 2c1a 00000000 		.zero	6
 8118      0000
 8119 2c20 00000000 		.zero	32
 8119      00000000 
 8119      00000000 
 8119      00000000 
 8119      00000000 
 8120              		.align 32
 8123              	.Lubsan_data559:
 8124 2c40 00000000 		.quad	.LC19
 8124      00000000 
 8125 2c48 E8010000 		.long	488
 8126 2c4c 1C000000 		.long	28
 8127 2c50 00000000 		.quad	.Lubsan_type28
 8127      00000000 
 8128 2c58 00       		.byte	0
 8129 2c59 02       		.byte	2
 8130 2c5a 00000000 		.zero	6
 8130      0000
 8131 2c60 00000000 		.zero	32
 8131      00000000 
 8131      00000000 
 8131      00000000 
 8131      00000000 
 8132              		.align 32
 8135              	.Lubsan_data560:
 8136 2c80 00000000 		.quad	.LC19
 8136      00000000 
 8137 2c88 EB010000 		.long	491
 8138 2c8c 42000000 		.long	66
 8139 2c90 00000000 		.quad	.Lubsan_type10
 8139      00000000 
 8140 2c98 03       		.byte	3
 8141 2c99 03       		.byte	3
 8142 2c9a 00000000 		.zero	6
 8142      0000
 8143 2ca0 00000000 		.zero	32
 8143      00000000 
 8143      00000000 
 8143      00000000 
 8143      00000000 
 8144              		.align 32
 8147              	.Lubsan_data561:
 8148 2cc0 00000000 		.quad	.LC19
 8148      00000000 
 8149 2cc8 EB010000 		.long	491
 8150 2ccc 42000000 		.long	66
 8151 2cd0 00000000 		.quad	.Lubsan_type8
 8151      00000000 
 8152 2cd8 03       		.byte	3
 8153 2cd9 04       		.byte	4
 8154 2cda 00000000 		.zero	6
 8154      0000
 8155 2ce0 00000000 		.zero	32
 8155      00000000 
 8155      00000000 
 8155      00000000 
 8155      00000000 
 8156              		.align 32
 8159              	.Lubsan_data562:
 8160 2d00 00000000 		.quad	.LC19
 8160      00000000 
 8161 2d08 EB010000 		.long	491
 8162 2d0c 13000000 		.long	19
 8163 2d10 00000000 		.quad	.Lubsan_type6
 8163      00000000 
 8164 2d18 00       		.byte	0
 8165 2d19 02       		.byte	2
 8166 2d1a 00000000 		.zero	6
 8166      0000
 8167 2d20 00000000 		.zero	32
 8167      00000000 
 8167      00000000 
 8167      00000000 
 8167      00000000 
 8168              		.align 32
 8171              	.Lubsan_data563:
 8172 2d40 00000000 		.quad	.LC19
 8172      00000000 
 8173 2d48 EC010000 		.long	492
 8174 2d4c 11000000 		.long	17
 8175 2d50 00000000 		.quad	.Lubsan_type10
 8175      00000000 
 8176 2d58 03       		.byte	3
 8177 2d59 03       		.byte	3
 8178 2d5a 00000000 		.zero	6
 8178      0000
 8179 2d60 00000000 		.zero	32
 8179      00000000 
 8179      00000000 
 8179      00000000 
 8179      00000000 
 8180              		.align 32
 8183              	.Lubsan_data564:
 8184 2d80 00000000 		.quad	.LC19
 8184      00000000 
 8185 2d88 EC010000 		.long	492
 8186 2d8c 11000000 		.long	17
 8187 2d90 00000000 		.quad	.Lubsan_type8
 8187      00000000 
 8188 2d98 03       		.byte	3
 8189 2d99 04       		.byte	4
 8190 2d9a 00000000 		.zero	6
 8190      0000
 8191 2da0 00000000 		.zero	32
 8191      00000000 
 8191      00000000 
 8191      00000000 
 8191      00000000 
 8192              		.section	.rodata
 8193              		.align 8
 8194              	.LC20:
 8195 0680 32203332 		.string	"2 32 8 9 <unknown> 64 8 14 __position:427"
 8195      20382039 
 8195      203C756E 
 8195      6B6E6F77 
 8195      6E3E2036 
 8196 06aa 00000000 		.align 32
 8196      00000000 
 8196      00000000 
 8196      00000000 
 8196      00000000 
 8197              	.LC21:
 8198 06c0 76656374 		.string	"vector::_M_realloc_insert"
 8198      6F723A3A 
 8198      5F4D5F72 
 8198      65616C6C 
 8198      6F635F69 
 8199 06da 00000000 		.zero	38
 8199      00000000 
 8199      00000000 
 8199      00000000 
 8199      00000000 
 8200              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reall
 8201              		.align 2
 8202              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insert
 8204              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_
 8205              	.LASANPC2810:
 8206              	.LFB2810:
 8207              		.file 14 "/usr/include/c++/9/bits/vector.tcc"
   1:/usr/include/c++/9/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/c++/9/bits/vector.tcc **** 
   3:/usr/include/c++/9/bits/vector.tcc **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/vector.tcc **** //
   5:/usr/include/c++/9/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/vector.tcc **** // any later version.
  10:/usr/include/c++/9/bits/vector.tcc **** 
  11:/usr/include/c++/9/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/vector.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/vector.tcc **** 
  16:/usr/include/c++/9/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/vector.tcc **** 
  20:/usr/include/c++/9/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/vector.tcc **** 
  25:/usr/include/c++/9/bits/vector.tcc **** /*
  26:/usr/include/c++/9/bits/vector.tcc ****  *
  27:/usr/include/c++/9/bits/vector.tcc ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/vector.tcc ****  *
  30:/usr/include/c++/9/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/vector.tcc ****  *
  38:/usr/include/c++/9/bits/vector.tcc ****  *
  39:/usr/include/c++/9/bits/vector.tcc ****  * Copyright (c) 1996
  40:/usr/include/c++/9/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/vector.tcc ****  *
  42:/usr/include/c++/9/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/9/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/vector.tcc ****  */
  50:/usr/include/c++/9/bits/vector.tcc **** 
  51:/usr/include/c++/9/bits/vector.tcc **** /** @file bits/vector.tcc
  52:/usr/include/c++/9/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/9/bits/vector.tcc ****  */
  55:/usr/include/c++/9/bits/vector.tcc **** 
  56:/usr/include/c++/9/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/usr/include/c++/9/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/usr/include/c++/9/bits/vector.tcc **** 
  59:/usr/include/c++/9/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/9/bits/vector.tcc **** {
  61:/usr/include/c++/9/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/c++/9/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  63:/usr/include/c++/9/bits/vector.tcc **** 
  64:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  65:/usr/include/c++/9/bits/vector.tcc ****     void
  66:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  67:/usr/include/c++/9/bits/vector.tcc ****     reserve(size_type __n)
  68:/usr/include/c++/9/bits/vector.tcc ****     {
  69:/usr/include/c++/9/bits/vector.tcc ****       if (__n > this->max_size())
  70:/usr/include/c++/9/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  71:/usr/include/c++/9/bits/vector.tcc ****       if (this->capacity() < __n)
  72:/usr/include/c++/9/bits/vector.tcc **** 	{
  73:/usr/include/c++/9/bits/vector.tcc **** 	  const size_type __old_size = size();
  74:/usr/include/c++/9/bits/vector.tcc **** 	  pointer __tmp;
  75:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
  76:/usr/include/c++/9/bits/vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
  77:/usr/include/c++/9/bits/vector.tcc **** 	    {
  78:/usr/include/c++/9/bits/vector.tcc **** 	      __tmp = this->_M_allocate(__n);
  79:/usr/include/c++/9/bits/vector.tcc **** 	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
  80:/usr/include/c++/9/bits/vector.tcc **** 			  __tmp, _M_get_Tp_allocator());
  81:/usr/include/c++/9/bits/vector.tcc **** 	    }
  82:/usr/include/c++/9/bits/vector.tcc **** 	  else
  83:/usr/include/c++/9/bits/vector.tcc **** #endif
  84:/usr/include/c++/9/bits/vector.tcc **** 	    {
  85:/usr/include/c++/9/bits/vector.tcc **** 	      __tmp = _M_allocate_and_copy(__n,
  86:/usr/include/c++/9/bits/vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  87:/usr/include/c++/9/bits/vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  88:/usr/include/c++/9/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  89:/usr/include/c++/9/bits/vector.tcc **** 			    _M_get_Tp_allocator());
  90:/usr/include/c++/9/bits/vector.tcc **** 	    }
  91:/usr/include/c++/9/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
  92:/usr/include/c++/9/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  93:/usr/include/c++/9/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  94:/usr/include/c++/9/bits/vector.tcc **** 			- this->_M_impl._M_start);
  95:/usr/include/c++/9/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  96:/usr/include/c++/9/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  97:/usr/include/c++/9/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  98:/usr/include/c++/9/bits/vector.tcc **** 	}
  99:/usr/include/c++/9/bits/vector.tcc ****     }
 100:/usr/include/c++/9/bits/vector.tcc **** 
 101:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 102:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 103:/usr/include/c++/9/bits/vector.tcc ****     template<typename... _Args>
 104:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus > 201402L
 105:/usr/include/c++/9/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::reference
 106:/usr/include/c++/9/bits/vector.tcc **** #else
 107:/usr/include/c++/9/bits/vector.tcc ****       void
 108:/usr/include/c++/9/bits/vector.tcc **** #endif
 109:/usr/include/c++/9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 110:/usr/include/c++/9/bits/vector.tcc ****       emplace_back(_Args&&... __args)
 111:/usr/include/c++/9/bits/vector.tcc ****       {
 112:/usr/include/c++/9/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 113:/usr/include/c++/9/bits/vector.tcc **** 	  {
 114:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 115:/usr/include/c++/9/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 116:/usr/include/c++/9/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 117:/usr/include/c++/9/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 118:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 119:/usr/include/c++/9/bits/vector.tcc **** 	  }
 120:/usr/include/c++/9/bits/vector.tcc **** 	else
 121:/usr/include/c++/9/bits/vector.tcc **** 	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 122:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus > 201402L
 123:/usr/include/c++/9/bits/vector.tcc **** 	return back();
 124:/usr/include/c++/9/bits/vector.tcc **** #endif
 125:/usr/include/c++/9/bits/vector.tcc ****       }
 126:/usr/include/c++/9/bits/vector.tcc **** #endif
 127:/usr/include/c++/9/bits/vector.tcc **** 
 128:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 129:/usr/include/c++/9/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 130:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 131:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 132:/usr/include/c++/9/bits/vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 133:/usr/include/c++/9/bits/vector.tcc **** #else
 134:/usr/include/c++/9/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 135:/usr/include/c++/9/bits/vector.tcc **** #endif
 136:/usr/include/c++/9/bits/vector.tcc ****     {
 137:/usr/include/c++/9/bits/vector.tcc ****       const size_type __n = __position - begin();
 138:/usr/include/c++/9/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 139:/usr/include/c++/9/bits/vector.tcc **** 	if (__position == end())
 140:/usr/include/c++/9/bits/vector.tcc **** 	  {
 141:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 142:/usr/include/c++/9/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 143:/usr/include/c++/9/bits/vector.tcc **** 				     __x);
 144:/usr/include/c++/9/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 145:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 146:/usr/include/c++/9/bits/vector.tcc **** 	  }
 147:/usr/include/c++/9/bits/vector.tcc **** 	else
 148:/usr/include/c++/9/bits/vector.tcc **** 	  {
 149:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 150:/usr/include/c++/9/bits/vector.tcc **** 	    const auto __pos = begin() + (__position - cbegin());
 151:/usr/include/c++/9/bits/vector.tcc **** 	    // __x could be an existing element of this vector, so make a
 152:/usr/include/c++/9/bits/vector.tcc **** 	    // copy of it before _M_insert_aux moves elements around.
 153:/usr/include/c++/9/bits/vector.tcc **** 	    _Temporary_value __x_copy(this, __x);
 154:/usr/include/c++/9/bits/vector.tcc **** 	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 155:/usr/include/c++/9/bits/vector.tcc **** #else
 156:/usr/include/c++/9/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 157:/usr/include/c++/9/bits/vector.tcc **** #endif
 158:/usr/include/c++/9/bits/vector.tcc **** 	  }
 159:/usr/include/c++/9/bits/vector.tcc ****       else
 160:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 161:/usr/include/c++/9/bits/vector.tcc **** 	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 162:/usr/include/c++/9/bits/vector.tcc **** #else
 163:/usr/include/c++/9/bits/vector.tcc **** 	_M_realloc_insert(__position, __x);
 164:/usr/include/c++/9/bits/vector.tcc **** #endif
 165:/usr/include/c++/9/bits/vector.tcc **** 
 166:/usr/include/c++/9/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 167:/usr/include/c++/9/bits/vector.tcc ****     }
 168:/usr/include/c++/9/bits/vector.tcc **** 
 169:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 170:/usr/include/c++/9/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 171:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 172:/usr/include/c++/9/bits/vector.tcc ****     _M_erase(iterator __position)
 173:/usr/include/c++/9/bits/vector.tcc ****     {
 174:/usr/include/c++/9/bits/vector.tcc ****       if (__position + 1 != end())
 175:/usr/include/c++/9/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 176:/usr/include/c++/9/bits/vector.tcc ****       --this->_M_impl._M_finish;
 177:/usr/include/c++/9/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 178:/usr/include/c++/9/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 179:/usr/include/c++/9/bits/vector.tcc ****       return __position;
 180:/usr/include/c++/9/bits/vector.tcc ****     }
 181:/usr/include/c++/9/bits/vector.tcc **** 
 182:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 183:/usr/include/c++/9/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 184:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 185:/usr/include/c++/9/bits/vector.tcc ****     _M_erase(iterator __first, iterator __last)
 186:/usr/include/c++/9/bits/vector.tcc ****     {
 187:/usr/include/c++/9/bits/vector.tcc ****       if (__first != __last)
 188:/usr/include/c++/9/bits/vector.tcc **** 	{
 189:/usr/include/c++/9/bits/vector.tcc **** 	  if (__last != end())
 190:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 191:/usr/include/c++/9/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 192:/usr/include/c++/9/bits/vector.tcc **** 	}
 193:/usr/include/c++/9/bits/vector.tcc ****       return __first;
 194:/usr/include/c++/9/bits/vector.tcc ****     }
 195:/usr/include/c++/9/bits/vector.tcc **** 
 196:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 197:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 198:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 199:/usr/include/c++/9/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 200:/usr/include/c++/9/bits/vector.tcc ****     {
 201:/usr/include/c++/9/bits/vector.tcc ****       if (&__x != this)
 202:/usr/include/c++/9/bits/vector.tcc **** 	{
 203:/usr/include/c++/9/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
 204:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 205:/usr/include/c++/9/bits/vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 206:/usr/include/c++/9/bits/vector.tcc **** 	    {
 207:/usr/include/c++/9/bits/vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 208:/usr/include/c++/9/bits/vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 209:/usr/include/c++/9/bits/vector.tcc **** 	        {
 210:/usr/include/c++/9/bits/vector.tcc **** 		  // replacement allocator cannot free existing storage
 211:/usr/include/c++/9/bits/vector.tcc **** 		  this->clear();
 212:/usr/include/c++/9/bits/vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 213:/usr/include/c++/9/bits/vector.tcc **** 				this->_M_impl._M_end_of_storage
 214:/usr/include/c++/9/bits/vector.tcc **** 				- this->_M_impl._M_start);
 215:/usr/include/c++/9/bits/vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 216:/usr/include/c++/9/bits/vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 217:/usr/include/c++/9/bits/vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 218:/usr/include/c++/9/bits/vector.tcc **** 		}
 219:/usr/include/c++/9/bits/vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 220:/usr/include/c++/9/bits/vector.tcc **** 				   __x._M_get_Tp_allocator());
 221:/usr/include/c++/9/bits/vector.tcc **** 	    }
 222:/usr/include/c++/9/bits/vector.tcc **** #endif
 223:/usr/include/c++/9/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
 224:/usr/include/c++/9/bits/vector.tcc **** 	  if (__xlen > capacity())
 225:/usr/include/c++/9/bits/vector.tcc **** 	    {
 226:/usr/include/c++/9/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 227:/usr/include/c++/9/bits/vector.tcc **** 						   __x.end());
 228:/usr/include/c++/9/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 229:/usr/include/c++/9/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 230:/usr/include/c++/9/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 231:/usr/include/c++/9/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 232:/usr/include/c++/9/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 233:/usr/include/c++/9/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 234:/usr/include/c++/9/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 235:/usr/include/c++/9/bits/vector.tcc **** 	    }
 236:/usr/include/c++/9/bits/vector.tcc **** 	  else if (size() >= __xlen)
 237:/usr/include/c++/9/bits/vector.tcc **** 	    {
 238:/usr/include/c++/9/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 239:/usr/include/c++/9/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 240:/usr/include/c++/9/bits/vector.tcc **** 	    }
 241:/usr/include/c++/9/bits/vector.tcc **** 	  else
 242:/usr/include/c++/9/bits/vector.tcc **** 	    {
 243:/usr/include/c++/9/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 244:/usr/include/c++/9/bits/vector.tcc **** 			this->_M_impl._M_start);
 245:/usr/include/c++/9/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 246:/usr/include/c++/9/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 247:/usr/include/c++/9/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 248:/usr/include/c++/9/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 249:/usr/include/c++/9/bits/vector.tcc **** 	    }
 250:/usr/include/c++/9/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 251:/usr/include/c++/9/bits/vector.tcc **** 	}
 252:/usr/include/c++/9/bits/vector.tcc ****       return *this;
 253:/usr/include/c++/9/bits/vector.tcc ****     }
 254:/usr/include/c++/9/bits/vector.tcc **** 
 255:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 256:/usr/include/c++/9/bits/vector.tcc ****     void
 257:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 258:/usr/include/c++/9/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 259:/usr/include/c++/9/bits/vector.tcc ****     {
 260:/usr/include/c++/9/bits/vector.tcc ****       if (__n > capacity())
 261:/usr/include/c++/9/bits/vector.tcc **** 	{
 262:/usr/include/c++/9/bits/vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 263:/usr/include/c++/9/bits/vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 264:/usr/include/c++/9/bits/vector.tcc **** 	}
 265:/usr/include/c++/9/bits/vector.tcc ****       else if (__n > size())
 266:/usr/include/c++/9/bits/vector.tcc **** 	{
 267:/usr/include/c++/9/bits/vector.tcc **** 	  std::fill(begin(), end(), __val);
 268:/usr/include/c++/9/bits/vector.tcc **** 	  const size_type __add = __n - size();
 269:/usr/include/c++/9/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);
 270:/usr/include/c++/9/bits/vector.tcc **** 	  this->_M_impl._M_finish =
 271:/usr/include/c++/9/bits/vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 272:/usr/include/c++/9/bits/vector.tcc **** 					  __add, __val, _M_get_Tp_allocator());
 273:/usr/include/c++/9/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);
 274:/usr/include/c++/9/bits/vector.tcc **** 	}
 275:/usr/include/c++/9/bits/vector.tcc ****       else
 276:/usr/include/c++/9/bits/vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 277:/usr/include/c++/9/bits/vector.tcc ****     }
 278:/usr/include/c++/9/bits/vector.tcc **** 
 279:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 280:/usr/include/c++/9/bits/vector.tcc ****     template<typename _InputIterator>
 281:/usr/include/c++/9/bits/vector.tcc ****       void
 282:/usr/include/c++/9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 283:/usr/include/c++/9/bits/vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 284:/usr/include/c++/9/bits/vector.tcc **** 		    std::input_iterator_tag)
 285:/usr/include/c++/9/bits/vector.tcc ****       {
 286:/usr/include/c++/9/bits/vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 287:/usr/include/c++/9/bits/vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 288:/usr/include/c++/9/bits/vector.tcc **** 	     ++__cur, (void)++__first)
 289:/usr/include/c++/9/bits/vector.tcc **** 	  *__cur = *__first;
 290:/usr/include/c++/9/bits/vector.tcc **** 	if (__first == __last)
 291:/usr/include/c++/9/bits/vector.tcc **** 	  _M_erase_at_end(__cur);
 292:/usr/include/c++/9/bits/vector.tcc **** 	else
 293:/usr/include/c++/9/bits/vector.tcc **** 	  _M_range_insert(end(), __first, __last,
 294:/usr/include/c++/9/bits/vector.tcc **** 			  std::__iterator_category(__first));
 295:/usr/include/c++/9/bits/vector.tcc ****       }
 296:/usr/include/c++/9/bits/vector.tcc **** 
 297:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 298:/usr/include/c++/9/bits/vector.tcc ****     template<typename _ForwardIterator>
 299:/usr/include/c++/9/bits/vector.tcc ****       void
 300:/usr/include/c++/9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 301:/usr/include/c++/9/bits/vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 302:/usr/include/c++/9/bits/vector.tcc **** 		    std::forward_iterator_tag)
 303:/usr/include/c++/9/bits/vector.tcc ****       {
 304:/usr/include/c++/9/bits/vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 305:/usr/include/c++/9/bits/vector.tcc **** 
 306:/usr/include/c++/9/bits/vector.tcc **** 	if (__len > capacity())
 307:/usr/include/c++/9/bits/vector.tcc **** 	  {
 308:/usr/include/c++/9/bits/vector.tcc **** 	    _S_check_init_len(__len, _M_get_Tp_allocator());
 309:/usr/include/c++/9/bits/vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 310:/usr/include/c++/9/bits/vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 311:/usr/include/c++/9/bits/vector.tcc **** 			  _M_get_Tp_allocator());
 312:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
 313:/usr/include/c++/9/bits/vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 314:/usr/include/c++/9/bits/vector.tcc **** 			  this->_M_impl._M_end_of_storage
 315:/usr/include/c++/9/bits/vector.tcc **** 			  - this->_M_impl._M_start);
 316:/usr/include/c++/9/bits/vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 317:/usr/include/c++/9/bits/vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 318:/usr/include/c++/9/bits/vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 319:/usr/include/c++/9/bits/vector.tcc **** 	  }
 320:/usr/include/c++/9/bits/vector.tcc **** 	else if (size() >= __len)
 321:/usr/include/c++/9/bits/vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 322:/usr/include/c++/9/bits/vector.tcc **** 	else
 323:/usr/include/c++/9/bits/vector.tcc **** 	  {
 324:/usr/include/c++/9/bits/vector.tcc **** 	    _ForwardIterator __mid = __first;
 325:/usr/include/c++/9/bits/vector.tcc **** 	    std::advance(__mid, size());
 326:/usr/include/c++/9/bits/vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 327:/usr/include/c++/9/bits/vector.tcc **** 	    const size_type __attribute__((__unused__)) __n = __len - size();
 328:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 329:/usr/include/c++/9/bits/vector.tcc **** 	    this->_M_impl._M_finish =
 330:/usr/include/c++/9/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 331:/usr/include/c++/9/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 332:/usr/include/c++/9/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 333:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
 334:/usr/include/c++/9/bits/vector.tcc **** 	  }
 335:/usr/include/c++/9/bits/vector.tcc ****       }
 336:/usr/include/c++/9/bits/vector.tcc **** 
 337:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 338:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 339:/usr/include/c++/9/bits/vector.tcc ****     auto
 340:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 341:/usr/include/c++/9/bits/vector.tcc ****     _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
 342:/usr/include/c++/9/bits/vector.tcc ****     {
 343:/usr/include/c++/9/bits/vector.tcc ****       const auto __n = __position - cbegin();
 344:/usr/include/c++/9/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 345:/usr/include/c++/9/bits/vector.tcc **** 	if (__position == cend())
 346:/usr/include/c++/9/bits/vector.tcc **** 	  {
 347:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 348:/usr/include/c++/9/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 349:/usr/include/c++/9/bits/vector.tcc **** 				     std::move(__v));
 350:/usr/include/c++/9/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 351:/usr/include/c++/9/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 352:/usr/include/c++/9/bits/vector.tcc **** 	  }
 353:/usr/include/c++/9/bits/vector.tcc **** 	else
 354:/usr/include/c++/9/bits/vector.tcc **** 	  _M_insert_aux(begin() + __n, std::move(__v));
 355:/usr/include/c++/9/bits/vector.tcc ****       else
 356:/usr/include/c++/9/bits/vector.tcc **** 	_M_realloc_insert(begin() + __n, std::move(__v));
 357:/usr/include/c++/9/bits/vector.tcc **** 
 358:/usr/include/c++/9/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 359:/usr/include/c++/9/bits/vector.tcc ****     }
 360:/usr/include/c++/9/bits/vector.tcc **** 
 361:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 362:/usr/include/c++/9/bits/vector.tcc ****     template<typename... _Args>
 363:/usr/include/c++/9/bits/vector.tcc ****       auto
 364:/usr/include/c++/9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 365:/usr/include/c++/9/bits/vector.tcc ****       _M_emplace_aux(const_iterator __position, _Args&&... __args)
 366:/usr/include/c++/9/bits/vector.tcc ****       -> iterator
 367:/usr/include/c++/9/bits/vector.tcc ****       {
 368:/usr/include/c++/9/bits/vector.tcc **** 	const auto __n = __position - cbegin();
 369:/usr/include/c++/9/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 370:/usr/include/c++/9/bits/vector.tcc **** 	  if (__position == cend())
 371:/usr/include/c++/9/bits/vector.tcc **** 	    {
 372:/usr/include/c++/9/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 373:/usr/include/c++/9/bits/vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 374:/usr/include/c++/9/bits/vector.tcc **** 				       std::forward<_Args>(__args)...);
 375:/usr/include/c++/9/bits/vector.tcc **** 	      ++this->_M_impl._M_finish;
 376:/usr/include/c++/9/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 377:/usr/include/c++/9/bits/vector.tcc **** 	    }
 378:/usr/include/c++/9/bits/vector.tcc **** 	  else
 379:/usr/include/c++/9/bits/vector.tcc **** 	    {
 380:/usr/include/c++/9/bits/vector.tcc **** 	      // We need to construct a temporary because something in __args...
 381:/usr/include/c++/9/bits/vector.tcc **** 	      // could alias one of the elements of the container and so we
 382:/usr/include/c++/9/bits/vector.tcc **** 	      // need to use it before _M_insert_aux moves elements around.
 383:/usr/include/c++/9/bits/vector.tcc **** 	      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
 384:/usr/include/c++/9/bits/vector.tcc **** 	      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
 385:/usr/include/c++/9/bits/vector.tcc **** 	    }
 386:/usr/include/c++/9/bits/vector.tcc **** 	else
 387:/usr/include/c++/9/bits/vector.tcc **** 	  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
 388:/usr/include/c++/9/bits/vector.tcc **** 
 389:/usr/include/c++/9/bits/vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 390:/usr/include/c++/9/bits/vector.tcc ****       }
 391:/usr/include/c++/9/bits/vector.tcc **** 
 392:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 393:/usr/include/c++/9/bits/vector.tcc ****     template<typename _Arg>
 394:/usr/include/c++/9/bits/vector.tcc ****       void
 395:/usr/include/c++/9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 396:/usr/include/c++/9/bits/vector.tcc ****       _M_insert_aux(iterator __position, _Arg&& __arg)
 397:/usr/include/c++/9/bits/vector.tcc **** #else
 398:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 399:/usr/include/c++/9/bits/vector.tcc ****     void
 400:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 401:/usr/include/c++/9/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 402:/usr/include/c++/9/bits/vector.tcc **** #endif
 403:/usr/include/c++/9/bits/vector.tcc ****     {
 404:/usr/include/c++/9/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 405:/usr/include/c++/9/bits/vector.tcc ****       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 406:/usr/include/c++/9/bits/vector.tcc **** 			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 407:/usr/include/c++/9/bits/vector.tcc ****       ++this->_M_impl._M_finish;
 408:/usr/include/c++/9/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 409:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus < 201103L
 410:/usr/include/c++/9/bits/vector.tcc ****       _Tp __x_copy = __x;
 411:/usr/include/c++/9/bits/vector.tcc **** #endif
 412:/usr/include/c++/9/bits/vector.tcc ****       _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 413:/usr/include/c++/9/bits/vector.tcc **** 			      this->_M_impl._M_finish - 2,
 414:/usr/include/c++/9/bits/vector.tcc **** 			      this->_M_impl._M_finish - 1);
 415:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus < 201103L
 416:/usr/include/c++/9/bits/vector.tcc ****       *__position = __x_copy;
 417:/usr/include/c++/9/bits/vector.tcc **** #else
 418:/usr/include/c++/9/bits/vector.tcc ****       *__position = std::forward<_Arg>(__arg);
 419:/usr/include/c++/9/bits/vector.tcc **** #endif
 420:/usr/include/c++/9/bits/vector.tcc ****     }
 421:/usr/include/c++/9/bits/vector.tcc **** 
 422:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 423:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 424:/usr/include/c++/9/bits/vector.tcc ****     template<typename... _Args>
 425:/usr/include/c++/9/bits/vector.tcc ****       void
 426:/usr/include/c++/9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 8208              		.loc 14 426 7
 8209              		.cfi_startproc
 8210              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8211              		.cfi_lsda 0x1b,.LLSDA2810
 8212 0000 F30F1EFA 		endbr64
 8213 0004 55       		pushq	%rbp
 8214              		.cfi_def_cfa_offset 16
 8215              		.cfi_offset 6, -16
 8216 0005 4889E5   		movq	%rsp, %rbp
 8217              		.cfi_def_cfa_register 6
 8218 0008 4157     		pushq	%r15
 8219 000a 4156     		pushq	%r14
 8220 000c 4155     		pushq	%r13
 8221 000e 4154     		pushq	%r12
 8222 0010 53       		pushq	%rbx
 8223 0011 4881ECE8 		subq	$232, %rsp
 8223      000000
 8224              		.cfi_offset 15, -24
 8225              		.cfi_offset 14, -32
 8226              		.cfi_offset 13, -40
 8227              		.cfi_offset 12, -48
 8228              		.cfi_offset 3, -56
 8229 0018 4889BD18 		movq	%rdi, -232(%rbp)
 8229      FFFFFF
 8230 001f 4889B510 		movq	%rsi, -240(%rbp)
 8230      FFFFFF
 8231 0026 48899508 		movq	%rdx, -248(%rbp)
 8231      FFFFFF
 8232 002d 488D9D50 		leaq	-176(%rbp), %rbx
 8232      FFFFFF
 8233 0034 48899DF8 		movq	%rbx, -264(%rbp)
 8233      FEFFFF
 8234 003b 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 8234      000000
 8235 0042 7412     		je	.L465
 8236 0044 BF600000 		movl	$96, %edi
 8236      00
 8237 0049 E8000000 		call	__asan_stack_malloc_1@PLT
 8237      00
 8238              	.LVL9:
 8239 004e 4885C0   		testq	%rax, %rax
 8240 0051 7403     		je	.L465
 8241 0053 4889C3   		movq	%rax, %rbx
 8242              	.L465:
 8243 0056 488D8380 		leaq	128(%rbx), %rax
 8243      000000
 8244 005d 4989C4   		movq	%rax, %r12
 8245 0060 48C703B3 		movq	$1102416563, (%rbx)
 8245      8AB541
 8246 0067 488D0500 		leaq	.LC20(%rip), %rax
 8246      000000
 8247 006e 48894308 		movq	%rax, 8(%rbx)
 8248 0072 488D0587 		leaq	.LASANPC2810(%rip), %rax
 8248      FFFFFF
 8249 0079 48894310 		movq	%rax, 16(%rbx)
 8250 007d 4989DD   		movq	%rbx, %r13
 8251 0080 49C1ED03 		shrq	$3, %r13
 8252 0084 41C78500 		movl	$-235802127, 2147450880(%r13)
 8252      80FF7FF1 
 8252      F1F1F1
 8253 008f 41C78504 		movl	$-218959360, 2147450884(%r13)
 8253      80FF7F00 
 8253      F2F2F2
 8254 009a 41C78508 		movl	$-202116352, 2147450888(%r13)
 8254      80FF7F00 
 8254      F3F3F3
 8255              		.loc 14 426 7
 8256 00a5 64488B04 		movq	%fs:40, %rax
 8256      25280000 
 8256      00
 8257 00ae 488945C8 		movq	%rax, -56(%rbp)
 8258 00b2 31C0     		xorl	%eax, %eax
 427:/usr/include/c++/9/bits/vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 8259              		.loc 14 427 34
 8260 00b4 488B8510 		movq	-240(%rbp), %rax
 8260      FFFFFF
 8261 00bb 49894424 		movq	%rax, -64(%r12)
 8261      C0
 428:/usr/include/c++/9/bits/vector.tcc **** #else
 429:/usr/include/c++/9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 430:/usr/include/c++/9/bits/vector.tcc ****     void
 431:/usr/include/c++/9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 432:/usr/include/c++/9/bits/vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 433:/usr/include/c++/9/bits/vector.tcc **** #endif
 434:/usr/include/c++/9/bits/vector.tcc ****     {
 435:/usr/include/c++/9/bits/vector.tcc ****       const size_type __len =
 8262              		.loc 14 435 23
 8263 00c0 488B8518 		movq	-232(%rbp), %rax
 8263      FFFFFF
 8264 00c7 4883BD18 		cmpq	$0, -232(%rbp)
 8264      FFFFFF00 
 8265 00cf 740B     		je	.L469
 8266 00d1 4889C2   		movq	%rax, %rdx
 8267 00d4 83E207   		andl	$7, %edx
 8268 00d7 4885D2   		testq	%rdx, %rdx
 8269 00da 740F     		je	.L470
 8270              	.L469:
 8271 00dc 4889C6   		movq	%rax, %rsi
 8272 00df 488D3D00 		leaq	.Lubsan_data526(%rip), %rdi
 8272      000000
 8273 00e6 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8273      00
 8274              	.L470:
 8275 00eb 488B8518 		movq	-232(%rbp), %rax
 8275      FFFFFF
 8276 00f2 488D1500 		leaq	.LC21(%rip), %rdx
 8276      000000
 8277 00f9 BE010000 		movl	$1, %esi
 8277      00
 8278 00fe 4889C7   		movq	%rax, %rdi
 8279              	.LEHB26:
 8280 0101 E8000000 		call	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc
 8280      00
 8281 0106 48898520 		movq	%rax, -224(%rbp)
 8281      FFFFFF
 436:/usr/include/c++/9/bits/vector.tcc **** 	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 437:/usr/include/c++/9/bits/vector.tcc ****       pointer __old_start = this->_M_impl._M_start;
 8282              		.loc 14 437 15
 8283 010d 488B8518 		movq	-232(%rbp), %rax
 8283      FFFFFF
 8284 0114 4883BD18 		cmpq	$0, -232(%rbp)
 8284      FFFFFF00 
 8285 011c 740B     		je	.L471
 8286 011e 4889C2   		movq	%rax, %rdx
 8287 0121 83E207   		andl	$7, %edx
 8288 0124 4885D2   		testq	%rdx, %rdx
 8289 0127 740F     		je	.L472
 8290              	.L471:
 8291 0129 4889C6   		movq	%rax, %rsi
 8292 012c 488D3D00 		leaq	.Lubsan_data527(%rip), %rdi
 8292      000000
 8293 0133 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8293      00
 8294              	.L472:
 8295 0138 488B8518 		movq	-232(%rbp), %rax
 8295      FFFFFF
 8296 013f 4889C2   		movq	%rax, %rdx
 8297 0142 48C1EA03 		shrq	$3, %rdx
 8298 0146 4881C200 		addq	$2147450880, %rdx
 8298      80FF7F
 8299 014d 0FB612   		movzbl	(%rdx), %edx
 8300 0150 84D2     		testb	%dl, %dl
 8301 0152 7408     		je	.L473
 8302 0154 4889C7   		movq	%rax, %rdi
 8303 0157 E8000000 		call	__asan_report_load8@PLT
 8303      00
 8304              	.L473:
 8305 015c 488B8518 		movq	-232(%rbp), %rax
 8305      FFFFFF
 8306 0163 488B00   		movq	(%rax), %rax
 8307 0166 48898528 		movq	%rax, -216(%rbp)
 8307      FFFFFF
 438:/usr/include/c++/9/bits/vector.tcc ****       pointer __old_finish = this->_M_impl._M_finish;
 8308              		.loc 14 438 15
 8309 016d 488B8518 		movq	-232(%rbp), %rax
 8309      FFFFFF
 8310 0174 4883BD18 		cmpq	$0, -232(%rbp)
 8310      FFFFFF00 
 8311 017c 740B     		je	.L474
 8312 017e 4889C2   		movq	%rax, %rdx
 8313 0181 83E207   		andl	$7, %edx
 8314 0184 4885D2   		testq	%rdx, %rdx
 8315 0187 740F     		je	.L475
 8316              	.L474:
 8317 0189 4889C6   		movq	%rax, %rsi
 8318 018c 488D3D00 		leaq	.Lubsan_data528(%rip), %rdi
 8318      000000
 8319 0193 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8319      00
 8320              	.L475:
 8321 0198 488B8518 		movq	-232(%rbp), %rax
 8321      FFFFFF
 8322 019f 488D5008 		leaq	8(%rax), %rdx
 8323 01a3 4883F8F8 		cmpq	$-8, %rax
 8324 01a7 7216     		jb	.L476
 8325 01a9 488B8518 		movq	-232(%rbp), %rax
 8325      FFFFFF
 8326 01b0 4889C6   		movq	%rax, %rsi
 8327 01b3 488D3D00 		leaq	.Lubsan_data529(%rip), %rdi
 8327      000000
 8328 01ba E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 8328      00
 8329              	.L476:
 8330 01bf 488B8518 		movq	-232(%rbp), %rax
 8330      FFFFFF
 8331 01c6 4883C008 		addq	$8, %rax
 8332 01ca 4889C2   		movq	%rax, %rdx
 8333 01cd 48C1EA03 		shrq	$3, %rdx
 8334 01d1 4881C200 		addq	$2147450880, %rdx
 8334      80FF7F
 8335 01d8 0FB612   		movzbl	(%rdx), %edx
 8336 01db 84D2     		testb	%dl, %dl
 8337 01dd 7408     		je	.L477
 8338 01df 4889C7   		movq	%rax, %rdi
 8339 01e2 E8000000 		call	__asan_report_load8@PLT
 8339      00
 8340              	.L477:
 8341 01e7 488B8518 		movq	-232(%rbp), %rax
 8341      FFFFFF
 8342 01ee 488B4008 		movq	8(%rax), %rax
 8343 01f2 48898530 		movq	%rax, -208(%rbp)
 8343      FFFFFF
 439:/usr/include/c++/9/bits/vector.tcc ****       const size_type __elems_before = __position - begin();
 8344              		.loc 14 439 51
 8345 01f9 488B8518 		movq	-232(%rbp), %rax
 8345      FFFFFF
 8346 0200 4883BD18 		cmpq	$0, -232(%rbp)
 8346      FFFFFF00 
 8347 0208 740B     		je	.L478
 8348 020a 4889C2   		movq	%rax, %rdx
 8349 020d 83E207   		andl	$7, %edx
 8350 0210 4885D2   		testq	%rdx, %rdx
 8351 0213 740F     		je	.L479
 8352              	.L478:
 8353 0215 4889C6   		movq	%rax, %rsi
 8354 0218 488D3D00 		leaq	.Lubsan_data530(%rip), %rdi
 8354      000000
 8355 021f E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8355      00
 8356              	.L479:
 8357 0224 498D4424 		leaq	-96(%r12), %rax
 8357      A0
 8358 0229 4889C2   		movq	%rax, %rdx
 8359 022c 48C1EA03 		shrq	$3, %rdx
 8360 0230 4881C200 		addq	$2147450880, %rdx
 8360      80FF7F
 8361 0237 0FB612   		movzbl	(%rdx), %edx
 8362 023a 84D2     		testb	%dl, %dl
 8363 023c 7408     		je	.L480
 8364 023e 4889C7   		movq	%rax, %rdi
 8365 0241 E8000000 		call	__asan_report_store8@PLT
 8365      00
 8366              	.L480:
 8367 0246 488B8518 		movq	-232(%rbp), %rax
 8367      FFFFFF
 8368 024d 4889C7   		movq	%rax, %rdi
 8369 0250 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv
 8369      00
 8370 0255 49894424 		movq	%rax, -96(%r12)
 8370      A0
 8371 025a 4D8D7424 		leaq	-96(%r12), %r14
 8371      A0
 8372 025f 4C89F0   		movq	%r14, %rax
 8373 0262 4D85F6   		testq	%r14, %r14
 8374 0265 740B     		je	.L481
 8375 0267 4889C2   		movq	%rax, %rdx
 8376 026a 83E207   		andl	$7, %edx
 8377 026d 4885D2   		testq	%rdx, %rdx
 8378 0270 740F     		je	.L482
 8379              	.L481:
 8380 0272 4889C6   		movq	%rax, %rsi
 8381 0275 488D3D00 		leaq	.Lubsan_data531(%rip), %rdi
 8381      000000
 8382 027c E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8382      00
 8383              	.L482:
 8384 0281 498D4424 		leaq	-64(%r12), %rax
 8384      C0
 8385 0286 4C89F6   		movq	%r14, %rsi
 8386 0289 4889C7   		movq	%rax, %rdi
 8387 028c E8000000 		call	_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEN
 8387      00
 8388              		.loc 14 439 23
 8389 0291 48898538 		movq	%rax, -200(%rbp)
 8389      FFFFFF
 8390              		.loc 14 439 51
 8391 0298 498D4424 		leaq	-96(%r12), %rax
 8391      A0
 8392 029d 48C1E803 		shrq	$3, %rax
 8393 02a1 48050080 		addq	$2147450880, %rax
 8393      FF7F
 8394 02a7 C600F8   		movb	$-8, (%rax)
 440:/usr/include/c++/9/bits/vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 8395              		.loc 14 440 15
 8396 02aa 488B8518 		movq	-232(%rbp), %rax
 8396      FFFFFF
 8397 02b1 4883BD18 		cmpq	$0, -232(%rbp)
 8397      FFFFFF00 
 8398 02b9 740B     		je	.L483
 8399 02bb 4889C2   		movq	%rax, %rdx
 8400 02be 83E207   		andl	$7, %edx
 8401 02c1 4885D2   		testq	%rdx, %rdx
 8402 02c4 740F     		je	.L484
 8403              	.L483:
 8404 02c6 4889C6   		movq	%rax, %rsi
 8405 02c9 488D3D00 		leaq	.Lubsan_data532(%rip), %rdi
 8405      000000
 8406 02d0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8406      00
 8407              	.L484:
 8408 02d5 4C8BB518 		movq	-232(%rbp), %r14
 8408      FFFFFF
 8409 02dc 4C89F0   		movq	%r14, %rax
 8410 02df 4D85F6   		testq	%r14, %r14
 8411 02e2 740B     		je	.L485
 8412 02e4 4889C2   		movq	%rax, %rdx
 8413 02e7 83E207   		andl	$7, %edx
 8414 02ea 4885D2   		testq	%rdx, %rdx
 8415 02ed 740F     		je	.L486
 8416              	.L485:
 8417 02ef 4889C6   		movq	%rax, %rsi
 8418 02f2 488D3D00 		leaq	.Lubsan_data533(%rip), %rdi
 8418      000000
 8419 02f9 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8419      00
 8420              	.L486:
 8421 02fe 488B8520 		movq	-224(%rbp), %rax
 8421      FFFFFF
 8422 0305 4889C6   		movq	%rax, %rsi
 8423 0308 4C89F7   		movq	%r14, %rdi
 8424 030b E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocate
 8424      00
 8425              	.LEHE26:
 8426 0310 48898540 		movq	%rax, -192(%rbp)
 8426      FFFFFF
 441:/usr/include/c++/9/bits/vector.tcc ****       pointer __new_finish(__new_start);
 8427              		.loc 14 441 15
 8428 0317 488B8540 		movq	-192(%rbp), %rax
 8428      FFFFFF
 8429 031e 48898548 		movq	%rax, -184(%rbp)
 8429      FFFFFF
 442:/usr/include/c++/9/bits/vector.tcc ****       __try
 443:/usr/include/c++/9/bits/vector.tcc **** 	{
 444:/usr/include/c++/9/bits/vector.tcc **** 	  // The order of the three operations is dictated by the C++11
 445:/usr/include/c++/9/bits/vector.tcc **** 	  // case, where the moves could alter a new element belonging
 446:/usr/include/c++/9/bits/vector.tcc **** 	  // to the existing vector.  This is an issue only for callers
 447:/usr/include/c++/9/bits/vector.tcc **** 	  // taking the element by lvalue ref (see last bullet of C++11
 448:/usr/include/c++/9/bits/vector.tcc **** 	  // [res.on.arguments]).
 449:/usr/include/c++/9/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl,
 8430              		.loc 14 449 28
 8431 0325 488B8508 		movq	-248(%rbp), %rax
 8431      FFFFFF
 8432 032c 4883BD08 		cmpq	$0, -248(%rbp)
 8432      FFFFFF00 
 8433 0334 740B     		je	.L487
 8434 0336 4889C2   		movq	%rax, %rdx
 8435 0339 83E207   		andl	$7, %edx
 8436 033c 4885D2   		testq	%rdx, %rdx
 8437 033f 740F     		je	.L488
 8438              	.L487:
 8439 0341 4889C6   		movq	%rax, %rsi
 8440 0344 488D3D00 		leaq	.Lubsan_data534(%rip), %rdi
 8440      000000
 8441 034b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8441      00
 8442              	.L488:
 8443 0350 488B8508 		movq	-248(%rbp), %rax
 8443      FFFFFF
 8444 0357 4889C7   		movq	%rax, %rdi
 8445 035a E8000000 		call	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_reference
 8445      00
 8446 035f 48898500 		movq	%rax, -256(%rbp)
 8446      FFFFFF
 450:/usr/include/c++/9/bits/vector.tcc **** 				   __new_start + __elems_before,
 8447              		.loc 14 450 20
 8448 0366 488B8538 		movq	-200(%rbp), %rax
 8448      FFFFFF
 8449 036d 48C1E005 		salq	$5, %rax
 8450 0371 4989C6   		movq	%rax, %r14
 449:/usr/include/c++/9/bits/vector.tcc **** 				   __new_start + __elems_before,
 8451              		.loc 14 449 28
 8452 0374 488B9540 		movq	-192(%rbp), %rdx
 8452      FFFFFF
 8453 037b 4A8D0432 		leaq	(%rdx,%r14), %rax
 8454 037f 4C89F1   		movq	%r14, %rcx
 8455 0382 48F7D1   		notq	%rcx
 8456 0385 48C1E93F 		shrq	$63, %rcx
 8457 0389 84C9     		testb	%cl, %cl
 8458 038b 7420     		je	.L489
 8459 038d 4839D0   		cmpq	%rdx, %rax
 8460 0390 7320     		jnb	.L490
 8461              	.L491:
 8462 0392 488B8D40 		movq	-192(%rbp), %rcx
 8462      FFFFFF
 8463 0399 4889C2   		movq	%rax, %rdx
 8464 039c 4889CE   		movq	%rcx, %rsi
 8465 039f 488D3D00 		leaq	.Lubsan_data535(%rip), %rdi
 8465      000000
 8466 03a6 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 8466      00
 8467 03ab EB05     		jmp	.L490
 8468              	.L489:
 8469 03ad 4839D0   		cmpq	%rdx, %rax
 8470 03b0 77E0     		ja	.L491
 8471              	.L490:
 8472 03b2 488B8540 		movq	-192(%rbp), %rax
 8472      FFFFFF
 8473 03b9 4D8D3C06 		leaq	(%r14,%rax), %r15
 449:/usr/include/c++/9/bits/vector.tcc **** 				   __new_start + __elems_before,
 8474              		.loc 14 449 35
 8475 03bd 488B8518 		movq	-232(%rbp), %rax
 8475      FFFFFF
 8476 03c4 4883BD18 		cmpq	$0, -232(%rbp)
 8476      FFFFFF00 
 8477 03cc 740B     		je	.L492
 8478 03ce 4889C2   		movq	%rax, %rdx
 8479 03d1 83E207   		andl	$7, %edx
 8480 03d4 4885D2   		testq	%rdx, %rdx
 8481 03d7 740F     		je	.L493
 8482              	.L492:
 8483 03d9 4889C6   		movq	%rax, %rsi
 8484 03dc 488D3D00 		leaq	.Lubsan_data536(%rip), %rdi
 8484      000000
 8485 03e3 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8485      00
 8486              	.L493:
 8487 03e8 4C8BB518 		movq	-232(%rbp), %r14
 8487      FFFFFF
 449:/usr/include/c++/9/bits/vector.tcc **** 				   __new_start + __elems_before,
 8488              		.loc 14 449 28
 8489 03ef 4D85F6   		testq	%r14, %r14
 8490 03f2 7511     		jne	.L494
 8491 03f4 BE000000 		movl	$0, %esi
 8491      00
 8492 03f9 488D3D00 		leaq	.Lubsan_data537(%rip), %rdi
 8492      000000
 8493 0400 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8493      00
 8494              	.L494:
 8495 0405 488B9500 		movq	-256(%rbp), %rdx
 8495      FFFFFF
 8496 040c 4C89FE   		movq	%r15, %rsi
 8497 040f 4C89F7   		movq	%r14, %rdi
 8498              	.LEHB27:
 8499 0412 E8000000 		call	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS
 8499      00
 8500              	.LEHE27:
 451:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 452:/usr/include/c++/9/bits/vector.tcc **** 				   std::forward<_Args>(__args)...);
 453:/usr/include/c++/9/bits/vector.tcc **** #else
 454:/usr/include/c++/9/bits/vector.tcc **** 				   __x);
 455:/usr/include/c++/9/bits/vector.tcc **** #endif
 456:/usr/include/c++/9/bits/vector.tcc **** 	  __new_finish = pointer();
 8501              		.loc 14 456 4
 8502 0417 48C78548 		movq	$0, -184(%rbp)
 8502      FFFFFF00 
 8502      000000
 457:/usr/include/c++/9/bits/vector.tcc **** 
 458:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 459:/usr/include/c++/9/bits/vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 460:/usr/include/c++/9/bits/vector.tcc **** 	    {
 461:/usr/include/c++/9/bits/vector.tcc **** 	      __new_finish = _S_relocate(__old_start, __position.base(),
 462:/usr/include/c++/9/bits/vector.tcc **** 					 __new_start, _M_get_Tp_allocator());
 8503              		.loc 14 462 39
 8504 0422 488B8518 		movq	-232(%rbp), %rax
 8504      FFFFFF
 8505 0429 4883BD18 		cmpq	$0, -232(%rbp)
 8505      FFFFFF00 
 8506 0431 740B     		je	.L495
 8507 0433 4889C2   		movq	%rax, %rdx
 8508 0436 83E207   		andl	$7, %edx
 8509 0439 4885D2   		testq	%rdx, %rdx
 8510 043c 740F     		je	.L496
 8511              	.L495:
 8512 043e 4889C6   		movq	%rax, %rsi
 8513 0441 488D3D00 		leaq	.Lubsan_data538(%rip), %rdi
 8513      000000
 8514 0448 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8514      00
 8515              	.L496:
 8516 044d 4C8BB518 		movq	-232(%rbp), %r14
 8516      FFFFFF
 8517 0454 4C89F0   		movq	%r14, %rax
 8518 0457 4D85F6   		testq	%r14, %r14
 8519 045a 740B     		je	.L497
 8520 045c 4889C2   		movq	%rax, %rdx
 8521 045f 83E207   		andl	$7, %edx
 8522 0462 4885D2   		testq	%rdx, %rdx
 8523 0465 740F     		je	.L498
 8524              	.L497:
 8525 0467 4889C6   		movq	%rax, %rsi
 8526 046a 488D3D00 		leaq	.Lubsan_data539(%rip), %rdi
 8526      000000
 8527 0471 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8527      00
 8528              	.L498:
 8529 0476 4C89F7   		movq	%r14, %rdi
 8530 0479 E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_a
 8530      00
 8531 047e 4989C7   		movq	%rax, %r15
 461:/usr/include/c++/9/bits/vector.tcc **** 					 __new_start, _M_get_Tp_allocator());
 8532              		.loc 14 461 34
 8533 0481 4D85FF   		testq	%r15, %r15
 8534 0484 7511     		jne	.L499
 8535 0486 BE000000 		movl	$0, %esi
 8535      00
 8536 048b 488D3D00 		leaq	.Lubsan_data540(%rip), %rdi
 8536      000000
 8537 0492 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8537      00
 8538              	.L499:
 8539 0497 498D4424 		leaq	-64(%r12), %rax
 8539      C0
 8540 049c 4889C7   		movq	%rax, %rdi
 8541 049f E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 8541      00
 8542 04a4 4989C6   		movq	%rax, %r14
 8543 04a7 4C89F0   		movq	%r14, %rax
 8544 04aa 4D85F6   		testq	%r14, %r14
 8545 04ad 740B     		je	.L500
 8546 04af 4889C2   		movq	%rax, %rdx
 8547 04b2 83E207   		andl	$7, %edx
 8548 04b5 4885D2   		testq	%rdx, %rdx
 8549 04b8 740F     		je	.L501
 8550              	.L500:
 8551 04ba 4889C6   		movq	%rax, %rsi
 8552 04bd 488D3D00 		leaq	.Lubsan_data541(%rip), %rdi
 8552      000000
 8553 04c4 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8553      00
 8554              	.L501:
 8555 04c9 4C89F0   		movq	%r14, %rax
 8556 04cc 4889C2   		movq	%rax, %rdx
 8557 04cf 48C1EA03 		shrq	$3, %rdx
 8558 04d3 4881C200 		addq	$2147450880, %rdx
 8558      80FF7F
 8559 04da 0FB612   		movzbl	(%rdx), %edx
 8560 04dd 84D2     		testb	%dl, %dl
 8561 04df 7408     		je	.L502
 8562 04e1 4889C7   		movq	%rax, %rdi
 8563 04e4 E8000000 		call	__asan_report_load8@PLT
 8563      00
 8564              	.L502:
 8565 04e9 498B36   		movq	(%r14), %rsi
 8566 04ec 488B9540 		movq	-192(%rbp), %rdx
 8566      FFFFFF
 8567 04f3 488B8528 		movq	-216(%rbp), %rax
 8567      FFFFFF
 8568 04fa 4C89F9   		movq	%r15, %rcx
 8569 04fd 4889C7   		movq	%rax, %rdi
 8570 0500 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8
 8570      00
 8571 0505 48898548 		movq	%rax, -184(%rbp)
 8571      FFFFFF
 463:/usr/include/c++/9/bits/vector.tcc **** 
 464:/usr/include/c++/9/bits/vector.tcc **** 	      ++__new_finish;
 8572              		.loc 14 464 8
 8573 050c 488B8548 		movq	-184(%rbp), %rax
 8573      FFFFFF
 8574 0513 488D5020 		leaq	32(%rax), %rdx
 8575 0517 4883F8E0 		cmpq	$-32, %rax
 8576 051b 7216     		jb	.L503
 8577 051d 488B8548 		movq	-184(%rbp), %rax
 8577      FFFFFF
 8578 0524 4889C6   		movq	%rax, %rsi
 8579 0527 488D3D00 		leaq	.Lubsan_data542(%rip), %rdi
 8579      000000
 8580 052e E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 8580      00
 8581              	.L503:
 8582 0533 48838548 		addq	$32, -184(%rbp)
 8582      FFFFFF20 
 465:/usr/include/c++/9/bits/vector.tcc **** 
 466:/usr/include/c++/9/bits/vector.tcc **** 	      __new_finish = _S_relocate(__position.base(), __old_finish,
 467:/usr/include/c++/9/bits/vector.tcc **** 					 __new_finish, _M_get_Tp_allocator());
 8583              		.loc 14 467 40
 8584 053b 488B8518 		movq	-232(%rbp), %rax
 8584      FFFFFF
 8585 0542 4883BD18 		cmpq	$0, -232(%rbp)
 8585      FFFFFF00 
 8586 054a 740B     		je	.L504
 8587 054c 4889C2   		movq	%rax, %rdx
 8588 054f 83E207   		andl	$7, %edx
 8589 0552 4885D2   		testq	%rdx, %rdx
 8590 0555 740F     		je	.L505
 8591              	.L504:
 8592 0557 4889C6   		movq	%rax, %rsi
 8593 055a 488D3D00 		leaq	.Lubsan_data543(%rip), %rdi
 8593      000000
 8594 0561 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8594      00
 8595              	.L505:
 8596 0566 4C8BB518 		movq	-232(%rbp), %r14
 8596      FFFFFF
 8597 056d 4C89F0   		movq	%r14, %rax
 8598 0570 4D85F6   		testq	%r14, %r14
 8599 0573 740B     		je	.L506
 8600 0575 4889C2   		movq	%rax, %rdx
 8601 0578 83E207   		andl	$7, %edx
 8602 057b 4885D2   		testq	%rdx, %rdx
 8603 057e 740F     		je	.L507
 8604              	.L506:
 8605 0580 4889C6   		movq	%rax, %rsi
 8606 0583 488D3D00 		leaq	.Lubsan_data544(%rip), %rdi
 8606      000000
 8607 058a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8607      00
 8608              	.L507:
 8609 058f 4C89F7   		movq	%r14, %rdi
 8610 0592 E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_a
 8610      00
 8611 0597 4989C6   		movq	%rax, %r14
 466:/usr/include/c++/9/bits/vector.tcc **** 					 __new_finish, _M_get_Tp_allocator());
 8612              		.loc 14 466 34
 8613 059a 4D85F6   		testq	%r14, %r14
 8614 059d 7511     		jne	.L508
 8615 059f BE000000 		movl	$0, %esi
 8615      00
 8616 05a4 488D3D00 		leaq	.Lubsan_data545(%rip), %rdi
 8616      000000
 8617 05ab E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8617      00
 8618              	.L508:
 8619 05b0 498D4424 		leaq	-64(%r12), %rax
 8619      C0
 8620 05b5 4889C7   		movq	%rax, %rdi
 8621 05b8 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 8621      00
 8622 05bd 4989C4   		movq	%rax, %r12
 8623 05c0 4C89E0   		movq	%r12, %rax
 8624 05c3 4D85E4   		testq	%r12, %r12
 8625 05c6 740B     		je	.L509
 8626 05c8 4889C2   		movq	%rax, %rdx
 8627 05cb 83E207   		andl	$7, %edx
 8628 05ce 4885D2   		testq	%rdx, %rdx
 8629 05d1 740F     		je	.L510
 8630              	.L509:
 8631 05d3 4889C6   		movq	%rax, %rsi
 8632 05d6 488D3D00 		leaq	.Lubsan_data546(%rip), %rdi
 8632      000000
 8633 05dd E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8633      00
 8634              	.L510:
 8635 05e2 4C89E0   		movq	%r12, %rax
 8636 05e5 4889C2   		movq	%rax, %rdx
 8637 05e8 48C1EA03 		shrq	$3, %rdx
 8638 05ec 4881C200 		addq	$2147450880, %rdx
 8638      80FF7F
 8639 05f3 0FB612   		movzbl	(%rdx), %edx
 8640 05f6 84D2     		testb	%dl, %dl
 8641 05f8 7408     		je	.L511
 8642 05fa 4889C7   		movq	%rax, %rdi
 8643 05fd E8000000 		call	__asan_report_load8@PLT
 8643      00
 8644              	.L511:
 8645 0602 498B0424 		movq	(%r12), %rax
 8646 0606 488B9548 		movq	-184(%rbp), %rdx
 8646      FFFFFF
 8647 060d 488BB530 		movq	-208(%rbp), %rsi
 8647      FFFFFF
 8648 0614 4C89F1   		movq	%r14, %rcx
 8649 0617 4889C7   		movq	%rax, %rdi
 8650 061a E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8
 8650      00
 8651 061f 48898548 		movq	%rax, -184(%rbp)
 8651      FFFFFF
 468:/usr/include/c++/9/bits/vector.tcc **** 	    }
 469:/usr/include/c++/9/bits/vector.tcc **** 	  else
 470:/usr/include/c++/9/bits/vector.tcc **** #endif
 471:/usr/include/c++/9/bits/vector.tcc **** 	    {
 472:/usr/include/c++/9/bits/vector.tcc **** 	      __new_finish
 473:/usr/include/c++/9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 474:/usr/include/c++/9/bits/vector.tcc **** 		(__old_start, __position.base(),
 475:/usr/include/c++/9/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 476:/usr/include/c++/9/bits/vector.tcc **** 
 477:/usr/include/c++/9/bits/vector.tcc **** 	      ++__new_finish;
 478:/usr/include/c++/9/bits/vector.tcc **** 
 479:/usr/include/c++/9/bits/vector.tcc **** 	      __new_finish
 480:/usr/include/c++/9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 481:/usr/include/c++/9/bits/vector.tcc **** 		(__position.base(), __old_finish,
 482:/usr/include/c++/9/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 483:/usr/include/c++/9/bits/vector.tcc **** 	    }
 484:/usr/include/c++/9/bits/vector.tcc **** 	}
 485:/usr/include/c++/9/bits/vector.tcc ****       __catch(...)
 486:/usr/include/c++/9/bits/vector.tcc **** 	{
 487:/usr/include/c++/9/bits/vector.tcc **** 	  if (!__new_finish)
 488:/usr/include/c++/9/bits/vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 489:/usr/include/c++/9/bits/vector.tcc **** 				   __new_start + __elems_before);
 490:/usr/include/c++/9/bits/vector.tcc **** 	  else
 491:/usr/include/c++/9/bits/vector.tcc **** 	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 492:/usr/include/c++/9/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 493:/usr/include/c++/9/bits/vector.tcc **** 	  __throw_exception_again;
 494:/usr/include/c++/9/bits/vector.tcc **** 	}
 495:/usr/include/c++/9/bits/vector.tcc **** #if __cplusplus >= 201103L
 496:/usr/include/c++/9/bits/vector.tcc ****       if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 497:/usr/include/c++/9/bits/vector.tcc **** #endif
 498:/usr/include/c++/9/bits/vector.tcc **** 	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 499:/usr/include/c++/9/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_REINIT;
 500:/usr/include/c++/9/bits/vector.tcc ****       _M_deallocate(__old_start,
 8652              		.loc 14 500 20
 8653 0626 488B8518 		movq	-232(%rbp), %rax
 8653      FFFFFF
 8654 062d 4883BD18 		cmpq	$0, -232(%rbp)
 8654      FFFFFF00 
 8655 0635 740B     		je	.L512
 8656 0637 4889C2   		movq	%rax, %rdx
 8657 063a 83E207   		andl	$7, %edx
 8658 063d 4885D2   		testq	%rdx, %rdx
 8659 0640 740F     		je	.L513
 8660              	.L512:
 8661 0642 4889C6   		movq	%rax, %rsi
 8662 0645 488D3D00 		leaq	.Lubsan_data547(%rip), %rdi
 8662      000000
 8663 064c E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8663      00
 8664              	.L513:
 8665 0651 4C8BA518 		movq	-232(%rbp), %r12
 8665      FFFFFF
 8666 0658 4C89E0   		movq	%r12, %rax
 8667 065b 4D85E4   		testq	%r12, %r12
 8668 065e 740B     		je	.L514
 8669 0660 4889C2   		movq	%rax, %rdx
 8670 0663 83E207   		andl	$7, %edx
 8671 0666 4885D2   		testq	%rdx, %rdx
 8672 0669 740F     		je	.L515
 8673              	.L514:
 8674 066b 4889C6   		movq	%rax, %rsi
 8675 066e 488D3D00 		leaq	.Lubsan_data548(%rip), %rdi
 8675      000000
 8676 0675 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8676      00
 8677              	.L515:
 501:/usr/include/c++/9/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 8678              		.loc 14 501 21
 8679 067a 488B8518 		movq	-232(%rbp), %rax
 8679      FFFFFF
 8680 0681 4883BD18 		cmpq	$0, -232(%rbp)
 8680      FFFFFF00 
 8681 0689 740B     		je	.L516
 8682 068b 4889C2   		movq	%rax, %rdx
 8683 068e 83E207   		andl	$7, %edx
 8684 0691 4885D2   		testq	%rdx, %rdx
 8685 0694 740F     		je	.L517
 8686              	.L516:
 8687 0696 4889C6   		movq	%rax, %rsi
 8688 0699 488D3D00 		leaq	.Lubsan_data549(%rip), %rdi
 8688      000000
 8689 06a0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8689      00
 8690              	.L517:
 8691 06a5 488B8518 		movq	-232(%rbp), %rax
 8691      FFFFFF
 8692 06ac 488D5010 		leaq	16(%rax), %rdx
 8693 06b0 4883F8F0 		cmpq	$-16, %rax
 8694 06b4 7216     		jb	.L518
 8695 06b6 488B8518 		movq	-232(%rbp), %rax
 8695      FFFFFF
 8696 06bd 4889C6   		movq	%rax, %rsi
 8697 06c0 488D3D00 		leaq	.Lubsan_data550(%rip), %rdi
 8697      000000
 8698 06c7 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 8698      00
 8699              	.L518:
 8700 06cc 488B8518 		movq	-232(%rbp), %rax
 8700      FFFFFF
 8701 06d3 4883C010 		addq	$16, %rax
 8702 06d7 4889C2   		movq	%rax, %rdx
 8703 06da 48C1EA03 		shrq	$3, %rdx
 8704 06de 4881C200 		addq	$2147450880, %rdx
 8704      80FF7F
 8705 06e5 0FB612   		movzbl	(%rdx), %edx
 8706 06e8 84D2     		testb	%dl, %dl
 8707 06ea 7408     		je	.L519
 8708 06ec 4889C7   		movq	%rax, %rdi
 8709 06ef E8000000 		call	__asan_report_load8@PLT
 8709      00
 8710              	.L519:
 8711 06f4 488B8518 		movq	-232(%rbp), %rax
 8711      FFFFFF
 8712 06fb 488B4010 		movq	16(%rax), %rax
 8713              		.loc 14 501 39
 8714 06ff 482B8528 		subq	-216(%rbp), %rax
 8714      FFFFFF
 8715 0706 48C1F805 		sarq	$5, %rax
 500:/usr/include/c++/9/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 8716              		.loc 14 500 20
 8717 070a 4889C2   		movq	%rax, %rdx
 8718 070d 488B8528 		movq	-216(%rbp), %rax
 8718      FFFFFF
 8719 0714 4889C6   		movq	%rax, %rsi
 8720 0717 4C89E7   		movq	%r12, %rdi
 8721              	.LEHB28:
 8722 071a E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_dealloca
 8722      00
 8723              	.LEHE28:
 502:/usr/include/c++/9/bits/vector.tcc ****       this->_M_impl._M_start = __new_start;
 8724              		.loc 14 502 7
 8725 071f 488B8518 		movq	-232(%rbp), %rax
 8725      FFFFFF
 8726 0726 4883BD18 		cmpq	$0, -232(%rbp)
 8726      FFFFFF00 
 8727 072e 740B     		je	.L520
 8728 0730 4889C2   		movq	%rax, %rdx
 8729 0733 83E207   		andl	$7, %edx
 8730 0736 4885D2   		testq	%rdx, %rdx
 8731 0739 740F     		je	.L521
 8732              	.L520:
 8733 073b 4889C6   		movq	%rax, %rsi
 8734 073e 488D3D00 		leaq	.Lubsan_data551(%rip), %rdi
 8734      000000
 8735 0745 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8735      00
 8736              	.L521:
 8737 074a 488B8518 		movq	-232(%rbp), %rax
 8737      FFFFFF
 8738 0751 4889C2   		movq	%rax, %rdx
 8739 0754 48C1EA03 		shrq	$3, %rdx
 8740 0758 4881C200 		addq	$2147450880, %rdx
 8740      80FF7F
 8741 075f 0FB612   		movzbl	(%rdx), %edx
 8742 0762 84D2     		testb	%dl, %dl
 8743 0764 7408     		je	.L522
 8744 0766 4889C7   		movq	%rax, %rdi
 8745 0769 E8000000 		call	__asan_report_store8@PLT
 8745      00
 8746              	.L522:
 8747 076e 488B8518 		movq	-232(%rbp), %rax
 8747      FFFFFF
 8748 0775 488B9540 		movq	-192(%rbp), %rdx
 8748      FFFFFF
 8749 077c 488910   		movq	%rdx, (%rax)
 503:/usr/include/c++/9/bits/vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 8750              		.loc 14 503 7
 8751 077f 488B8518 		movq	-232(%rbp), %rax
 8751      FFFFFF
 8752 0786 4883BD18 		cmpq	$0, -232(%rbp)
 8752      FFFFFF00 
 8753 078e 740B     		je	.L523
 8754 0790 4889C2   		movq	%rax, %rdx
 8755 0793 83E207   		andl	$7, %edx
 8756 0796 4885D2   		testq	%rdx, %rdx
 8757 0799 740F     		je	.L524
 8758              	.L523:
 8759 079b 4889C6   		movq	%rax, %rsi
 8760 079e 488D3D00 		leaq	.Lubsan_data552(%rip), %rdi
 8760      000000
 8761 07a5 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8761      00
 8762              	.L524:
 8763 07aa 488B8518 		movq	-232(%rbp), %rax
 8763      FFFFFF
 8764 07b1 488D5008 		leaq	8(%rax), %rdx
 8765 07b5 4883F8F8 		cmpq	$-8, %rax
 8766 07b9 7216     		jb	.L525
 8767 07bb 488B8518 		movq	-232(%rbp), %rax
 8767      FFFFFF
 8768 07c2 4889C6   		movq	%rax, %rsi
 8769 07c5 488D3D00 		leaq	.Lubsan_data553(%rip), %rdi
 8769      000000
 8770 07cc E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 8770      00
 8771              	.L525:
 8772 07d1 488B8518 		movq	-232(%rbp), %rax
 8772      FFFFFF
 8773 07d8 4883C008 		addq	$8, %rax
 8774 07dc 4889C2   		movq	%rax, %rdx
 8775 07df 48C1EA03 		shrq	$3, %rdx
 8776 07e3 4881C200 		addq	$2147450880, %rdx
 8776      80FF7F
 8777 07ea 0FB612   		movzbl	(%rdx), %edx
 8778 07ed 84D2     		testb	%dl, %dl
 8779 07ef 7408     		je	.L526
 8780 07f1 4889C7   		movq	%rax, %rdi
 8781 07f4 E8000000 		call	__asan_report_store8@PLT
 8781      00
 8782              	.L526:
 8783 07f9 488B8518 		movq	-232(%rbp), %rax
 8783      FFFFFF
 8784 0800 488B9548 		movq	-184(%rbp), %rdx
 8784      FFFFFF
 8785 0807 48895008 		movq	%rdx, 8(%rax)
 504:/usr/include/c++/9/bits/vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 8786              		.loc 14 504 53
 8787 080b 488B8520 		movq	-224(%rbp), %rax
 8787      FFFFFF
 8788 0812 48C1E005 		salq	$5, %rax
 8789 0816 4989C4   		movq	%rax, %r12
 8790 0819 488B9540 		movq	-192(%rbp), %rdx
 8790      FFFFFF
 8791 0820 4A8D0422 		leaq	(%rdx,%r12), %rax
 8792 0824 4C89E1   		movq	%r12, %rcx
 8793 0827 48F7D1   		notq	%rcx
 8794 082a 48C1E93F 		shrq	$63, %rcx
 8795 082e 84C9     		testb	%cl, %cl
 8796 0830 7420     		je	.L527
 8797 0832 4839D0   		cmpq	%rdx, %rax
 8798 0835 7320     		jnb	.L528
 8799              	.L529:
 8800 0837 488B8D40 		movq	-192(%rbp), %rcx
 8800      FFFFFF
 8801 083e 4889C2   		movq	%rax, %rdx
 8802 0841 4889CE   		movq	%rcx, %rsi
 8803 0844 488D3D00 		leaq	.Lubsan_data554(%rip), %rdi
 8803      000000
 8804 084b E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 8804      00
 8805 0850 EB05     		jmp	.L528
 8806              	.L527:
 8807 0852 4839D0   		cmpq	%rdx, %rax
 8808 0855 77E0     		ja	.L529
 8809              	.L528:
 8810 0857 488B8540 		movq	-192(%rbp), %rax
 8810      FFFFFF
 8811 085e 4901C4   		addq	%rax, %r12
 8812              		.loc 14 504 7
 8813 0861 488B8518 		movq	-232(%rbp), %rax
 8813      FFFFFF
 8814 0868 4883BD18 		cmpq	$0, -232(%rbp)
 8814      FFFFFF00 
 8815 0870 740B     		je	.L530
 8816 0872 4889C2   		movq	%rax, %rdx
 8817 0875 83E207   		andl	$7, %edx
 8818 0878 4885D2   		testq	%rdx, %rdx
 8819 087b 740F     		je	.L531
 8820              	.L530:
 8821 087d 4889C6   		movq	%rax, %rsi
 8822 0880 488D3D00 		leaq	.Lubsan_data555(%rip), %rdi
 8822      000000
 8823 0887 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8823      00
 8824              	.L531:
 8825 088c 488B8518 		movq	-232(%rbp), %rax
 8825      FFFFFF
 8826 0893 488D5010 		leaq	16(%rax), %rdx
 8827 0897 4883F8F0 		cmpq	$-16, %rax
 8828 089b 7216     		jb	.L532
 8829 089d 488B8518 		movq	-232(%rbp), %rax
 8829      FFFFFF
 8830 08a4 4889C6   		movq	%rax, %rsi
 8831 08a7 488D3D00 		leaq	.Lubsan_data556(%rip), %rdi
 8831      000000
 8832 08ae E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 8832      00
 8833              	.L532:
 8834 08b3 488B8518 		movq	-232(%rbp), %rax
 8834      FFFFFF
 8835 08ba 4883C010 		addq	$16, %rax
 8836 08be 4889C2   		movq	%rax, %rdx
 8837 08c1 48C1EA03 		shrq	$3, %rdx
 8838 08c5 4881C200 		addq	$2147450880, %rdx
 8838      80FF7F
 8839 08cc 0FB612   		movzbl	(%rdx), %edx
 8840 08cf 84D2     		testb	%dl, %dl
 8841 08d1 7408     		je	.L533
 8842 08d3 4889C7   		movq	%rax, %rdi
 8843 08d6 E8000000 		call	__asan_report_store8@PLT
 8843      00
 8844              	.L533:
 8845 08db 488B8518 		movq	-232(%rbp), %rax
 8845      FFFFFF
 8846 08e2 4C896010 		movq	%r12, 16(%rax)
 505:/usr/include/c++/9/bits/vector.tcc ****     }
 8847              		.loc 14 505 5
 8848 08e6 90       		nop
 426:/usr/include/c++/9/bits/vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 8849              		.loc 14 426 7
 8850 08e7 48399DF8 		cmpq	%rbx, -264(%rbp)
 8850      FEFFFF
 8851 08ee 0F841B02 		je	.L466
 8851      0000
 8852 08f4 E9EA0100 		jmp	.L556
 8852      00
 8853              	.L554:
 8854 08f9 F30F1EFA 		endbr64
 485:/usr/include/c++/9/bits/vector.tcc **** 	{
 8855              		.loc 14 485 7
 8856 08fd 4889C7   		movq	%rax, %rdi
 8857 0900 E8000000 		call	__cxa_begin_catch@PLT
 8857      00
 487:/usr/include/c++/9/bits/vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 8858              		.loc 14 487 4
 8859 0905 4883BD48 		cmpq	$0, -184(%rbp)
 8859      FFFFFF00 
 8860 090d 0F85AF00 		jne	.L535
 8860      0000
 489:/usr/include/c++/9/bits/vector.tcc **** 	  else
 8861              		.loc 14 489 20
 8862 0913 488B8538 		movq	-200(%rbp), %rax
 8862      FFFFFF
 8863 091a 48C1E005 		salq	$5, %rax
 8864 091e 4889C3   		movq	%rax, %rbx
 488:/usr/include/c++/9/bits/vector.tcc **** 				   __new_start + __elems_before);
 8865              		.loc 14 488 28
 8866 0921 488B9540 		movq	-192(%rbp), %rdx
 8866      FFFFFF
 8867 0928 488D041A 		leaq	(%rdx,%rbx), %rax
 8868 092c 4889D9   		movq	%rbx, %rcx
 8869 092f 48F7D1   		notq	%rcx
 8870 0932 48C1E93F 		shrq	$63, %rcx
 8871 0936 84C9     		testb	%cl, %cl
 8872 0938 7420     		je	.L536
 8873 093a 4839D0   		cmpq	%rdx, %rax
 8874 093d 7320     		jnb	.L537
 8875              	.L538:
 8876 093f 488B8D40 		movq	-192(%rbp), %rcx
 8876      FFFFFF
 8877 0946 4889C2   		movq	%rax, %rdx
 8878 0949 4889CE   		movq	%rcx, %rsi
 8879 094c 488D3D00 		leaq	.Lubsan_data557(%rip), %rdi
 8879      000000
 8880 0953 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 8880      00
 8881 0958 EB05     		jmp	.L537
 8882              	.L536:
 8883 095a 4839D0   		cmpq	%rdx, %rax
 8884 095d 77E0     		ja	.L538
 8885              	.L537:
 8886 095f 488B8540 		movq	-192(%rbp), %rax
 8886      FFFFFF
 8887 0966 4C8D2403 		leaq	(%rbx,%rax), %r12
 488:/usr/include/c++/9/bits/vector.tcc **** 				   __new_start + __elems_before);
 8888              		.loc 14 488 35
 8889 096a 488B8518 		movq	-232(%rbp), %rax
 8889      FFFFFF
 8890 0971 4883BD18 		cmpq	$0, -232(%rbp)
 8890      FFFFFF00 
 8891 0979 740B     		je	.L539
 8892 097b 4889C2   		movq	%rax, %rdx
 8893 097e 83E207   		andl	$7, %edx
 8894 0981 4885D2   		testq	%rdx, %rdx
 8895 0984 740F     		je	.L540
 8896              	.L539:
 8897 0986 4889C6   		movq	%rax, %rsi
 8898 0989 488D3D00 		leaq	.Lubsan_data558(%rip), %rdi
 8898      000000
 8899 0990 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8899      00
 8900              	.L540:
 8901 0995 488B9D18 		movq	-232(%rbp), %rbx
 8901      FFFFFF
 488:/usr/include/c++/9/bits/vector.tcc **** 				   __new_start + __elems_before);
 8902              		.loc 14 488 28
 8903 099c 4885DB   		testq	%rbx, %rbx
 8904 099f 7511     		jne	.L541
 8905 09a1 BE000000 		movl	$0, %esi
 8905      00
 8906 09a6 488D3D00 		leaq	.Lubsan_data559(%rip), %rdi
 8906      000000
 8907 09ad E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8907      00
 8908              	.L541:
 8909 09b2 4C89E6   		movq	%r12, %rsi
 8910 09b5 4889DF   		movq	%rbx, %rdi
 8911 09b8 E8000000 		call	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_
 8911      00
 8912 09bd E9910000 		jmp	.L542
 8912      00
 8913              	.L535:
 491:/usr/include/c++/9/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 8914              		.loc 14 491 66
 8915 09c2 488B8518 		movq	-232(%rbp), %rax
 8915      FFFFFF
 8916 09c9 4883BD18 		cmpq	$0, -232(%rbp)
 8916      FFFFFF00 
 8917 09d1 740B     		je	.L543
 8918 09d3 4889C2   		movq	%rax, %rdx
 8919 09d6 83E207   		andl	$7, %edx
 8920 09d9 4885D2   		testq	%rdx, %rdx
 8921 09dc 740F     		je	.L544
 8922              	.L543:
 8923 09de 4889C6   		movq	%rax, %rsi
 8924 09e1 488D3D00 		leaq	.Lubsan_data560(%rip), %rdi
 8924      000000
 8925 09e8 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8925      00
 8926              	.L544:
 8927 09ed 488B9D18 		movq	-232(%rbp), %rbx
 8927      FFFFFF
 8928 09f4 4889D8   		movq	%rbx, %rax
 8929 09f7 4885DB   		testq	%rbx, %rbx
 8930 09fa 740B     		je	.L545
 8931 09fc 4889C2   		movq	%rax, %rdx
 8932 09ff 83E207   		andl	$7, %edx
 8933 0a02 4885D2   		testq	%rdx, %rdx
 8934 0a05 740F     		je	.L546
 8935              	.L545:
 8936 0a07 4889C6   		movq	%rax, %rsi
 8937 0a0a 488D3D00 		leaq	.Lubsan_data561(%rip), %rdi
 8937      000000
 8938 0a11 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8938      00
 8939              	.L546:
 8940 0a16 4889DF   		movq	%rbx, %rdi
 8941 0a19 E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_a
 8941      00
 8942 0a1e 4889C3   		movq	%rax, %rbx
 491:/usr/include/c++/9/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 8943              		.loc 14 491 19
 8944 0a21 4885DB   		testq	%rbx, %rbx
 8945 0a24 7511     		jne	.L547
 8946 0a26 BE000000 		movl	$0, %esi
 8946      00
 8947 0a2b 488D3D00 		leaq	.Lubsan_data562(%rip), %rdi
 8947      000000
 8948 0a32 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8948      00
 8949              	.L547:
 8950 0a37 488B8D48 		movq	-184(%rbp), %rcx
 8950      FFFFFF
 8951 0a3e 488B8540 		movq	-192(%rbp), %rax
 8951      FFFFFF
 8952 0a45 4889DA   		movq	%rbx, %rdx
 8953 0a48 4889CE   		movq	%rcx, %rsi
 8954 0a4b 4889C7   		movq	%rax, %rdi
 8955              	.LEHB29:
 8956 0a4e E8000000 		call	_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E
 8956      00
 8957              	.L542:
 492:/usr/include/c++/9/bits/vector.tcc **** 	  __throw_exception_again;
 8958              		.loc 14 492 17
 8959 0a53 488B8518 		movq	-232(%rbp), %rax
 8959      FFFFFF
 8960 0a5a 4883BD18 		cmpq	$0, -232(%rbp)
 8960      FFFFFF00 
 8961 0a62 740B     		je	.L548
 8962 0a64 4889C2   		movq	%rax, %rdx
 8963 0a67 83E207   		andl	$7, %edx
 8964 0a6a 4885D2   		testq	%rdx, %rdx
 8965 0a6d 740F     		je	.L549
 8966              	.L548:
 8967 0a6f 4889C6   		movq	%rax, %rsi
 8968 0a72 488D3D00 		leaq	.Lubsan_data563(%rip), %rdi
 8968      000000
 8969 0a79 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8969      00
 8970              	.L549:
 8971 0a7e 488B9D18 		movq	-232(%rbp), %rbx
 8971      FFFFFF
 8972 0a85 4889D8   		movq	%rbx, %rax
 8973 0a88 4885DB   		testq	%rbx, %rbx
 8974 0a8b 740B     		je	.L550
 8975 0a8d 4889C2   		movq	%rax, %rdx
 8976 0a90 83E207   		andl	$7, %edx
 8977 0a93 4885D2   		testq	%rdx, %rdx
 8978 0a96 740F     		je	.L551
 8979              	.L550:
 8980 0a98 4889C6   		movq	%rax, %rsi
 8981 0a9b 488D3D00 		leaq	.Lubsan_data564(%rip), %rdi
 8981      000000
 8982 0aa2 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 8982      00
 8983              	.L551:
 8984 0aa7 488B9520 		movq	-224(%rbp), %rdx
 8984      FFFFFF
 8985 0aae 488B8540 		movq	-192(%rbp), %rax
 8985      FFFFFF
 8986 0ab5 4889C6   		movq	%rax, %rsi
 8987 0ab8 4889DF   		movq	%rbx, %rdi
 8988 0abb E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_dealloca
 8988      00
 493:/usr/include/c++/9/bits/vector.tcc **** 	}
 8989              		.loc 14 493 4
 8990 0ac0 E8000000 		call	__asan_handle_no_return@PLT
 8990      00
 8991 0ac5 E8000000 		call	__cxa_rethrow@PLT
 8991      00
 8992              	.LEHE29:
 8993              	.L555:
 8994 0aca F30F1EFA 		endbr64
 8995 0ace 4889C3   		movq	%rax, %rbx
 485:/usr/include/c++/9/bits/vector.tcc **** 	{
 8996              		.loc 14 485 7
 8997 0ad1 E8000000 		call	__cxa_end_catch@PLT
 8997      00
 8998 0ad6 E8000000 		call	__asan_handle_no_return@PLT
 8998      00
 8999 0adb 4889DF   		movq	%rbx, %rdi
 9000              	.LEHB30:
 9001 0ade E8000000 		call	_Unwind_Resume@PLT
 9001      00
 9002              	.LEHE30:
 9003              	.L556:
 426:/usr/include/c++/9/bits/vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 9004              		.loc 14 426 7
 9005 0ae3 48C7030E 		movq	$1172321806, (%rbx)
 9005      36E045
 9006 0aea 48B8F5F5 		movabsq	$-723401728380766731, %rax
 9006      F5F5F5F5 
 9006      F5F5
 9007 0af4 49898500 		movq	%rax, 2147450880(%r13)
 9007      80FF7F
 9008 0afb 41C78508 		movl	$-168430091, 2147450888(%r13)
 9008      80FF7FF5 
 9008      F5F5F5
 9009 0b06 488B4378 		movq	120(%rbx), %rax
 9010 0b0a C60000   		movb	$0, (%rax)
 9011 0b0d EB16     		jmp	.L467
 9012              	.L466:
 9013 0b0f 49C78500 		movq	$0, 2147450880(%r13)
 9013      80FF7F00 
 9013      000000
 9014 0b1a 41C78508 		movl	$0, 2147450888(%r13)
 9014      80FF7F00 
 9014      000000
 9015              	.L467:
 9016              		.loc 14 505 5
 9017 0b25 488B45C8 		movq	-56(%rbp), %rax
 9018 0b29 64483304 		xorq	%fs:40, %rax
 9018      25280000 
 9018      00
 9019 0b32 7405     		je	.L553
 9020 0b34 E8000000 		call	__stack_chk_fail@PLT
 9020      00
 9021              	.L553:
 9022 0b39 4881C4E8 		addq	$232, %rsp
 9022      000000
 9023 0b40 5B       		popq	%rbx
 9024 0b41 415C     		popq	%r12
 9025 0b43 415D     		popq	%r13
 9026 0b45 415E     		popq	%r14
 9027 0b47 415F     		popq	%r15
 9028 0b49 5D       		popq	%rbp
 9029              		.cfi_def_cfa 7, 8
 9030 0b4a C3       		ret
 9031              		.cfi_endproc
 9032              	.LFE2810:
 9033              		.section	.gcc_except_table
 9034 00b3 00       		.align 4
 9035              	.LLSDA2810:
 9036 00b4 FF       		.byte	0xff
 9037 00b5 9B       		.byte	0x9b
 9038 00b6 25       		.uleb128 .LLSDATT2810-.LLSDATTD2810
 9039              	.LLSDATTD2810:
 9040 00b7 01       		.byte	0x1
 9041 00b8 1C       		.uleb128 .LLSDACSE2810-.LLSDACSB2810
 9042              	.LLSDACSB2810:
 9043 00b9 8102     		.uleb128 .LEHB26-.LFB2810
 9044 00bb 8F04     		.uleb128 .LEHE26-.LEHB26
 9045 00bd 00       		.uleb128 0
 9046 00be 00       		.uleb128 0
 9047 00bf 9208     		.uleb128 .LEHB27-.LFB2810
 9048 00c1 05       		.uleb128 .LEHE27-.LEHB27
 9049 00c2 F911     		.uleb128 .L554-.LFB2810
 9050 00c4 01       		.uleb128 0x1
 9051 00c5 9A0E     		.uleb128 .LEHB28-.LFB2810
 9052 00c7 05       		.uleb128 .LEHE28-.LEHB28
 9053 00c8 00       		.uleb128 0
 9054 00c9 00       		.uleb128 0
 9055 00ca CE14     		.uleb128 .LEHB29-.LFB2810
 9056 00cc 7C       		.uleb128 .LEHE29-.LEHB29
 9057 00cd CA15     		.uleb128 .L555-.LFB2810
 9058 00cf 00       		.uleb128 0
 9059 00d0 DE15     		.uleb128 .LEHB30-.LFB2810
 9060 00d2 05       		.uleb128 .LEHE30-.LEHB30
 9061 00d3 00       		.uleb128 0
 9062 00d4 00       		.uleb128 0
 9063              	.LLSDACSE2810:
 9064 00d5 01       		.byte	0x1
 9065 00d6 00       		.byte	0
 9066 00d7 00       		.align 4
 9067 00d8 00000000 		.long	0
 9068              	
 9069              	.LLSDATT2810:
 9070              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reall
 9072              		.data
 9073              		.align 32
 9076              	.Lubsan_type42:
 9079 0a44 27737472 		.string	"'struct <unknown>'"
 9079      75637420 
 9079      3C756E6B 
 9079      6E6F776E 
 9079      3E2700
 9080 0a57 00000000 		.zero	41
 9080      00000000 
 9080      00000000 
 9080      00000000 
 9080      00000000 
 9081              		.section	.data.rel.local
 9082              		.align 32
 9085              	.Lubsan_data565:
 9086 2dc0 00000000 		.quad	.LC13
 9086      00000000 
 9087 2dc8 23030000 		.long	803
 9088 2dcc 07000000 		.long	7
 9089 2dd0 00000000 		.quad	.Lubsan_type42
 9089      00000000 
 9090 2dd8 03       		.byte	3
 9091 2dd9 02       		.byte	2
 9092 2dda 00000000 		.zero	6
 9092      0000
 9093 2de0 00000000 		.zero	32
 9093      00000000 
 9093      00000000 
 9093      00000000 
 9093      00000000 
 9094              		.align 32
 9097              	.Lubsan_data566:
 9098 2e00 00000000 		.quad	.LC13
 9098      00000000 
 9099 2e08 24030000 		.long	804
 9100 2e0c 17000000 		.long	23
 9101 2e10 00000000 		.quad	.Lubsan_type29
 9101      00000000 
 9102 2e18 03       		.byte	3
 9103 2e19 00       		.byte	0
 9104 2e1a 00000000 		.zero	6
 9104      0000
 9105 2e20 00000000 		.zero	32
 9105      00000000 
 9105      00000000 
 9105      00000000 
 9105      00000000 
 9106              		.data
 9107              		.align 32
 9110              	.Lubsan_type43:
 9113 0a84 27737472 		.string	"'struct __normal_iterator'"
 9113      75637420 
 9113      5F5F6E6F 
 9113      726D616C 
 9113      5F697465 
 9114 0a9f 00000000 		.zero	33
 9114      00000000 
 9114      00000000 
 9114      00000000 
 9114      00000000 
 9115              		.section	.data.rel.local
 9116              		.align 32
 9119              	.Lubsan_data567:
 9120 2e40 00000000 		.quad	.LC13
 9120      00000000 
 9121 2e48 24030000 		.long	804
 9122 2e4c 17000000 		.long	23
 9123 2e50 00000000 		.quad	.Lubsan_type43
 9123      00000000 
 9124 2e58 03       		.byte	3
 9125 2e59 03       		.byte	3
 9126 2e5a 00000000 		.zero	6
 9126      0000
 9127 2e60 00000000 		.zero	32
 9127      00000000 
 9127      00000000 
 9127      00000000 
 9127      00000000 
 9128              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 9129              		.align 2
 9130              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 9132              	_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_
 9133              	.LASANPC2814:
 9134              	.LFB2814:
 803:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 9135              		.loc 7 803 7
 9136              		.cfi_startproc
 9137 0000 F30F1EFA 		endbr64
 9138 0004 55       		pushq	%rbp
 9139              		.cfi_def_cfa_offset 16
 9140              		.cfi_offset 6, -16
 9141 0005 4889E5   		movq	%rsp, %rbp
 9142              		.cfi_def_cfa_register 6
 9143 0008 53       		pushq	%rbx
 9144 0009 4883EC18 		subq	$24, %rsp
 9145              		.cfi_offset 3, -24
 9146 000d 48897DE8 		movq	%rdi, -24(%rbp)
 9147 0011 488975E0 		movq	%rsi, -32(%rbp)
 803:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 9148              		.loc 7 803 7
 9149 0015 488B45E8 		movq	-24(%rbp), %rax
 9150 0019 48837DE8 		cmpq	$0, -24(%rbp)
 9150      00
 9151 001e 740B     		je	.L558
 9152 0020 4889C2   		movq	%rax, %rdx
 9153 0023 83E207   		andl	$7, %edx
 9154 0026 4885D2   		testq	%rdx, %rdx
 9155 0029 740F     		je	.L559
 9156              	.L558:
 9157 002b 4889C6   		movq	%rax, %rsi
 9158 002e 488D3D00 		leaq	.Lubsan_data565(%rip), %rdi
 9158      000000
 9159 0035 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9159      00
 9160              	.L559:
 9161              	.LBB22:
 804:/usr/include/c++/9/bits/stl_iterator.h **** 
 9162              		.loc 7 804 23
 9163 003a 488B45E0 		movq	-32(%rbp), %rax
 9164 003e 48837DE0 		cmpq	$0, -32(%rbp)
 9164      00
 9165 0043 740B     		je	.L560
 9166 0045 4889C2   		movq	%rax, %rdx
 9167 0048 83E207   		andl	$7, %edx
 9168 004b 4885D2   		testq	%rdx, %rdx
 9169 004e 740F     		je	.L561
 9170              	.L560:
 9171 0050 4889C6   		movq	%rax, %rsi
 9172 0053 488D3D00 		leaq	.Lubsan_data566(%rip), %rdi
 9172      000000
 9173 005a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9173      00
 9174              	.L561:
 9175 005f 488B45E0 		movq	-32(%rbp), %rax
 9176 0063 4889C2   		movq	%rax, %rdx
 9177 0066 48C1EA03 		shrq	$3, %rdx
 9178 006a 4881C200 		addq	$2147450880, %rdx
 9178      80FF7F
 9179 0071 0FB612   		movzbl	(%rdx), %edx
 9180 0074 84D2     		testb	%dl, %dl
 9181 0076 7408     		je	.L562
 9182 0078 4889C7   		movq	%rax, %rdi
 9183 007b E8000000 		call	__asan_report_load8@PLT
 9183      00
 9184              	.L562:
 9185 0080 488B45E0 		movq	-32(%rbp), %rax
 9186 0084 488B18   		movq	(%rax), %rbx
 9187 0087 488B45E8 		movq	-24(%rbp), %rax
 9188 008b 48837DE8 		cmpq	$0, -24(%rbp)
 9188      00
 9189 0090 740B     		je	.L563
 9190 0092 4889C2   		movq	%rax, %rdx
 9191 0095 83E207   		andl	$7, %edx
 9192 0098 4885D2   		testq	%rdx, %rdx
 9193 009b 740F     		je	.L564
 9194              	.L563:
 9195 009d 4889C6   		movq	%rax, %rsi
 9196 00a0 488D3D00 		leaq	.Lubsan_data567(%rip), %rdi
 9196      000000
 9197 00a7 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9197      00
 9198              	.L564:
 9199 00ac 488B45E8 		movq	-24(%rbp), %rax
 9200 00b0 4889C2   		movq	%rax, %rdx
 9201 00b3 48C1EA03 		shrq	$3, %rdx
 9202 00b7 4881C200 		addq	$2147450880, %rdx
 9202      80FF7F
 9203 00be 0FB612   		movzbl	(%rdx), %edx
 9204 00c1 84D2     		testb	%dl, %dl
 9205 00c3 7408     		je	.L565
 9206 00c5 4889C7   		movq	%rax, %rdi
 9207 00c8 E8000000 		call	__asan_report_store8@PLT
 9207      00
 9208              	.L565:
 9209 00cd 488B45E8 		movq	-24(%rbp), %rax
 9210 00d1 488918   		movq	%rbx, (%rax)
 9211              	.LBE22:
 804:/usr/include/c++/9/bits/stl_iterator.h **** 
 9212              		.loc 7 804 27
 9213 00d4 90       		nop
 9214 00d5 4883C418 		addq	$24, %rsp
 9215 00d9 5B       		popq	%rbx
 9216 00da 5D       		popq	%rbp
 9217              		.cfi_def_cfa 7, 8
 9218 00db C3       		ret
 9219              		.cfi_endproc
 9220              	.LFE2814:
 9222              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 9223              		.set	_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vect
 9224              		.section	.data.rel.local
 9225              		.align 32
 9228              	.Lubsan_data568:
 9229 2e80 00000000 		.quad	.LC13
 9229      00000000 
 9230 2e88 65030000 		.long	869
 9231 2e8c 10000000 		.long	16
 9232 2e90 00000000 		.quad	.Lubsan_type16
 9232      00000000 
 9233 2e98 03       		.byte	3
 9234 2e99 03       		.byte	3
 9235 2e9a 00000000 		.zero	6
 9235      0000
 9236 2ea0 00000000 		.zero	32
 9236      00000000 
 9236      00000000 
 9236      00000000 
 9236      00000000 
 9237              		.align 32
 9240              	.Lubsan_data569:
 9241 2ec0 00000000 		.quad	.LC13
 9241      00000000 
 9242 2ec8 65030000 		.long	869
 9243 2ecc 10000000 		.long	16
 9244 2ed0 00000000 		.quad	.Lubsan_type29
 9244      00000000 
 9245 2ed8 03       		.byte	3
 9246 2ed9 02       		.byte	2
 9247 2eda 00000000 		.zero	6
 9247      0000
 9248 2ee0 00000000 		.zero	32
 9248      00000000 
 9248      00000000 
 9248      00000000 
 9248      00000000 
 9249              		.align 32
 9252              	.Lubsan_data570:
 9253 2f00 00000000 		.quad	.LC13
 9253      00000000 
 9254 2f08 65030000 		.long	869
 9255 2f0c 10000000 		.long	16
 9256 2f10 00000000 		.quad	.Lubsan_type16
 9256      00000000 
 9257 2f18 03       		.byte	3
 9258 2f19 03       		.byte	3
 9259 2f1a 00000000 		.zero	6
 9259      0000
 9260 2f20 00000000 		.zero	32
 9260      00000000 
 9260      00000000 
 9260      00000000 
 9260      00000000 
 9261              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 9262              		.align 2
 9263              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6ve
 9265              	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6
 9266              	.LASANPC2816:
 9267              	.LFB2816:
 813:/usr/include/c++/9/bits/stl_iterator.h **** 
 814:/usr/include/c++/9/bits/stl_iterator.h ****       // Forward iterator requirements
 815:/usr/include/c++/9/bits/stl_iterator.h ****       reference
 816:/usr/include/c++/9/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 817:/usr/include/c++/9/bits/stl_iterator.h ****       { return *_M_current; }
 818:/usr/include/c++/9/bits/stl_iterator.h **** 
 819:/usr/include/c++/9/bits/stl_iterator.h ****       pointer
 820:/usr/include/c++/9/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 821:/usr/include/c++/9/bits/stl_iterator.h ****       { return _M_current; }
 822:/usr/include/c++/9/bits/stl_iterator.h **** 
 823:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator&
 824:/usr/include/c++/9/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 825:/usr/include/c++/9/bits/stl_iterator.h ****       {
 826:/usr/include/c++/9/bits/stl_iterator.h **** 	++_M_current;
 827:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 828:/usr/include/c++/9/bits/stl_iterator.h ****       }
 829:/usr/include/c++/9/bits/stl_iterator.h **** 
 830:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator
 831:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 832:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 833:/usr/include/c++/9/bits/stl_iterator.h **** 
 834:/usr/include/c++/9/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 835:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator&
 836:/usr/include/c++/9/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 837:/usr/include/c++/9/bits/stl_iterator.h ****       {
 838:/usr/include/c++/9/bits/stl_iterator.h **** 	--_M_current;
 839:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 840:/usr/include/c++/9/bits/stl_iterator.h ****       }
 841:/usr/include/c++/9/bits/stl_iterator.h **** 
 842:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator
 843:/usr/include/c++/9/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 844:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 845:/usr/include/c++/9/bits/stl_iterator.h **** 
 846:/usr/include/c++/9/bits/stl_iterator.h ****       // Random access iterator requirements
 847:/usr/include/c++/9/bits/stl_iterator.h ****       reference
 848:/usr/include/c++/9/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 849:/usr/include/c++/9/bits/stl_iterator.h ****       { return _M_current[__n]; }
 850:/usr/include/c++/9/bits/stl_iterator.h **** 
 851:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator&
 852:/usr/include/c++/9/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 853:/usr/include/c++/9/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 854:/usr/include/c++/9/bits/stl_iterator.h **** 
 855:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator
 856:/usr/include/c++/9/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 857:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 858:/usr/include/c++/9/bits/stl_iterator.h **** 
 859:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator&
 860:/usr/include/c++/9/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 861:/usr/include/c++/9/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 862:/usr/include/c++/9/bits/stl_iterator.h **** 
 863:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator
 864:/usr/include/c++/9/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 865:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 866:/usr/include/c++/9/bits/stl_iterator.h **** 
 867:/usr/include/c++/9/bits/stl_iterator.h ****       const _Iterator&
 868:/usr/include/c++/9/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 9268              		.loc 7 868 7
 9269              		.cfi_startproc
 9270 0000 F30F1EFA 		endbr64
 9271 0004 55       		pushq	%rbp
 9272              		.cfi_def_cfa_offset 16
 9273              		.cfi_offset 6, -16
 9274 0005 4889E5   		movq	%rsp, %rbp
 9275              		.cfi_def_cfa_register 6
 9276 0008 4883EC10 		subq	$16, %rsp
 9277 000c 48897DF8 		movq	%rdi, -8(%rbp)
 869:/usr/include/c++/9/bits/stl_iterator.h ****       { return _M_current; }
 9278              		.loc 7 869 16
 9279 0010 488B45F8 		movq	-8(%rbp), %rax
 9280 0014 48837DF8 		cmpq	$0, -8(%rbp)
 9280      00
 9281 0019 740B     		je	.L567
 9282 001b 4889C2   		movq	%rax, %rdx
 9283 001e 83E207   		andl	$7, %edx
 9284 0021 4885D2   		testq	%rdx, %rdx
 9285 0024 740F     		je	.L568
 9286              	.L567:
 9287 0026 4889C6   		movq	%rax, %rsi
 9288 0029 488D3D00 		leaq	.Lubsan_data568(%rip), %rdi
 9288      000000
 9289 0030 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9289      00
 9290              	.L568:
 9291 0035 488B45F8 		movq	-8(%rbp), %rax
 9292 0039 4889C2   		movq	%rax, %rdx
 9293 003c 4885C0   		testq	%rax, %rax
 9294 003f 740B     		je	.L569
 9295 0041 4889D0   		movq	%rdx, %rax
 9296 0044 83E007   		andl	$7, %eax
 9297 0047 4885C0   		testq	%rax, %rax
 9298 004a 740F     		je	.L570
 9299              	.L569:
 9300 004c 4889D6   		movq	%rdx, %rsi
 9301 004f 488D3D00 		leaq	.Lubsan_data569(%rip), %rdi
 9301      000000
 9302 0056 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9302      00
 9303              	.L570:
 9304 005b 488B45F8 		movq	-8(%rbp), %rax
 9305 005f 48837DF8 		cmpq	$0, -8(%rbp)
 9305      00
 9306 0064 740B     		je	.L571
 9307 0066 4889C2   		movq	%rax, %rdx
 9308 0069 83E207   		andl	$7, %edx
 9309 006c 4885D2   		testq	%rdx, %rdx
 9310 006f 740F     		je	.L572
 9311              	.L571:
 9312 0071 4889C6   		movq	%rax, %rsi
 9313 0074 488D3D00 		leaq	.Lubsan_data570(%rip), %rdi
 9313      000000
 9314 007b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9314      00
 9315              	.L572:
 9316 0080 488B45F8 		movq	-8(%rbp), %rax
 9317              		.loc 7 869 28
 9318 0084 C9       		leave
 9319              		.cfi_def_cfa 7, 8
 9320 0085 C3       		ret
 9321              		.cfi_endproc
 9322              	.LFE2816:
 9324              		.data
 9325              		.align 32
 9328              	.Lubsan_type44:
 9331 0ac4 27636F6E 		.string	"'const struct vector'"
 9331      73742073 
 9331      74727563 
 9331      74207665 
 9331      63746F72 
 9332 0ada 00000000 		.zero	38
 9332      00000000 
 9332      00000000 
 9332      00000000 
 9332      00000000 
 9333              		.section	.data.rel.local
 9334              		.align 32
 9337              	.Lubsan_data571:
 9338 2f40 00000000 		.quad	.LC3
 9338      00000000 
 9339 2f48 72030000 		.long	882
 9340 2f4c 2D000000 		.long	45
 9341 2f50 00000000 		.quad	.Lubsan_type44
 9341      00000000 
 9342 2f58 03       		.byte	3
 9343 2f59 03       		.byte	3
 9344 2f5a 00000000 		.zero	6
 9344      0000
 9345 2f60 00000000 		.zero	32
 9345      00000000 
 9345      00000000 
 9345      00000000 
 9345      00000000 
 9346              		.data
 9347              		.align 32
 9350              	.Lubsan_type45:
 9353 0b04 27636F6E 		.string	"'const struct basic_string *'"
 9353      73742073 
 9353      74727563 
 9353      74206261 
 9353      7369635F 
 9354 0b22 00000000 		.zero	62
 9354      00000000 
 9354      00000000 
 9354      00000000 
 9354      00000000 
 9355              		.section	.data.rel.local
 9356              		.align 32
 9359              	.Lubsan_data572:
 9360 2f80 00000000 		.quad	.LC3
 9360      00000000 
 9361 2f88 72030000 		.long	882
 9362 2f8c 2D000000 		.long	45
 9363 2f90 00000000 		.quad	.Lubsan_type45
 9363      00000000 
 9364 2f98 03       		.byte	3
 9365 2f99 02       		.byte	2
 9366 2f9a 00000000 		.zero	6
 9366      0000
 9367 2fa0 00000000 		.zero	32
 9367      00000000 
 9367      00000000 
 9367      00000000 
 9367      00000000 
 9368              		.section	.rodata
 9369              		.align 8
 9370              	.LC22:
 9371 0700 32203332 		.string	"2 32 8 9 <unknown> 64 8 9 <unknown>"
 9371      20382039 
 9371      203C756E 
 9371      6B6E6F77 
 9371      6E3E2036 
 9372              		.section	.text._ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE6cbeginEv
 9373              		.align 2
 9374              		.weak	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE6cbeginEv
 9376              	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE6cbeginEv:
 9377              	.LASANPC2817:
 9378              	.LFB2817:
 881:/usr/include/c++/9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 9379              		.loc 4 881 7
 9380              		.cfi_startproc
 9381 0000 F30F1EFA 		endbr64
 9382 0004 55       		pushq	%rbp
 9383              		.cfi_def_cfa_offset 16
 9384              		.cfi_offset 6, -16
 9385 0005 4889E5   		movq	%rsp, %rbp
 9386              		.cfi_def_cfa_register 6
 9387 0008 4157     		pushq	%r15
 9388 000a 4156     		pushq	%r14
 9389 000c 4155     		pushq	%r13
 9390 000e 4154     		pushq	%r12
 9391 0010 53       		pushq	%rbx
 9392 0011 4881EC98 		subq	$152, %rsp
 9392      000000
 9393              		.cfi_offset 15, -24
 9394              		.cfi_offset 14, -32
 9395              		.cfi_offset 13, -40
 9396              		.cfi_offset 12, -48
 9397              		.cfi_offset 3, -56
 9398 0018 4889BD48 		movq	%rdi, -184(%rbp)
 9398      FFFFFF
 9399 001f 488D9D50 		leaq	-176(%rbp), %rbx
 9399      FFFFFF
 9400 0026 4989DF   		movq	%rbx, %r15
 9401 0029 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 9401      000000
 9402 0030 7412     		je	.L574
 9403 0032 BF600000 		movl	$96, %edi
 9403      00
 9404 0037 E8000000 		call	__asan_stack_malloc_1@PLT
 9404      00
 9405              	.LVL10:
 9406 003c 4885C0   		testq	%rax, %rax
 9407 003f 7403     		je	.L574
 9408 0041 4889C3   		movq	%rax, %rbx
 9409              	.L574:
 9410 0044 488D8380 		leaq	128(%rbx), %rax
 9410      000000
 9411 004b 4989C5   		movq	%rax, %r13
 9412 004e 48C703B3 		movq	$1102416563, (%rbx)
 9412      8AB541
 9413 0055 488D0500 		leaq	.LC22(%rip), %rax
 9413      000000
 9414 005c 48894308 		movq	%rax, 8(%rbx)
 9415 0060 488D0599 		leaq	.LASANPC2817(%rip), %rax
 9415      FFFFFF
 9416 0067 48894310 		movq	%rax, 16(%rbx)
 9417 006b 4989DC   		movq	%rbx, %r12
 9418 006e 49C1EC03 		shrq	$3, %r12
 9419 0072 41C78424 		movl	$-235802127, 2147450880(%r12)
 9419      0080FF7F 
 9419      F1F1F1F1 
 9420 007e 41C78424 		movl	$-218959360, 2147450884(%r12)
 9420      0480FF7F 
 9420      00F2F2F2 
 9421 008a 41C78424 		movl	$-202116352, 2147450888(%r12)
 9421      0880FF7F 
 9421      00F3F3F3 
 881:/usr/include/c++/9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 9422              		.loc 4 881 7
 9423 0096 64488B04 		movq	%fs:40, %rax
 9423      25280000 
 9423      00
 9424 009f 488945C8 		movq	%rax, -56(%rbp)
 9425 00a3 31C0     		xorl	%eax, %eax
 882:/usr/include/c++/9/bits/stl_vector.h **** 
 9426              		.loc 4 882 45
 9427 00a5 488B8548 		movq	-184(%rbp), %rax
 9427      FFFFFF
 9428 00ac 4883BD48 		cmpq	$0, -184(%rbp)
 9428      FFFFFF00 
 9429 00b4 740B     		je	.L578
 9430 00b6 4889C2   		movq	%rax, %rdx
 9431 00b9 83E207   		andl	$7, %edx
 9432 00bc 4885D2   		testq	%rdx, %rdx
 9433 00bf 740F     		je	.L579
 9434              	.L578:
 9435 00c1 4889C6   		movq	%rax, %rsi
 9436 00c4 488D3D00 		leaq	.Lubsan_data571(%rip), %rdi
 9436      000000
 9437 00cb E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9437      00
 9438              	.L579:
 9439 00d0 488B8548 		movq	-184(%rbp), %rax
 9439      FFFFFF
 9440 00d7 4889C2   		movq	%rax, %rdx
 9441 00da 48C1EA03 		shrq	$3, %rdx
 9442 00de 4881C200 		addq	$2147450880, %rdx
 9442      80FF7F
 9443 00e5 0FB612   		movzbl	(%rdx), %edx
 9444 00e8 84D2     		testb	%dl, %dl
 9445 00ea 7408     		je	.L580
 9446 00ec 4889C7   		movq	%rax, %rdi
 9447 00ef E8000000 		call	__asan_report_load8@PLT
 9447      00
 9448              	.L580:
 9449 00f4 488B8548 		movq	-184(%rbp), %rax
 9449      FFFFFF
 9450 00fb 488B10   		movq	(%rax), %rdx
 9451 00fe 498D45A0 		leaq	-96(%r13), %rax
 9452 0102 4889C1   		movq	%rax, %rcx
 9453 0105 48C1E903 		shrq	$3, %rcx
 9454 0109 4881C100 		addq	$2147450880, %rcx
 9454      80FF7F
 9455 0110 0FB609   		movzbl	(%rcx), %ecx
 9456 0113 84C9     		testb	%cl, %cl
 9457 0115 7408     		je	.L581
 9458 0117 4889C7   		movq	%rax, %rdi
 9459 011a E8000000 		call	__asan_report_store8@PLT
 9459      00
 9460              	.L581:
 9461 011f 498955A0 		movq	%rdx, -96(%r13)
 9462 0123 4D8D75A0 		leaq	-96(%r13), %r14
 9463 0127 4C89F0   		movq	%r14, %rax
 9464 012a 4D85F6   		testq	%r14, %r14
 9465 012d 740B     		je	.L582
 9466 012f 4889C2   		movq	%rax, %rdx
 9467 0132 83E207   		andl	$7, %edx
 9468 0135 4885D2   		testq	%rdx, %rdx
 9469 0138 740F     		je	.L583
 9470              	.L582:
 9471 013a 4889C6   		movq	%rax, %rsi
 9472 013d 488D3D00 		leaq	.Lubsan_data572(%rip), %rdi
 9472      000000
 9473 0144 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9473      00
 9474              	.L583:
 882:/usr/include/c++/9/bits/stl_vector.h **** 
 9475              		.loc 4 882 53
 9476 0149 498D45C0 		leaq	-64(%r13), %rax
 9477 014d 4C89F6   		movq	%r14, %rsi
 9478 0150 4889C7   		movq	%rax, %rdi
 9479 0153 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 9479      00
 9480 0158 498D45C0 		leaq	-64(%r13), %rax
 9481 015c 4889C2   		movq	%rax, %rdx
 9482 015f 48C1EA03 		shrq	$3, %rdx
 9483 0163 4881C200 		addq	$2147450880, %rdx
 9483      80FF7F
 9484 016a 0FB612   		movzbl	(%rdx), %edx
 9485 016d 84D2     		testb	%dl, %dl
 9486 016f 7408     		je	.L584
 9487 0171 4889C7   		movq	%rax, %rdi
 9488 0174 E8000000 		call	__asan_report_load8@PLT
 9488      00
 9489              	.L584:
 9490 0179 498B45C0 		movq	-64(%r13), %rax
 9491 017d 4889C2   		movq	%rax, %rdx
 881:/usr/include/c++/9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 9492              		.loc 4 881 7
 9493 0180 4939DF   		cmpq	%rbx, %r15
 9494 0183 742E     		je	.L575
 9495 0185 48C7030E 		movq	$1172321806, (%rbx)
 9495      36E045
 9496 018c 48B8F5F5 		movabsq	$-723401728380766731, %rax
 9496      F5F5F5F5 
 9496      F5F5
 9497 0196 49898424 		movq	%rax, 2147450880(%r12)
 9497      0080FF7F 
 9498 019e 41C78424 		movl	$-168430091, 2147450888(%r12)
 9498      0880FF7F 
 9498      F5F5F5F5 
 9499 01aa 488B4378 		movq	120(%rbx), %rax
 9500 01ae C60000   		movb	$0, (%rax)
 9501 01b1 EB18     		jmp	.L576
 9502              	.L575:
 9503 01b3 49C78424 		movq	$0, 2147450880(%r12)
 9503      0080FF7F 
 9503      00000000 
 9504 01bf 41C78424 		movl	$0, 2147450888(%r12)
 9504      0880FF7F 
 9504      00000000 
 9505              	.L576:
 882:/usr/include/c++/9/bits/stl_vector.h **** 
 9506              		.loc 4 882 56
 9507 01cb 488B45C8 		movq	-56(%rbp), %rax
 9508 01cf 64483304 		xorq	%fs:40, %rax
 9508      25280000 
 9508      00
 9509 01d8 7405     		je	.L586
 9510 01da E8000000 		call	__stack_chk_fail@PLT
 9510      00
 9511              	.L586:
 9512 01df 4889D0   		movq	%rdx, %rax
 9513 01e2 4881C498 		addq	$152, %rsp
 9513      000000
 9514 01e9 5B       		popq	%rbx
 9515 01ea 415C     		popq	%r12
 9516 01ec 415D     		popq	%r13
 9517 01ee 415E     		popq	%r14
 9518 01f0 415F     		popq	%r15
 9519 01f2 5D       		popq	%rbp
 9520              		.cfi_def_cfa 7, 8
 9521 01f3 C3       		ret
 9522              		.cfi_endproc
 9523              	.LFE2817:
 9525              		.section	.data.rel.local
 9526              		.align 32
 9529              	.Lubsan_data573:
 9530 2fc0 00000000 		.quad	.LC13
 9530      00000000 
 9531 2fc8 DD030000 		.long	989
 9532 2fcc 1B000000 		.long	27
 9533 2fd0 00000000 		.quad	.Lubsan_type32
 9533      00000000 
 9534 2fd8 03       		.byte	3
 9535 2fd9 04       		.byte	4
 9536 2fda 00000000 		.zero	6
 9536      0000
 9537 2fe0 00000000 		.zero	32
 9537      00000000 
 9537      00000000 
 9537      00000000 
 9537      00000000 
 9538              		.align 32
 9541              	.Lubsan_data574:
 9542 3000 00000000 		.quad	.LC13
 9542      00000000 
 9543 3008 DD030000 		.long	989
 9544 300c 1B000000 		.long	27
 9545 3010 00000000 		.quad	.Lubsan_type45
 9545      00000000 
 9546 3018 03       		.byte	3
 9547 3019 00       		.byte	0
 9548 301a 00000000 		.zero	6
 9548      0000
 9549 3020 00000000 		.zero	32
 9549      00000000 
 9549      00000000 
 9549      00000000 
 9549      00000000 
 9550              		.align 32
 9553              	.Lubsan_data575:
 9554 3040 00000000 		.quad	.LC13
 9554      00000000 
 9555 3048 DD030000 		.long	989
 9556 304c 1B000000 		.long	27
 9557 3050 00000000 		.quad	.Lubsan_type32
 9557      00000000 
 9558 3058 03       		.byte	3
 9559 3059 04       		.byte	4
 9560 305a 00000000 		.zero	6
 9560      0000
 9561 3060 00000000 		.zero	32
 9561      00000000 
 9561      00000000 
 9561      00000000 
 9561      00000000 
 9562              		.align 32
 9565              	.Lubsan_data576:
 9566 3080 00000000 		.quad	.LC13
 9566      00000000 
 9567 3088 DD030000 		.long	989
 9568 308c 1B000000 		.long	27
 9569 3090 00000000 		.quad	.Lubsan_type45
 9569      00000000 
 9570 3098 03       		.byte	3
 9571 3099 00       		.byte	0
 9572 309a 00000000 		.zero	6
 9572      0000
 9573 30a0 00000000 		.zero	32
 9573      00000000 
 9573      00000000 
 9573      00000000 
 9573      00000000 
 9574              		.section	.text._ZN9__gnu_cxxmiIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_
 9575              		.weak	_ZN9__gnu_cxxmiIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE
 9577              	_ZN9__gnu_cxxmiIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17_
 9578              	.LASANPC2818:
 9579              	.LFB2818:
 870:/usr/include/c++/9/bits/stl_iterator.h ****     };
 871:/usr/include/c++/9/bits/stl_iterator.h **** 
 872:/usr/include/c++/9/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 873:/usr/include/c++/9/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 874:/usr/include/c++/9/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 875:/usr/include/c++/9/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 876:/usr/include/c++/9/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 877:/usr/include/c++/9/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 878:/usr/include/c++/9/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 879:/usr/include/c++/9/bits/stl_iterator.h **** 
 880:/usr/include/c++/9/bits/stl_iterator.h ****   // Forward iterator requirements
 881:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 882:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 883:/usr/include/c++/9/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 884:/usr/include/c++/9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 885:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 886:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 887:/usr/include/c++/9/bits/stl_iterator.h **** 
 888:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 889:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 890:/usr/include/c++/9/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 891:/usr/include/c++/9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 892:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 893:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 894:/usr/include/c++/9/bits/stl_iterator.h **** 
 895:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 896:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 897:/usr/include/c++/9/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 898:/usr/include/c++/9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 899:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 900:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 901:/usr/include/c++/9/bits/stl_iterator.h **** 
 902:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 903:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 904:/usr/include/c++/9/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 905:/usr/include/c++/9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 906:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 907:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 908:/usr/include/c++/9/bits/stl_iterator.h **** 
 909:/usr/include/c++/9/bits/stl_iterator.h ****   // Random access iterator requirements
 910:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 911:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 912:/usr/include/c++/9/bits/stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
 913:/usr/include/c++/9/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 914:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 915:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 916:/usr/include/c++/9/bits/stl_iterator.h **** 
 917:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 918:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 919:/usr/include/c++/9/bits/stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 920:/usr/include/c++/9/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 921:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 922:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 923:/usr/include/c++/9/bits/stl_iterator.h **** 
 924:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 925:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 926:/usr/include/c++/9/bits/stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
 927:/usr/include/c++/9/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 928:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 929:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 930:/usr/include/c++/9/bits/stl_iterator.h **** 
 931:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 932:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 933:/usr/include/c++/9/bits/stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
 934:/usr/include/c++/9/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 935:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 936:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 937:/usr/include/c++/9/bits/stl_iterator.h **** 
 938:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 939:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 940:/usr/include/c++/9/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 941:/usr/include/c++/9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 942:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 943:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 944:/usr/include/c++/9/bits/stl_iterator.h **** 
 945:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 946:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 947:/usr/include/c++/9/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
 948:/usr/include/c++/9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 949:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 950:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 951:/usr/include/c++/9/bits/stl_iterator.h **** 
 952:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 953:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 954:/usr/include/c++/9/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 955:/usr/include/c++/9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 956:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 957:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 958:/usr/include/c++/9/bits/stl_iterator.h **** 
 959:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 960:/usr/include/c++/9/bits/stl_iterator.h ****     inline bool
 961:/usr/include/c++/9/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
 962:/usr/include/c++/9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 963:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 964:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 965:/usr/include/c++/9/bits/stl_iterator.h **** 
 966:/usr/include/c++/9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 967:/usr/include/c++/9/bits/stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
 968:/usr/include/c++/9/bits/stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 969:/usr/include/c++/9/bits/stl_iterator.h ****   // parameters.
 970:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 971:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 972:/usr/include/c++/9/bits/stl_iterator.h ****     // DR 685.
 973:/usr/include/c++/9/bits/stl_iterator.h ****     inline auto
 974:/usr/include/c++/9/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 975:/usr/include/c++/9/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
 976:/usr/include/c++/9/bits/stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
 977:/usr/include/c++/9/bits/stl_iterator.h **** #else
 978:/usr/include/c++/9/bits/stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
 979:/usr/include/c++/9/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 980:/usr/include/c++/9/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 981:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 982:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 983:/usr/include/c++/9/bits/stl_iterator.h **** 
 984:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 985:/usr/include/c++/9/bits/stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
 986:/usr/include/c++/9/bits/stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 9580              		.loc 7 986 5
 9581              		.cfi_startproc
 9582 0000 F30F1EFA 		endbr64
 9583 0004 55       		pushq	%rbp
 9584              		.cfi_def_cfa_offset 16
 9585              		.cfi_offset 6, -16
 9586 0005 4889E5   		movq	%rsp, %rbp
 9587              		.cfi_def_cfa_register 6
 9588 0008 4154     		pushq	%r12
 9589 000a 53       		pushq	%rbx
 9590 000b 4883EC10 		subq	$16, %rsp
 9591              		.cfi_offset 12, -24
 9592              		.cfi_offset 3, -32
 9593 000f 48897DE8 		movq	%rdi, -24(%rbp)
 9594 0013 488975E0 		movq	%rsi, -32(%rbp)
 987:/usr/include/c++/9/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 988:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 989:/usr/include/c++/9/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 9595              		.loc 7 989 27
 9596 0017 488B45E8 		movq	-24(%rbp), %rax
 9597 001b 48837DE8 		cmpq	$0, -24(%rbp)
 9597      00
 9598 0020 740B     		je	.L588
 9599 0022 4889C2   		movq	%rax, %rdx
 9600 0025 83E207   		andl	$7, %edx
 9601 0028 4885D2   		testq	%rdx, %rdx
 9602 002b 740F     		je	.L589
 9603              	.L588:
 9604 002d 4889C6   		movq	%rax, %rsi
 9605 0030 488D3D00 		leaq	.Lubsan_data573(%rip), %rdi
 9605      000000
 9606 0037 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9606      00
 9607              	.L589:
 9608 003c 488B45E8 		movq	-24(%rbp), %rax
 9609 0040 4889C7   		movq	%rax, %rdi
 9610 0043 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6ve
 9610      00
 9611 0048 4889C3   		movq	%rax, %rbx
 9612 004b 4889D8   		movq	%rbx, %rax
 9613 004e 4885DB   		testq	%rbx, %rbx
 9614 0051 740B     		je	.L590
 9615 0053 4889C2   		movq	%rax, %rdx
 9616 0056 83E207   		andl	$7, %edx
 9617 0059 4885D2   		testq	%rdx, %rdx
 9618 005c 740F     		je	.L591
 9619              	.L590:
 9620 005e 4889C6   		movq	%rax, %rsi
 9621 0061 488D3D00 		leaq	.Lubsan_data574(%rip), %rdi
 9621      000000
 9622 0068 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9622      00
 9623              	.L591:
 9624 006d 4889D8   		movq	%rbx, %rax
 9625 0070 4889C2   		movq	%rax, %rdx
 9626 0073 48C1EA03 		shrq	$3, %rdx
 9627 0077 4881C200 		addq	$2147450880, %rdx
 9627      80FF7F
 9628 007e 0FB612   		movzbl	(%rdx), %edx
 9629 0081 84D2     		testb	%dl, %dl
 9630 0083 7408     		je	.L592
 9631 0085 4889C7   		movq	%rax, %rdi
 9632 0088 E8000000 		call	__asan_report_load8@PLT
 9632      00
 9633              	.L592:
 9634 008d 4C8B23   		movq	(%rbx), %r12
 9635 0090 488B45E0 		movq	-32(%rbp), %rax
 9636 0094 48837DE0 		cmpq	$0, -32(%rbp)
 9636      00
 9637 0099 740B     		je	.L593
 9638 009b 4889C2   		movq	%rax, %rdx
 9639 009e 83E207   		andl	$7, %edx
 9640 00a1 4885D2   		testq	%rdx, %rdx
 9641 00a4 740F     		je	.L594
 9642              	.L593:
 9643 00a6 4889C6   		movq	%rax, %rsi
 9644 00a9 488D3D00 		leaq	.Lubsan_data575(%rip), %rdi
 9644      000000
 9645 00b0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9645      00
 9646              	.L594:
 9647 00b5 488B45E0 		movq	-32(%rbp), %rax
 9648 00b9 4889C7   		movq	%rax, %rdi
 9649 00bc E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6ve
 9649      00
 9650 00c1 4889C3   		movq	%rax, %rbx
 9651 00c4 4889D8   		movq	%rbx, %rax
 9652 00c7 4885DB   		testq	%rbx, %rbx
 9653 00ca 740B     		je	.L595
 9654 00cc 4889C2   		movq	%rax, %rdx
 9655 00cf 83E207   		andl	$7, %edx
 9656 00d2 4885D2   		testq	%rdx, %rdx
 9657 00d5 740F     		je	.L596
 9658              	.L595:
 9659 00d7 4889C6   		movq	%rax, %rsi
 9660 00da 488D3D00 		leaq	.Lubsan_data576(%rip), %rdi
 9660      000000
 9661 00e1 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9661      00
 9662              	.L596:
 9663 00e6 4889D8   		movq	%rbx, %rax
 9664 00e9 4889C2   		movq	%rax, %rdx
 9665 00ec 48C1EA03 		shrq	$3, %rdx
 9666 00f0 4881C200 		addq	$2147450880, %rdx
 9666      80FF7F
 9667 00f7 0FB612   		movzbl	(%rdx), %edx
 9668 00fa 84D2     		testb	%dl, %dl
 9669 00fc 7408     		je	.L597
 9670 00fe 4889C7   		movq	%rax, %rdi
 9671 0101 E8000000 		call	__asan_report_load8@PLT
 9671      00
 9672              	.L597:
 9673 0106 488B03   		movq	(%rbx), %rax
 9674 0109 4929C4   		subq	%rax, %r12
 9675 010c 4C89E0   		movq	%r12, %rax
 9676              		.loc 7 989 40
 9677 010f 48C1F805 		sarq	$5, %rax
 9678              		.loc 7 989 43
 9679 0113 4883C410 		addq	$16, %rsp
 9680 0117 5B       		popq	%rbx
 9681 0118 415C     		popq	%r12
 9682 011a 5D       		popq	%rbp
 9683              		.cfi_def_cfa 7, 8
 9684 011b C3       		ret
 9685              		.cfi_endproc
 9686              	.LFE2818:
 9688              		.section	.data.rel.local
 9689              		.align 32
 9692              	.Lubsan_data577:
 9693 30c0 00000000 		.quad	.LC13
 9693      00000000 
 9694 30c8 59030000 		.long	857
 9695 30cc 22000000 		.long	34
 9696 30d0 00000000 		.quad	.Lubsan_type16
 9696      00000000 
 9697 30d8 03       		.byte	3
 9698 30d9 03       		.byte	3
 9699 30da 00000000 		.zero	6
 9699      0000
 9700 30e0 00000000 		.zero	32
 9700      00000000 
 9700      00000000 
 9700      00000000 
 9700      00000000 
 9701              		.align 32
 9704              	.Lubsan_data578:
 9705 3100 00000000 		.quad	.LC13
 9705      00000000 
 9706 3108 59030000 		.long	857
 9707 310c 2D000000 		.long	45
 9708 3110 00000000 		.zero	48
 9708      00000000 
 9708      00000000 
 9708      00000000 
 9708      00000000 
 9709              		.align 32
 9712              	.Lubsan_data579:
 9713 3140 00000000 		.quad	.LC13
 9713      00000000 
 9714 3148 59030000 		.long	857
 9715 314c 2D000000 		.long	45
 9716 3150 00000000 		.quad	.Lubsan_type29
 9716      00000000 
 9717 3158 03       		.byte	3
 9718 3159 02       		.byte	2
 9719 315a 00000000 		.zero	6
 9719      0000
 9720 3160 00000000 		.zero	32
 9720      00000000 
 9720      00000000 
 9720      00000000 
 9720      00000000 
 9721              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 9722              		.align 2
 9723              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6ve
 9725              	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6
 9726              	.LASANPC2819:
 9727              	.LFB2819:
 856:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 9728              		.loc 7 856 7
 9729              		.cfi_startproc
 9730 0000 F30F1EFA 		endbr64
 9731 0004 55       		pushq	%rbp
 9732              		.cfi_def_cfa_offset 16
 9733              		.cfi_offset 6, -16
 9734 0005 4889E5   		movq	%rsp, %rbp
 9735              		.cfi_def_cfa_register 6
 9736 0008 4157     		pushq	%r15
 9737 000a 4156     		pushq	%r14
 9738 000c 4155     		pushq	%r13
 9739 000e 4154     		pushq	%r12
 9740 0010 53       		pushq	%rbx
 9741 0011 4881ECA8 		subq	$168, %rsp
 9741      000000
 9742              		.cfi_offset 15, -24
 9743              		.cfi_offset 14, -32
 9744              		.cfi_offset 13, -40
 9745              		.cfi_offset 12, -48
 9746              		.cfi_offset 3, -56
 9747 0018 4889BD48 		movq	%rdi, -184(%rbp)
 9747      FFFFFF
 9748 001f 4889B540 		movq	%rsi, -192(%rbp)
 9748      FFFFFF
 9749 0026 488D9D50 		leaq	-176(%rbp), %rbx
 9749      FFFFFF
 9750 002d 48899D38 		movq	%rbx, -200(%rbp)
 9750      FFFFFF
 9751 0034 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 9751      000000
 9752 003b 7412     		je	.L599
 9753 003d BF600000 		movl	$96, %edi
 9753      00
 9754 0042 E8000000 		call	__asan_stack_malloc_1@PLT
 9754      00
 9755              	.LVL11:
 9756 0047 4885C0   		testq	%rax, %rax
 9757 004a 7403     		je	.L599
 9758 004c 4889C3   		movq	%rax, %rbx
 9759              	.L599:
 9760 004f 488D8380 		leaq	128(%rbx), %rax
 9760      000000
 9761 0056 4989C5   		movq	%rax, %r13
 9762 0059 48C703B3 		movq	$1102416563, (%rbx)
 9762      8AB541
 9763 0060 488D0500 		leaq	.LC22(%rip), %rax
 9763      000000
 9764 0067 48894308 		movq	%rax, 8(%rbx)
 9765 006b 488D058E 		leaq	.LASANPC2819(%rip), %rax
 9765      FFFFFF
 9766 0072 48894310 		movq	%rax, 16(%rbx)
 9767 0076 4989DC   		movq	%rbx, %r12
 9768 0079 49C1EC03 		shrq	$3, %r12
 9769 007d 41C78424 		movl	$-235802127, 2147450880(%r12)
 9769      0080FF7F 
 9769      F1F1F1F1 
 9770 0089 41C78424 		movl	$-218959360, 2147450884(%r12)
 9770      0480FF7F 
 9770      00F2F2F2 
 9771 0095 41C78424 		movl	$-202116352, 2147450888(%r12)
 9771      0880FF7F 
 9771      00F3F3F3 
 856:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 9772              		.loc 7 856 7
 9773 00a1 64488B04 		movq	%fs:40, %rax
 9773      25280000 
 9773      00
 9774 00aa 488945C8 		movq	%rax, -56(%rbp)
 9775 00ae 31C0     		xorl	%eax, %eax
 857:/usr/include/c++/9/bits/stl_iterator.h **** 
 9776              		.loc 7 857 34
 9777 00b0 488B8548 		movq	-184(%rbp), %rax
 9777      FFFFFF
 9778 00b7 4883BD48 		cmpq	$0, -184(%rbp)
 9778      FFFFFF00 
 9779 00bf 740B     		je	.L603
 9780 00c1 4889C2   		movq	%rax, %rdx
 9781 00c4 83E207   		andl	$7, %edx
 9782 00c7 4885D2   		testq	%rdx, %rdx
 9783 00ca 740F     		je	.L604
 9784              	.L603:
 9785 00cc 4889C6   		movq	%rax, %rsi
 9786 00cf 488D3D00 		leaq	.Lubsan_data577(%rip), %rdi
 9786      000000
 9787 00d6 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9787      00
 9788              	.L604:
 9789 00db 488B8548 		movq	-184(%rbp), %rax
 9789      FFFFFF
 9790 00e2 4889C2   		movq	%rax, %rdx
 9791 00e5 48C1EA03 		shrq	$3, %rdx
 9792 00e9 4881C200 		addq	$2147450880, %rdx
 9792      80FF7F
 9793 00f0 0FB612   		movzbl	(%rdx), %edx
 9794 00f3 84D2     		testb	%dl, %dl
 9795 00f5 7408     		je	.L605
 9796 00f7 4889C7   		movq	%rax, %rdi
 9797 00fa E8000000 		call	__asan_report_load8@PLT
 9797      00
 9798              	.L605:
 9799 00ff 488B8548 		movq	-184(%rbp), %rax
 9799      FFFFFF
 9800 0106 4C8B38   		movq	(%rax), %r15
 857:/usr/include/c++/9/bits/stl_iterator.h **** 
 9801              		.loc 7 857 47
 9802 0109 488B8540 		movq	-192(%rbp), %rax
 9802      FFFFFF
 857:/usr/include/c++/9/bits/stl_iterator.h **** 
 9803              		.loc 7 857 45
 9804 0110 48C1E005 		salq	$5, %rax
 9805 0114 4989C6   		movq	%rax, %r14
 9806 0117 4C89FA   		movq	%r15, %rdx
 9807 011a 4A8D0432 		leaq	(%rdx,%r14), %rax
 9808 011e 4C89F1   		movq	%r14, %rcx
 9809 0121 48F7D1   		notq	%rcx
 9810 0124 48C1E93F 		shrq	$63, %rcx
 9811 0128 84C9     		testb	%cl, %cl
 9812 012a 7419     		je	.L606
 9813 012c 4839D0   		cmpq	%rdx, %rax
 9814 012f 7319     		jnb	.L607
 9815              	.L608:
 9816 0131 4889C2   		movq	%rax, %rdx
 9817 0134 4C89FE   		movq	%r15, %rsi
 9818 0137 488D3D00 		leaq	.Lubsan_data578(%rip), %rdi
 9818      000000
 9819 013e E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 9819      00
 9820 0143 EB05     		jmp	.L607
 9821              	.L606:
 9822 0145 4839D0   		cmpq	%rdx, %rax
 9823 0148 77E7     		ja	.L608
 9824              	.L607:
 9825 014a 4B8D0C37 		leaq	(%r15,%r14), %rcx
 9826 014e 498D45A0 		leaq	-96(%r13), %rax
 9827 0152 4889C2   		movq	%rax, %rdx
 9828 0155 48C1EA03 		shrq	$3, %rdx
 9829 0159 4881C200 		addq	$2147450880, %rdx
 9829      80FF7F
 9830 0160 0FB612   		movzbl	(%rdx), %edx
 9831 0163 84D2     		testb	%dl, %dl
 9832 0165 7408     		je	.L609
 9833 0167 4889C7   		movq	%rax, %rdi
 9834 016a E8000000 		call	__asan_report_store8@PLT
 9834      00
 9835              	.L609:
 9836 016f 49894DA0 		movq	%rcx, -96(%r13)
 9837 0173 4D8D75A0 		leaq	-96(%r13), %r14
 9838 0177 4C89F0   		movq	%r14, %rax
 9839 017a 4D85F6   		testq	%r14, %r14
 9840 017d 740B     		je	.L610
 9841 017f 4889C2   		movq	%rax, %rdx
 9842 0182 83E207   		andl	$7, %edx
 9843 0185 4885D2   		testq	%rdx, %rdx
 9844 0188 740F     		je	.L611
 9845              	.L610:
 9846 018a 4889C6   		movq	%rax, %rsi
 9847 018d 488D3D00 		leaq	.Lubsan_data579(%rip), %rdi
 9847      000000
 9848 0194 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 9848      00
 9849              	.L611:
 857:/usr/include/c++/9/bits/stl_iterator.h **** 
 9850              		.loc 7 857 50
 9851 0199 498D45C0 		leaq	-64(%r13), %rax
 9852 019d 4C89F6   		movq	%r14, %rsi
 9853 01a0 4889C7   		movq	%rax, %rdi
 9854 01a3 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vect
 9854      00
 9855 01a8 498D45C0 		leaq	-64(%r13), %rax
 9856 01ac 4889C2   		movq	%rax, %rdx
 9857 01af 48C1EA03 		shrq	$3, %rdx
 9858 01b3 4881C200 		addq	$2147450880, %rdx
 9858      80FF7F
 9859 01ba 0FB612   		movzbl	(%rdx), %edx
 9860 01bd 84D2     		testb	%dl, %dl
 9861 01bf 7408     		je	.L612
 9862 01c1 4889C7   		movq	%rax, %rdi
 9863 01c4 E8000000 		call	__asan_report_load8@PLT
 9863      00
 9864              	.L612:
 9865 01c9 498B45C0 		movq	-64(%r13), %rax
 9866 01cd 4889C2   		movq	%rax, %rdx
 856:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 9867              		.loc 7 856 7
 9868 01d0 48399D38 		cmpq	%rbx, -200(%rbp)
 9868      FFFFFF
 9869 01d7 742E     		je	.L600
 9870 01d9 48C7030E 		movq	$1172321806, (%rbx)
 9870      36E045
 9871 01e0 48B8F5F5 		movabsq	$-723401728380766731, %rax
 9871      F5F5F5F5 
 9871      F5F5
 9872 01ea 49898424 		movq	%rax, 2147450880(%r12)
 9872      0080FF7F 
 9873 01f2 41C78424 		movl	$-168430091, 2147450888(%r12)
 9873      0880FF7F 
 9873      F5F5F5F5 
 9874 01fe 488B4378 		movq	120(%rbx), %rax
 9875 0202 C60000   		movb	$0, (%rax)
 9876 0205 EB18     		jmp	.L601
 9877              	.L600:
 9878 0207 49C78424 		movq	$0, 2147450880(%r12)
 9878      0080FF7F 
 9878      00000000 
 9879 0213 41C78424 		movl	$0, 2147450888(%r12)
 9879      0880FF7F 
 9879      00000000 
 9880              	.L601:
 857:/usr/include/c++/9/bits/stl_iterator.h **** 
 9881              		.loc 7 857 53
 9882 021f 488B45C8 		movq	-56(%rbp), %rax
 9883 0223 64483304 		xorq	%fs:40, %rax
 9883      25280000 
 9883      00
 9884 022c 7405     		je	.L614
 9885 022e E8000000 		call	__stack_chk_fail@PLT
 9885      00
 9886              	.L614:
 9887 0233 4889D0   		movq	%rdx, %rax
 9888 0236 4881C4A8 		addq	$168, %rsp
 9888      000000
 9889 023d 5B       		popq	%rbx
 9890 023e 415C     		popq	%r12
 9891 0240 415D     		popq	%r13
 9892 0242 415E     		popq	%r14
 9893 0244 415F     		popq	%r15
 9894 0246 5D       		popq	%rbp
 9895              		.cfi_def_cfa 7, 8
 9896 0247 C3       		ret
 9897              		.cfi_endproc
 9898              	.LFE2819:
 9900              		.section	.data.rel.local
 9901              		.align 32
 9904              	.Lubsan_data580:
 9905 3180 00000000 		.quad	.LC19
 9905      00000000 
 9906 3188 AE000000 		.long	174
 9907 318c 1A000000 		.long	26
 9908 3190 00000000 		.quad	.Lubsan_type10
 9908      00000000 
 9909 3198 03       		.byte	3
 9910 3199 04       		.byte	4
 9911 319a 00000000 		.zero	6
 9911      0000
 9912 31a0 00000000 		.zero	32
 9912      00000000 
 9912      00000000 
 9912      00000000 
 9912      00000000 
 9913              		.align 32
 9916              	.Lubsan_data581:
 9917 31c0 00000000 		.quad	.LC19
 9917      00000000 
 9918 31c8 AE000000 		.long	174
 9919 31cc 1A000000 		.long	26
 9920 31d0 00000000 		.quad	.Lubsan_type16
 9920      00000000 
 9921 31d8 03       		.byte	3
 9922 31d9 02       		.byte	2
 9923 31da 00000000 		.zero	6
 9923      0000
 9924 31e0 00000000 		.zero	32
 9924      00000000 
 9924      00000000 
 9924      00000000 
 9924      00000000 
 9925              		.align 32
 9928              	.Lubsan_data582:
 9929 3200 00000000 		.quad	.LC19
 9929      00000000 
 9930 3208 AE000000 		.long	174
 9931 320c 16000000 		.long	22
 9932 3210 00000000 		.quad	.Lubsan_type16
 9932      00000000 
 9933 3218 03       		.byte	3
 9934 3219 02       		.byte	2
 9935 321a 00000000 		.zero	6
 9935      0000
 9936 3220 00000000 		.zero	32
 9936      00000000 
 9936      00000000 
 9936      00000000 
 9936      00000000 
 9937              		.align 32
 9940              	.Lubsan_data583:
 9941 3240 00000000 		.quad	.LC19
 9941      00000000 
 9942 3248 AF000000 		.long	175
 9943 324c 02000000 		.long	2
 9944 3250 00000000 		.quad	.Lubsan_type10
 9944      00000000 
 9945 3258 03       		.byte	3
 9946 3259 04       		.byte	4
 9947 325a 00000000 		.zero	6
 9947      0000
 9948 3260 00000000 		.zero	32
 9948      00000000 
 9948      00000000 
 9948      00000000 
 9948      00000000 
 9949              		.align 32
 9952              	.Lubsan_data584:
 9953 3280 00000000 		.quad	.LC19
 9953      00000000 
 9954 3288 B0000000 		.long	176
 9955 328c 17000000 		.long	23
 9956 3290 00000000 		.quad	.Lubsan_type10
 9956      00000000 
 9957 3298 03       		.byte	3
 9958 3299 03       		.byte	3
 9959 329a 00000000 		.zero	6
 9959      0000
 9960 32a0 00000000 		.zero	32
 9960      00000000 
 9960      00000000 
 9960      00000000 
 9960      00000000 
 9961              		.align 32
 9964              	.Lubsan_data585:
 9965 32c0 00000000 		.quad	.LC19
 9965      00000000 
 9966 32c8 B0000000 		.long	176
 9967 32cc 17000000 		.long	23
 9968 32d0 00000000 		.zero	48
 9968      00000000 
 9968      00000000 
 9968      00000000 
 9968      00000000 
 9969              		.align 32
 9972              	.Lubsan_data586:
 9973 3300 00000000 		.quad	.LC19
 9973      00000000 
 9974 3308 B0000000 		.long	176
 9975 330c 07000000 		.long	7
 9976 3310 00000000 		.zero	48
 9976      00000000 
 9976      00000000 
 9976      00000000 
 9976      00000000 
 9977              		.align 32
 9980              	.Lubsan_data587:
 9981 3340 00000000 		.quad	.LC19
 9981      00000000 
 9982 3348 B0000000 		.long	176
 9983 334c 07000000 		.long	7
 9984 3350 00000000 		.quad	.Lubsan_type10
 9984      00000000 
 9985 3358 03       		.byte	3
 9986 3359 03       		.byte	3
 9987 335a 00000000 		.zero	6
 9987      0000
 9988 3360 00000000 		.zero	32
 9988      00000000 
 9988      00000000 
 9988      00000000 
 9988      00000000 
 9989              		.align 32
 9992              	.Lubsan_data588:
 9993 3380 00000000 		.quad	.LC19
 9993      00000000 
 9994 3388 B0000000 		.long	176
 9995 338c 07000000 		.long	7
 9996 3390 00000000 		.zero	48
 9996      00000000 
 9996      00000000 
 9996      00000000 
 9996      00000000 
 9997              		.align 32
 10000              	.Lubsan_data589:
 10001 33c0 00000000 		.quad	.LC19
 10001      00000000 
 10002 33c8 B1000000 		.long	177
 10003 33cc 1D000000 		.long	29
 10004 33d0 00000000 		.quad	.Lubsan_type10
 10004      00000000 
 10005 33d8 03       		.byte	3
 10006 33d9 03       		.byte	3
 10007 33da 00000000 		.zero	6
 10007      0000
 10008 33e0 00000000 		.zero	32
 10008      00000000 
 10008      00000000 
 10008      00000000 
 10008      00000000 
 10009              		.align 32
 10012              	.Lubsan_data590:
 10013 3400 00000000 		.quad	.LC19
 10013      00000000 
 10014 3408 B1000000 		.long	177
 10015 340c 1D000000 		.long	29
 10016 3410 00000000 		.zero	48
 10016      00000000 
 10016      00000000 
 10016      00000000 
 10016      00000000 
 10017              		.align 32
 10020              	.Lubsan_data591:
 10021 3440 00000000 		.quad	.LC19
 10021      00000000 
 10022 3448 B1000000 		.long	177
 10023 344c 24000000 		.long	36
 10024 3450 00000000 		.quad	.Lubsan_type10
 10024      00000000 
 10025 3458 03       		.byte	3
 10026 3459 03       		.byte	3
 10027 345a 00000000 		.zero	6
 10027      0000
 10028 3460 00000000 		.zero	32
 10028      00000000 
 10028      00000000 
 10028      00000000 
 10028      00000000 
 10029              		.align 32
 10032              	.Lubsan_data592:
 10033 3480 00000000 		.quad	.LC19
 10033      00000000 
 10034 3488 B1000000 		.long	177
 10035 348c 1D000000 		.long	29
 10036 3490 00000000 		.quad	.Lubsan_type28
 10036      00000000 
 10037 3498 00       		.byte	0
 10038 3499 02       		.byte	2
 10039 349a 00000000 		.zero	6
 10039      0000
 10040 34a0 00000000 		.zero	32
 10040      00000000 
 10040      00000000 
 10040      00000000 
 10040      00000000 
 10041              		.section	.rodata
 10042 0724 00000000 		.align 8
 10043              	.LC23:
 10044 0728 33203332 		.string	"3 32 8 9 <unknown> 64 8 9 <unknown> 96 8 14 __position:172"
 10044      20382039 
 10044      203C756E 
 10044      6B6E6F77 
 10044      6E3E2036 
 10045              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8_M_eraseE
 10046              		.align 2
 10047              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8_M_eraseEN9__gnu_c
 10049              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8_M_eraseEN9__gnu_cxx17__n
 10050              	.LASANPC2820:
 10051              	.LFB2820:
 171:/usr/include/c++/9/bits/vector.tcc ****     _M_erase(iterator __position)
 10052              		.loc 14 171 5
 10053              		.cfi_startproc
 10054 0000 F30F1EFA 		endbr64
 10055 0004 55       		pushq	%rbp
 10056              		.cfi_def_cfa_offset 16
 10057              		.cfi_offset 6, -16
 10058 0005 4889E5   		movq	%rsp, %rbp
 10059              		.cfi_def_cfa_register 6
 10060 0008 4157     		pushq	%r15
 10061 000a 4156     		pushq	%r14
 10062 000c 4155     		pushq	%r13
 10063 000e 4154     		pushq	%r12
 10064 0010 53       		pushq	%rbx
 10065 0011 4881ECC8 		subq	$200, %rsp
 10065      000000
 10066              		.cfi_offset 15, -24
 10067              		.cfi_offset 14, -32
 10068              		.cfi_offset 13, -40
 10069              		.cfi_offset 12, -48
 10070              		.cfi_offset 3, -56
 10071 0018 4889BD28 		movq	%rdi, -216(%rbp)
 10071      FFFFFF
 10072 001f 4889B520 		movq	%rsi, -224(%rbp)
 10072      FFFFFF
 10073 0026 4C8DA530 		leaq	-208(%rbp), %r12
 10073      FFFFFF
 10074 002d 4C89A518 		movq	%r12, -232(%rbp)
 10074      FFFFFF
 10075 0034 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 10075      000000
 10076 003b 7412     		je	.L615
 10077 003d BF800000 		movl	$128, %edi
 10077      00
 10078 0042 E8000000 		call	__asan_stack_malloc_1@PLT
 10078      00
 10079              	.LVL12:
 10080 0047 4885C0   		testq	%rax, %rax
 10081 004a 7403     		je	.L615
 10082 004c 4989C4   		movq	%rax, %r12
 10083              	.L615:
 10084 004f 498D8424 		leaq	160(%r12), %rax
 10084      A0000000 
 10085 0057 4889C3   		movq	%rax, %rbx
 10086 005a 49C70424 		movq	$1102416563, (%r12)
 10086      B38AB541 
 10087 0062 488D0500 		leaq	.LC23(%rip), %rax
 10087      000000
 10088 0069 49894424 		movq	%rax, 8(%r12)
 10088      08
 10089 006e 488D058B 		leaq	.LASANPC2820(%rip), %rax
 10089      FFFFFF
 10090 0075 49894424 		movq	%rax, 16(%r12)
 10090      10
 10091 007a 4D89E5   		movq	%r12, %r13
 10092 007d 49C1ED03 		shrq	$3, %r13
 10093 0081 41C78500 		movl	$-235802127, 2147450880(%r13)
 10093      80FF7FF1 
 10093      F1F1F1
 10094 008c 41C78504 		movl	$-218959360, 2147450884(%r13)
 10094      80FF7F00 
 10094      F2F2F2
 10095 0097 41C78508 		movl	$-218959360, 2147450888(%r13)
 10095      80FF7F00 
 10095      F2F2F2
 10096 00a2 41C7850C 		movl	$-202116352, 2147450892(%r13)
 10096      80FF7F00 
 10096      F3F3F3
 171:/usr/include/c++/9/bits/vector.tcc ****     _M_erase(iterator __position)
 10097              		.loc 14 171 5
 10098 00ad 64488B04 		movq	%fs:40, %rax
 10098      25280000 
 10098      00
 10099 00b6 488945C8 		movq	%rax, -56(%rbp)
 10100 00ba 31C0     		xorl	%eax, %eax
 172:/usr/include/c++/9/bits/vector.tcc ****     {
 10101              		.loc 14 172 23
 10102 00bc 488B8520 		movq	-224(%rbp), %rax
 10102      FFFFFF
 10103 00c3 488943C0 		movq	%rax, -64(%rbx)
 174:/usr/include/c++/9/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 10104              		.loc 14 174 26
 10105 00c7 488B8528 		movq	-216(%rbp), %rax
 10105      FFFFFF
 10106 00ce 4883BD28 		cmpq	$0, -216(%rbp)
 10106      FFFFFF00 
 10107 00d6 740B     		je	.L619
 10108 00d8 4889C2   		movq	%rax, %rdx
 10109 00db 83E207   		andl	$7, %edx
 10110 00de 4885D2   		testq	%rdx, %rdx
 10111 00e1 740F     		je	.L620
 10112              	.L619:
 10113 00e3 4889C6   		movq	%rax, %rsi
 10114 00e6 488D3D00 		leaq	.Lubsan_data580(%rip), %rdi
 10114      000000
 10115 00ed E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10115      00
 10116              	.L620:
 10117 00f2 488D43A0 		leaq	-96(%rbx), %rax
 10118 00f6 4889C2   		movq	%rax, %rdx
 10119 00f9 48C1EA03 		shrq	$3, %rdx
 10120 00fd 4881C200 		addq	$2147450880, %rdx
 10120      80FF7F
 10121 0104 0FB612   		movzbl	(%rdx), %edx
 10122 0107 84D2     		testb	%dl, %dl
 10123 0109 7408     		je	.L621
 10124 010b 4889C7   		movq	%rax, %rdi
 10125 010e E8000000 		call	__asan_report_store8@PLT
 10125      00
 10126              	.L621:
 10127 0113 488B8528 		movq	-216(%rbp), %rax
 10127      FFFFFF
 10128 011a 4889C7   		movq	%rax, %rdi
 10129 011d E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv
 10129      00
 10130 0122 488943A0 		movq	%rax, -96(%rbx)
 10131 0126 4C8D7BA0 		leaq	-96(%rbx), %r15
 10132 012a 4C89F8   		movq	%r15, %rax
 10133 012d 4D85FF   		testq	%r15, %r15
 10134 0130 740B     		je	.L622
 10135 0132 4889C2   		movq	%rax, %rdx
 10136 0135 83E207   		andl	$7, %edx
 10137 0138 4885D2   		testq	%rdx, %rdx
 10138 013b 740F     		je	.L623
 10139              	.L622:
 10140 013d 4889C6   		movq	%rax, %rsi
 10141 0140 488D3D00 		leaq	.Lubsan_data581(%rip), %rdi
 10141      000000
 10142 0147 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10142      00
 10143              	.L623:
 174:/usr/include/c++/9/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 10144              		.loc 14 174 22
 10145 014c 488D4380 		leaq	-128(%rbx), %rax
 10146 0150 4889C2   		movq	%rax, %rdx
 10147 0153 48C1EA03 		shrq	$3, %rdx
 10148 0157 4881C200 		addq	$2147450880, %rdx
 10148      80FF7F
 10149 015e 0FB612   		movzbl	(%rdx), %edx
 10150 0161 84D2     		testb	%dl, %dl
 10151 0163 7408     		je	.L624
 10152 0165 4889C7   		movq	%rax, %rdi
 10153 0168 E8000000 		call	__asan_report_store8@PLT
 10153      00
 10154              	.L624:
 10155 016d 488D43C0 		leaq	-64(%rbx), %rax
 10156 0171 BE010000 		movl	$1, %esi
 10156      00
 10157 0176 4889C7   		movq	%rax, %rdi
 10158 0179 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 10158      00
 10159 017e 48894380 		movq	%rax, -128(%rbx)
 10160 0182 4C8D7380 		leaq	-128(%rbx), %r14
 10161 0186 4C89F0   		movq	%r14, %rax
 10162 0189 4D85F6   		testq	%r14, %r14
 10163 018c 740B     		je	.L625
 10164 018e 4889C2   		movq	%rax, %rdx
 10165 0191 83E207   		andl	$7, %edx
 10166 0194 4885D2   		testq	%rdx, %rdx
 10167 0197 740F     		je	.L626
 10168              	.L625:
 10169 0199 4889C6   		movq	%rax, %rsi
 10170 019c 488D3D00 		leaq	.Lubsan_data582(%rip), %rdi
 10170      000000
 10171 01a3 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10171      00
 10172              	.L626:
 174:/usr/include/c++/9/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 10173              		.loc 14 174 26
 10174 01a8 4C89FE   		movq	%r15, %rsi
 10175 01ab 4C89F7   		movq	%r14, %rdi
 10176 01ae E8000000 		call	_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEb
 10176      00
 174:/usr/include/c++/9/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 10177              		.loc 14 174 22
 10178 01b3 488D5380 		leaq	-128(%rbx), %rdx
 10179 01b7 48C1EA03 		shrq	$3, %rdx
 10180 01bb 4881C200 		addq	$2147450880, %rdx
 10180      80FF7F
 10181 01c2 C602F8   		movb	$-8, (%rdx)
 174:/usr/include/c++/9/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 10182              		.loc 14 174 26
 10183 01c5 488D53A0 		leaq	-96(%rbx), %rdx
 10184 01c9 48C1EA03 		shrq	$3, %rdx
 10185 01cd 4881C200 		addq	$2147450880, %rdx
 10185      80FF7F
 10186 01d4 C602F8   		movb	$-8, (%rdx)
 174:/usr/include/c++/9/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 10187              		.loc 14 174 7
 10188 01d7 84C0     		testb	%al, %al
 10189 01d9 7463     		je	.L627
 175:/usr/include/c++/9/bits/vector.tcc ****       --this->_M_impl._M_finish;
 10190              		.loc 14 175 2
 10191 01db 488B8528 		movq	-216(%rbp), %rax
 10191      FFFFFF
 10192 01e2 4883BD28 		cmpq	$0, -216(%rbp)
 10192      FFFFFF00 
 10193 01ea 740B     		je	.L628
 10194 01ec 4889C2   		movq	%rax, %rdx
 10195 01ef 83E207   		andl	$7, %edx
 10196 01f2 4885D2   		testq	%rdx, %rdx
 10197 01f5 740F     		je	.L629
 10198              	.L628:
 10199 01f7 4889C6   		movq	%rax, %rsi
 10200 01fa 488D3D00 		leaq	.Lubsan_data583(%rip), %rdi
 10200      000000
 10201 0201 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10201      00
 10202              	.L629:
 10203 0206 488B8528 		movq	-216(%rbp), %rax
 10203      FFFFFF
 10204 020d 4889C7   		movq	%rax, %rdi
 10205 0210 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv
 10205      00
 10206 0215 4989C6   		movq	%rax, %r14
 10207 0218 488D43C0 		leaq	-64(%rbx), %rax
 10208 021c BE010000 		movl	$1, %esi
 10208      00
 10209 0221 4889C7   		movq	%rax, %rdi
 10210 0224 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 10210      00
 10211 0229 4889C1   		movq	%rax, %rcx
 10212 022c 488B43C0 		movq	-64(%rbx), %rax
 10213 0230 4889C2   		movq	%rax, %rdx
 10214 0233 4C89F6   		movq	%r14, %rsi
 10215 0236 4889CF   		movq	%rcx, %rdi
 10216 0239 E8000000 		call	_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 10216      00
 10217              	.L627:
 176:/usr/include/c++/9/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 10218              		.loc 14 176 23
 10219 023e 488B8528 		movq	-216(%rbp), %rax
 10219      FFFFFF
 10220 0245 4883BD28 		cmpq	$0, -216(%rbp)
 10220      FFFFFF00 
 10221 024d 740B     		je	.L630
 10222 024f 4889C2   		movq	%rax, %rdx
 10223 0252 83E207   		andl	$7, %edx
 10224 0255 4885D2   		testq	%rdx, %rdx
 10225 0258 740F     		je	.L631
 10226              	.L630:
 10227 025a 4889C6   		movq	%rax, %rsi
 10228 025d 488D3D00 		leaq	.Lubsan_data584(%rip), %rdi
 10228      000000
 10229 0264 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10229      00
 10230              	.L631:
 10231 0269 488B8528 		movq	-216(%rbp), %rax
 10231      FFFFFF
 10232 0270 488D5008 		leaq	8(%rax), %rdx
 10233 0274 4883F8F8 		cmpq	$-8, %rax
 10234 0278 7216     		jb	.L632
 10235 027a 488B8528 		movq	-216(%rbp), %rax
 10235      FFFFFF
 10236 0281 4889C6   		movq	%rax, %rsi
 10237 0284 488D3D00 		leaq	.Lubsan_data585(%rip), %rdi
 10237      000000
 10238 028b E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 10238      00
 10239              	.L632:
 10240 0290 488B8528 		movq	-216(%rbp), %rax
 10240      FFFFFF
 10241 0297 4883C008 		addq	$8, %rax
 10242 029b 4889C2   		movq	%rax, %rdx
 10243 029e 48C1EA03 		shrq	$3, %rdx
 10244 02a2 4881C200 		addq	$2147450880, %rdx
 10244      80FF7F
 10245 02a9 0FB612   		movzbl	(%rdx), %edx
 10246 02ac 84D2     		testb	%dl, %dl
 10247 02ae 7408     		je	.L633
 10248 02b0 4889C7   		movq	%rax, %rdi
 10249 02b3 E8000000 		call	__asan_report_load8@PLT
 10249      00
 10250              	.L633:
 10251 02b8 488B8528 		movq	-216(%rbp), %rax
 10251      FFFFFF
 10252 02bf 4C8B7008 		movq	8(%rax), %r14
 176:/usr/include/c++/9/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 10253              		.loc 14 176 7
 10254 02c3 4C89F2   		movq	%r14, %rdx
 10255 02c6 488D42E0 		leaq	-32(%rdx), %rax
 10256 02ca 4883FA20 		cmpq	$32, %rdx
 10257 02ce 7312     		jnb	.L634
 10258 02d0 4889C2   		movq	%rax, %rdx
 10259 02d3 4C89F6   		movq	%r14, %rsi
 10260 02d6 488D3D00 		leaq	.Lubsan_data586(%rip), %rdi
 10260      000000
 10261 02dd E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 10261      00
 10262              	.L634:
 10263 02e2 4983EE20 		subq	$32, %r14
 10264 02e6 488B8528 		movq	-216(%rbp), %rax
 10264      FFFFFF
 10265 02ed 4883BD28 		cmpq	$0, -216(%rbp)
 10265      FFFFFF00 
 10266 02f5 740B     		je	.L635
 10267 02f7 4889C2   		movq	%rax, %rdx
 10268 02fa 83E207   		andl	$7, %edx
 10269 02fd 4885D2   		testq	%rdx, %rdx
 10270 0300 740F     		je	.L636
 10271              	.L635:
 10272 0302 4889C6   		movq	%rax, %rsi
 10273 0305 488D3D00 		leaq	.Lubsan_data587(%rip), %rdi
 10273      000000
 10274 030c E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10274      00
 10275              	.L636:
 10276 0311 488B8528 		movq	-216(%rbp), %rax
 10276      FFFFFF
 10277 0318 488D5008 		leaq	8(%rax), %rdx
 10278 031c 4883F8F8 		cmpq	$-8, %rax
 10279 0320 7216     		jb	.L637
 10280 0322 488B8528 		movq	-216(%rbp), %rax
 10280      FFFFFF
 10281 0329 4889C6   		movq	%rax, %rsi
 10282 032c 488D3D00 		leaq	.Lubsan_data588(%rip), %rdi
 10282      000000
 10283 0333 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 10283      00
 10284              	.L637:
 10285 0338 488B8528 		movq	-216(%rbp), %rax
 10285      FFFFFF
 10286 033f 4C897008 		movq	%r14, 8(%rax)
 177:/usr/include/c++/9/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 10287              		.loc 14 177 29
 10288 0343 488B8528 		movq	-216(%rbp), %rax
 10288      FFFFFF
 10289 034a 4883BD28 		cmpq	$0, -216(%rbp)
 10289      FFFFFF00 
 10290 0352 740B     		je	.L638
 10291 0354 4889C2   		movq	%rax, %rdx
 10292 0357 83E207   		andl	$7, %edx
 10293 035a 4885D2   		testq	%rdx, %rdx
 10294 035d 740F     		je	.L639
 10295              	.L638:
 10296 035f 4889C6   		movq	%rax, %rsi
 10297 0362 488D3D00 		leaq	.Lubsan_data589(%rip), %rdi
 10297      000000
 10298 0369 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10298      00
 10299              	.L639:
 10300 036e 488B8528 		movq	-216(%rbp), %rax
 10300      FFFFFF
 10301 0375 488D5008 		leaq	8(%rax), %rdx
 10302 0379 4883F8F8 		cmpq	$-8, %rax
 10303 037d 7216     		jb	.L640
 10304 037f 488B8528 		movq	-216(%rbp), %rax
 10304      FFFFFF
 10305 0386 4889C6   		movq	%rax, %rsi
 10306 0389 488D3D00 		leaq	.Lubsan_data590(%rip), %rdi
 10306      000000
 10307 0390 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 10307      00
 10308              	.L640:
 10309 0395 488B8528 		movq	-216(%rbp), %rax
 10309      FFFFFF
 10310 039c 4C8B7808 		movq	8(%rax), %r15
 177:/usr/include/c++/9/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 10311              		.loc 14 177 36
 10312 03a0 488B8528 		movq	-216(%rbp), %rax
 10312      FFFFFF
 10313 03a7 4883BD28 		cmpq	$0, -216(%rbp)
 10313      FFFFFF00 
 10314 03af 740B     		je	.L641
 10315 03b1 4889C2   		movq	%rax, %rdx
 10316 03b4 83E207   		andl	$7, %edx
 10317 03b7 4885D2   		testq	%rdx, %rdx
 10318 03ba 740F     		je	.L642
 10319              	.L641:
 10320 03bc 4889C6   		movq	%rax, %rsi
 10321 03bf 488D3D00 		leaq	.Lubsan_data591(%rip), %rdi
 10321      000000
 10322 03c6 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10322      00
 10323              	.L642:
 10324 03cb 4C8BB528 		movq	-216(%rbp), %r14
 10324      FFFFFF
 177:/usr/include/c++/9/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 10325              		.loc 14 177 29
 10326 03d2 4D85F6   		testq	%r14, %r14
 10327 03d5 7511     		jne	.L643
 10328 03d7 BE000000 		movl	$0, %esi
 10328      00
 10329 03dc 488D3D00 		leaq	.Lubsan_data592(%rip), %rdi
 10329      000000
 10330 03e3 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10330      00
 10331              	.L643:
 10332 03e8 4C89FE   		movq	%r15, %rsi
 10333 03eb 4C89F7   		movq	%r14, %rdi
 10334 03ee E8000000 		call	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_
 10334      00
 179:/usr/include/c++/9/bits/vector.tcc ****     }
 10335              		.loc 14 179 14
 10336 03f3 488B43C0 		movq	-64(%rbx), %rax
 10337 03f7 4889C2   		movq	%rax, %rdx
 171:/usr/include/c++/9/bits/vector.tcc ****     _M_erase(iterator __position)
 10338              		.loc 14 171 5
 10339 03fa 4C39A518 		cmpq	%r12, -232(%rbp)
 10339      FFFFFF
 10340 0401 7434     		je	.L616
 10341 0403 49C70424 		movq	$1172321806, (%r12)
 10341      0E36E045 
 10342 040b 48B9F5F5 		movabsq	$-723401728380766731, %rcx
 10342      F5F5F5F5 
 10342      F5F5
 10343 0415 48BBF5F5 		movabsq	$-723401728380766731, %rbx
 10343      F5F5F5F5 
 10343      F5F5
 10344 041f 49898D00 		movq	%rcx, 2147450880(%r13)
 10344      80FF7F
 10345 0426 49899D08 		movq	%rbx, 2147450888(%r13)
 10345      80FF7F
 10346 042d 498B4424 		movq	120(%r12), %rax
 10346      78
 10347 0432 C60000   		movb	$0, (%rax)
 10348 0435 EB16     		jmp	.L617
 10349              	.L616:
 10350 0437 49C78500 		movq	$0, 2147450880(%r13)
 10350      80FF7F00 
 10350      000000
 10351 0442 49C78508 		movq	$0, 2147450888(%r13)
 10351      80FF7F00 
 10351      000000
 10352              	.L617:
 180:/usr/include/c++/9/bits/vector.tcc **** 
 10353              		.loc 14 180 5
 10354 044d 488B45C8 		movq	-56(%rbp), %rax
 10355 0451 64483304 		xorq	%fs:40, %rax
 10355      25280000 
 10355      00
 10356 045a 7405     		je	.L645
 10357 045c E8000000 		call	__stack_chk_fail@PLT
 10357      00
 10358              	.L645:
 10359 0461 4889D0   		movq	%rdx, %rax
 10360 0464 4881C4C8 		addq	$200, %rsp
 10360      000000
 10361 046b 5B       		popq	%rbx
 10362 046c 415C     		popq	%r12
 10363 046e 415D     		popq	%r13
 10364 0470 415E     		popq	%r14
 10365 0472 415F     		popq	%r15
 10366 0474 5D       		popq	%rbp
 10367              		.cfi_def_cfa 7, 8
 10368 0475 C3       		ret
 10369              		.cfi_endproc
 10370              	.LFE2820:
 10372              		.section	.data.rel.local
 10373              		.align 32
 10376              	.Lubsan_data593:
 10377 34c0 00000000 		.quad	.LC9
 10377      00000000 
 10378 34c8 FB000000 		.long	251
 10379 34cc 0B000000 		.long	11
 10380 34d0 00000000 		.quad	.Lubsan_type5
 10380      00000000 
 10381 34d8 03       		.byte	3
 10382 34d9 04       		.byte	4
 10383 34da 00000000 		.zero	6
 10383      0000
 10384 34e0 00000000 		.zero	32
 10384      00000000 
 10384      00000000 
 10384      00000000 
 10384      00000000 
 10385              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_
 10386              		.align 2
 10387              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__fal
 10389              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type
 10390              	.LASANPC2831:
 10391              	.LFB2831:
 247:/usr/include/c++/9/bits/basic_string.h **** 			 std::__false_type)
 10392              		.loc 5 247 9
 10393              		.cfi_startproc
 10394 0000 F30F1EFA 		endbr64
 10395 0004 55       		pushq	%rbp
 10396              		.cfi_def_cfa_offset 16
 10397              		.cfi_offset 6, -16
 10398 0005 4889E5   		movq	%rsp, %rbp
 10399              		.cfi_def_cfa_register 6
 10400 0008 4155     		pushq	%r13
 10401 000a 4154     		pushq	%r12
 10402 000c 53       		pushq	%rbx
 10403 000d 4881EC88 		subq	$136, %rsp
 10403      000000
 10404              		.cfi_offset 13, -24
 10405              		.cfi_offset 12, -32
 10406              		.cfi_offset 3, -40
 10407 0014 4889BD78 		movq	%rdi, -136(%rbp)
 10407      FFFFFF
 10408 001b 4889B570 		movq	%rsi, -144(%rbp)
 10408      FFFFFF
 10409 0022 48899568 		movq	%rdx, -152(%rbp)
 10409      FFFFFF
 10410 0029 488D5D80 		leaq	-128(%rbp), %rbx
 10411 002d 4989DD   		movq	%rbx, %r13
 10412 0030 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 10412      000000
 10413 0037 7412     		je	.L646
 10414 0039 BF400000 		movl	$64, %edi
 10414      00
 10415 003e E8000000 		call	__asan_stack_malloc_0@PLT
 10415      00
 10416              	.LVL13:
 10417 0043 4885C0   		testq	%rax, %rax
 10418 0046 7403     		je	.L646
 10419 0048 4889C3   		movq	%rax, %rbx
 10420              	.L646:
 10421 004b 48C703B3 		movq	$1102416563, (%rbx)
 10421      8AB541
 10422 0052 488D0500 		leaq	.LC8(%rip), %rax
 10422      000000
 10423 0059 48894308 		movq	%rax, 8(%rbx)
 10424 005d 488D059C 		leaq	.LASANPC2831(%rip), %rax
 10424      FFFFFF
 10425 0064 48894310 		movq	%rax, 16(%rbx)
 10426 0068 4989DC   		movq	%rbx, %r12
 10427 006b 49C1EC03 		shrq	$3, %r12
 10428 006f 41C78424 		movl	$-235802127, 2147450880(%r12)
 10428      0080FF7F 
 10428      F1F1F1F1 
 10429 007b 41C78424 		movl	$-202116351, 2147450884(%r12)
 10429      0480FF7F 
 10429      01F3F3F3 
 247:/usr/include/c++/9/bits/basic_string.h **** 			 std::__false_type)
 10430              		.loc 5 247 9
 10431 0087 64488B04 		movq	%fs:40, %rax
 10431      25280000 
 10431      00
 10432 0090 488945D8 		movq	%rax, -40(%rbp)
 10433 0094 31C0     		xorl	%eax, %eax
 251:/usr/include/c++/9/bits/basic_string.h **** 	}
 10434              		.loc 5 251 11
 10435 0096 488B8578 		movq	-136(%rbp), %rax
 10435      FFFFFF
 10436 009d 4883BD78 		cmpq	$0, -136(%rbp)
 10436      FFFFFF00 
 10437 00a5 740B     		je	.L650
 10438 00a7 4889C2   		movq	%rax, %rdx
 10439 00aa 83E207   		andl	$7, %edx
 10440 00ad 4885D2   		testq	%rdx, %rdx
 10441 00b0 740F     		je	.L651
 10442              	.L650:
 10443 00b2 4889C6   		movq	%rax, %rsi
 10444 00b5 488D3D00 		leaq	.Lubsan_data593(%rip), %rdi
 10444      000000
 10445 00bc E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10445      00
 10446              	.L651:
 10447 00c1 488B9568 		movq	-152(%rbp), %rdx
 10447      FFFFFF
 10448 00c8 488B8D70 		movq	-144(%rbp), %rcx
 10448      FFFFFF
 10449 00cf 488B8578 		movq	-136(%rbp), %rax
 10449      FFFFFF
 10450 00d6 4889CE   		movq	%rcx, %rsi
 10451 00d9 4889C7   		movq	%rax, %rdi
 10452 00dc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_it
 10452      00
 252:/usr/include/c++/9/bits/basic_string.h **** 
 10453              		.loc 5 252 2
 10454 00e1 90       		nop
 247:/usr/include/c++/9/bits/basic_string.h **** 			 std::__false_type)
 10455              		.loc 5 247 9
 10456 00e2 4939DD   		cmpq	%rbx, %r13
 10457 00e5 7422     		je	.L647
 10458 00e7 48C7030E 		movq	$1172321806, (%rbx)
 10458      36E045
 10459 00ee 48B8F5F5 		movabsq	$-723401728380766731, %rax
 10459      F5F5F5F5 
 10459      F5F5
 10460 00f8 49898424 		movq	%rax, 2147450880(%r12)
 10460      0080FF7F 
 10461 0100 488B4338 		movq	56(%rbx), %rax
 10462 0104 C60000   		movb	$0, (%rax)
 10463 0107 EB0C     		jmp	.L648
 10464              	.L647:
 10465 0109 49C78424 		movq	$0, 2147450880(%r12)
 10465      0080FF7F 
 10465      00000000 
 10466              	.L648:
 252:/usr/include/c++/9/bits/basic_string.h **** 
 10467              		.loc 5 252 2
 10468 0115 488B45D8 		movq	-40(%rbp), %rax
 10469 0119 64483304 		xorq	%fs:40, %rax
 10469      25280000 
 10469      00
 10470 0122 7405     		je	.L652
 10471 0124 E8000000 		call	__stack_chk_fail@PLT
 10471      00
 10472              	.L652:
 10473 0129 4881C488 		addq	$136, %rsp
 10473      000000
 10474 0130 5B       		popq	%rbx
 10475 0131 415C     		popq	%r12
 10476 0133 415D     		popq	%r13
 10477 0135 5D       		popq	%rbp
 10478              		.cfi_def_cfa 7, 8
 10479 0136 C3       		ret
 10480              		.cfi_endproc
 10481              	.LFE2831:
 10483              		.section	.data.rel.local
 10484              		.align 32
 10487              	.Lubsan_data594:
 10488 3500 00000000 		.quad	.LC3
 10488      00000000 
 10489 3508 85000000 		.long	133
 10490 350c 02000000 		.long	2
 10491 3510 00000000 		.quad	.Lubsan_type7
 10491      00000000 
 10492 3518 03       		.byte	3
 10493 3519 02       		.byte	2
 10494 351a 00000000 		.zero	6
 10494      0000
 10495 3520 00000000 		.zero	32
 10495      00000000 
 10495      00000000 
 10495      00000000 
 10495      00000000 
 10496              		.align 32
 10499              	.Lubsan_data595:
 10500 3540 00000000 		.quad	.LC3
 10500      00000000 
 10501 3548 86000000 		.long	134
 10502 354c 16000000 		.long	22
 10503 3550 00000000 		.quad	.Lubsan_type6
 10503      00000000 
 10504 3558 00       		.byte	0
 10505 3559 05       		.byte	5
 10506 355a 00000000 		.zero	6
 10506      0000
 10507 3560 00000000 		.zero	32
 10507      00000000 
 10507      00000000 
 10507      00000000 
 10507      00000000 
 10508              		.data
 10509              		.align 32
 10512              	.Lubsan_type46:
 10515 0b64 27636F6E 		.string	"'const struct allocator'"
 10515      73742073 
 10515      74727563 
 10515      7420616C 
 10515      6C6F6361 
 10516 0b7d 00000000 		.zero	35
 10516      00000000 
 10516      00000000 
 10516      00000000 
 10516      00000000 
 10517              		.section	.data.rel.local
 10518              		.align 32
 10521              	.Lubsan_data596:
 10522 3580 00000000 		.quad	.LC3
 10522      00000000 
 10523 3588 86000000 		.long	134
 10524 358c 16000000 		.long	22
 10525 3590 00000000 		.quad	.Lubsan_type46
 10525      00000000 
 10526 3598 00       		.byte	0
 10527 3599 02       		.byte	2
 10528 359a 00000000 		.zero	6
 10528      0000
 10529 35a0 00000000 		.zero	32
 10529      00000000 
 10529      00000000 
 10529      00000000 
 10529      00000000 
 10530              		.align 32
 10533              	.Lubsan_data597:
 10534 35c0 00000000 		.quad	.LC3
 10534      00000000 
 10535 35c8 86000000 		.long	134
 10536 35cc 16000000 		.long	22
 10537 35d0 00000000 		.quad	.Lubsan_type9
 10537      00000000 
 10538 35d8 03       		.byte	3
 10539 35d9 03       		.byte	3
 10540 35da 00000000 		.zero	6
 10540      0000
 10541 35e0 00000000 		.zero	32
 10541      00000000 
 10541      00000000 
 10541      00000000 
 10541      00000000 
 10542              		.align 32
 10545              	.Lubsan_data598:
 10546 3600 00000000 		.quad	.LC3
 10546      00000000 
 10547 3608 86000000 		.long	134
 10548 360c 16000000 		.long	22
 10549 3610 00000000 		.quad	.Lubsan_type25
 10549      00000000 
 10550 3618 03       		.byte	3
 10551 3619 05       		.byte	5
 10552 361a 00000000 		.zero	6
 10552      0000
 10553 3620 00000000 		.zero	32
 10553      00000000 
 10553      00000000 
 10553      00000000 
 10553      00000000 
 10554              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_
 10555              		.align 2
 10556              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_im
 10558              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC2ERK
 10559              	.LASANPC2861:
 10560              	.LFB2861:
 133:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 10561              		.loc 4 133 2
 10562              		.cfi_startproc
 10563 0000 F30F1EFA 		endbr64
 10564 0004 55       		pushq	%rbp
 10565              		.cfi_def_cfa_offset 16
 10566              		.cfi_offset 6, -16
 10567 0005 4889E5   		movq	%rsp, %rbp
 10568              		.cfi_def_cfa_register 6
 10569 0008 53       		pushq	%rbx
 10570 0009 4883EC18 		subq	$24, %rsp
 10571              		.cfi_offset 3, -24
 10572 000d 48897DE8 		movq	%rdi, -24(%rbp)
 10573 0011 488975E0 		movq	%rsi, -32(%rbp)
 133:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 10574              		.loc 4 133 2
 10575 0015 488B45E8 		movq	-24(%rbp), %rax
 10576 0019 48837DE8 		cmpq	$0, -24(%rbp)
 10576      00
 10577 001e 740B     		je	.L654
 10578 0020 4889C2   		movq	%rax, %rdx
 10579 0023 83E207   		andl	$7, %edx
 10580 0026 4885D2   		testq	%rdx, %rdx
 10581 0029 740F     		je	.L655
 10582              	.L654:
 10583 002b 4889C6   		movq	%rax, %rsi
 10584 002e 488D3D00 		leaq	.Lubsan_data594(%rip), %rdi
 10584      000000
 10585 0035 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10585      00
 10586              	.L655:
 10587              	.LBB23:
 134:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 10588              		.loc 4 134 22
 10589 003a 48837DE8 		cmpq	$0, -24(%rbp)
 10589      00
 10590 003f 7511     		jne	.L656
 10591 0041 BE000000 		movl	$0, %esi
 10591      00
 10592 0046 488D3D00 		leaq	.Lubsan_data595(%rip), %rdi
 10592      000000
 10593 004d E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10593      00
 10594              	.L656:
 10595 0052 48837DE0 		cmpq	$0, -32(%rbp)
 10595      00
 10596 0057 7511     		jne	.L657
 10597 0059 BE000000 		movl	$0, %esi
 10597      00
 10598 005e 488D3D00 		leaq	.Lubsan_data596(%rip), %rdi
 10598      000000
 10599 0065 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10599      00
 10600              	.L657:
 10601 006a 488B55E0 		movq	-32(%rbp), %rdx
 10602 006e 488B45E8 		movq	-24(%rbp), %rax
 10603 0072 4889D6   		movq	%rdx, %rsi
 10604 0075 4889C7   		movq	%rax, %rdi
 10605 0078 E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS5_
 10605      00
 10606 007d 488B45E8 		movq	-24(%rbp), %rax
 10607 0081 48837DE8 		cmpq	$0, -24(%rbp)
 10607      00
 10608 0086 740B     		je	.L658
 10609 0088 4889C2   		movq	%rax, %rdx
 10610 008b 83E207   		andl	$7, %edx
 10611 008e 4885D2   		testq	%rdx, %rdx
 10612 0091 740F     		je	.L659
 10613              	.L658:
 10614 0093 4889C6   		movq	%rax, %rsi
 10615 0096 488D3D00 		leaq	.Lubsan_data597(%rip), %rdi
 10615      000000
 10616 009d E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10616      00
 10617              	.L659:
 10618 00a2 488B5DE8 		movq	-24(%rbp), %rbx
 10619 00a6 4889D8   		movq	%rbx, %rax
 10620 00a9 4885DB   		testq	%rbx, %rbx
 10621 00ac 740B     		je	.L660
 10622 00ae 4889C2   		movq	%rax, %rdx
 10623 00b1 83E207   		andl	$7, %edx
 10624 00b4 4885D2   		testq	%rdx, %rdx
 10625 00b7 740F     		je	.L661
 10626              	.L660:
 10627 00b9 4889C6   		movq	%rax, %rsi
 10628 00bc 488D3D00 		leaq	.Lubsan_data598(%rip), %rdi
 10628      000000
 10629 00c3 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10629      00
 10630              	.L661:
 10631 00c8 4889DF   		movq	%rbx, %rdi
 10632 00cb E8000000 		call	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_imp
 10632      00
 10633              	.LBE23:
 135:/usr/include/c++/9/bits/stl_vector.h **** 
 10634              		.loc 4 135 4
 10635 00d0 90       		nop
 10636 00d1 4883C418 		addq	$24, %rsp
 10637 00d5 5B       		popq	%rbx
 10638 00d6 5D       		popq	%rbp
 10639              		.cfi_def_cfa 7, 8
 10640 00d7 C3       		ret
 10641              		.cfi_endproc
 10642              	.LFE2861:
 10644              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_im
 10645              		.set	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_imp
 10646              		.section	.data.rel.local
 10647              		.align 32
 10650              	.Lubsan_data599:
 10651 3640 00000000 		.quad	.LC16
 10651      00000000 
 10652 3648 47000000 		.long	71
 10653 364c 26000000 		.long	38
 10654 3650 00000000 		.quad	.Lubsan_type36
 10654      00000000 
 10655 3658 03       		.byte	3
 10656 3659 03       		.byte	3
 10657 365a 00000000 		.zero	6
 10657      0000
 10658 3660 00000000 		.zero	32
 10658      00000000 
 10658      00000000 
 10658      00000000 
 10658      00000000 
 10659              		.align 32
 10662              	.Lubsan_data600:
 10663 3680 00000000 		.quad	.LC16
 10663      00000000 
 10664 3688 47000000 		.long	71
 10665 368c 26000000 		.long	38
 10666 3690 00000000 		.zero	48
 10666      00000000 
 10666      00000000 
 10666      00000000 
 10666      00000000 
 10667              		.section	.text._ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4size
 10668              		.align 2
 10669              		.weak	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4sizeEv
 10671              	_ZNKSt16initializer_listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4sizeEv:
 10672              	.LASANPC2863:
 10673              	.LFB2863:
  71:/usr/include/c++/9/initializer_list **** 
 10674              		.loc 10 71 7
 10675              		.cfi_startproc
 10676 0000 F30F1EFA 		endbr64
 10677 0004 55       		pushq	%rbp
 10678              		.cfi_def_cfa_offset 16
 10679              		.cfi_offset 6, -16
 10680 0005 4889E5   		movq	%rsp, %rbp
 10681              		.cfi_def_cfa_register 6
 10682 0008 4883EC10 		subq	$16, %rsp
 10683 000c 48897DF8 		movq	%rdi, -8(%rbp)
  71:/usr/include/c++/9/initializer_list **** 
 10684              		.loc 10 71 38
 10685 0010 488B45F8 		movq	-8(%rbp), %rax
 10686 0014 48837DF8 		cmpq	$0, -8(%rbp)
 10686      00
 10687 0019 740B     		je	.L663
 10688 001b 4889C2   		movq	%rax, %rdx
 10689 001e 83E207   		andl	$7, %edx
 10690 0021 4885D2   		testq	%rdx, %rdx
 10691 0024 740F     		je	.L664
 10692              	.L663:
 10693 0026 4889C6   		movq	%rax, %rsi
 10694 0029 488D3D00 		leaq	.Lubsan_data599(%rip), %rdi
 10694      000000
 10695 0030 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10695      00
 10696              	.L664:
 10697 0035 488B45F8 		movq	-8(%rbp), %rax
 10698 0039 488D5008 		leaq	8(%rax), %rdx
 10699 003d 4883F8F8 		cmpq	$-8, %rax
 10700 0041 7213     		jb	.L665
 10701 0043 488B45F8 		movq	-8(%rbp), %rax
 10702 0047 4889C6   		movq	%rax, %rsi
 10703 004a 488D3D00 		leaq	.Lubsan_data600(%rip), %rdi
 10703      000000
 10704 0051 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 10704      00
 10705              	.L665:
 10706 0056 488B45F8 		movq	-8(%rbp), %rax
 10707 005a 4883C008 		addq	$8, %rax
 10708 005e 4889C2   		movq	%rax, %rdx
 10709 0061 48C1EA03 		shrq	$3, %rdx
 10710 0065 4881C200 		addq	$2147450880, %rdx
 10710      80FF7F
 10711 006c 0FB612   		movzbl	(%rdx), %edx
 10712 006f 84D2     		testb	%dl, %dl
 10713 0071 7408     		je	.L666
 10714 0073 4889C7   		movq	%rax, %rdi
 10715 0076 E8000000 		call	__asan_report_load8@PLT
 10715      00
 10716              	.L666:
 10717 007b 488B45F8 		movq	-8(%rbp), %rax
 10718 007f 488B4008 		movq	8(%rax), %rax
  71:/usr/include/c++/9/initializer_list **** 
 10719              		.loc 10 71 46
 10720 0083 C9       		leave
 10721              		.cfi_def_cfa 7, 8
 10722 0084 C3       		ret
 10723              		.cfi_endproc
 10724              	.LFE2863:
 10726              		.section	.text._ZSt19__iterator_categoryIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS
 10727              		.weak	_ZSt19__iterator_categoryIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterat
 10729              	_ZSt19__iterator_categoryIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_trai
 10730              	.LASANPC2864:
 10731              	.LFB2864:
 10732              		.file 15 "/usr/include/c++/9/bits/stl_iterator_base_types.h"
   1:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // Types used in iterator implementation -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
   3:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_iterator_base_types.h **** //
   5:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  11:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  16:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  20:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_iterator_base_types.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  25:/usr/include/c++/9/bits/stl_iterator_base_types.h **** /*
  26:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *
  27:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *
  30:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *
  38:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *
  39:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *
  42:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  */
  50:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  51:/usr/include/c++/9/bits/stl_iterator_base_types.h **** /** @file bits/stl_iterator_base_types.h
  52:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *
  55:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *  This file contains all of the general iterator-related utility types,
  56:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  *  such as iterator_traits and struct iterator.
  57:/usr/include/c++/9/bits/stl_iterator_base_types.h ****  */
  58:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  59:/usr/include/c++/9/bits/stl_iterator_base_types.h **** #ifndef _STL_ITERATOR_BASE_TYPES_H
  60:/usr/include/c++/9/bits/stl_iterator_base_types.h **** #define _STL_ITERATOR_BASE_TYPES_H 1
  61:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  62:/usr/include/c++/9/bits/stl_iterator_base_types.h **** #pragma GCC system_header
  63:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  64:/usr/include/c++/9/bits/stl_iterator_base_types.h **** #include <bits/c++config.h>
  65:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  66:/usr/include/c++/9/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
  67:/usr/include/c++/9/bits/stl_iterator_base_types.h **** # include <type_traits>  // For __void_t, is_convertible
  68:/usr/include/c++/9/bits/stl_iterator_base_types.h **** #endif
  69:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  70:/usr/include/c++/9/bits/stl_iterator_base_types.h **** namespace std _GLIBCXX_VISIBILITY(default)
  71:/usr/include/c++/9/bits/stl_iterator_base_types.h **** {
  72:/usr/include/c++/9/bits/stl_iterator_base_types.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  73:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  74:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /**
  75:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  @defgroup iterators Iterators
  76:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  Abstractions for uniform iterating through various underlying types.
  77:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   */
  78:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   ///@{
  79:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  80:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /**
  81:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  @defgroup iterator_tags Iterator Tags
  82:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  These are empty types, used to distinguish different iterators.  The
  83:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  distinction is not made by what they contain, but simply by what they
  84:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  are.  Different underlying algorithms can then be used based on the
  85:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  different operations supported by different iterator types.
  86:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   */
  87:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   ///@{
  88:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   ///  Marking input iterators.
  89:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   struct input_iterator_tag { };
  90:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  91:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   ///  Marking output iterators.
  92:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   struct output_iterator_tag { };
  93:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  94:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /// Forward iterators support a superset of input iterator operations.
  95:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   struct forward_iterator_tag : public input_iterator_tag { };
  96:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
  97:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /// Bidirectional iterators support a superset of forward iterator
  98:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /// operations.
  99:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   struct bidirectional_iterator_tag : public forward_iterator_tag { };
 100:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
 101:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /// Random-access iterators support a superset of bidirectional
 102:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /// iterator operations.
 103:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   struct random_access_iterator_tag : public bidirectional_iterator_tag { };
 104:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   ///@}
 105:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
 106:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /**
 107:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  @brief  Common %iterator class.
 108:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *
 109:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  %Iterator classes
 110:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  can inherit from this class to save some work.  The typedefs are then
 111:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  used in specializations and overloading.
 112:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *
 113:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  In particular, there are no default implementations of requirements
 114:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  such as @c operator++ and the like.  (How could there be?)
 115:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   */
 116:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
 117:/usr/include/c++/9/bits/stl_iterator_base_types.h ****            typename _Pointer = _Tp*, typename _Reference = _Tp&>
 118:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     struct iterator
 119:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     {
 120:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       /// One of the @link iterator_tags tag types@endlink.
 121:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef _Category  iterator_category;
 122:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       /// The type "pointed to" by the iterator.
 123:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef _Tp        value_type;
 124:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       /// Distance between iterators is represented as this type.
 125:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef _Distance  difference_type;
 126:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       /// This type represents a pointer-to-value_type.
 127:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef _Pointer   pointer;
 128:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       /// This type represents a reference-to-value_type.
 129:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef _Reference reference;
 130:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     };
 131:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
 132:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /**
 133:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  @brief  Traits class for iterators.
 134:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *
 135:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  The general
 136:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  version simply @a forwards the nested typedefs from the Iterator
 137:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  argument.  Specialized versions for pointers and pointers-to-const
 138:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  provide tighter, more correct semantics.
 139:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   */
 140:/usr/include/c++/9/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 142:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   // 2408. SFINAE-friendly common_type/iterator_traits is missing in C++14
 143:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   template<typename _Iterator, typename = __void_t<>>
 144:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     struct __iterator_traits { };
 145:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
 146:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 147:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     struct __iterator_traits<_Iterator,
 148:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 			     __void_t<typename _Iterator::iterator_category,
 149:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 				      typename _Iterator::value_type,
 150:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 				      typename _Iterator::difference_type,
 151:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 				      typename _Iterator::pointer,
 152:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 				      typename _Iterator::reference>>
 153:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     {
 154:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 155:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 156:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 157:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 158:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 159:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     };
 160:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
 161:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 162:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     struct iterator_traits
 163:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     : public __iterator_traits<_Iterator> { };
 164:/usr/include/c++/9/bits/stl_iterator_base_types.h **** #else
 165:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 166:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     struct iterator_traits
 167:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     {
 168:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 169:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 170:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 171:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 172:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 173:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     };
 174:/usr/include/c++/9/bits/stl_iterator_base_types.h **** #endif
 175:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
 176:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /// Partial specialization for pointer types.
 177:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 178:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     struct iterator_traits<_Tp*>
 179:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     {
 180:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 181:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 182:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 183:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef _Tp*                        pointer;
 184:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef _Tp&                        reference;
 185:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     };
 186:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
 187:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /// Partial specialization for const pointer types.
 188:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 189:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     struct iterator_traits<const _Tp*>
 190:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     {
 191:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 192:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 193:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 194:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef const _Tp*                  pointer;
 195:/usr/include/c++/9/bits/stl_iterator_base_types.h ****       typedef const _Tp&                  reference;
 196:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     };
 197:/usr/include/c++/9/bits/stl_iterator_base_types.h **** 
 198:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   /**
 199:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  This function is not a part of the C++ standard but is syntactic
 200:/usr/include/c++/9/bits/stl_iterator_base_types.h ****    *  sugar for internal library use only.
 201:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   */
 202:/usr/include/c++/9/bits/stl_iterator_base_types.h ****   template<typename _Iter>
 203:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     inline _GLIBCXX_CONSTEXPR
 204:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     typename iterator_traits<_Iter>::iterator_category
 205:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     __iterator_category(const _Iter&)
 10733              		.loc 15 205 5
 10734              		.cfi_startproc
 10735 0000 F30F1EFA 		endbr64
 10736 0004 55       		pushq	%rbp
 10737              		.cfi_def_cfa_offset 16
 10738              		.cfi_offset 6, -16
 10739 0005 4889E5   		movq	%rsp, %rbp
 10740              		.cfi_def_cfa_register 6
 10741 0008 48897DF8 		movq	%rdi, -8(%rbp)
 206:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 10742              		.loc 15 206 68
 10743 000c 5D       		popq	%rbp
 10744              		.cfi_def_cfa 7, 8
 10745 000d C3       		ret
 10746              		.cfi_endproc
 10747              	.LFE2864:
 10749              		.section	.text._ZSt10__distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterat
 10750              		.weak	_ZSt10__distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traits
 10752              	_ZSt10__distanceIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt15iterator_traitsIT_E15d
 10753              	.LASANPC2865:
 10754              	.LFB2865:
  98:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 10755              		.loc 11 98 5
 10756              		.cfi_startproc
 10757 0000 F30F1EFA 		endbr64
 10758 0004 55       		pushq	%rbp
 10759              		.cfi_def_cfa_offset 16
 10760              		.cfi_offset 6, -16
 10761 0005 4889E5   		movq	%rsp, %rbp
 10762              		.cfi_def_cfa_register 6
 10763 0008 48897DF8 		movq	%rdi, -8(%rbp)
 10764 000c 488975F0 		movq	%rsi, -16(%rbp)
 104:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     }
 10765              		.loc 11 104 21
 10766 0010 488B45F0 		movq	-16(%rbp), %rax
 10767 0014 482B45F8 		subq	-8(%rbp), %rax
 104:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     }
 10768              		.loc 11 104 23
 10769 0018 48C1F805 		sarq	$5, %rax
 105:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
 10770              		.loc 11 105 5
 10771 001c 5D       		popq	%rbp
 10772              		.cfi_def_cfa 7, 8
 10773 001d C3       		ret
 10774              		.cfi_endproc
 10775              	.LFE2865:
 10777              		.section	.data.rel.local
 10778              		.align 32
 10781              	.Lubsan_data601:
 10782 36c0 00000000 		.quad	.LC3
 10782      00000000 
 10783 36c8 E6060000 		.long	1766
 10784 36cc 17000000 		.long	23
 10785 36d0 00000000 		.quad	.Lubsan_type46
 10785      00000000 
 10786 36d8 00       		.byte	0
 10787 36d9 02       		.byte	2
 10788 36da 00000000 		.zero	6
 10788      0000
 10789 36e0 00000000 		.zero	32
 10789      00000000 
 10789      00000000 
 10789      00000000 
 10789      00000000 
 10790              		.section	.rodata
 10791 0763 00000000 		.align 32
 10791      00000000 
 10791      00000000 
 10791      00000000 
 10791      00000000 
 10792              	.LC24:
 10793 0780 63616E6E 		.string	"cannot create std::vector larger than max_size()"
 10793      6F742063 
 10793      72656174 
 10793      65207374 
 10793      643A3A76 
 10794 07b1 00000000 		.zero	47
 10794      00000000 
 10794      00000000 
 10794      00000000 
 10794      00000000 
 10795              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_S_check
 10796              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_S_check_init_len
 10798              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_S_check_init_lenEmRKS6_
 10799              	.LASANPC2866:
 10800              	.LFB2866:
1586:/usr/include/c++/9/bits/stl_vector.h **** 
1587:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1588:/usr/include/c++/9/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1589:/usr/include/c++/9/bits/stl_vector.h ****       void
1590:/usr/include/c++/9/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1591:/usr/include/c++/9/bits/stl_vector.h ****       {
1592:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1593:/usr/include/c++/9/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1594:/usr/include/c++/9/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1595:/usr/include/c++/9/bits/stl_vector.h ****       }
1596:/usr/include/c++/9/bits/stl_vector.h **** 
1597:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1598:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1599:/usr/include/c++/9/bits/stl_vector.h ****       void
1600:/usr/include/c++/9/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1601:/usr/include/c++/9/bits/stl_vector.h ****       {
1602:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1603:/usr/include/c++/9/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1604:/usr/include/c++/9/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1605:/usr/include/c++/9/bits/stl_vector.h ****       }
1606:/usr/include/c++/9/bits/stl_vector.h **** #endif
1607:/usr/include/c++/9/bits/stl_vector.h **** 
1608:/usr/include/c++/9/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1609:/usr/include/c++/9/bits/stl_vector.h ****       // assignment work for the range versions.
1610:/usr/include/c++/9/bits/stl_vector.h **** 
1611:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1612:/usr/include/c++/9/bits/stl_vector.h **** 
1613:/usr/include/c++/9/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1614:/usr/include/c++/9/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1615:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _Integer>
1616:/usr/include/c++/9/bits/stl_vector.h **** 	void
1617:/usr/include/c++/9/bits/stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1618:/usr/include/c++/9/bits/stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1619:/usr/include/c++/9/bits/stl_vector.h **** 
1620:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1621:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
1622:/usr/include/c++/9/bits/stl_vector.h **** 	void
1623:/usr/include/c++/9/bits/stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1624:/usr/include/c++/9/bits/stl_vector.h **** 			   __false_type)
1625:/usr/include/c++/9/bits/stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1626:/usr/include/c++/9/bits/stl_vector.h **** 
1627:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1628:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
1629:/usr/include/c++/9/bits/stl_vector.h **** 	void
1630:/usr/include/c++/9/bits/stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1631:/usr/include/c++/9/bits/stl_vector.h **** 		      std::input_iterator_tag);
1632:/usr/include/c++/9/bits/stl_vector.h **** 
1633:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1634:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _ForwardIterator>
1635:/usr/include/c++/9/bits/stl_vector.h **** 	void
1636:/usr/include/c++/9/bits/stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1637:/usr/include/c++/9/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1638:/usr/include/c++/9/bits/stl_vector.h **** 
1639:/usr/include/c++/9/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1640:/usr/include/c++/9/bits/stl_vector.h ****       // to be the same thing.
1641:/usr/include/c++/9/bits/stl_vector.h ****       void
1642:/usr/include/c++/9/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1643:/usr/include/c++/9/bits/stl_vector.h **** 
1644:/usr/include/c++/9/bits/stl_vector.h ****       // Internal insert functions follow.
1645:/usr/include/c++/9/bits/stl_vector.h **** 
1646:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1647:/usr/include/c++/9/bits/stl_vector.h **** 
1648:/usr/include/c++/9/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1649:/usr/include/c++/9/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1650:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _Integer>
1651:/usr/include/c++/9/bits/stl_vector.h **** 	void
1652:/usr/include/c++/9/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1653:/usr/include/c++/9/bits/stl_vector.h **** 			   __true_type)
1654:/usr/include/c++/9/bits/stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1655:/usr/include/c++/9/bits/stl_vector.h **** 
1656:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1657:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
1658:/usr/include/c++/9/bits/stl_vector.h **** 	void
1659:/usr/include/c++/9/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1660:/usr/include/c++/9/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1661:/usr/include/c++/9/bits/stl_vector.h **** 	{
1662:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1663:/usr/include/c++/9/bits/stl_vector.h **** 			  std::__iterator_category(__first));
1664:/usr/include/c++/9/bits/stl_vector.h **** 	}
1665:/usr/include/c++/9/bits/stl_vector.h **** 
1666:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1667:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
1668:/usr/include/c++/9/bits/stl_vector.h **** 	void
1669:/usr/include/c++/9/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1670:/usr/include/c++/9/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1671:/usr/include/c++/9/bits/stl_vector.h **** 
1672:/usr/include/c++/9/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1673:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _ForwardIterator>
1674:/usr/include/c++/9/bits/stl_vector.h **** 	void
1675:/usr/include/c++/9/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1676:/usr/include/c++/9/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1677:/usr/include/c++/9/bits/stl_vector.h **** 
1678:/usr/include/c++/9/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1679:/usr/include/c++/9/bits/stl_vector.h ****       // the same thing.
1680:/usr/include/c++/9/bits/stl_vector.h ****       void
1681:/usr/include/c++/9/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1682:/usr/include/c++/9/bits/stl_vector.h **** 
1683:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1684:/usr/include/c++/9/bits/stl_vector.h ****       // Called by resize(n).
1685:/usr/include/c++/9/bits/stl_vector.h ****       void
1686:/usr/include/c++/9/bits/stl_vector.h ****       _M_default_append(size_type __n);
1687:/usr/include/c++/9/bits/stl_vector.h **** 
1688:/usr/include/c++/9/bits/stl_vector.h ****       bool
1689:/usr/include/c++/9/bits/stl_vector.h ****       _M_shrink_to_fit();
1690:/usr/include/c++/9/bits/stl_vector.h **** #endif
1691:/usr/include/c++/9/bits/stl_vector.h **** 
1692:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus < 201103L
1693:/usr/include/c++/9/bits/stl_vector.h ****       // Called by insert(p,x)
1694:/usr/include/c++/9/bits/stl_vector.h ****       void
1695:/usr/include/c++/9/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1696:/usr/include/c++/9/bits/stl_vector.h **** 
1697:/usr/include/c++/9/bits/stl_vector.h ****       void
1698:/usr/include/c++/9/bits/stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1699:/usr/include/c++/9/bits/stl_vector.h **** #else
1700:/usr/include/c++/9/bits/stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1701:/usr/include/c++/9/bits/stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1702:/usr/include/c++/9/bits/stl_vector.h ****       struct _Temporary_value
1703:/usr/include/c++/9/bits/stl_vector.h ****       {
1704:/usr/include/c++/9/bits/stl_vector.h **** 	template<typename... _Args>
1705:/usr/include/c++/9/bits/stl_vector.h **** 	  explicit
1706:/usr/include/c++/9/bits/stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1707:/usr/include/c++/9/bits/stl_vector.h **** 	  {
1708:/usr/include/c++/9/bits/stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1709:/usr/include/c++/9/bits/stl_vector.h **** 				     std::forward<_Args>(__args)...);
1710:/usr/include/c++/9/bits/stl_vector.h **** 	  }
1711:/usr/include/c++/9/bits/stl_vector.h **** 
1712:/usr/include/c++/9/bits/stl_vector.h **** 	~_Temporary_value()
1713:/usr/include/c++/9/bits/stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1714:/usr/include/c++/9/bits/stl_vector.h **** 
1715:/usr/include/c++/9/bits/stl_vector.h **** 	value_type&
1716:/usr/include/c++/9/bits/stl_vector.h **** 	_M_val() { return *_M_ptr(); }
1717:/usr/include/c++/9/bits/stl_vector.h **** 
1718:/usr/include/c++/9/bits/stl_vector.h ****       private:
1719:/usr/include/c++/9/bits/stl_vector.h **** 	_Tp*
1720:/usr/include/c++/9/bits/stl_vector.h **** 	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
1721:/usr/include/c++/9/bits/stl_vector.h **** 
1722:/usr/include/c++/9/bits/stl_vector.h **** 	vector* _M_this;
1723:/usr/include/c++/9/bits/stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1724:/usr/include/c++/9/bits/stl_vector.h ****       };
1725:/usr/include/c++/9/bits/stl_vector.h **** 
1726:/usr/include/c++/9/bits/stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1727:/usr/include/c++/9/bits/stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1728:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _Arg>
1729:/usr/include/c++/9/bits/stl_vector.h **** 	void
1730:/usr/include/c++/9/bits/stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1731:/usr/include/c++/9/bits/stl_vector.h **** 
1732:/usr/include/c++/9/bits/stl_vector.h ****       template<typename... _Args>
1733:/usr/include/c++/9/bits/stl_vector.h **** 	void
1734:/usr/include/c++/9/bits/stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1735:/usr/include/c++/9/bits/stl_vector.h **** 
1736:/usr/include/c++/9/bits/stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1737:/usr/include/c++/9/bits/stl_vector.h ****       iterator
1738:/usr/include/c++/9/bits/stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1739:/usr/include/c++/9/bits/stl_vector.h **** 
1740:/usr/include/c++/9/bits/stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1741:/usr/include/c++/9/bits/stl_vector.h ****       template<typename... _Args>
1742:/usr/include/c++/9/bits/stl_vector.h **** 	iterator
1743:/usr/include/c++/9/bits/stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1744:/usr/include/c++/9/bits/stl_vector.h **** 
1745:/usr/include/c++/9/bits/stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1746:/usr/include/c++/9/bits/stl_vector.h ****       iterator
1747:/usr/include/c++/9/bits/stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1748:/usr/include/c++/9/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1749:/usr/include/c++/9/bits/stl_vector.h **** #endif
1750:/usr/include/c++/9/bits/stl_vector.h **** 
1751:/usr/include/c++/9/bits/stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1752:/usr/include/c++/9/bits/stl_vector.h ****       size_type
1753:/usr/include/c++/9/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
1754:/usr/include/c++/9/bits/stl_vector.h ****       {
1755:/usr/include/c++/9/bits/stl_vector.h **** 	if (max_size() - size() < __n)
1756:/usr/include/c++/9/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
1757:/usr/include/c++/9/bits/stl_vector.h **** 
1758:/usr/include/c++/9/bits/stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
1759:/usr/include/c++/9/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
1760:/usr/include/c++/9/bits/stl_vector.h ****       }
1761:/usr/include/c++/9/bits/stl_vector.h **** 
1762:/usr/include/c++/9/bits/stl_vector.h ****       // Called by constructors to check initial size.
1763:/usr/include/c++/9/bits/stl_vector.h ****       static size_type
1764:/usr/include/c++/9/bits/stl_vector.h ****       _S_check_init_len(size_type __n, const allocator_type& __a)
 10801              		.loc 4 1764 7
 10802              		.cfi_startproc
 10803 0000 F30F1EFA 		endbr64
 10804 0004 55       		pushq	%rbp
 10805              		.cfi_def_cfa_offset 16
 10806              		.cfi_offset 6, -16
 10807 0005 4889E5   		movq	%rsp, %rbp
 10808              		.cfi_def_cfa_register 6
 10809 0008 4157     		pushq	%r15
 10810 000a 4156     		pushq	%r14
 10811 000c 4155     		pushq	%r13
 10812 000e 4154     		pushq	%r12
 10813 0010 53       		pushq	%rbx
 10814 0011 4883EC78 		subq	$120, %rsp
 10815              		.cfi_offset 15, -24
 10816              		.cfi_offset 14, -32
 10817              		.cfi_offset 13, -40
 10818              		.cfi_offset 12, -48
 10819              		.cfi_offset 3, -56
 10820 0015 4889BD68 		movq	%rdi, -152(%rbp)
 10820      FFFFFF
 10821 001c 4889B560 		movq	%rsi, -160(%rbp)
 10821      FFFFFF
 10822 0023 488D9D70 		leaq	-144(%rbp), %rbx
 10822      FFFFFF
 10823 002a 4989DF   		movq	%rbx, %r15
 10824 002d 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 10824      000000
 10825 0034 7412     		je	.L672
 10826 0036 BF400000 		movl	$64, %edi
 10826      00
 10827 003b E8000000 		call	__asan_stack_malloc_0@PLT
 10827      00
 10828              	.LVL14:
 10829 0040 4885C0   		testq	%rax, %rax
 10830 0043 7403     		je	.L672
 10831 0045 4889C3   		movq	%rax, %rbx
 10832              	.L672:
 10833 0048 488D4360 		leaq	96(%rbx), %rax
 10834 004c 4989C5   		movq	%rax, %r13
 10835 004f 48C703B3 		movq	$1102416563, (%rbx)
 10835      8AB541
 10836 0056 488D0500 		leaq	.LC8(%rip), %rax
 10836      000000
 10837 005d 48894308 		movq	%rax, 8(%rbx)
 10838 0061 488D0598 		leaq	.LASANPC2866(%rip), %rax
 10838      FFFFFF
 10839 0068 48894310 		movq	%rax, 16(%rbx)
 10840 006c 4989DC   		movq	%rbx, %r12
 10841 006f 49C1EC03 		shrq	$3, %r12
 10842 0073 41C78424 		movl	$-235802127, 2147450880(%r12)
 10842      0080FF7F 
 10842      F1F1F1F1 
 10843 007f 41C78424 		movl	$-202116351, 2147450884(%r12)
 10843      0480FF7F 
 10843      01F3F3F3 
 10844              		.loc 4 1764 7
 10845 008b 64488B04 		movq	%fs:40, %rax
 10845      25280000 
 10845      00
 10846 0094 488945C8 		movq	%rax, -56(%rbp)
 10847 0098 31C0     		xorl	%eax, %eax
1765:/usr/include/c++/9/bits/stl_vector.h ****       {
1766:/usr/include/c++/9/bits/stl_vector.h **** 	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 10848              		.loc 4 1766 23
 10849 009a 4883BD60 		cmpq	$0, -160(%rbp)
 10849      FFFFFF00 
 10850 00a2 7511     		jne	.L676
 10851 00a4 BE000000 		movl	$0, %esi
 10851      00
 10852 00a9 488D3D00 		leaq	.Lubsan_data601(%rip), %rdi
 10852      000000
 10853 00b0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10853      00
 10854              	.L676:
 10855 00b5 488B9560 		movq	-160(%rbp), %rdx
 10855      FFFFFF
 10856 00bc 498D45C0 		leaq	-64(%r13), %rax
 10857 00c0 4889D6   		movq	%rdx, %rsi
 10858 00c3 4889C7   		movq	%rax, %rdi
 10859 00c6 E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_
 10859      00
 10860 00cb 498D45C0 		leaq	-64(%r13), %rax
 10861 00cf 4889C7   		movq	%rax, %rdi
 10862 00d2 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_
 10862      00
 10863              		.loc 4 1766 10
 10864 00d7 48398568 		cmpq	%rax, -152(%rbp)
 10864      FFFFFF
 10865 00de 410F97C6 		seta	%r14b
 10866              		.loc 4 1766 23
 10867 00e2 498D45C0 		leaq	-64(%r13), %rax
 10868 00e6 4889C7   		movq	%rax, %rdi
 10869 00e9 E8000000 		call	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 10869      00
 10870 00ee 498D45C0 		leaq	-64(%r13), %rax
 10871 00f2 48C1E803 		shrq	$3, %rax
 10872 00f6 48050080 		addq	$2147450880, %rax
 10872      FF7F
 10873 00fc C600F8   		movb	$-8, (%rax)
 10874              		.loc 4 1766 2
 10875 00ff 4584F6   		testb	%r14b, %r14b
 10876 0102 7411     		je	.L677
1767:/usr/include/c++/9/bits/stl_vector.h **** 	  __throw_length_error(
 10877              		.loc 4 1767 24
 10878 0104 E8000000 		call	__asan_handle_no_return@PLT
 10878      00
 10879 0109 488D3D00 		leaq	.LC24(%rip), %rdi
 10879      000000
 10880 0110 E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 10880      00
 10881              	.L677:
1768:/usr/include/c++/9/bits/stl_vector.h **** 	      __N("cannot create std::vector larger than max_size()"));
1769:/usr/include/c++/9/bits/stl_vector.h **** 	return __n;
 10882              		.loc 4 1769 9
 10883 0115 488B8568 		movq	-152(%rbp), %rax
 10883      FFFFFF
 10884 011c 4889C2   		movq	%rax, %rdx
1764:/usr/include/c++/9/bits/stl_vector.h ****       {
 10885              		.loc 4 1764 7
 10886 011f 4939DF   		cmpq	%rbx, %r15
 10887 0122 7422     		je	.L673
 10888 0124 48C7030E 		movq	$1172321806, (%rbx)
 10888      36E045
 10889 012b 48B8F5F5 		movabsq	$-723401728380766731, %rax
 10889      F5F5F5F5 
 10889      F5F5
 10890 0135 49898424 		movq	%rax, 2147450880(%r12)
 10890      0080FF7F 
 10891 013d 488B4338 		movq	56(%rbx), %rax
 10892 0141 C60000   		movb	$0, (%rax)
 10893 0144 EB0C     		jmp	.L674
 10894              	.L673:
 10895 0146 49C78424 		movq	$0, 2147450880(%r12)
 10895      0080FF7F 
 10895      00000000 
 10896              	.L674:
1770:/usr/include/c++/9/bits/stl_vector.h ****       }
 10897              		.loc 4 1770 7
 10898 0152 488B45C8 		movq	-56(%rbp), %rax
 10899 0156 64483304 		xorq	%fs:40, %rax
 10899      25280000 
 10899      00
 10900 015f 7405     		je	.L679
 10901 0161 E8000000 		call	__stack_chk_fail@PLT
 10901      00
 10902              	.L679:
 10903 0166 4889D0   		movq	%rdx, %rax
 10904 0169 4883C478 		addq	$120, %rsp
 10905 016d 5B       		popq	%rbx
 10906 016e 415C     		popq	%r12
 10907 0170 415D     		popq	%r13
 10908 0172 415E     		popq	%r14
 10909 0174 415F     		popq	%r15
 10910 0176 5D       		popq	%rbp
 10911              		.cfi_def_cfa 7, 8
 10912 0177 C3       		ret
 10913              		.cfi_endproc
 10914              	.LFE2866:
 10916              		.section	.data.rel.local
 10917              		.align 32
 10920              	.Lubsan_data602:
 10921 3700 00000000 		.quad	.LC3
 10921      00000000 
 10922 3708 57010000 		.long	343
 10923 370c 22000000 		.long	34
 10924 3710 00000000 		.quad	.Lubsan_type8
 10924      00000000 
 10925 3718 03       		.byte	3
 10926 3719 03       		.byte	3
 10927 371a 00000000 		.zero	6
 10927      0000
 10928 3720 00000000 		.zero	32
 10928      00000000 
 10928      00000000 
 10928      00000000 
 10928      00000000 
 10929              		.align 32
 10932              	.Lubsan_data603:
 10933 3740 00000000 		.quad	.LC3
 10933      00000000 
 10934 3748 57010000 		.long	343
 10935 374c 21000000 		.long	33
 10936 3750 00000000 		.quad	.Lubsan_type28
 10936      00000000 
 10937 3758 00       		.byte	0
 10938 3759 02       		.byte	2
 10939 375a 00000000 		.zero	6
 10939      0000
 10940 3760 00000000 		.zero	32
 10940      00000000 
 10940      00000000 
 10940      00000000 
 10940      00000000 
 10941              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_
 10942              		.align 2
 10943              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocat
 10945              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm:
 10946              	.LASANPC2867:
 10947              	.LFB2867:
 340:/usr/include/c++/9/bits/stl_vector.h ****       {
 10948              		.loc 4 340 7
 10949              		.cfi_startproc
 10950 0000 F30F1EFA 		endbr64
 10951 0004 55       		pushq	%rbp
 10952              		.cfi_def_cfa_offset 16
 10953              		.cfi_offset 6, -16
 10954 0005 4889E5   		movq	%rsp, %rbp
 10955              		.cfi_def_cfa_register 6
 10956 0008 53       		pushq	%rbx
 10957 0009 4883EC18 		subq	$24, %rsp
 10958              		.cfi_offset 3, -24
 10959 000d 48897DE8 		movq	%rdi, -24(%rbp)
 10960 0011 488975E0 		movq	%rsi, -32(%rbp)
 343:/usr/include/c++/9/bits/stl_vector.h ****       }
 10961              		.loc 4 343 18
 10962 0015 48837DE0 		cmpq	$0, -32(%rbp)
 10962      00
 10963 001a 7450     		je	.L681
 343:/usr/include/c++/9/bits/stl_vector.h ****       }
 10964              		.loc 4 343 34 discriminator 1
 10965 001c 488B45E8 		movq	-24(%rbp), %rax
 10966 0020 48837DE8 		cmpq	$0, -24(%rbp)
 10966      00
 10967 0025 740B     		je	.L682
 10968 0027 4889C2   		movq	%rax, %rdx
 10969 002a 83E207   		andl	$7, %edx
 10970 002d 4885D2   		testq	%rdx, %rdx
 10971 0030 740F     		je	.L683
 10972              	.L682:
 343:/usr/include/c++/9/bits/stl_vector.h ****       }
 10973              		.loc 4 343 34 is_stmt 0
 10974 0032 4889C6   		movq	%rax, %rsi
 10975 0035 488D3D00 		leaq	.Lubsan_data602(%rip), %rdi
 10975      000000
 10976 003c E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10976      00
 10977              	.L683:
 343:/usr/include/c++/9/bits/stl_vector.h ****       }
 10978              		.loc 4 343 34 discriminator 1
 10979 0041 488B5DE8 		movq	-24(%rbp), %rbx
 343:/usr/include/c++/9/bits/stl_vector.h ****       }
 10980              		.loc 4 343 33 is_stmt 1 discriminator 1
 10981 0045 4885DB   		testq	%rbx, %rbx
 10982 0048 7511     		jne	.L684
 343:/usr/include/c++/9/bits/stl_vector.h ****       }
 10983              		.loc 4 343 33 is_stmt 0
 10984 004a BE000000 		movl	$0, %esi
 10984      00
 10985 004f 488D3D00 		leaq	.Lubsan_data603(%rip), %rdi
 10985      000000
 10986 0056 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 10986      00
 10987              	.L684:
 343:/usr/include/c++/9/bits/stl_vector.h ****       }
 10988              		.loc 4 343 33 discriminator 1
 10989 005b 488B45E0 		movq	-32(%rbp), %rax
 10990 005f 4889C6   		movq	%rax, %rsi
 10991 0062 4889DF   		movq	%rbx, %rdi
 10992 0065 E8000000 		call	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS
 10992      00
 343:/usr/include/c++/9/bits/stl_vector.h ****       }
 10993              		.loc 4 343 58 is_stmt 1 discriminator 1
 10994 006a EB05     		jmp	.L686
 10995              	.L681:
 343:/usr/include/c++/9/bits/stl_vector.h ****       }
 10996              		.loc 4 343 18 discriminator 2
 10997 006c B8000000 		movl	$0, %eax
 10997      00
 10998              	.L686:
 344:/usr/include/c++/9/bits/stl_vector.h **** 
 10999              		.loc 4 344 7 discriminator 5
 11000 0071 4883C418 		addq	$24, %rsp
 11001 0075 5B       		popq	%rbx
 11002 0076 5D       		popq	%rbp
 11003              		.cfi_def_cfa 7, 8
 11004 0077 C3       		ret
 11005              		.cfi_endproc
 11006              	.LFE2867:
 11008              		.section	.text._ZSt22__uninitialized_copy_aIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 11009              		.weak	_ZSt22__uninitialized_copy_aIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_S5_ET
 11011              	_ZSt22__uninitialized_copy_aIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_S5_ET0_T_SA_
 11012              	.LASANPC2868:
 11013              	.LFB2868:
 11014              		.file 16 "/usr/include/c++/9/bits/stl_uninitialized.h"
   1:/usr/include/c++/9/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/9/bits/stl_uninitialized.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_uninitialized.h **** //
   5:/usr/include/c++/9/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  11:/usr/include/c++/9/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  16:/usr/include/c++/9/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  20:/usr/include/c++/9/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  25:/usr/include/c++/9/bits/stl_uninitialized.h **** /*
  26:/usr/include/c++/9/bits/stl_uninitialized.h ****  *
  27:/usr/include/c++/9/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_uninitialized.h ****  *
  30:/usr/include/c++/9/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_uninitialized.h ****  *
  38:/usr/include/c++/9/bits/stl_uninitialized.h ****  *
  39:/usr/include/c++/9/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/9/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_uninitialized.h ****  *
  42:/usr/include/c++/9/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/9/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_uninitialized.h ****  */
  50:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  51:/usr/include/c++/9/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/c++/9/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/9/bits/stl_uninitialized.h ****  */
  55:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  56:/usr/include/c++/9/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/c++/9/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  59:/usr/include/c++/9/bits/stl_uninitialized.h **** #if __cplusplus > 201402L
  60:/usr/include/c++/9/bits/stl_uninitialized.h **** #include <utility>
  61:/usr/include/c++/9/bits/stl_uninitialized.h **** #endif
  62:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  63:/usr/include/c++/9/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:/usr/include/c++/9/bits/stl_uninitialized.h **** #include <type_traits>
  65:/usr/include/c++/9/bits/stl_uninitialized.h **** #endif
  66:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  67:/usr/include/c++/9/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/c++/9/bits/stl_uninitialized.h **** {
  69:/usr/include/c++/9/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  71:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  72:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  73:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
  74:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  75:/usr/include/c++/9/bits/stl_uninitialized.h ****         static _ForwardIterator
  76:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  77:/usr/include/c++/9/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  78:/usr/include/c++/9/bits/stl_uninitialized.h ****         {
  79:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  80:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __try
  81:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
  82:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  83:/usr/include/c++/9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  84:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      return __cur;
  85:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
  86:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __catch(...)
  87:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
  88:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  89:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  90:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
  91:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
  92:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
  93:/usr/include/c++/9/bits/stl_uninitialized.h **** 
  94:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<>
  95:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
  96:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
  97:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  98:/usr/include/c++/9/bits/stl_uninitialized.h ****         static _ForwardIterator
  99:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 100:/usr/include/c++/9/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 101:/usr/include/c++/9/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 102:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 103:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 104:/usr/include/c++/9/bits/stl_uninitialized.h ****   /**
 105:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 106:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 107:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 108:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 109:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 110:/usr/include/c++/9/bits/stl_uninitialized.h ****    *
 111:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 112:/usr/include/c++/9/bits/stl_uninitialized.h ****   */
 113:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 114:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 115:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 116:/usr/include/c++/9/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 117:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 118:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 119:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType1;
 120:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 121:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType2;
 122:/usr/include/c++/9/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 123:/usr/include/c++/9/bits/stl_uninitialized.h ****       const bool __assignable = true;
 124:/usr/include/c++/9/bits/stl_uninitialized.h **** #else
 125:/usr/include/c++/9/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 126:/usr/include/c++/9/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 127:/usr/include/c++/9/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 128:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 129:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 130:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 131:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 132:/usr/include/c++/9/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 133:/usr/include/c++/9/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 134:/usr/include/c++/9/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 135:/usr/include/c++/9/bits/stl_uninitialized.h **** #endif
 136:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 137:/usr/include/c++/9/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 138:/usr/include/c++/9/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 139:/usr/include/c++/9/bits/stl_uninitialized.h **** 				       && __assignable>::
 140:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 141:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 142:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 143:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 144:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 145:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 146:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 147:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 148:/usr/include/c++/9/bits/stl_uninitialized.h ****         static void
 149:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 150:/usr/include/c++/9/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 151:/usr/include/c++/9/bits/stl_uninitialized.h ****         {
 152:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 153:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __try
 154:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 155:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 156:/usr/include/c++/9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 157:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 158:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __catch(...)
 159:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 160:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 161:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 162:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 163:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 164:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 165:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 166:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<>
 167:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 168:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 169:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 170:/usr/include/c++/9/bits/stl_uninitialized.h ****         static void
 171:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 172:/usr/include/c++/9/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 173:/usr/include/c++/9/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 174:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 175:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 176:/usr/include/c++/9/bits/stl_uninitialized.h ****   /**
 177:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 178:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 179:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 180:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 181:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @return   Nothing.
 182:/usr/include/c++/9/bits/stl_uninitialized.h ****    *
 183:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 184:/usr/include/c++/9/bits/stl_uninitialized.h ****   */
 185:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 186:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline void
 187:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 188:/usr/include/c++/9/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 189:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 190:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 191:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType;
 192:/usr/include/c++/9/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 193:/usr/include/c++/9/bits/stl_uninitialized.h ****       const bool __assignable = true;
 194:/usr/include/c++/9/bits/stl_uninitialized.h **** #else
 195:/usr/include/c++/9/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 196:/usr/include/c++/9/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 197:/usr/include/c++/9/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 198:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 199:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 200:/usr/include/c++/9/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 201:/usr/include/c++/9/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 202:/usr/include/c++/9/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 203:/usr/include/c++/9/bits/stl_uninitialized.h **** #endif
 204:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 205:/usr/include/c++/9/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 206:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 207:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 208:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 209:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 210:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 211:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 212:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 213:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 214:/usr/include/c++/9/bits/stl_uninitialized.h ****         static _ForwardIterator
 215:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 216:/usr/include/c++/9/bits/stl_uninitialized.h **** 			const _Tp& __x)
 217:/usr/include/c++/9/bits/stl_uninitialized.h ****         {
 218:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 219:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __try
 220:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 221:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 222:/usr/include/c++/9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 223:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      return __cur;
 224:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 225:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __catch(...)
 226:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 227:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 228:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 229:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 230:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 231:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 232:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 233:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<>
 234:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 235:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 236:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 237:/usr/include/c++/9/bits/stl_uninitialized.h ****         static _ForwardIterator
 238:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 239:/usr/include/c++/9/bits/stl_uninitialized.h **** 			const _Tp& __x)
 240:/usr/include/c++/9/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 241:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 242:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 243:/usr/include/c++/9/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 244:/usr/include/c++/9/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 245:/usr/include/c++/9/bits/stl_uninitialized.h ****   /**
 246:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 247:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 248:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 249:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 250:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @return   Nothing.
 251:/usr/include/c++/9/bits/stl_uninitialized.h ****    *
 252:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 253:/usr/include/c++/9/bits/stl_uninitialized.h ****   */
 254:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 255:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 256:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 257:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 258:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 259:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType;
 260:/usr/include/c++/9/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 261:/usr/include/c++/9/bits/stl_uninitialized.h ****       const bool __assignable = true;
 262:/usr/include/c++/9/bits/stl_uninitialized.h **** #else
 263:/usr/include/c++/9/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 264:/usr/include/c++/9/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 265:/usr/include/c++/9/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 266:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 267:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 268:/usr/include/c++/9/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 269:/usr/include/c++/9/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 270:/usr/include/c++/9/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 271:/usr/include/c++/9/bits/stl_uninitialized.h **** #endif
 272:/usr/include/c++/9/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 273:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 274:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 275:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 276:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 277:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 278:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 279:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 280:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 281:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 282:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 283:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _Allocator>
 284:/usr/include/c++/9/bits/stl_uninitialized.h ****     _ForwardIterator
 285:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 286:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 287:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 288:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 289:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 290:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 291:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 292:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 293:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 294:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  return __cur;
 295:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 296:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 297:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 298:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 299:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 300:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 301:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 302:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 303:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 304:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 305:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 11015              		.loc 16 305 5
 11016              		.cfi_startproc
 11017 0000 F30F1EFA 		endbr64
 11018 0004 55       		pushq	%rbp
 11019              		.cfi_def_cfa_offset 16
 11020              		.cfi_offset 6, -16
 11021 0005 4889E5   		movq	%rsp, %rbp
 11022              		.cfi_def_cfa_register 6
 11023 0008 4883EC20 		subq	$32, %rsp
 11024 000c 48897DF8 		movq	%rdi, -8(%rbp)
 11025 0010 488975F0 		movq	%rsi, -16(%rbp)
 11026 0014 488955E8 		movq	%rdx, -24(%rbp)
 11027 0018 48894DE0 		movq	%rcx, -32(%rbp)
 306:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 307:/usr/include/c++/9/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 11028              		.loc 16 307 37
 11029 001c 488B55E8 		movq	-24(%rbp), %rdx
 11030 0020 488B4DF0 		movq	-16(%rbp), %rcx
 11031 0024 488B45F8 		movq	-8(%rbp), %rax
 11032 0028 4889CE   		movq	%rcx, %rsi
 11033 002b 4889C7   		movq	%rax, %rdi
 11034 002e E8000000 		call	_ZSt18uninitialized_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET0_T_SA_S
 11034      00
 11035              		.loc 16 307 66
 11036 0033 C9       		leave
 11037              		.cfi_def_cfa 7, 8
 11038 0034 C3       		ret
 11039              		.cfi_endproc
 11040              	.LFE2868:
 11042              		.section	.text._ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_,"axG",@p
 11043              		.weak	_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_
 11045              	_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_:
 11046              	.LASANPC2869:
 11047              	.LFB2869:
 127:/usr/include/c++/9/bits/stl_construct.h ****     {
 11048              		.loc 12 127 5
 11049              		.cfi_startproc
 11050 0000 F30F1EFA 		endbr64
 11051 0004 55       		pushq	%rbp
 11052              		.cfi_def_cfa_offset 16
 11053              		.cfi_offset 6, -16
 11054 0005 4889E5   		movq	%rsp, %rbp
 11055              		.cfi_def_cfa_register 6
 11056 0008 4883EC10 		subq	$16, %rsp
 11057 000c 48897DF8 		movq	%rdi, -8(%rbp)
 11058 0010 488975F0 		movq	%rsi, -16(%rbp)
 137:/usr/include/c++/9/bits/stl_construct.h ****     }
 11059              		.loc 12 137 11
 11060 0014 488B55F0 		movq	-16(%rbp), %rdx
 11061 0018 488B45F8 		movq	-8(%rbp), %rax
 11062 001c 4889D6   		movq	%rdx, %rsi
 11063 001f 4889C7   		movq	%rax, %rdi
 11064 0022 E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT
 11064      00
 138:/usr/include/c++/9/bits/stl_construct.h **** 
 11065              		.loc 12 138 5
 11066 0027 90       		nop
 11067 0028 C9       		leave
 11068              		.cfi_def_cfa 7, 8
 11069 0029 C3       		ret
 11070              		.cfi_endproc
 11071              	.LFE2869:
 11073              		.section	.data.rel.local
 11074              		.align 32
 11077              	.Lubsan_data604:
 11078 3780 00000000 		.quad	.LC18
 11078      00000000 
 11079 3788 D5010000 		.long	469
 11080 378c 09000000 		.long	9
 11081 3790 00000000 		.quad	.Lubsan_type22
 11081      00000000 
 11082 3798 00       		.byte	0
 11083 3799 04       		.byte	4
 11084 379a 00000000 		.zero	6
 11084      0000
 11085 37a0 00000000 		.zero	32
 11085      00000000 
 11085      00000000 
 11085      00000000 
 11085      00000000 
 11086              		.section	.text._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10
 11087              		.weak	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocat
 11089              	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_P
 11090              	.LASANPC2875:
 11091              	.LFB2875:
 468:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 11092              		.loc 13 468 7
 11093              		.cfi_startproc
 11094 0000 F30F1EFA 		endbr64
 11095 0004 55       		pushq	%rbp
 11096              		.cfi_def_cfa_offset 16
 11097              		.cfi_offset 6, -16
 11098 0005 4889E5   		movq	%rsp, %rbp
 11099              		.cfi_def_cfa_register 6
 11100 0008 4883EC20 		subq	$32, %rsp
 11101 000c 48897DF8 		movq	%rdi, -8(%rbp)
 11102 0010 488975F0 		movq	%rsi, -16(%rbp)
 11103 0014 488955E8 		movq	%rdx, -24(%rbp)
 469:/usr/include/c++/9/bits/alloc_traits.h **** 
 11104              		.loc 13 469 9
 11105 0018 48837DF8 		cmpq	$0, -8(%rbp)
 11105      00
 11106 001d 7511     		jne	.L691
 11107 001f BE000000 		movl	$0, %esi
 11107      00
 11108 0024 488D3D00 		leaq	.Lubsan_data604(%rip), %rdi
 11108      000000
 11109 002b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11109      00
 11110              	.L691:
 11111 0030 488B55E8 		movq	-24(%rbp), %rdx
 11112 0034 488B4DF0 		movq	-16(%rbp), %rcx
 11113 0038 488B45F8 		movq	-8(%rbp), %rax
 11114 003c 4889CE   		movq	%rcx, %rsi
 11115 003f 4889C7   		movq	%rax, %rdi
 11116 0042 E8000000 		call	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocat
 11116      00
 469:/usr/include/c++/9/bits/alloc_traits.h **** 
 11117              		.loc 13 469 35
 11118 0047 90       		nop
 11119 0048 C9       		leave
 11120              		.cfi_def_cfa 7, 8
 11121 0049 C3       		ret
 11122              		.cfi_endproc
 11123              	.LFE2875:
 11125              		.section	.data.rel.local
 11126              		.align 32
 11129              	.Lubsan_data605:
 11130 37c0 00000000 		.quad	.LC15
 11130      00000000 
 11131 37c8 4B000000 		.long	75
 11132 37cc 24000000 		.long	36
 11133 37d0 00000000 		.quad	.Lubsan_type15
 11133      00000000 
 11134 37d8 03       		.byte	3
 11135 37d9 02       		.byte	2
 11136 37da 00000000 		.zero	6
 11136      0000
 11137 37e0 00000000 		.zero	32
 11137      00000000 
 11137      00000000 
 11137      00000000 
 11137      00000000 
 11138              		.section	.text._ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove
 11139              		.weak	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenc
 11141              	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4
 11142              	.LASANPC2877:
 11143              	.LFB2877:
  74:/usr/include/c++/9/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 11144              		.loc 8 74 5
 11145              		.cfi_startproc
 11146 0000 F30F1EFA 		endbr64
 11147 0004 55       		pushq	%rbp
 11148              		.cfi_def_cfa_offset 16
 11149              		.cfi_offset 6, -16
 11150 0005 4889E5   		movq	%rsp, %rbp
 11151              		.cfi_def_cfa_register 6
 11152 0008 4883EC10 		subq	$16, %rsp
 11153 000c 48897DF8 		movq	%rdi, -8(%rbp)
  75:/usr/include/c++/9/bits/move.h **** 
 11154              		.loc 8 75 36
 11155 0010 488B45F8 		movq	-8(%rbp), %rax
 11156 0014 48837DF8 		cmpq	$0, -8(%rbp)
 11156      00
 11157 0019 740B     		je	.L693
 11158 001b 4889C2   		movq	%rax, %rdx
 11159 001e 83E207   		andl	$7, %edx
 11160 0021 4885D2   		testq	%rdx, %rdx
 11161 0024 740F     		je	.L694
 11162              	.L693:
 11163 0026 4889C6   		movq	%rax, %rsi
 11164 0029 488D3D00 		leaq	.Lubsan_data605(%rip), %rdi
 11164      000000
 11165 0030 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11165      00
 11166              	.L694:
 11167 0035 488B45F8 		movq	-8(%rbp), %rax
  75:/usr/include/c++/9/bits/move.h **** 
 11168              		.loc 8 75 39
 11169 0039 C9       		leave
 11170              		.cfi_def_cfa 7, 8
 11171 003a C3       		ret
 11172              		.cfi_endproc
 11173              	.LFE2877:
 11175              		.section	.rodata
 11176              		.align 32
 11177              	.LC25:
 11178 07e0 2F757372 		.string	"/usr/include/c++/9/ext/new_allocator.h"
 11178      2F696E63 
 11178      6C756465 
 11178      2F632B2B 
 11178      2F392F65 
 11179 0807 00000000 		.zero	57
 11179      00000000 
 11179      00000000 
 11179      00000000 
 11179      00000000 
 11180              		.section	.data.rel.local
 11181              		.align 32
 11184              	.Lubsan_data606:
 11185 3800 00000000 		.quad	.LC25
 11185      00000000 
 11186 3808 92000000 		.long	146
 11187 380c 2E000000 		.long	46
 11188 3810 00000000 		.quad	.Lubsan_type40
 11188      00000000 
 11189 3818 03       		.byte	3
 11190 3819 02       		.byte	2
 11191 381a 00000000 		.zero	6
 11191      0000
 11192 3820 00000000 		.zero	32
 11192      00000000 
 11192      00000000 
 11192      00000000 
 11192      00000000 
 11193              		.align 32
 11196              	.Lubsan_data607:
 11197 3840 00000000 		.quad	.LC25
 11197      00000000 
 11198 3848 92000000 		.long	146
 11199 384c 04000000 		.long	4
 11200 3850 00000000 		.quad	.Lubsan_type5
 11200      00000000 
 11201 3858 03       		.byte	3
 11202 3859 05       		.byte	5
 11203 385a 00000000 		.zero	6
 11203      0000
 11204 3860 00000000 		.zero	32
 11204      00000000 
 11204      00000000 
 11204      00000000 
 11204      00000000 
 11205              		.section	.text._ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9
 11206              		.align 2
 11207              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9construct
 11209              	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRK
 11210              	.LASANPC2878:
 11211              	.LFB2878:
  90:/usr/include/c++/9/ext/new_allocator.h **** 
  91:/usr/include/c++/9/ext/new_allocator.h ****       pointer
  92:/usr/include/c++/9/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/c++/9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/c++/9/ext/new_allocator.h **** 
  95:/usr/include/c++/9/ext/new_allocator.h ****       const_pointer
  96:/usr/include/c++/9/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/c++/9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/c++/9/ext/new_allocator.h **** 
  99:/usr/include/c++/9/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 100:/usr/include/c++/9/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 101:/usr/include/c++/9/ext/new_allocator.h ****       _GLIBCXX_NODISCARD pointer
 102:/usr/include/c++/9/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 103:/usr/include/c++/9/ext/new_allocator.h ****       {
 104:/usr/include/c++/9/ext/new_allocator.h **** 	if (__n > this->max_size())
 105:/usr/include/c++/9/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 106:/usr/include/c++/9/ext/new_allocator.h **** 
 107:/usr/include/c++/9/ext/new_allocator.h **** #if __cpp_aligned_new
 108:/usr/include/c++/9/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 109:/usr/include/c++/9/ext/new_allocator.h **** 	  {
 110:/usr/include/c++/9/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 111:/usr/include/c++/9/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 112:/usr/include/c++/9/ext/new_allocator.h **** 	  }
 113:/usr/include/c++/9/ext/new_allocator.h **** #endif
 114:/usr/include/c++/9/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 115:/usr/include/c++/9/ext/new_allocator.h ****       }
 116:/usr/include/c++/9/ext/new_allocator.h **** 
 117:/usr/include/c++/9/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 118:/usr/include/c++/9/ext/new_allocator.h ****       void
 119:/usr/include/c++/9/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 120:/usr/include/c++/9/ext/new_allocator.h ****       {
 121:/usr/include/c++/9/ext/new_allocator.h **** #if __cpp_aligned_new
 122:/usr/include/c++/9/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 123:/usr/include/c++/9/ext/new_allocator.h **** 	  {
 124:/usr/include/c++/9/ext/new_allocator.h **** 	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
 125:/usr/include/c++/9/ext/new_allocator.h **** 	    return;
 126:/usr/include/c++/9/ext/new_allocator.h **** 	  }
 127:/usr/include/c++/9/ext/new_allocator.h **** #endif
 128:/usr/include/c++/9/ext/new_allocator.h **** 	::operator delete(__p);
 129:/usr/include/c++/9/ext/new_allocator.h ****       }
 130:/usr/include/c++/9/ext/new_allocator.h **** 
 131:/usr/include/c++/9/ext/new_allocator.h ****       size_type
 132:/usr/include/c++/9/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 133:/usr/include/c++/9/ext/new_allocator.h ****       {
 134:/usr/include/c++/9/ext/new_allocator.h **** #if __PTRDIFF_MAX__ < __SIZE_MAX__
 135:/usr/include/c++/9/ext/new_allocator.h **** 	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 136:/usr/include/c++/9/ext/new_allocator.h **** #else
 137:/usr/include/c++/9/ext/new_allocator.h **** 	return size_t(-1) / sizeof(_Tp);
 138:/usr/include/c++/9/ext/new_allocator.h **** #endif
 139:/usr/include/c++/9/ext/new_allocator.h ****       }
 140:/usr/include/c++/9/ext/new_allocator.h **** 
 141:/usr/include/c++/9/ext/new_allocator.h **** #if __cplusplus >= 201103L
 142:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 143:/usr/include/c++/9/ext/new_allocator.h **** 	void
 144:/usr/include/c++/9/ext/new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 11212              		.loc 9 144 2
 11213              		.cfi_startproc
 11214              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 11215              		.cfi_lsda 0x1b,.LLSDA2878
 11216 0000 F30F1EFA 		endbr64
 11217 0004 55       		pushq	%rbp
 11218              		.cfi_def_cfa_offset 16
 11219              		.cfi_offset 6, -16
 11220 0005 4889E5   		movq	%rsp, %rbp
 11221              		.cfi_def_cfa_register 6
 11222 0008 4155     		pushq	%r13
 11223 000a 4154     		pushq	%r12
 11224 000c 53       		pushq	%rbx
 11225 000d 4883EC28 		subq	$40, %rsp
 11226              		.cfi_offset 13, -24
 11227              		.cfi_offset 12, -32
 11228              		.cfi_offset 3, -40
 11229 0011 48897DD8 		movq	%rdi, -40(%rbp)
 11230 0015 488975D0 		movq	%rsi, -48(%rbp)
 11231 0019 488955C8 		movq	%rdx, -56(%rbp)
 145:/usr/include/c++/9/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 146:/usr/include/c++/9/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 11232              		.loc 9 146 46
 11233 001d 488B45C8 		movq	-56(%rbp), %rax
 11234 0021 48837DC8 		cmpq	$0, -56(%rbp)
 11234      00
 11235 0026 740B     		je	.L697
 11236 0028 4889C2   		movq	%rax, %rdx
 11237 002b 83E207   		andl	$7, %edx
 11238 002e 4885D2   		testq	%rdx, %rdx
 11239 0031 740F     		je	.L698
 11240              	.L697:
 11241 0033 4889C6   		movq	%rax, %rsi
 11242 0036 488D3D00 		leaq	.Lubsan_data606(%rip), %rdi
 11242      000000
 11243 003d E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11243      00
 11244              	.L698:
 11245 0042 488B45C8 		movq	-56(%rbp), %rax
 11246 0046 4889C7   		movq	%rax, %rdi
 11247 0049 E8000000 		call	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_reference
 11247      00
 11248 004e 4989C5   		movq	%rax, %r13
 11249              		.loc 9 146 18
 11250 0051 4C8B65D0 		movq	-48(%rbp), %r12
 11251              		.loc 9 146 4
 11252 0055 4C89E6   		movq	%r12, %rsi
 11253 0058 BF200000 		movl	$32, %edi
 11253      00
 11254 005d E8000000 		call	_ZnwmPv
 11254      00
 11255 0062 4889C3   		movq	%rax, %rbx
 11256 0065 4889D8   		movq	%rbx, %rax
 11257 0068 4885DB   		testq	%rbx, %rbx
 11258 006b 740B     		je	.L699
 11259 006d 4889C2   		movq	%rax, %rdx
 11260 0070 83E207   		andl	$7, %edx
 11261 0073 4885D2   		testq	%rdx, %rdx
 11262 0076 740F     		je	.L700
 11263              	.L699:
 11264 0078 4889C6   		movq	%rax, %rsi
 11265 007b 488D3D00 		leaq	.Lubsan_data607(%rip), %rdi
 11265      000000
 11266 0082 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11266      00
 11267              	.L700:
 11268 0087 4C89EE   		movq	%r13, %rsi
 11269 008a 4889DF   		movq	%rbx, %rdi
 11270              	.LEHB31:
 11271 008d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 11271      00
 11272              	.LEHE31:
 11273              		.loc 9 146 60
 11274 0092 EB22     		jmp	.L703
 11275              	.L702:
 11276 0094 F30F1EFA 		endbr64
 11277 0098 4989C5   		movq	%rax, %r13
 11278              		.loc 9 146 4
 11279 009b 4C89E6   		movq	%r12, %rsi
 11280 009e 4889DF   		movq	%rbx, %rdi
 11281 00a1 E8000000 		call	_ZdlPvS_
 11281      00
 11282 00a6 4C89EB   		movq	%r13, %rbx
 11283 00a9 E8000000 		call	__asan_handle_no_return@PLT
 11283      00
 11284 00ae 4889DF   		movq	%rbx, %rdi
 11285              	.LEHB32:
 11286 00b1 E8000000 		call	_Unwind_Resume@PLT
 11286      00
 11287              	.LEHE32:
 11288              	.L703:
 11289              		.loc 9 146 60
 11290 00b6 4883C428 		addq	$40, %rsp
 11291 00ba 5B       		popq	%rbx
 11292 00bb 415C     		popq	%r12
 11293 00bd 415D     		popq	%r13
 11294 00bf 5D       		popq	%rbp
 11295              		.cfi_def_cfa 7, 8
 11296 00c0 C3       		ret
 11297              		.cfi_endproc
 11298              	.LFE2878:
 11299              		.section	.gcc_except_table
 11300              	.LLSDA2878:
 11301 00dc FF       		.byte	0xff
 11302 00dd FF       		.byte	0xff
 11303 00de 01       		.byte	0x1
 11304 00df 0B       		.uleb128 .LLSDACSE2878-.LLSDACSB2878
 11305              	.LLSDACSB2878:
 11306 00e0 8D01     		.uleb128 .LEHB31-.LFB2878
 11307 00e2 05       		.uleb128 .LEHE31-.LEHB31
 11308 00e3 9401     		.uleb128 .L702-.LFB2878
 11309 00e5 00       		.uleb128 0
 11310 00e6 B101     		.uleb128 .LEHB32-.LFB2878
 11311 00e8 05       		.uleb128 .LEHE32-.LEHB32
 11312 00e9 00       		.uleb128 0
 11313 00ea 00       		.uleb128 0
 11314              	.LLSDACSE2878:
 11315              		.section	.text._ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9
 11317              		.section	.data.rel.local
 11318              		.align 32
 11321              	.Lubsan_data608:
 11322 3880 00000000 		.quad	.LC3
 11322      00000000 
 11323 3888 DB060000 		.long	1755
 11324 388c 11000000 		.long	17
 11325 3890 00000000 		.quad	.Lubsan_type44
 11325      00000000 
 11326 3898 03       		.byte	3
 11327 3899 04       		.byte	4
 11328 389a 00000000 		.zero	6
 11328      0000
 11329 38a0 00000000 		.zero	32
 11329      00000000 
 11329      00000000 
 11329      00000000 
 11329      00000000 
 11330              		.align 32
 11333              	.Lubsan_data609:
 11334 38c0 00000000 		.quad	.LC3
 11334      00000000 
 11335 38c8 DB060000 		.long	1755
 11336 38cc 11000000 		.long	17
 11337 38d0 00000000 		.quad	.Lubsan_type44
 11337      00000000 
 11338 38d8 03       		.byte	3
 11339 38d9 04       		.byte	4
 11340 38da 00000000 		.zero	6
 11340      0000
 11341 38e0 00000000 		.zero	32
 11341      00000000 
 11341      00000000 
 11341      00000000 
 11341      00000000 
 11342              		.align 32
 11345              	.Lubsan_data610:
 11346 3900 00000000 		.quad	.LC3
 11346      00000000 
 11347 3908 DE060000 		.long	1758
 11348 390c 21000000 		.long	33
 11349 3910 00000000 		.quad	.Lubsan_type44
 11349      00000000 
 11350 3918 03       		.byte	3
 11351 3919 04       		.byte	4
 11352 391a 00000000 		.zero	6
 11352      0000
 11353 3920 00000000 		.zero	32
 11353      00000000 
 11353      00000000 
 11353      00000000 
 11353      00000000 
 11354              		.align 32
 11357              	.Lubsan_data611:
 11358 3940 00000000 		.quad	.LC3
 11358      00000000 
 11359 3948 DE060000 		.long	1758
 11360 394c 2D000000 		.long	45
 11361 3950 00000000 		.quad	.Lubsan_type44
 11361      00000000 
 11362 3958 03       		.byte	3
 11363 3959 04       		.byte	4
 11364 395a 00000000 		.zero	6
 11364      0000
 11365 3960 00000000 		.zero	32
 11365      00000000 
 11365      00000000 
 11365      00000000 
 11365      00000000 
 11366              		.data
 11367              		.align 32
 11370              	.Lubsan_type47:
 11373 0ba4 27636F6E 		.string	"'const long unsigned int'"
 11373      7374206C 
 11373      6F6E6720 
 11373      756E7369 
 11373      676E6564 
 11374 0bbe 00000000 		.zero	34
 11374      00000000 
 11374      00000000 
 11374      00000000 
 11374      00000000 
 11375              		.section	.data.rel.local
 11376              		.align 32
 11379              	.Lubsan_data612:
 11380 3980 00000000 		.quad	.LC3
 11380      00000000 
 11381 3988 DE060000 		.long	1758
 11382 398c 2D000000 		.long	45
 11383 3990 00000000 		.quad	.Lubsan_type47
 11383      00000000 
 11384 3998 03       		.byte	3
 11385 3999 02       		.byte	2
 11386 399a 00000000 		.zero	6
 11386      0000
 11387 39a0 00000000 		.zero	32
 11387      00000000 
 11387      00000000 
 11387      00000000 
 11387      00000000 
 11388              		.align 32
 11391              	.Lubsan_data613:
 11392 39c0 00000000 		.quad	.LC3
 11392      00000000 
 11393 39c8 DE060000 		.long	1758
 11394 39cc 21000000 		.long	33
 11395 39d0 00000000 		.quad	.Lubsan_type47
 11395      00000000 
 11396 39d8 03       		.byte	3
 11397 39d9 00       		.byte	0
 11398 39da 00000000 		.zero	6
 11398      0000
 11399 39e0 00000000 		.zero	32
 11399      00000000 
 11399      00000000 
 11399      00000000 
 11399      00000000 
 11400              		.align 32
 11403              	.Lubsan_data614:
 11404 3a00 00000000 		.quad	.LC3
 11404      00000000 
 11405 3a08 DF060000 		.long	1759
 11406 3a0c 10000000 		.long	16
 11407 3a10 00000000 		.quad	.Lubsan_type44
 11407      00000000 
 11408 3a18 03       		.byte	3
 11409 3a19 04       		.byte	4
 11410 3a1a 00000000 		.zero	6
 11410      0000
 11411 3a20 00000000 		.zero	32
 11411      00000000 
 11411      00000000 
 11411      00000000 
 11411      00000000 
 11412              		.align 32
 11415              	.Lubsan_data615:
 11416 3a40 00000000 		.quad	.LC3
 11416      00000000 
 11417 3a48 DF060000 		.long	1759
 11418 3a4c 22000000 		.long	34
 11419 3a50 00000000 		.quad	.Lubsan_type44
 11419      00000000 
 11420 3a58 03       		.byte	3
 11421 3a59 04       		.byte	4
 11422 3a5a 00000000 		.zero	6
 11422      0000
 11423 3a60 00000000 		.zero	32
 11423      00000000 
 11423      00000000 
 11423      00000000 
 11423      00000000 
 11424              		.align 32
 11427              	.Lubsan_data616:
 11428 3a80 00000000 		.quad	.LC3
 11428      00000000 
 11429 3a88 DF060000 		.long	1759
 11430 3a8c 30000000 		.long	48
 11431 3a90 00000000 		.quad	.Lubsan_type44
 11431      00000000 
 11432 3a98 03       		.byte	3
 11433 3a99 04       		.byte	4
 11434 3a9a 00000000 		.zero	6
 11434      0000
 11435 3aa0 00000000 		.zero	32
 11435      00000000 
 11435      00000000 
 11435      00000000 
 11435      00000000 
 11436              		.section	.rodata
 11437              		.align 8
 11438              	.LC26:
 11439 0840 32203332 		.string	"2 32 8 9 <unknown> 64 8 8 __n:1753"
 11439      20382039 
 11439      203C756E 
 11439      6B6E6F77 
 11439      6E3E2036 
 11440              		.section	.text._ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_chec
 11441              		.align 2
 11442              		.weak	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPK
 11444              	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc:
 11445              	.LASANPC2879:
 11446              	.LFB2879:
1753:/usr/include/c++/9/bits/stl_vector.h ****       {
 11447              		.loc 4 1753 7
 11448              		.cfi_startproc
 11449 0000 F30F1EFA 		endbr64
 11450 0004 55       		pushq	%rbp
 11451              		.cfi_def_cfa_offset 16
 11452              		.cfi_offset 6, -16
 11453 0005 4889E5   		movq	%rsp, %rbp
 11454              		.cfi_def_cfa_register 6
 11455 0008 4157     		pushq	%r15
 11456 000a 4156     		pushq	%r14
 11457 000c 4155     		pushq	%r13
 11458 000e 4154     		pushq	%r12
 11459 0010 53       		pushq	%rbx
 11460 0011 4881ECB8 		subq	$184, %rsp
 11460      000000
 11461              		.cfi_offset 15, -24
 11462              		.cfi_offset 14, -32
 11463              		.cfi_offset 13, -40
 11464              		.cfi_offset 12, -48
 11465              		.cfi_offset 3, -56
 11466 0018 4889BD38 		movq	%rdi, -200(%rbp)
 11466      FFFFFF
 11467 001f 4889B530 		movq	%rsi, -208(%rbp)
 11467      FFFFFF
 11468 0026 48899528 		movq	%rdx, -216(%rbp)
 11468      FFFFFF
 11469 002d 488D9D50 		leaq	-176(%rbp), %rbx
 11469      FFFFFF
 11470 0034 48899D20 		movq	%rbx, -224(%rbp)
 11470      FFFFFF
 11471 003b 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 11471      000000
 11472 0042 7412     		je	.L704
 11473 0044 BF600000 		movl	$96, %edi
 11473      00
 11474 0049 E8000000 		call	__asan_stack_malloc_1@PLT
 11474      00
 11475              	.LVL15:
 11476 004e 4885C0   		testq	%rax, %rax
 11477 0051 7403     		je	.L704
 11478 0053 4889C3   		movq	%rax, %rbx
 11479              	.L704:
 11480 0056 488D8380 		leaq	128(%rbx), %rax
 11480      000000
 11481 005d 4989C5   		movq	%rax, %r13
 11482 0060 48C703B3 		movq	$1102416563, (%rbx)
 11482      8AB541
 11483 0067 488D0500 		leaq	.LC26(%rip), %rax
 11483      000000
 11484 006e 48894308 		movq	%rax, 8(%rbx)
 11485 0072 488D0587 		leaq	.LASANPC2879(%rip), %rax
 11485      FFFFFF
 11486 0079 48894310 		movq	%rax, 16(%rbx)
 11487 007d 4989DC   		movq	%rbx, %r12
 11488 0080 49C1EC03 		shrq	$3, %r12
 11489 0084 41C78424 		movl	$-235802127, 2147450880(%r12)
 11489      0080FF7F 
 11489      F1F1F1F1 
 11490 0090 41C78424 		movl	$-218959360, 2147450884(%r12)
 11490      0480FF7F 
 11490      00F2F2F2 
 11491 009c 41C78424 		movl	$-202116352, 2147450888(%r12)
 11491      0880FF7F 
 11491      00F3F3F3 
1753:/usr/include/c++/9/bits/stl_vector.h ****       {
 11492              		.loc 4 1753 7
 11493 00a8 64488B04 		movq	%fs:40, %rax
 11493      25280000 
 11493      00
 11494 00b1 488945C8 		movq	%rax, -56(%rbp)
 11495 00b5 31C0     		xorl	%eax, %eax
1753:/usr/include/c++/9/bits/stl_vector.h ****       {
 11496              		.loc 4 1753 30
 11497 00b7 488B8530 		movq	-208(%rbp), %rax
 11497      FFFFFF
 11498 00be 498945C0 		movq	%rax, -64(%r13)
1755:/usr/include/c++/9/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 11499              		.loc 4 1755 17
 11500 00c2 488B8538 		movq	-200(%rbp), %rax
 11500      FFFFFF
 11501 00c9 4883BD38 		cmpq	$0, -200(%rbp)
 11501      FFFFFF00 
 11502 00d1 740B     		je	.L708
 11503 00d3 4889C2   		movq	%rax, %rdx
 11504 00d6 83E207   		andl	$7, %edx
 11505 00d9 4885D2   		testq	%rdx, %rdx
 11506 00dc 740F     		je	.L709
 11507              	.L708:
 11508 00de 4889C6   		movq	%rax, %rsi
 11509 00e1 488D3D00 		leaq	.Lubsan_data608(%rip), %rdi
 11509      000000
 11510 00e8 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11510      00
 11511              	.L709:
 11512 00ed 488B8538 		movq	-200(%rbp), %rax
 11512      FFFFFF
 11513 00f4 4889C7   		movq	%rax, %rdi
 11514 00f7 E8000000 		call	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv
 11514      00
 11515 00fc 4989C6   		movq	%rax, %r14
 11516 00ff 488B8538 		movq	-200(%rbp), %rax
 11516      FFFFFF
 11517 0106 4883BD38 		cmpq	$0, -200(%rbp)
 11517      FFFFFF00 
 11518 010e 740B     		je	.L710
 11519 0110 4889C2   		movq	%rax, %rdx
 11520 0113 83E207   		andl	$7, %edx
 11521 0116 4885D2   		testq	%rdx, %rdx
 11522 0119 740F     		je	.L711
 11523              	.L710:
 11524 011b 4889C6   		movq	%rax, %rsi
 11525 011e 488D3D00 		leaq	.Lubsan_data609(%rip), %rdi
 11525      000000
 11526 0125 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11526      00
 11527              	.L711:
 11528 012a 488B8538 		movq	-200(%rbp), %rax
 11528      FFFFFF
 11529 0131 4889C7   		movq	%rax, %rdi
 11530 0134 E8000000 		call	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv
 11530      00
 11531 0139 4C89F2   		movq	%r14, %rdx
 11532 013c 4829C2   		subq	%rax, %rdx
1755:/usr/include/c++/9/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 11533              		.loc 4 1755 26
 11534 013f 498B45C0 		movq	-64(%r13), %rax
 11535 0143 4839C2   		cmpq	%rax, %rdx
 11536 0146 0F92C0   		setb	%al
1755:/usr/include/c++/9/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 11537              		.loc 4 1755 2
 11538 0149 84C0     		testb	%al, %al
 11539 014b 7414     		je	.L712
1756:/usr/include/c++/9/bits/stl_vector.h **** 
 11540              		.loc 4 1756 24
 11541 014d E8000000 		call	__asan_handle_no_return@PLT
 11541      00
 11542 0152 488B8528 		movq	-216(%rbp), %rax
 11542      FFFFFF
 11543 0159 4889C7   		movq	%rax, %rdi
 11544 015c E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 11544      00
 11545              	.L712:
1758:/usr/include/c++/9/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 11546              		.loc 4 1758 33
 11547 0161 488B8538 		movq	-200(%rbp), %rax
 11547      FFFFFF
 11548 0168 4883BD38 		cmpq	$0, -200(%rbp)
 11548      FFFFFF00 
 11549 0170 740B     		je	.L713
 11550 0172 4889C2   		movq	%rax, %rdx
 11551 0175 83E207   		andl	$7, %edx
 11552 0178 4885D2   		testq	%rdx, %rdx
 11553 017b 740F     		je	.L714
 11554              	.L713:
 11555 017d 4889C6   		movq	%rax, %rsi
 11556 0180 488D3D00 		leaq	.Lubsan_data610(%rip), %rdi
 11556      000000
 11557 0187 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11557      00
 11558              	.L714:
 11559 018c 488B8538 		movq	-200(%rbp), %rax
 11559      FFFFFF
 11560 0193 4889C7   		movq	%rax, %rdi
 11561 0196 E8000000 		call	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv
 11561      00
 11562 019b 4989C7   		movq	%rax, %r15
1758:/usr/include/c++/9/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 11563              		.loc 4 1758 45
 11564 019e 488B8538 		movq	-200(%rbp), %rax
 11564      FFFFFF
 11565 01a5 4883BD38 		cmpq	$0, -200(%rbp)
 11565      FFFFFF00 
 11566 01ad 740B     		je	.L715
 11567 01af 4889C2   		movq	%rax, %rdx
 11568 01b2 83E207   		andl	$7, %edx
 11569 01b5 4885D2   		testq	%rdx, %rdx
 11570 01b8 740F     		je	.L716
 11571              	.L715:
 11572 01ba 4889C6   		movq	%rax, %rsi
 11573 01bd 488D3D00 		leaq	.Lubsan_data611(%rip), %rdi
 11573      000000
 11574 01c4 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11574      00
 11575              	.L716:
 11576 01c9 488B8538 		movq	-200(%rbp), %rax
 11576      FFFFFF
 11577 01d0 4889C7   		movq	%rax, %rdi
 11578 01d3 E8000000 		call	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv
 11578      00
 11579 01d8 498D55A0 		leaq	-96(%r13), %rdx
 11580 01dc 4889D1   		movq	%rdx, %rcx
 11581 01df 48C1E903 		shrq	$3, %rcx
 11582 01e3 4881C100 		addq	$2147450880, %rcx
 11582      80FF7F
 11583 01ea 0FB609   		movzbl	(%rcx), %ecx
 11584 01ed 84C9     		testb	%cl, %cl
 11585 01ef 7408     		je	.L717
 11586 01f1 4889D7   		movq	%rdx, %rdi
 11587 01f4 E8000000 		call	__asan_report_store8@PLT
 11587      00
 11588              	.L717:
 11589 01f9 498945A0 		movq	%rax, -96(%r13)
 11590 01fd 4D8D75A0 		leaq	-96(%r13), %r14
 11591 0201 4C89F0   		movq	%r14, %rax
 11592 0204 4D85F6   		testq	%r14, %r14
 11593 0207 740B     		je	.L718
 11594 0209 4889C2   		movq	%rax, %rdx
 11595 020c 83E207   		andl	$7, %edx
 11596 020f 4885D2   		testq	%rdx, %rdx
 11597 0212 740F     		je	.L719
 11598              	.L718:
 11599 0214 4889C6   		movq	%rax, %rsi
 11600 0217 488D3D00 		leaq	.Lubsan_data612(%rip), %rdi
 11600      000000
 11601 021e E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11601      00
 11602              	.L719:
 11603 0223 498D45C0 		leaq	-64(%r13), %rax
 11604 0227 4889C6   		movq	%rax, %rsi
 11605 022a 4C89F7   		movq	%r14, %rdi
 11606 022d E8000000 		call	_ZSt3maxImERKT_S2_S2_
 11606      00
 11607 0232 4989C6   		movq	%rax, %r14
1758:/usr/include/c++/9/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 11608              		.loc 4 1758 33
 11609 0235 4C89F0   		movq	%r14, %rax
 11610 0238 4D85F6   		testq	%r14, %r14
 11611 023b 740B     		je	.L720
 11612 023d 4889C2   		movq	%rax, %rdx
 11613 0240 83E207   		andl	$7, %edx
 11614 0243 4885D2   		testq	%rdx, %rdx
 11615 0246 740F     		je	.L721
 11616              	.L720:
 11617 0248 4889C6   		movq	%rax, %rsi
 11618 024b 488D3D00 		leaq	.Lubsan_data613(%rip), %rdi
 11618      000000
 11619 0252 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11619      00
 11620              	.L721:
 11621 0257 4C89F0   		movq	%r14, %rax
 11622 025a 4889C2   		movq	%rax, %rdx
 11623 025d 48C1EA03 		shrq	$3, %rdx
 11624 0261 4881C200 		addq	$2147450880, %rdx
 11624      80FF7F
 11625 0268 0FB612   		movzbl	(%rdx), %edx
 11626 026b 84D2     		testb	%dl, %dl
 11627 026d 7408     		je	.L722
 11628 026f 4889C7   		movq	%rax, %rdi
 11629 0272 E8000000 		call	__asan_report_load8@PLT
 11629      00
 11630              	.L722:
 11631 0277 498B06   		movq	(%r14), %rax
1758:/usr/include/c++/9/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 11632              		.loc 4 1758 18
 11633 027a 4C01F8   		addq	%r15, %rax
 11634 027d 48898548 		movq	%rax, -184(%rbp)
 11634      FFFFFF
1758:/usr/include/c++/9/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 11635              		.loc 4 1758 45
 11636 0284 498D45A0 		leaq	-96(%r13), %rax
 11637 0288 48C1E803 		shrq	$3, %rax
 11638 028c 48050080 		addq	$2147450880, %rax
 11638      FF7F
 11639 0292 C600F8   		movb	$-8, (%rax)
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11640              		.loc 4 1759 16
 11641 0295 488B8538 		movq	-200(%rbp), %rax
 11641      FFFFFF
 11642 029c 4883BD38 		cmpq	$0, -200(%rbp)
 11642      FFFFFF00 
 11643 02a4 740B     		je	.L723
 11644 02a6 4889C2   		movq	%rax, %rdx
 11645 02a9 83E207   		andl	$7, %edx
 11646 02ac 4885D2   		testq	%rdx, %rdx
 11647 02af 740F     		je	.L724
 11648              	.L723:
 11649 02b1 4889C6   		movq	%rax, %rsi
 11650 02b4 488D3D00 		leaq	.Lubsan_data614(%rip), %rdi
 11650      000000
 11651 02bb E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11651      00
 11652              	.L724:
 11653 02c0 488B8538 		movq	-200(%rbp), %rax
 11653      FFFFFF
 11654 02c7 4889C7   		movq	%rax, %rdi
 11655 02ca E8000000 		call	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv
 11655      00
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11656              		.loc 4 1759 48
 11657 02cf 48398548 		cmpq	%rax, -184(%rbp)
 11657      FFFFFF
 11658 02d6 7243     		jb	.L725
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11659              		.loc 4 1759 34 discriminator 2
 11660 02d8 488B8538 		movq	-200(%rbp), %rax
 11660      FFFFFF
 11661 02df 4883BD38 		cmpq	$0, -200(%rbp)
 11661      FFFFFF00 
 11662 02e7 740B     		je	.L726
 11663 02e9 4889C2   		movq	%rax, %rdx
 11664 02ec 83E207   		andl	$7, %edx
 11665 02ef 4885D2   		testq	%rdx, %rdx
 11666 02f2 740F     		je	.L727
 11667              	.L726:
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11668              		.loc 4 1759 34 is_stmt 0
 11669 02f4 4889C6   		movq	%rax, %rsi
 11670 02f7 488D3D00 		leaq	.Lubsan_data615(%rip), %rdi
 11670      000000
 11671 02fe E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11671      00
 11672              	.L727:
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11673              		.loc 4 1759 34 discriminator 2
 11674 0303 488B8538 		movq	-200(%rbp), %rax
 11674      FFFFFF
 11675 030a 4889C7   		movq	%rax, %rdi
 11676 030d E8000000 		call	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv
 11676      00
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11677              		.loc 4 1759 25 is_stmt 1 discriminator 2
 11678 0312 48398548 		cmpq	%rax, -184(%rbp)
 11678      FFFFFF
 11679 0319 763C     		jbe	.L728
 11680              	.L725:
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11681              		.loc 4 1759 48 discriminator 3
 11682 031b 488B8538 		movq	-200(%rbp), %rax
 11682      FFFFFF
 11683 0322 4883BD38 		cmpq	$0, -200(%rbp)
 11683      FFFFFF00 
 11684 032a 740B     		je	.L729
 11685 032c 4889C2   		movq	%rax, %rdx
 11686 032f 83E207   		andl	$7, %edx
 11687 0332 4885D2   		testq	%rdx, %rdx
 11688 0335 740F     		je	.L730
 11689              	.L729:
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11690              		.loc 4 1759 48 is_stmt 0
 11691 0337 4889C6   		movq	%rax, %rsi
 11692 033a 488D3D00 		leaq	.Lubsan_data616(%rip), %rdi
 11692      000000
 11693 0341 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11693      00
 11694              	.L730:
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11695              		.loc 4 1759 48 discriminator 3
 11696 0346 488B8538 		movq	-200(%rbp), %rax
 11696      FFFFFF
 11697 034d 4889C7   		movq	%rax, %rdi
 11698 0350 E8000000 		call	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv
 11698      00
 11699 0355 EB07     		jmp	.L731
 11700              	.L728:
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11701              		.loc 4 1759 48 discriminator 4
 11702 0357 488B8548 		movq	-184(%rbp), %rax
 11702      FFFFFF
 11703              	.L731:
1759:/usr/include/c++/9/bits/stl_vector.h ****       }
 11704              		.loc 4 1759 63 is_stmt 1 discriminator 6
 11705 035e 4889C2   		movq	%rax, %rdx
1753:/usr/include/c++/9/bits/stl_vector.h ****       {
 11706              		.loc 4 1753 7 discriminator 6
 11707 0361 48399D20 		cmpq	%rbx, -224(%rbp)
 11707      FFFFFF
 11708 0368 742E     		je	.L705
1753:/usr/include/c++/9/bits/stl_vector.h ****       {
 11709              		.loc 4 1753 7 is_stmt 0
 11710 036a 48C7030E 		movq	$1172321806, (%rbx)
 11710      36E045
 11711 0371 48B8F5F5 		movabsq	$-723401728380766731, %rax
 11711      F5F5F5F5 
 11711      F5F5
 11712 037b 49898424 		movq	%rax, 2147450880(%r12)
 11712      0080FF7F 
 11713 0383 41C78424 		movl	$-168430091, 2147450888(%r12)
 11713      0880FF7F 
 11713      F5F5F5F5 
 11714 038f 488B4378 		movq	120(%rbx), %rax
 11715 0393 C60000   		movb	$0, (%rax)
 11716 0396 EB18     		jmp	.L706
 11717              	.L705:
 11718 0398 49C78424 		movq	$0, 2147450880(%r12)
 11718      0080FF7F 
 11718      00000000 
 11719 03a4 41C78424 		movl	$0, 2147450888(%r12)
 11719      0880FF7F 
 11719      00000000 
 11720              	.L706:
1760:/usr/include/c++/9/bits/stl_vector.h **** 
 11721              		.loc 4 1760 7 is_stmt 1
 11722 03b0 488B45C8 		movq	-56(%rbp), %rax
 11723 03b4 64483304 		xorq	%fs:40, %rax
 11723      25280000 
 11723      00
 11724 03bd 7405     		je	.L733
 11725 03bf E8000000 		call	__stack_chk_fail@PLT
 11725      00
 11726              	.L733:
 11727 03c4 4889D0   		movq	%rdx, %rax
 11728 03c7 4881C4B8 		addq	$184, %rsp
 11728      000000
 11729 03ce 5B       		popq	%rbx
 11730 03cf 415C     		popq	%r12
 11731 03d1 415D     		popq	%r13
 11732 03d3 415E     		popq	%r14
 11733 03d5 415F     		popq	%r15
 11734 03d7 5D       		popq	%rbp
 11735              		.cfi_def_cfa 7, 8
 11736 03d8 C3       		ret
 11737              		.cfi_endproc
 11738              	.LFE2879:
 11740              		.section	.data.rel.local
 11741              		.align 32
 11744              	.Lubsan_data617:
 11745 3ac0 00000000 		.quad	.LC13
 11745      00000000 
 11746 3ac8 DD030000 		.long	989
 11747 3acc 1B000000 		.long	27
 11748 3ad0 00000000 		.quad	.Lubsan_type16
 11748      00000000 
 11749 3ad8 03       		.byte	3
 11750 3ad9 04       		.byte	4
 11751 3ada 00000000 		.zero	6
 11751      0000
 11752 3ae0 00000000 		.zero	32
 11752      00000000 
 11752      00000000 
 11752      00000000 
 11752      00000000 
 11753              		.align 32
 11756              	.Lubsan_data618:
 11757 3b00 00000000 		.quad	.LC13
 11757      00000000 
 11758 3b08 DD030000 		.long	989
 11759 3b0c 1B000000 		.long	27
 11760 3b10 00000000 		.quad	.Lubsan_type29
 11760      00000000 
 11761 3b18 03       		.byte	3
 11762 3b19 00       		.byte	0
 11763 3b1a 00000000 		.zero	6
 11763      0000
 11764 3b20 00000000 		.zero	32
 11764      00000000 
 11764      00000000 
 11764      00000000 
 11764      00000000 
 11765              		.align 32
 11768              	.Lubsan_data619:
 11769 3b40 00000000 		.quad	.LC13
 11769      00000000 
 11770 3b48 DD030000 		.long	989
 11771 3b4c 1B000000 		.long	27
 11772 3b50 00000000 		.quad	.Lubsan_type16
 11772      00000000 
 11773 3b58 03       		.byte	3
 11774 3b59 04       		.byte	4
 11775 3b5a 00000000 		.zero	6
 11775      0000
 11776 3b60 00000000 		.zero	32
 11776      00000000 
 11776      00000000 
 11776      00000000 
 11776      00000000 
 11777              		.align 32
 11780              	.Lubsan_data620:
 11781 3b80 00000000 		.quad	.LC13
 11781      00000000 
 11782 3b88 DD030000 		.long	989
 11783 3b8c 1B000000 		.long	27
 11784 3b90 00000000 		.quad	.Lubsan_type29
 11784      00000000 
 11785 3b98 03       		.byte	3
 11786 3b99 00       		.byte	0
 11787 3b9a 00000000 		.zero	6
 11787      0000
 11788 3ba0 00000000 		.zero	32
 11788      00000000 
 11788      00000000 
 11788      00000000 
 11788      00000000 
 11789              		.section	.text._ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_S
 11790              		.weak	_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEE
 11792              	_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__
 11793              	.LASANPC2880:
 11794              	.LFB2880:
 986:/usr/include/c++/9/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 11795              		.loc 7 986 5
 11796              		.cfi_startproc
 11797 0000 F30F1EFA 		endbr64
 11798 0004 55       		pushq	%rbp
 11799              		.cfi_def_cfa_offset 16
 11800              		.cfi_offset 6, -16
 11801 0005 4889E5   		movq	%rsp, %rbp
 11802              		.cfi_def_cfa_register 6
 11803 0008 4154     		pushq	%r12
 11804 000a 53       		pushq	%rbx
 11805 000b 4883EC10 		subq	$16, %rsp
 11806              		.cfi_offset 12, -24
 11807              		.cfi_offset 3, -32
 11808 000f 48897DE8 		movq	%rdi, -24(%rbp)
 11809 0013 488975E0 		movq	%rsi, -32(%rbp)
 11810              		.loc 7 989 27
 11811 0017 488B45E8 		movq	-24(%rbp), %rax
 11812 001b 48837DE8 		cmpq	$0, -24(%rbp)
 11812      00
 11813 0020 740B     		je	.L735
 11814 0022 4889C2   		movq	%rax, %rdx
 11815 0025 83E207   		andl	$7, %edx
 11816 0028 4885D2   		testq	%rdx, %rdx
 11817 002b 740F     		je	.L736
 11818              	.L735:
 11819 002d 4889C6   		movq	%rax, %rsi
 11820 0030 488D3D00 		leaq	.Lubsan_data617(%rip), %rdi
 11820      000000
 11821 0037 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11821      00
 11822              	.L736:
 11823 003c 488B45E8 		movq	-24(%rbp), %rax
 11824 0040 4889C7   		movq	%rax, %rdi
 11825 0043 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 11825      00
 11826 0048 4889C3   		movq	%rax, %rbx
 11827 004b 4889D8   		movq	%rbx, %rax
 11828 004e 4885DB   		testq	%rbx, %rbx
 11829 0051 740B     		je	.L737
 11830 0053 4889C2   		movq	%rax, %rdx
 11831 0056 83E207   		andl	$7, %edx
 11832 0059 4885D2   		testq	%rdx, %rdx
 11833 005c 740F     		je	.L738
 11834              	.L737:
 11835 005e 4889C6   		movq	%rax, %rsi
 11836 0061 488D3D00 		leaq	.Lubsan_data618(%rip), %rdi
 11836      000000
 11837 0068 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11837      00
 11838              	.L738:
 11839 006d 4889D8   		movq	%rbx, %rax
 11840 0070 4889C2   		movq	%rax, %rdx
 11841 0073 48C1EA03 		shrq	$3, %rdx
 11842 0077 4881C200 		addq	$2147450880, %rdx
 11842      80FF7F
 11843 007e 0FB612   		movzbl	(%rdx), %edx
 11844 0081 84D2     		testb	%dl, %dl
 11845 0083 7408     		je	.L739
 11846 0085 4889C7   		movq	%rax, %rdi
 11847 0088 E8000000 		call	__asan_report_load8@PLT
 11847      00
 11848              	.L739:
 11849 008d 4C8B23   		movq	(%rbx), %r12
 11850 0090 488B45E0 		movq	-32(%rbp), %rax
 11851 0094 48837DE0 		cmpq	$0, -32(%rbp)
 11851      00
 11852 0099 740B     		je	.L740
 11853 009b 4889C2   		movq	%rax, %rdx
 11854 009e 83E207   		andl	$7, %edx
 11855 00a1 4885D2   		testq	%rdx, %rdx
 11856 00a4 740F     		je	.L741
 11857              	.L740:
 11858 00a6 4889C6   		movq	%rax, %rsi
 11859 00a9 488D3D00 		leaq	.Lubsan_data619(%rip), %rdi
 11859      000000
 11860 00b0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11860      00
 11861              	.L741:
 11862 00b5 488B45E0 		movq	-32(%rbp), %rax
 11863 00b9 4889C7   		movq	%rax, %rdi
 11864 00bc E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 11864      00
 11865 00c1 4889C3   		movq	%rax, %rbx
 11866 00c4 4889D8   		movq	%rbx, %rax
 11867 00c7 4885DB   		testq	%rbx, %rbx
 11868 00ca 740B     		je	.L742
 11869 00cc 4889C2   		movq	%rax, %rdx
 11870 00cf 83E207   		andl	$7, %edx
 11871 00d2 4885D2   		testq	%rdx, %rdx
 11872 00d5 740F     		je	.L743
 11873              	.L742:
 11874 00d7 4889C6   		movq	%rax, %rsi
 11875 00da 488D3D00 		leaq	.Lubsan_data620(%rip), %rdi
 11875      000000
 11876 00e1 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 11876      00
 11877              	.L743:
 11878 00e6 4889D8   		movq	%rbx, %rax
 11879 00e9 4889C2   		movq	%rax, %rdx
 11880 00ec 48C1EA03 		shrq	$3, %rdx
 11881 00f0 4881C200 		addq	$2147450880, %rdx
 11881      80FF7F
 11882 00f7 0FB612   		movzbl	(%rdx), %edx
 11883 00fa 84D2     		testb	%dl, %dl
 11884 00fc 7408     		je	.L744
 11885 00fe 4889C7   		movq	%rax, %rdi
 11886 0101 E8000000 		call	__asan_report_load8@PLT
 11886      00
 11887              	.L744:
 11888 0106 488B03   		movq	(%rbx), %rax
 11889 0109 4929C4   		subq	%rax, %r12
 11890 010c 4C89E0   		movq	%r12, %rax
 11891              		.loc 7 989 40
 11892 010f 48C1F805 		sarq	$5, %rax
 11893              		.loc 7 989 43
 11894 0113 4883C410 		addq	$16, %rsp
 11895 0117 5B       		popq	%rbx
 11896 0118 415C     		popq	%r12
 11897 011a 5D       		popq	%rbp
 11898              		.cfi_def_cfa 7, 8
 11899 011b C3       		ret
 11900              		.cfi_endproc
 11901              	.LFE2880:
 11903              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_reloc
 11904              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S
 11906              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS
 11907              	.LASANPC2881:
 11908              	.LFB2881:
 462:/usr/include/c++/9/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 11909              		.loc 4 462 7
 11910              		.cfi_startproc
 11911 0000 F30F1EFA 		endbr64
 11912 0004 55       		pushq	%rbp
 11913              		.cfi_def_cfa_offset 16
 11914              		.cfi_offset 6, -16
 11915 0005 4889E5   		movq	%rsp, %rbp
 11916              		.cfi_def_cfa_register 6
 11917 0008 4155     		pushq	%r13
 11918 000a 4154     		pushq	%r12
 11919 000c 53       		pushq	%rbx
 11920 000d 4881EC88 		subq	$136, %rsp
 11920      000000
 11921              		.cfi_offset 13, -24
 11922              		.cfi_offset 12, -32
 11923              		.cfi_offset 3, -40
 11924 0014 4889BD78 		movq	%rdi, -136(%rbp)
 11924      FFFFFF
 11925 001b 4889B570 		movq	%rsi, -144(%rbp)
 11925      FFFFFF
 11926 0022 48899568 		movq	%rdx, -152(%rbp)
 11926      FFFFFF
 11927 0029 48898D60 		movq	%rcx, -160(%rbp)
 11927      FFFFFF
 11928 0030 488D5D80 		leaq	-128(%rbp), %rbx
 11929 0034 4989DD   		movq	%rbx, %r13
 11930 0037 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 11930      000000
 11931 003e 7412     		je	.L746
 11932 0040 BF400000 		movl	$64, %edi
 11932      00
 11933 0045 E8000000 		call	__asan_stack_malloc_0@PLT
 11933      00
 11934              	.LVL16:
 11935 004a 4885C0   		testq	%rax, %rax
 11936 004d 7403     		je	.L746
 11937 004f 4889C3   		movq	%rax, %rbx
 11938              	.L746:
 11939 0052 48C703B3 		movq	$1102416563, (%rbx)
 11939      8AB541
 11940 0059 488D0500 		leaq	.LC8(%rip), %rax
 11940      000000
 11941 0060 48894308 		movq	%rax, 8(%rbx)
 11942 0064 488D0595 		leaq	.LASANPC2881(%rip), %rax
 11942      FFFFFF
 11943 006b 48894310 		movq	%rax, 16(%rbx)
 11944 006f 4989DC   		movq	%rbx, %r12
 11945 0072 49C1EC03 		shrq	$3, %r12
 11946 0076 41C78424 		movl	$-235802127, 2147450880(%r12)
 11946      0080FF7F 
 11946      F1F1F1F1 
 11947 0082 41C78424 		movl	$-202116351, 2147450884(%r12)
 11947      0480FF7F 
 11947      01F3F3F3 
 462:/usr/include/c++/9/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 11948              		.loc 4 462 7
 11949 008e 64488B04 		movq	%fs:40, %rax
 11949      25280000 
 11949      00
 11950 0097 488945D8 		movq	%rax, -40(%rbp)
 11951 009b 31C0     		xorl	%eax, %eax
 466:/usr/include/c++/9/bits/stl_vector.h ****       }
 11952              		.loc 4 466 23
 11953 009d 488B8D60 		movq	-160(%rbp), %rcx
 11953      FFFFFF
 11954 00a4 488B9568 		movq	-152(%rbp), %rdx
 11954      FFFFFF
 11955 00ab 488BB570 		movq	-144(%rbp), %rsi
 11955      FFFFFF
 11956 00b2 488B8578 		movq	-136(%rbp), %rax
 11956      FFFFFF
 11957 00b9 4889C7   		movq	%rax, %rdi
 11958 00bc E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5
 11958      00
 466:/usr/include/c++/9/bits/stl_vector.h ****       }
 11959              		.loc 4 466 69
 11960 00c1 4889C2   		movq	%rax, %rdx
 462:/usr/include/c++/9/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 11961              		.loc 4 462 7
 11962 00c4 4939DD   		cmpq	%rbx, %r13
 11963 00c7 7422     		je	.L747
 11964 00c9 48C7030E 		movq	$1172321806, (%rbx)
 11964      36E045
 11965 00d0 48B8F5F5 		movabsq	$-723401728380766731, %rax
 11965      F5F5F5F5 
 11965      F5F5
 11966 00da 49898424 		movq	%rax, 2147450880(%r12)
 11966      0080FF7F 
 11967 00e2 488B4338 		movq	56(%rbx), %rax
 11968 00e6 C60000   		movb	$0, (%rax)
 11969 00e9 EB0C     		jmp	.L748
 11970              	.L747:
 11971 00eb 49C78424 		movq	$0, 2147450880(%r12)
 11971      0080FF7F 
 11971      00000000 
 11972              	.L748:
 467:/usr/include/c++/9/bits/stl_vector.h **** #endif // C++11
 11973              		.loc 4 467 7
 11974 00f7 488B45D8 		movq	-40(%rbp), %rax
 11975 00fb 64483304 		xorq	%fs:40, %rax
 11975      25280000 
 11975      00
 11976 0104 7405     		je	.L751
 11977 0106 E8000000 		call	__stack_chk_fail@PLT
 11977      00
 11978              	.L751:
 11979 010b 4889D0   		movq	%rdx, %rax
 11980 010e 4881C488 		addq	$136, %rsp
 11980      000000
 11981 0115 5B       		popq	%rbx
 11982 0116 415C     		popq	%r12
 11983 0118 415D     		popq	%r13
 11984 011a 5D       		popq	%rbp
 11985              		.cfi_def_cfa 7, 8
 11986 011b C3       		ret
 11987              		.cfi_endproc
 11988              	.LFE2881:
 11990              		.section	.data.rel.local
 11991              		.align 32
 11994              	.Lubsan_data621:
 11995 3bc0 00000000 		.quad	.LC18
 11995      00000000 
 11996 3bc8 F0010000 		.long	496
 11997 3bcc 04000000 		.long	4
 11998 3bd0 00000000 		.quad	.Lubsan_type22
 11998      00000000 
 11999 3bd8 00       		.byte	0
 12000 3bd9 04       		.byte	4
 12001 3bda 00000000 		.zero	6
 12001      0000
 12002 3be0 00000000 		.zero	32
 12002      00000000 
 12002      00000000 
 12002      00000000 
 12002      00000000 
 12003              		.section	.text._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7d
 12004              		.weak	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5
 12006              	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6
 12007              	.LASANPC2882:
 12008              	.LFB2882:
 484:/usr/include/c++/9/bits/alloc_traits.h **** 
 485:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 486:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 487:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 488:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 489:/usr/include/c++/9/bits/alloc_traits.h ****        *
 490:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 491:/usr/include/c++/9/bits/alloc_traits.h ****       */
 492:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up>
 493:/usr/include/c++/9/bits/alloc_traits.h **** 	static void
 494:/usr/include/c++/9/bits/alloc_traits.h **** 	destroy(allocator_type& __a, _Up* __p)
 12009              		.loc 13 494 2
 12010              		.cfi_startproc
 12011 0000 F30F1EFA 		endbr64
 12012 0004 55       		pushq	%rbp
 12013              		.cfi_def_cfa_offset 16
 12014              		.cfi_offset 6, -16
 12015 0005 4889E5   		movq	%rsp, %rbp
 12016              		.cfi_def_cfa_register 6
 12017 0008 4883EC10 		subq	$16, %rsp
 12018 000c 48897DF8 		movq	%rdi, -8(%rbp)
 12019 0010 488975F0 		movq	%rsi, -16(%rbp)
 495:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 496:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 12020              		.loc 13 496 4
 12021 0014 48837DF8 		cmpq	$0, -8(%rbp)
 12021      00
 12022 0019 7511     		jne	.L753
 12023 001b BE000000 		movl	$0, %esi
 12023      00
 12024 0020 488D3D00 		leaq	.Lubsan_data621(%rip), %rdi
 12024      000000
 12025 0027 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12025      00
 12026              	.L753:
 12027 002c 488B55F0 		movq	-16(%rbp), %rdx
 12028 0030 488B45F8 		movq	-8(%rbp), %rax
 12029 0034 4889D6   		movq	%rdx, %rsi
 12030 0037 4889C7   		movq	%rax, %rdi
 12031 003a E8000000 		call	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6
 12031      00
 12032              		.loc 13 496 22
 12033 003f 90       		nop
 12034 0040 C9       		leave
 12035              		.cfi_def_cfa 7, 8
 12036 0041 C3       		ret
 12037              		.cfi_endproc
 12038              	.LFE2882:
 12040              		.section	.data.rel.local
 12041              		.align 32
 12044              	.Lubsan_data622:
 12045 3c00 00000000 		.quad	.LC13
 12045      00000000 
 12046 3c08 23030000 		.long	803
 12047 3c0c 07000000 		.long	7
 12048 3c10 00000000 		.quad	.Lubsan_type30
 12048      00000000 
 12049 3c18 03       		.byte	3
 12050 3c19 02       		.byte	2
 12051 3c1a 00000000 		.zero	6
 12051      0000
 12052 3c20 00000000 		.zero	32
 12052      00000000 
 12052      00000000 
 12052      00000000 
 12052      00000000 
 12053              		.align 32
 12056              	.Lubsan_data623:
 12057 3c40 00000000 		.quad	.LC13
 12057      00000000 
 12058 3c48 24030000 		.long	804
 12059 3c4c 17000000 		.long	23
 12060 3c50 00000000 		.quad	.Lubsan_type45
 12060      00000000 
 12061 3c58 03       		.byte	3
 12062 3c59 00       		.byte	0
 12063 3c5a 00000000 		.zero	6
 12063      0000
 12064 3c60 00000000 		.zero	32
 12064      00000000 
 12064      00000000 
 12064      00000000 
 12064      00000000 
 12065              		.align 32
 12068              	.Lubsan_data624:
 12069 3c80 00000000 		.quad	.LC13
 12069      00000000 
 12070 3c88 24030000 		.long	804
 12071 3c8c 17000000 		.long	23
 12072 3c90 00000000 		.quad	.Lubsan_type31
 12072      00000000 
 12073 3c98 03       		.byte	3
 12074 3c99 03       		.byte	3
 12075 3c9a 00000000 		.zero	6
 12075      0000
 12076 3ca0 00000000 		.zero	32
 12076      00000000 
 12076      00000000 
 12076      00000000 
 12076      00000000 
 12077              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 12078              		.align 2
 12079              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6ve
 12081              	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6
 12082              	.LASANPC2884:
 12083              	.LFB2884:
 803:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 12084              		.loc 7 803 7
 12085              		.cfi_startproc
 12086 0000 F30F1EFA 		endbr64
 12087 0004 55       		pushq	%rbp
 12088              		.cfi_def_cfa_offset 16
 12089              		.cfi_offset 6, -16
 12090 0005 4889E5   		movq	%rsp, %rbp
 12091              		.cfi_def_cfa_register 6
 12092 0008 53       		pushq	%rbx
 12093 0009 4883EC18 		subq	$24, %rsp
 12094              		.cfi_offset 3, -24
 12095 000d 48897DE8 		movq	%rdi, -24(%rbp)
 12096 0011 488975E0 		movq	%rsi, -32(%rbp)
 803:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 12097              		.loc 7 803 7
 12098 0015 488B45E8 		movq	-24(%rbp), %rax
 12099 0019 48837DE8 		cmpq	$0, -24(%rbp)
 12099      00
 12100 001e 740B     		je	.L755
 12101 0020 4889C2   		movq	%rax, %rdx
 12102 0023 83E207   		andl	$7, %edx
 12103 0026 4885D2   		testq	%rdx, %rdx
 12104 0029 740F     		je	.L756
 12105              	.L755:
 12106 002b 4889C6   		movq	%rax, %rsi
 12107 002e 488D3D00 		leaq	.Lubsan_data622(%rip), %rdi
 12107      000000
 12108 0035 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12108      00
 12109              	.L756:
 12110              	.LBB24:
 804:/usr/include/c++/9/bits/stl_iterator.h **** 
 12111              		.loc 7 804 23
 12112 003a 488B45E0 		movq	-32(%rbp), %rax
 12113 003e 48837DE0 		cmpq	$0, -32(%rbp)
 12113      00
 12114 0043 740B     		je	.L757
 12115 0045 4889C2   		movq	%rax, %rdx
 12116 0048 83E207   		andl	$7, %edx
 12117 004b 4885D2   		testq	%rdx, %rdx
 12118 004e 740F     		je	.L758
 12119              	.L757:
 12120 0050 4889C6   		movq	%rax, %rsi
 12121 0053 488D3D00 		leaq	.Lubsan_data623(%rip), %rdi
 12121      000000
 12122 005a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12122      00
 12123              	.L758:
 12124 005f 488B45E0 		movq	-32(%rbp), %rax
 12125 0063 4889C2   		movq	%rax, %rdx
 12126 0066 48C1EA03 		shrq	$3, %rdx
 12127 006a 4881C200 		addq	$2147450880, %rdx
 12127      80FF7F
 12128 0071 0FB612   		movzbl	(%rdx), %edx
 12129 0074 84D2     		testb	%dl, %dl
 12130 0076 7408     		je	.L759
 12131 0078 4889C7   		movq	%rax, %rdi
 12132 007b E8000000 		call	__asan_report_load8@PLT
 12132      00
 12133              	.L759:
 12134 0080 488B45E0 		movq	-32(%rbp), %rax
 12135 0084 488B18   		movq	(%rax), %rbx
 12136 0087 488B45E8 		movq	-24(%rbp), %rax
 12137 008b 48837DE8 		cmpq	$0, -24(%rbp)
 12137      00
 12138 0090 740B     		je	.L760
 12139 0092 4889C2   		movq	%rax, %rdx
 12140 0095 83E207   		andl	$7, %edx
 12141 0098 4885D2   		testq	%rdx, %rdx
 12142 009b 740F     		je	.L761
 12143              	.L760:
 12144 009d 4889C6   		movq	%rax, %rsi
 12145 00a0 488D3D00 		leaq	.Lubsan_data624(%rip), %rdi
 12145      000000
 12146 00a7 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12146      00
 12147              	.L761:
 12148 00ac 488B45E8 		movq	-24(%rbp), %rax
 12149 00b0 4889C2   		movq	%rax, %rdx
 12150 00b3 48C1EA03 		shrq	$3, %rdx
 12151 00b7 4881C200 		addq	$2147450880, %rdx
 12151      80FF7F
 12152 00be 0FB612   		movzbl	(%rdx), %edx
 12153 00c1 84D2     		testb	%dl, %dl
 12154 00c3 7408     		je	.L762
 12155 00c5 4889C7   		movq	%rax, %rdi
 12156 00c8 E8000000 		call	__asan_report_store8@PLT
 12156      00
 12157              	.L762:
 12158 00cd 488B45E8 		movq	-24(%rbp), %rax
 12159 00d1 488918   		movq	%rbx, (%rax)
 12160              	.LBE24:
 804:/usr/include/c++/9/bits/stl_iterator.h **** 
 12161              		.loc 7 804 27
 12162 00d4 90       		nop
 12163 00d5 4883C418 		addq	$24, %rsp
 12164 00d9 5B       		popq	%rbx
 12165 00da 5D       		popq	%rbp
 12166              		.cfi_def_cfa 7, 8
 12167 00db C3       		ret
 12168              		.cfi_endproc
 12169              	.LFE2884:
 12171              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6ve
 12172              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 12173              		.section	.data.rel.local
 12174              		.align 32
 12177              	.Lubsan_data625:
 12178 3cc0 00000000 		.quad	.LC13
 12178      00000000 
 12179 3cc8 65030000 		.long	869
 12180 3ccc 10000000 		.long	16
 12181 3cd0 00000000 		.quad	.Lubsan_type32
 12181      00000000 
 12182 3cd8 03       		.byte	3
 12183 3cd9 03       		.byte	3
 12184 3cda 00000000 		.zero	6
 12184      0000
 12185 3ce0 00000000 		.zero	32
 12185      00000000 
 12185      00000000 
 12185      00000000 
 12185      00000000 
 12186              		.align 32
 12189              	.Lubsan_data626:
 12190 3d00 00000000 		.quad	.LC13
 12190      00000000 
 12191 3d08 65030000 		.long	869
 12192 3d0c 10000000 		.long	16
 12193 3d10 00000000 		.quad	.Lubsan_type45
 12193      00000000 
 12194 3d18 03       		.byte	3
 12195 3d19 02       		.byte	2
 12196 3d1a 00000000 		.zero	6
 12196      0000
 12197 3d20 00000000 		.zero	32
 12197      00000000 
 12197      00000000 
 12197      00000000 
 12197      00000000 
 12198              		.align 32
 12201              	.Lubsan_data627:
 12202 3d40 00000000 		.quad	.LC13
 12202      00000000 
 12203 3d48 65030000 		.long	869
 12204 3d4c 10000000 		.long	16
 12205 3d50 00000000 		.quad	.Lubsan_type32
 12205      00000000 
 12206 3d58 03       		.byte	3
 12207 3d59 03       		.byte	3
 12208 3d5a 00000000 		.zero	6
 12208      0000
 12209 3d60 00000000 		.zero	32
 12209      00000000 
 12209      00000000 
 12209      00000000 
 12209      00000000 
 12210              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 12211              		.align 2
 12212              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6v
 12214              	_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS
 12215              	.LASANPC2886:
 12216              	.LFB2886:
 868:/usr/include/c++/9/bits/stl_iterator.h ****       { return _M_current; }
 12217              		.loc 7 868 7
 12218              		.cfi_startproc
 12219 0000 F30F1EFA 		endbr64
 12220 0004 55       		pushq	%rbp
 12221              		.cfi_def_cfa_offset 16
 12222              		.cfi_offset 6, -16
 12223 0005 4889E5   		movq	%rsp, %rbp
 12224              		.cfi_def_cfa_register 6
 12225 0008 4883EC10 		subq	$16, %rsp
 12226 000c 48897DF8 		movq	%rdi, -8(%rbp)
 869:/usr/include/c++/9/bits/stl_iterator.h ****     };
 12227              		.loc 7 869 16
 12228 0010 488B45F8 		movq	-8(%rbp), %rax
 12229 0014 48837DF8 		cmpq	$0, -8(%rbp)
 12229      00
 12230 0019 740B     		je	.L764
 12231 001b 4889C2   		movq	%rax, %rdx
 12232 001e 83E207   		andl	$7, %edx
 12233 0021 4885D2   		testq	%rdx, %rdx
 12234 0024 740F     		je	.L765
 12235              	.L764:
 12236 0026 4889C6   		movq	%rax, %rsi
 12237 0029 488D3D00 		leaq	.Lubsan_data625(%rip), %rdi
 12237      000000
 12238 0030 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12238      00
 12239              	.L765:
 12240 0035 488B45F8 		movq	-8(%rbp), %rax
 12241 0039 4889C2   		movq	%rax, %rdx
 12242 003c 4885C0   		testq	%rax, %rax
 12243 003f 740B     		je	.L766
 12244 0041 4889D0   		movq	%rdx, %rax
 12245 0044 83E007   		andl	$7, %eax
 12246 0047 4885C0   		testq	%rax, %rax
 12247 004a 740F     		je	.L767
 12248              	.L766:
 12249 004c 4889D6   		movq	%rdx, %rsi
 12250 004f 488D3D00 		leaq	.Lubsan_data626(%rip), %rdi
 12250      000000
 12251 0056 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12251      00
 12252              	.L767:
 12253 005b 488B45F8 		movq	-8(%rbp), %rax
 12254 005f 48837DF8 		cmpq	$0, -8(%rbp)
 12254      00
 12255 0064 740B     		je	.L768
 12256 0066 4889C2   		movq	%rax, %rdx
 12257 0069 83E207   		andl	$7, %edx
 12258 006c 4885D2   		testq	%rdx, %rdx
 12259 006f 740F     		je	.L769
 12260              	.L768:
 12261 0071 4889C6   		movq	%rax, %rsi
 12262 0074 488D3D00 		leaq	.Lubsan_data627(%rip), %rdi
 12262      000000
 12263 007b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12263      00
 12264              	.L769:
 12265 0080 488B45F8 		movq	-8(%rbp), %rax
 869:/usr/include/c++/9/bits/stl_iterator.h ****     };
 12266              		.loc 7 869 28
 12267 0084 C9       		leave
 12268              		.cfi_def_cfa 7, 8
 12269 0085 C3       		ret
 12270              		.cfi_endproc
 12271              	.LFE2886:
 12273              		.section	.data.rel.local
 12274              		.align 32
 12277              	.Lubsan_data628:
 12278 3d80 00000000 		.quad	.LC13
 12278      00000000 
 12279 3d88 8B030000 		.long	907
 12280 3d8c 1B000000 		.long	27
 12281 3d90 00000000 		.quad	.Lubsan_type16
 12281      00000000 
 12282 3d98 03       		.byte	3
 12283 3d99 04       		.byte	4
 12284 3d9a 00000000 		.zero	6
 12284      0000
 12285 3da0 00000000 		.zero	32
 12285      00000000 
 12285      00000000 
 12285      00000000 
 12285      00000000 
 12286              		.align 32
 12289              	.Lubsan_data629:
 12290 3dc0 00000000 		.quad	.LC13
 12290      00000000 
 12291 3dc8 8B030000 		.long	907
 12292 3dcc 1B000000 		.long	27
 12293 3dd0 00000000 		.quad	.Lubsan_type29
 12293      00000000 
 12294 3dd8 03       		.byte	3
 12295 3dd9 00       		.byte	0
 12296 3dda 00000000 		.zero	6
 12296      0000
 12297 3de0 00000000 		.zero	32
 12297      00000000 
 12297      00000000 
 12297      00000000 
 12297      00000000 
 12298              		.align 32
 12301              	.Lubsan_data630:
 12302 3e00 00000000 		.quad	.LC13
 12302      00000000 
 12303 3e08 8B030000 		.long	907
 12304 3e0c 1B000000 		.long	27
 12305 3e10 00000000 		.quad	.Lubsan_type16
 12305      00000000 
 12306 3e18 03       		.byte	3
 12307 3e19 04       		.byte	4
 12308 3e1a 00000000 		.zero	6
 12308      0000
 12309 3e20 00000000 		.zero	32
 12309      00000000 
 12309      00000000 
 12309      00000000 
 12309      00000000 
 12310              		.align 32
 12313              	.Lubsan_data631:
 12314 3e40 00000000 		.quad	.LC13
 12314      00000000 
 12315 3e48 8B030000 		.long	907
 12316 3e4c 1B000000 		.long	27
 12317 3e50 00000000 		.quad	.Lubsan_type29
 12317      00000000 
 12318 3e58 03       		.byte	3
 12319 3e59 00       		.byte	0
 12320 3e5a 00000000 		.zero	6
 12320      0000
 12321 3e60 00000000 		.zero	32
 12321      00000000 
 12321      00000000 
 12321      00000000 
 12321      00000000 
 12322              		.section	.text._ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_S
 12323              		.weak	_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEE
 12325              	_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_1
 12326              	.LASANPC2887:
 12327              	.LFB2887:
 904:/usr/include/c++/9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 12328              		.loc 7 904 5
 12329              		.cfi_startproc
 12330 0000 F30F1EFA 		endbr64
 12331 0004 55       		pushq	%rbp
 12332              		.cfi_def_cfa_offset 16
 12333              		.cfi_offset 6, -16
 12334 0005 4889E5   		movq	%rsp, %rbp
 12335              		.cfi_def_cfa_register 6
 12336 0008 4154     		pushq	%r12
 12337 000a 53       		pushq	%rbx
 12338 000b 4883EC10 		subq	$16, %rsp
 12339              		.cfi_offset 12, -24
 12340              		.cfi_offset 3, -32
 12341 000f 48897DE8 		movq	%rdi, -24(%rbp)
 12342 0013 488975E0 		movq	%rsi, -32(%rbp)
 907:/usr/include/c++/9/bits/stl_iterator.h **** 
 12343              		.loc 7 907 27
 12344 0017 488B45E8 		movq	-24(%rbp), %rax
 12345 001b 48837DE8 		cmpq	$0, -24(%rbp)
 12345      00
 12346 0020 740B     		je	.L772
 12347 0022 4889C2   		movq	%rax, %rdx
 12348 0025 83E207   		andl	$7, %edx
 12349 0028 4885D2   		testq	%rdx, %rdx
 12350 002b 740F     		je	.L773
 12351              	.L772:
 12352 002d 4889C6   		movq	%rax, %rsi
 12353 0030 488D3D00 		leaq	.Lubsan_data628(%rip), %rdi
 12353      000000
 12354 0037 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12354      00
 12355              	.L773:
 12356 003c 488B45E8 		movq	-24(%rbp), %rax
 12357 0040 4889C7   		movq	%rax, %rdi
 12358 0043 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 12358      00
 12359 0048 4889C3   		movq	%rax, %rbx
 12360 004b 4889D8   		movq	%rbx, %rax
 12361 004e 4885DB   		testq	%rbx, %rbx
 12362 0051 740B     		je	.L774
 12363 0053 4889C2   		movq	%rax, %rdx
 12364 0056 83E207   		andl	$7, %edx
 12365 0059 4885D2   		testq	%rdx, %rdx
 12366 005c 740F     		je	.L775
 12367              	.L774:
 12368 005e 4889C6   		movq	%rax, %rsi
 12369 0061 488D3D00 		leaq	.Lubsan_data629(%rip), %rdi
 12369      000000
 12370 0068 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12370      00
 12371              	.L775:
 12372 006d 4889D8   		movq	%rbx, %rax
 12373 0070 4889C2   		movq	%rax, %rdx
 12374 0073 48C1EA03 		shrq	$3, %rdx
 12375 0077 4881C200 		addq	$2147450880, %rdx
 12375      80FF7F
 12376 007e 0FB612   		movzbl	(%rdx), %edx
 12377 0081 84D2     		testb	%dl, %dl
 12378 0083 7408     		je	.L776
 12379 0085 4889C7   		movq	%rax, %rdi
 12380 0088 E8000000 		call	__asan_report_load8@PLT
 12380      00
 12381              	.L776:
 12382 008d 4C8B23   		movq	(%rbx), %r12
 12383 0090 488B45E0 		movq	-32(%rbp), %rax
 12384 0094 48837DE0 		cmpq	$0, -32(%rbp)
 12384      00
 12385 0099 740B     		je	.L777
 12386 009b 4889C2   		movq	%rax, %rdx
 12387 009e 83E207   		andl	$7, %edx
 12388 00a1 4885D2   		testq	%rdx, %rdx
 12389 00a4 740F     		je	.L778
 12390              	.L777:
 12391 00a6 4889C6   		movq	%rax, %rsi
 12392 00a9 488D3D00 		leaq	.Lubsan_data630(%rip), %rdi
 12392      000000
 12393 00b0 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12393      00
 12394              	.L778:
 12395 00b5 488B45E0 		movq	-32(%rbp), %rax
 12396 00b9 4889C7   		movq	%rax, %rdi
 12397 00bc E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 12397      00
 12398 00c1 4889C3   		movq	%rax, %rbx
 12399 00c4 4889D8   		movq	%rbx, %rax
 12400 00c7 4885DB   		testq	%rbx, %rbx
 12401 00ca 740B     		je	.L779
 12402 00cc 4889C2   		movq	%rax, %rdx
 12403 00cf 83E207   		andl	$7, %edx
 12404 00d2 4885D2   		testq	%rdx, %rdx
 12405 00d5 740F     		je	.L780
 12406              	.L779:
 12407 00d7 4889C6   		movq	%rax, %rsi
 12408 00da 488D3D00 		leaq	.Lubsan_data631(%rip), %rdi
 12408      000000
 12409 00e1 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12409      00
 12410              	.L780:
 12411 00e6 4889D8   		movq	%rbx, %rax
 12412 00e9 4889C2   		movq	%rax, %rdx
 12413 00ec 48C1EA03 		shrq	$3, %rdx
 12414 00f0 4881C200 		addq	$2147450880, %rdx
 12414      80FF7F
 12415 00f7 0FB612   		movzbl	(%rdx), %edx
 12416 00fa 84D2     		testb	%dl, %dl
 12417 00fc 7408     		je	.L781
 12418 00fe 4889C7   		movq	%rax, %rdi
 12419 0101 E8000000 		call	__asan_report_load8@PLT
 12419      00
 12420              	.L781:
 12421 0106 488B03   		movq	(%rbx), %rax
 907:/usr/include/c++/9/bits/stl_iterator.h **** 
 12422              		.loc 7 907 41
 12423 0109 4939C4   		cmpq	%rax, %r12
 12424 010c 0F95C0   		setne	%al
 907:/usr/include/c++/9/bits/stl_iterator.h **** 
 12425              		.loc 7 907 44
 12426 010f 4883C410 		addq	$16, %rsp
 12427 0113 5B       		popq	%rbx
 12428 0114 415C     		popq	%r12
 12429 0116 5D       		popq	%rbp
 12430              		.cfi_def_cfa 7, 8
 12431 0117 C3       		ret
 12432              		.cfi_endproc
 12433              	.LFE2887:
 12435              		.section	.rodata
 12436 0863 00000000 		.align 8
 12436      00
 12437              	.LC27:
 12438 0868 33203332 		.string	"3 32 8 11 __first:497 64 8 10 __last:497 96 8 12 __result:497"
 12438      20382031 
 12438      31205F5F 
 12438      66697273 
 12438      743A3439 
 12439              		.section	.text._ZSt4moveIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_trait
 12440              		.weak	_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 12442              	_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6ve
 12443              	.LASANPC2888:
 12444              	.LFB2888:
 12445              		.file 17 "/usr/include/c++/9/bits/stl_algobase.h"
   1:/usr/include/c++/9/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_algobase.h **** 
   3:/usr/include/c++/9/bits/stl_algobase.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_algobase.h **** //
   5:/usr/include/c++/9/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_algobase.h **** 
  11:/usr/include/c++/9/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_algobase.h **** 
  16:/usr/include/c++/9/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_algobase.h **** 
  20:/usr/include/c++/9/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_algobase.h **** 
  25:/usr/include/c++/9/bits/stl_algobase.h **** /*
  26:/usr/include/c++/9/bits/stl_algobase.h ****  *
  27:/usr/include/c++/9/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_algobase.h ****  *
  30:/usr/include/c++/9/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_algobase.h ****  *
  38:/usr/include/c++/9/bits/stl_algobase.h ****  *
  39:/usr/include/c++/9/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/9/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_algobase.h ****  *
  42:/usr/include/c++/9/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/9/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_algobase.h ****  */
  50:/usr/include/c++/9/bits/stl_algobase.h **** 
  51:/usr/include/c++/9/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/9/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/9/bits/stl_algobase.h ****  */
  55:/usr/include/c++/9/bits/stl_algobase.h **** 
  56:/usr/include/c++/9/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/9/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/9/bits/stl_algobase.h **** 
  59:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/9/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/9/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/9/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/include/c++/9/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/c++/9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/include/c++/9/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/include/c++/9/bits/stl_algobase.h **** #endif
  75:/usr/include/c++/9/bits/stl_algobase.h **** 
  76:/usr/include/c++/9/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  77:/usr/include/c++/9/bits/stl_algobase.h **** {
  78:/usr/include/c++/9/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  79:/usr/include/c++/9/bits/stl_algobase.h **** 
  80:/usr/include/c++/9/bits/stl_algobase.h **** #if __cplusplus < 201103L
  81:/usr/include/c++/9/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  82:/usr/include/c++/9/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  83:/usr/include/c++/9/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  84:/usr/include/c++/9/bits/stl_algobase.h ****   template<bool _BoolType>
  85:/usr/include/c++/9/bits/stl_algobase.h ****     struct __iter_swap
  86:/usr/include/c++/9/bits/stl_algobase.h ****     {
  87:/usr/include/c++/9/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  88:/usr/include/c++/9/bits/stl_algobase.h **** 	static void
  89:/usr/include/c++/9/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  90:/usr/include/c++/9/bits/stl_algobase.h **** 	{
  91:/usr/include/c++/9/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
  92:/usr/include/c++/9/bits/stl_algobase.h **** 	    _ValueType1;
  93:/usr/include/c++/9/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
  94:/usr/include/c++/9/bits/stl_algobase.h **** 	  *__a = *__b;
  95:/usr/include/c++/9/bits/stl_algobase.h **** 	  *__b = __tmp;
  96:/usr/include/c++/9/bits/stl_algobase.h **** 	}
  97:/usr/include/c++/9/bits/stl_algobase.h ****     };
  98:/usr/include/c++/9/bits/stl_algobase.h **** 
  99:/usr/include/c++/9/bits/stl_algobase.h ****   template<>
 100:/usr/include/c++/9/bits/stl_algobase.h ****     struct __iter_swap<true>
 101:/usr/include/c++/9/bits/stl_algobase.h ****     {
 102:/usr/include/c++/9/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 103:/usr/include/c++/9/bits/stl_algobase.h **** 	static void
 104:/usr/include/c++/9/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 105:/usr/include/c++/9/bits/stl_algobase.h **** 	{
 106:/usr/include/c++/9/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 107:/usr/include/c++/9/bits/stl_algobase.h **** 	}
 108:/usr/include/c++/9/bits/stl_algobase.h ****     };
 109:/usr/include/c++/9/bits/stl_algobase.h **** #endif
 110:/usr/include/c++/9/bits/stl_algobase.h **** 
 111:/usr/include/c++/9/bits/stl_algobase.h ****   /**
 112:/usr/include/c++/9/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 113:/usr/include/c++/9/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 114:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 115:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 116:/usr/include/c++/9/bits/stl_algobase.h ****    *  @return   Nothing.
 117:/usr/include/c++/9/bits/stl_algobase.h ****    *
 118:/usr/include/c++/9/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 119:/usr/include/c++/9/bits/stl_algobase.h ****    *  iterators themselves.
 120:/usr/include/c++/9/bits/stl_algobase.h ****   */
 121:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 122:/usr/include/c++/9/bits/stl_algobase.h ****     inline void
 123:/usr/include/c++/9/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 124:/usr/include/c++/9/bits/stl_algobase.h ****     {
 125:/usr/include/c++/9/bits/stl_algobase.h ****       // concept requirements
 126:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 127:/usr/include/c++/9/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 128:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 129:/usr/include/c++/9/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 130:/usr/include/c++/9/bits/stl_algobase.h **** 
 131:/usr/include/c++/9/bits/stl_algobase.h **** #if __cplusplus < 201103L
 132:/usr/include/c++/9/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 133:/usr/include/c++/9/bits/stl_algobase.h **** 	_ValueType1;
 134:/usr/include/c++/9/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 135:/usr/include/c++/9/bits/stl_algobase.h **** 	_ValueType2;
 136:/usr/include/c++/9/bits/stl_algobase.h **** 
 137:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 138:/usr/include/c++/9/bits/stl_algobase.h **** 				  _ValueType2>)
 139:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 140:/usr/include/c++/9/bits/stl_algobase.h **** 				  _ValueType1>)
 141:/usr/include/c++/9/bits/stl_algobase.h **** 
 142:/usr/include/c++/9/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 143:/usr/include/c++/9/bits/stl_algobase.h **** 	_ReferenceType1;
 144:/usr/include/c++/9/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 145:/usr/include/c++/9/bits/stl_algobase.h **** 	_ReferenceType2;
 146:/usr/include/c++/9/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 147:/usr/include/c++/9/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 148:/usr/include/c++/9/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 149:/usr/include/c++/9/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 150:/usr/include/c++/9/bits/stl_algobase.h **** #else
 151:/usr/include/c++/9/bits/stl_algobase.h ****       swap(*__a, *__b);
 152:/usr/include/c++/9/bits/stl_algobase.h **** #endif
 153:/usr/include/c++/9/bits/stl_algobase.h ****     }
 154:/usr/include/c++/9/bits/stl_algobase.h **** 
 155:/usr/include/c++/9/bits/stl_algobase.h ****   /**
 156:/usr/include/c++/9/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 157:/usr/include/c++/9/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 158:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 159:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 160:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 161:/usr/include/c++/9/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 162:/usr/include/c++/9/bits/stl_algobase.h ****    *
 163:/usr/include/c++/9/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 164:/usr/include/c++/9/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 165:/usr/include/c++/9/bits/stl_algobase.h ****    *  The ranges must not overlap.
 166:/usr/include/c++/9/bits/stl_algobase.h ****   */
 167:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 168:/usr/include/c++/9/bits/stl_algobase.h ****     _ForwardIterator2
 169:/usr/include/c++/9/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 170:/usr/include/c++/9/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 171:/usr/include/c++/9/bits/stl_algobase.h ****     {
 172:/usr/include/c++/9/bits/stl_algobase.h ****       // concept requirements
 173:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 174:/usr/include/c++/9/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 175:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 176:/usr/include/c++/9/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 177:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 178:/usr/include/c++/9/bits/stl_algobase.h **** 
 179:/usr/include/c++/9/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 180:/usr/include/c++/9/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 181:/usr/include/c++/9/bits/stl_algobase.h ****       return __first2;
 182:/usr/include/c++/9/bits/stl_algobase.h ****     }
 183:/usr/include/c++/9/bits/stl_algobase.h **** 
 184:/usr/include/c++/9/bits/stl_algobase.h ****   /**
 185:/usr/include/c++/9/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 186:/usr/include/c++/9/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 187:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 188:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 189:/usr/include/c++/9/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 190:/usr/include/c++/9/bits/stl_algobase.h ****    *
 191:/usr/include/c++/9/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 192:/usr/include/c++/9/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 193:/usr/include/c++/9/bits/stl_algobase.h ****    *  preprocessor macro.
 194:/usr/include/c++/9/bits/stl_algobase.h ****   */
 195:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _Tp>
 196:/usr/include/c++/9/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 197:/usr/include/c++/9/bits/stl_algobase.h ****     inline const _Tp&
 198:/usr/include/c++/9/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 199:/usr/include/c++/9/bits/stl_algobase.h ****     {
 200:/usr/include/c++/9/bits/stl_algobase.h ****       // concept requirements
 201:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 202:/usr/include/c++/9/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 203:/usr/include/c++/9/bits/stl_algobase.h ****       if (__b < __a)
 204:/usr/include/c++/9/bits/stl_algobase.h **** 	return __b;
 205:/usr/include/c++/9/bits/stl_algobase.h ****       return __a;
 206:/usr/include/c++/9/bits/stl_algobase.h ****     }
 207:/usr/include/c++/9/bits/stl_algobase.h **** 
 208:/usr/include/c++/9/bits/stl_algobase.h ****   /**
 209:/usr/include/c++/9/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 210:/usr/include/c++/9/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 211:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 212:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 213:/usr/include/c++/9/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 214:/usr/include/c++/9/bits/stl_algobase.h ****    *
 215:/usr/include/c++/9/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 216:/usr/include/c++/9/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 217:/usr/include/c++/9/bits/stl_algobase.h ****    *  preprocessor macro.
 218:/usr/include/c++/9/bits/stl_algobase.h ****   */
 219:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _Tp>
 220:/usr/include/c++/9/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 221:/usr/include/c++/9/bits/stl_algobase.h ****     inline const _Tp&
 222:/usr/include/c++/9/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 223:/usr/include/c++/9/bits/stl_algobase.h ****     {
 224:/usr/include/c++/9/bits/stl_algobase.h ****       // concept requirements
 225:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 226:/usr/include/c++/9/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 227:/usr/include/c++/9/bits/stl_algobase.h ****       if (__a < __b)
 228:/usr/include/c++/9/bits/stl_algobase.h **** 	return __b;
 229:/usr/include/c++/9/bits/stl_algobase.h ****       return __a;
 230:/usr/include/c++/9/bits/stl_algobase.h ****     }
 231:/usr/include/c++/9/bits/stl_algobase.h **** 
 232:/usr/include/c++/9/bits/stl_algobase.h ****   /**
 233:/usr/include/c++/9/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 234:/usr/include/c++/9/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 235:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 236:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 237:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 238:/usr/include/c++/9/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 239:/usr/include/c++/9/bits/stl_algobase.h ****    *
 240:/usr/include/c++/9/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 241:/usr/include/c++/9/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 242:/usr/include/c++/9/bits/stl_algobase.h ****   */
 243:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 244:/usr/include/c++/9/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 245:/usr/include/c++/9/bits/stl_algobase.h ****     inline const _Tp&
 246:/usr/include/c++/9/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 247:/usr/include/c++/9/bits/stl_algobase.h ****     {
 248:/usr/include/c++/9/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 249:/usr/include/c++/9/bits/stl_algobase.h ****       if (__comp(__b, __a))
 250:/usr/include/c++/9/bits/stl_algobase.h **** 	return __b;
 251:/usr/include/c++/9/bits/stl_algobase.h ****       return __a;
 252:/usr/include/c++/9/bits/stl_algobase.h ****     }
 253:/usr/include/c++/9/bits/stl_algobase.h **** 
 254:/usr/include/c++/9/bits/stl_algobase.h ****   /**
 255:/usr/include/c++/9/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 256:/usr/include/c++/9/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 257:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 258:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 259:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 260:/usr/include/c++/9/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 261:/usr/include/c++/9/bits/stl_algobase.h ****    *
 262:/usr/include/c++/9/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 263:/usr/include/c++/9/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 264:/usr/include/c++/9/bits/stl_algobase.h ****   */
 265:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 266:/usr/include/c++/9/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 267:/usr/include/c++/9/bits/stl_algobase.h ****     inline const _Tp&
 268:/usr/include/c++/9/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 269:/usr/include/c++/9/bits/stl_algobase.h ****     {
 270:/usr/include/c++/9/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 271:/usr/include/c++/9/bits/stl_algobase.h ****       if (__comp(__a, __b))
 272:/usr/include/c++/9/bits/stl_algobase.h **** 	return __b;
 273:/usr/include/c++/9/bits/stl_algobase.h ****       return __a;
 274:/usr/include/c++/9/bits/stl_algobase.h ****     }
 275:/usr/include/c++/9/bits/stl_algobase.h **** 
 276:/usr/include/c++/9/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 277:/usr/include/c++/9/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 278:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _Iterator>
 279:/usr/include/c++/9/bits/stl_algobase.h ****     inline _Iterator
 280:/usr/include/c++/9/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 281:/usr/include/c++/9/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 282:/usr/include/c++/9/bits/stl_algobase.h ****     { return __it; }
 283:/usr/include/c++/9/bits/stl_algobase.h **** 
 284:/usr/include/c++/9/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 285:/usr/include/c++/9/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 286:/usr/include/c++/9/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 287:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _From, typename _To>
 288:/usr/include/c++/9/bits/stl_algobase.h ****     inline _From
 289:/usr/include/c++/9/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 290:/usr/include/c++/9/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 291:/usr/include/c++/9/bits/stl_algobase.h **** 
 292:/usr/include/c++/9/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 293:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _Iterator>
 294:/usr/include/c++/9/bits/stl_algobase.h ****     inline _Iterator
 295:/usr/include/c++/9/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 296:/usr/include/c++/9/bits/stl_algobase.h ****     { return __res; }
 297:/usr/include/c++/9/bits/stl_algobase.h **** 
 298:/usr/include/c++/9/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 299:/usr/include/c++/9/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 300:/usr/include/c++/9/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 301:/usr/include/c++/9/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 302:/usr/include/c++/9/bits/stl_algobase.h ****   // a for loop with an explicit count.
 303:/usr/include/c++/9/bits/stl_algobase.h **** 
 304:/usr/include/c++/9/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 305:/usr/include/c++/9/bits/stl_algobase.h ****     struct __copy_move
 306:/usr/include/c++/9/bits/stl_algobase.h ****     {
 307:/usr/include/c++/9/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 308:/usr/include/c++/9/bits/stl_algobase.h **** 	static _OI
 309:/usr/include/c++/9/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 310:/usr/include/c++/9/bits/stl_algobase.h **** 	{
 311:/usr/include/c++/9/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 312:/usr/include/c++/9/bits/stl_algobase.h **** 	    *__result = *__first;
 313:/usr/include/c++/9/bits/stl_algobase.h **** 	  return __result;
 314:/usr/include/c++/9/bits/stl_algobase.h **** 	}
 315:/usr/include/c++/9/bits/stl_algobase.h ****     };
 316:/usr/include/c++/9/bits/stl_algobase.h **** 
 317:/usr/include/c++/9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 318:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _Category>
 319:/usr/include/c++/9/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 320:/usr/include/c++/9/bits/stl_algobase.h ****     {
 321:/usr/include/c++/9/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 322:/usr/include/c++/9/bits/stl_algobase.h **** 	static _OI
 323:/usr/include/c++/9/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 324:/usr/include/c++/9/bits/stl_algobase.h **** 	{
 325:/usr/include/c++/9/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 326:/usr/include/c++/9/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 327:/usr/include/c++/9/bits/stl_algobase.h **** 	  return __result;
 328:/usr/include/c++/9/bits/stl_algobase.h **** 	}
 329:/usr/include/c++/9/bits/stl_algobase.h ****     };
 330:/usr/include/c++/9/bits/stl_algobase.h **** #endif
 331:/usr/include/c++/9/bits/stl_algobase.h **** 
 332:/usr/include/c++/9/bits/stl_algobase.h ****   template<>
 333:/usr/include/c++/9/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 334:/usr/include/c++/9/bits/stl_algobase.h ****     {
 335:/usr/include/c++/9/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 336:/usr/include/c++/9/bits/stl_algobase.h **** 	static _OI
 337:/usr/include/c++/9/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 338:/usr/include/c++/9/bits/stl_algobase.h **** 	{
 339:/usr/include/c++/9/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 340:/usr/include/c++/9/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 341:/usr/include/c++/9/bits/stl_algobase.h **** 	    {
 342:/usr/include/c++/9/bits/stl_algobase.h **** 	      *__result = *__first;
 343:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 344:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__result;
 345:/usr/include/c++/9/bits/stl_algobase.h **** 	    }
 346:/usr/include/c++/9/bits/stl_algobase.h **** 	  return __result;
 347:/usr/include/c++/9/bits/stl_algobase.h **** 	}
 348:/usr/include/c++/9/bits/stl_algobase.h ****     };
 349:/usr/include/c++/9/bits/stl_algobase.h **** 
 350:/usr/include/c++/9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 351:/usr/include/c++/9/bits/stl_algobase.h ****   template<>
 352:/usr/include/c++/9/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 353:/usr/include/c++/9/bits/stl_algobase.h ****     {
 354:/usr/include/c++/9/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 355:/usr/include/c++/9/bits/stl_algobase.h **** 	static _OI
 356:/usr/include/c++/9/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 357:/usr/include/c++/9/bits/stl_algobase.h **** 	{
 358:/usr/include/c++/9/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 359:/usr/include/c++/9/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 360:/usr/include/c++/9/bits/stl_algobase.h **** 	    {
 361:/usr/include/c++/9/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 362:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 363:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__result;
 364:/usr/include/c++/9/bits/stl_algobase.h **** 	    }
 365:/usr/include/c++/9/bits/stl_algobase.h **** 	  return __result;
 366:/usr/include/c++/9/bits/stl_algobase.h **** 	}
 367:/usr/include/c++/9/bits/stl_algobase.h ****     };
 368:/usr/include/c++/9/bits/stl_algobase.h **** #endif
 369:/usr/include/c++/9/bits/stl_algobase.h **** 
 370:/usr/include/c++/9/bits/stl_algobase.h ****   template<bool _IsMove>
 371:/usr/include/c++/9/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 372:/usr/include/c++/9/bits/stl_algobase.h ****     {
 373:/usr/include/c++/9/bits/stl_algobase.h ****       template<typename _Tp>
 374:/usr/include/c++/9/bits/stl_algobase.h **** 	static _Tp*
 375:/usr/include/c++/9/bits/stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 376:/usr/include/c++/9/bits/stl_algobase.h **** 	{
 377:/usr/include/c++/9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 378:/usr/include/c++/9/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 379:/usr/include/c++/9/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 380:/usr/include/c++/9/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 381:/usr/include/c++/9/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 382:/usr/include/c++/9/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 383:/usr/include/c++/9/bits/stl_algobase.h **** #endif
 384:/usr/include/c++/9/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 385:/usr/include/c++/9/bits/stl_algobase.h **** 	  if (_Num)
 386:/usr/include/c++/9/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 387:/usr/include/c++/9/bits/stl_algobase.h **** 	  return __result + _Num;
 388:/usr/include/c++/9/bits/stl_algobase.h **** 	}
 389:/usr/include/c++/9/bits/stl_algobase.h ****     };
 390:/usr/include/c++/9/bits/stl_algobase.h **** 
 391:/usr/include/c++/9/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 392:/usr/include/c++/9/bits/stl_algobase.h ****     inline _OI
 393:/usr/include/c++/9/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 394:/usr/include/c++/9/bits/stl_algobase.h ****     {
 395:/usr/include/c++/9/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 396:/usr/include/c++/9/bits/stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 397:/usr/include/c++/9/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 398:/usr/include/c++/9/bits/stl_algobase.h ****       const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 399:/usr/include/c++/9/bits/stl_algobase.h **** 			     && __is_pointer<_II>::__value
 400:/usr/include/c++/9/bits/stl_algobase.h **** 			     && __is_pointer<_OI>::__value
 401:/usr/include/c++/9/bits/stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 402:/usr/include/c++/9/bits/stl_algobase.h **** 
 403:/usr/include/c++/9/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 404:/usr/include/c++/9/bits/stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 405:/usr/include/c++/9/bits/stl_algobase.h ****     }
 406:/usr/include/c++/9/bits/stl_algobase.h **** 
 407:/usr/include/c++/9/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 408:/usr/include/c++/9/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 409:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _CharT>
 410:/usr/include/c++/9/bits/stl_algobase.h ****     struct char_traits;
 411:/usr/include/c++/9/bits/stl_algobase.h **** 
 412:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 413:/usr/include/c++/9/bits/stl_algobase.h ****     class istreambuf_iterator;
 414:/usr/include/c++/9/bits/stl_algobase.h **** 
 415:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 416:/usr/include/c++/9/bits/stl_algobase.h ****     class ostreambuf_iterator;
 417:/usr/include/c++/9/bits/stl_algobase.h **** 
 418:/usr/include/c++/9/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 419:/usr/include/c++/9/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 420:/usr/include/c++/9/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 421:/usr/include/c++/9/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 422:/usr/include/c++/9/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 423:/usr/include/c++/9/bits/stl_algobase.h **** 
 424:/usr/include/c++/9/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 425:/usr/include/c++/9/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 426:/usr/include/c++/9/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 427:/usr/include/c++/9/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 428:/usr/include/c++/9/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 429:/usr/include/c++/9/bits/stl_algobase.h **** 
 430:/usr/include/c++/9/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 431:/usr/include/c++/9/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 432:/usr/include/c++/9/bits/stl_algobase.h **** 				    _CharT*>::__type
 433:/usr/include/c++/9/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 434:/usr/include/c++/9/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 435:/usr/include/c++/9/bits/stl_algobase.h **** 
 436:/usr/include/c++/9/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 437:/usr/include/c++/9/bits/stl_algobase.h ****     inline _OI
 438:/usr/include/c++/9/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 439:/usr/include/c++/9/bits/stl_algobase.h ****     {
 440:/usr/include/c++/9/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 441:/usr/include/c++/9/bits/stl_algobase.h **** 		std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 442:/usr/include/c++/9/bits/stl_algobase.h **** 					    std::__niter_base(__last),
 443:/usr/include/c++/9/bits/stl_algobase.h **** 					    std::__niter_base(__result)));
 444:/usr/include/c++/9/bits/stl_algobase.h ****     }
 445:/usr/include/c++/9/bits/stl_algobase.h **** 
 446:/usr/include/c++/9/bits/stl_algobase.h ****   /**
 447:/usr/include/c++/9/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 448:/usr/include/c++/9/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 449:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 450:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 451:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 452:/usr/include/c++/9/bits/stl_algobase.h ****    *  @return   result + (last - first)
 453:/usr/include/c++/9/bits/stl_algobase.h ****    *
 454:/usr/include/c++/9/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 455:/usr/include/c++/9/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 456:/usr/include/c++/9/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 457:/usr/include/c++/9/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 458:/usr/include/c++/9/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 459:/usr/include/c++/9/bits/stl_algobase.h ****    *
 460:/usr/include/c++/9/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 461:/usr/include/c++/9/bits/stl_algobase.h ****    *  within [first,last).
 462:/usr/include/c++/9/bits/stl_algobase.h ****   */
 463:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 464:/usr/include/c++/9/bits/stl_algobase.h ****     inline _OI
 465:/usr/include/c++/9/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 466:/usr/include/c++/9/bits/stl_algobase.h ****     {
 467:/usr/include/c++/9/bits/stl_algobase.h ****       // concept requirements
 468:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 469:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 470:/usr/include/c++/9/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 471:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 472:/usr/include/c++/9/bits/stl_algobase.h **** 
 473:/usr/include/c++/9/bits/stl_algobase.h ****       return std::__copy_move_a2<__is_move_iterator<_II>::__value>
 474:/usr/include/c++/9/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 475:/usr/include/c++/9/bits/stl_algobase.h ****     }
 476:/usr/include/c++/9/bits/stl_algobase.h **** 
 477:/usr/include/c++/9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 478:/usr/include/c++/9/bits/stl_algobase.h ****   /**
 479:/usr/include/c++/9/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 480:/usr/include/c++/9/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 481:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 482:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 483:/usr/include/c++/9/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 484:/usr/include/c++/9/bits/stl_algobase.h ****    *  @return   result + (last - first)
 485:/usr/include/c++/9/bits/stl_algobase.h ****    *
 486:/usr/include/c++/9/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 487:/usr/include/c++/9/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 488:/usr/include/c++/9/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 489:/usr/include/c++/9/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 490:/usr/include/c++/9/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 491:/usr/include/c++/9/bits/stl_algobase.h ****    *
 492:/usr/include/c++/9/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 493:/usr/include/c++/9/bits/stl_algobase.h ****    *  within [first,last).
 494:/usr/include/c++/9/bits/stl_algobase.h ****   */
 495:/usr/include/c++/9/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 496:/usr/include/c++/9/bits/stl_algobase.h ****     inline _OI
 497:/usr/include/c++/9/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 12446              		.loc 17 497 5
 12447              		.cfi_startproc
 12448 0000 F30F1EFA 		endbr64
 12449 0004 55       		pushq	%rbp
 12450              		.cfi_def_cfa_offset 16
 12451              		.cfi_offset 6, -16
 12452 0005 4889E5   		movq	%rsp, %rbp
 12453              		.cfi_def_cfa_register 6
 12454 0008 4157     		pushq	%r15
 12455 000a 4156     		pushq	%r14
 12456 000c 4155     		pushq	%r13
 12457 000e 4154     		pushq	%r12
 12458 0010 53       		pushq	%rbx
 12459 0011 4881ECC8 		subq	$200, %rsp
 12459      000000
 12460              		.cfi_offset 15, -24
 12461              		.cfi_offset 14, -32
 12462              		.cfi_offset 13, -40
 12463              		.cfi_offset 12, -48
 12464              		.cfi_offset 3, -56
 12465 0018 4889BD28 		movq	%rdi, -216(%rbp)
 12465      FFFFFF
 12466 001f 4889B520 		movq	%rsi, -224(%rbp)
 12466      FFFFFF
 12467 0026 48899518 		movq	%rdx, -232(%rbp)
 12467      FFFFFF
 12468 002d 488D9D30 		leaq	-208(%rbp), %rbx
 12468      FFFFFF
 12469 0034 4989DF   		movq	%rbx, %r15
 12470 0037 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 12470      000000
 12471 003e 7412     		je	.L783
 12472 0040 BF800000 		movl	$128, %edi
 12472      00
 12473 0045 E8000000 		call	__asan_stack_malloc_1@PLT
 12473      00
 12474              	.LVL17:
 12475 004a 4885C0   		testq	%rax, %rax
 12476 004d 7403     		je	.L783
 12477 004f 4889C3   		movq	%rax, %rbx
 12478              	.L783:
 12479 0052 488D83A0 		leaq	160(%rbx), %rax
 12479      000000
 12480 0059 4989C5   		movq	%rax, %r13
 12481 005c 48C703B3 		movq	$1102416563, (%rbx)
 12481      8AB541
 12482 0063 488D0500 		leaq	.LC27(%rip), %rax
 12482      000000
 12483 006a 48894308 		movq	%rax, 8(%rbx)
 12484 006e 488D058B 		leaq	.LASANPC2888(%rip), %rax
 12484      FFFFFF
 12485 0075 48894310 		movq	%rax, 16(%rbx)
 12486 0079 4989DC   		movq	%rbx, %r12
 12487 007c 49C1EC03 		shrq	$3, %r12
 12488 0080 41C78424 		movl	$-235802127, 2147450880(%r12)
 12488      0080FF7F 
 12488      F1F1F1F1 
 12489 008c 41C78424 		movl	$-218959360, 2147450884(%r12)
 12489      0480FF7F 
 12489      00F2F2F2 
 12490 0098 41C78424 		movl	$-218959360, 2147450888(%r12)
 12490      0880FF7F 
 12490      00F2F2F2 
 12491 00a4 41C78424 		movl	$-202116352, 2147450892(%r12)
 12491      0C80FF7F 
 12491      00F3F3F3 
 12492              		.loc 17 497 5
 12493 00b0 64488B04 		movq	%fs:40, %rax
 12493      25280000 
 12493      00
 12494 00b9 488945C8 		movq	%rax, -56(%rbp)
 12495 00bd 31C0     		xorl	%eax, %eax
 12496              		.loc 17 497 14
 12497 00bf 488B8528 		movq	-216(%rbp), %rax
 12497      FFFFFF
 12498 00c6 49894580 		movq	%rax, -128(%r13)
 12499              		.loc 17 497 27
 12500 00ca 488B8520 		movq	-224(%rbp), %rax
 12500      FFFFFF
 12501 00d1 498945A0 		movq	%rax, -96(%r13)
 12502              		.loc 17 497 39
 12503 00d5 488B8518 		movq	-232(%rbp), %rax
 12503      FFFFFF
 12504 00dc 498945C0 		movq	%rax, -64(%r13)
 498:/usr/include/c++/9/bits/stl_algobase.h ****     {
 499:/usr/include/c++/9/bits/stl_algobase.h ****       // concept requirements
 500:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 501:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 502:/usr/include/c++/9/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 503:/usr/include/c++/9/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 504:/usr/include/c++/9/bits/stl_algobase.h **** 
 505:/usr/include/c++/9/bits/stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 12505              		.loc 17 505 39
 12506 00e0 498B45A0 		movq	-96(%r13), %rax
 12507 00e4 4889C7   		movq	%rax, %rdi
 12508 00e7 E8000000 		call	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traits
 12508      00
 12509 00ec 4989C6   		movq	%rax, %r14
 12510 00ef 498B4580 		movq	-128(%r13), %rax
 12511 00f3 4889C7   		movq	%rax, %rdi
 12512 00f6 E8000000 		call	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traits
 12512      00
 12513 00fb 4889C1   		movq	%rax, %rcx
 12514 00fe 498B45C0 		movq	-64(%r13), %rax
 12515 0102 4889C2   		movq	%rax, %rdx
 12516 0105 4C89F6   		movq	%r14, %rsi
 12517 0108 4889CF   		movq	%rcx, %rdi
 12518 010b E8000000 		call	_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_
 12518      00
 506:/usr/include/c++/9/bits/stl_algobase.h **** 				       std::__miter_base(__last), __result);
 12519              		.loc 17 506 47
 12520 0110 4889C2   		movq	%rax, %rdx
 497:/usr/include/c++/9/bits/stl_algobase.h ****     {
 12521              		.loc 17 497 5
 12522 0113 4939DF   		cmpq	%rbx, %r15
 12523 0116 7434     		je	.L784
 12524 0118 48C7030E 		movq	$1172321806, (%rbx)
 12524      36E045
 12525 011f 48BEF5F5 		movabsq	$-723401728380766731, %rsi
 12525      F5F5F5F5 
 12525      F5F5
 12526 0129 48BFF5F5 		movabsq	$-723401728380766731, %rdi
 12526      F5F5F5F5 
 12526      F5F5
 12527 0133 4989B424 		movq	%rsi, 2147450880(%r12)
 12527      0080FF7F 
 12528 013b 4989BC24 		movq	%rdi, 2147450888(%r12)
 12528      0880FF7F 
 12529 0143 488B4378 		movq	120(%rbx), %rax
 12530 0147 C60000   		movb	$0, (%rax)
 12531 014a EB18     		jmp	.L785
 12532              	.L784:
 12533 014c 49C78424 		movq	$0, 2147450880(%r12)
 12533      0080FF7F 
 12533      00000000 
 12534 0158 49C78424 		movq	$0, 2147450888(%r12)
 12534      0880FF7F 
 12534      00000000 
 12535              	.L785:
 507:/usr/include/c++/9/bits/stl_algobase.h ****     }
 12536              		.loc 17 507 5
 12537 0164 488B45C8 		movq	-56(%rbp), %rax
 12538 0168 64483304 		xorq	%fs:40, %rax
 12538      25280000 
 12538      00
 12539 0171 7405     		je	.L788
 12540 0173 E8000000 		call	__stack_chk_fail@PLT
 12540      00
 12541              	.L788:
 12542 0178 4889D0   		movq	%rdx, %rax
 12543 017b 4881C4C8 		addq	$200, %rsp
 12543      000000
 12544 0182 5B       		popq	%rbx
 12545 0183 415C     		popq	%r12
 12546 0185 415D     		popq	%r13
 12547 0187 415E     		popq	%r14
 12548 0189 415F     		popq	%r15
 12549 018b 5D       		popq	%rbp
 12550              		.cfi_def_cfa 7, 8
 12551 018c C3       		ret
 12552              		.cfi_endproc
 12553              	.LFE2888:
 12555              		.section	.text._ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_,"axG",@progbits,
 12556              		.weak	_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_
 12558              	_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_:
 12559              	.LASANPC2900:
 12560              	.LFB2900:
 138:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     {
 12561              		.loc 11 138 5
 12562              		.cfi_startproc
 12563 0000 F30F1EFA 		endbr64
 12564 0004 55       		pushq	%rbp
 12565              		.cfi_def_cfa_offset 16
 12566              		.cfi_offset 6, -16
 12567 0005 4889E5   		movq	%rsp, %rbp
 12568              		.cfi_def_cfa_register 6
 12569 0008 4156     		pushq	%r14
 12570 000a 4155     		pushq	%r13
 12571 000c 4154     		pushq	%r12
 12572 000e 53       		pushq	%rbx
 12573 000f 4883EC70 		subq	$112, %rsp
 12574              		.cfi_offset 14, -24
 12575              		.cfi_offset 13, -32
 12576              		.cfi_offset 12, -40
 12577              		.cfi_offset 3, -48
 12578 0013 4889BD78 		movq	%rdi, -136(%rbp)
 12578      FFFFFF
 12579 001a 4889B570 		movq	%rsi, -144(%rbp)
 12579      FFFFFF
 12580 0021 488D5D80 		leaq	-128(%rbp), %rbx
 12581 0025 4989DE   		movq	%rbx, %r14
 12582 0028 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 12582      000000
 12583 002f 7412     		je	.L789
 12584 0031 BF400000 		movl	$64, %edi
 12584      00
 12585 0036 E8000000 		call	__asan_stack_malloc_0@PLT
 12585      00
 12586              	.LVL18:
 12587 003b 4885C0   		testq	%rax, %rax
 12588 003e 7403     		je	.L789
 12589 0040 4889C3   		movq	%rax, %rbx
 12590              	.L789:
 12591 0043 488D4360 		leaq	96(%rbx), %rax
 12592 0047 4989C5   		movq	%rax, %r13
 12593 004a 48C703B3 		movq	$1102416563, (%rbx)
 12593      8AB541
 12594 0051 488D0500 		leaq	.LC17(%rip), %rax
 12594      000000
 12595 0058 48894308 		movq	%rax, 8(%rbx)
 12596 005c 488D059D 		leaq	.LASANPC2900(%rip), %rax
 12596      FFFFFF
 12597 0063 48894310 		movq	%rax, 16(%rbx)
 12598 0067 4989DC   		movq	%rbx, %r12
 12599 006a 49C1EC03 		shrq	$3, %r12
 12600 006e 41C78424 		movl	$-235802127, 2147450880(%r12)
 12600      0080FF7F 
 12600      F1F1F1F1 
 12601 007a 41C78424 		movl	$-202116352, 2147450884(%r12)
 12601      0480FF7F 
 12601      00F3F3F3 
 138:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     {
 12602              		.loc 11 138 5
 12603 0086 64488B04 		movq	%fs:40, %rax
 12603      25280000 
 12603      00
 12604 008f 488945D8 		movq	%rax, -40(%rbp)
 12605 0093 31C0     		xorl	%eax, %eax
 138:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     {
 12606              		.loc 11 138 29
 12607 0095 488B8578 		movq	-136(%rbp), %rax
 12607      FFFFFF
 12608 009c 498945C0 		movq	%rax, -64(%r13)
 142:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     }
 12609              		.loc 11 142 33
 12610 00a0 498D45C0 		leaq	-64(%r13), %rax
 12611 00a4 4889C7   		movq	%rax, %rdi
 12612 00a7 E8000000 		call	_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_
 12612      00
 141:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 			     std::__iterator_category(__first));
 12613              		.loc 11 141 29
 12614 00ac 498B45C0 		movq	-64(%r13), %rax
 12615 00b0 488B9570 		movq	-144(%rbp), %rdx
 12615      FFFFFF
 12616 00b7 4889D6   		movq	%rdx, %rsi
 12617 00ba 4889C7   		movq	%rax, %rdi
 12618 00bd E8000000 		call	_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterat
 12618      00
 142:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     }
 12619              		.loc 11 142 42
 12620 00c2 4889C2   		movq	%rax, %rdx
 138:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     {
 12621              		.loc 11 138 5
 12622 00c5 4939DE   		cmpq	%rbx, %r14
 12623 00c8 7422     		je	.L790
 12624 00ca 48C7030E 		movq	$1172321806, (%rbx)
 12624      36E045
 12625 00d1 48B8F5F5 		movabsq	$-723401728380766731, %rax
 12625      F5F5F5F5 
 12625      F5F5
 12626 00db 49898424 		movq	%rax, 2147450880(%r12)
 12626      0080FF7F 
 12627 00e3 488B4338 		movq	56(%rbx), %rax
 12628 00e7 C60000   		movb	$0, (%rax)
 12629 00ea EB0C     		jmp	.L791
 12630              	.L790:
 12631 00ec 49C78424 		movq	$0, 2147450880(%r12)
 12631      0080FF7F 
 12631      00000000 
 12632              	.L791:
 12633              		.loc 11 143 5
 12634 00f8 488B45D8 		movq	-40(%rbp), %rax
 12635 00fc 64483304 		xorq	%fs:40, %rax
 12635      25280000 
 12635      00
 12636 0105 7405     		je	.L794
 12637 0107 E8000000 		call	__stack_chk_fail@PLT
 12637      00
 12638              	.L794:
 12639 010c 4889D0   		movq	%rdx, %rax
 12640 010f 4883C470 		addq	$112, %rsp
 12641 0113 5B       		popq	%rbx
 12642 0114 415C     		popq	%r12
 12643 0116 415D     		popq	%r13
 12644 0118 415E     		popq	%r14
 12645 011a 5D       		popq	%rbp
 12646              		.cfi_def_cfa 7, 8
 12647 011b C3       		ret
 12648              		.cfi_endproc
 12649              	.LFE2900:
 12651              		.section	.rodata
 12652 08a6 00000000 		.align 32
 12652      00000000 
 12652      00000000 
 12652      00000000 
 12652      00000000 
 12653              	.LC28:
 12654 08c0 2F757372 		.string	"/usr/include/c++/9/bits/basic_string.tcc"
 12654      2F696E63 
 12654      6C756465 
 12654      2F632B2B 
 12654      2F392F62 
 12655 08e9 00000000 		.zero	55
 12655      00000000 
 12655      00000000 
 12655      00000000 
 12655      00000000 
 12656              		.section	.data.rel.local
 12657              		.align 32
 12660              	.Lubsan_data632:
 12661 3e80 00000000 		.quad	.LC28
 12661      00000000 
 12662 3e88 DB000000 		.long	219
 12663 3e8c 06000000 		.long	6
 12664 3e90 00000000 		.quad	.Lubsan_type5
 12664      00000000 
 12665 3e98 03       		.byte	3
 12666 3e99 04       		.byte	4
 12667 3e9a 00000000 		.zero	6
 12667      0000
 12668 3ea0 00000000 		.zero	32
 12668      00000000 
 12668      00000000 
 12668      00000000 
 12668      00000000 
 12669              		.align 32
 12672              	.Lubsan_data633:
 12673 3ec0 00000000 		.quad	.LC28
 12673      00000000 
 12674 3ec8 DB000000 		.long	219
 12675 3ecc 06000000 		.long	6
 12676 3ed0 00000000 		.quad	.Lubsan_type5
 12676      00000000 
 12677 3ed8 03       		.byte	3
 12678 3ed9 04       		.byte	4
 12679 3eda 00000000 		.zero	6
 12679      0000
 12680 3ee0 00000000 		.zero	32
 12680      00000000 
 12680      00000000 
 12680      00000000 
 12680      00000000 
 12681              		.align 32
 12684              	.Lubsan_data634:
 12685 3f00 00000000 		.quad	.LC28
 12685      00000000 
 12686 3f08 DC000000 		.long	220
 12687 3f0c 06000000 		.long	6
 12688 3f10 00000000 		.quad	.Lubsan_type5
 12688      00000000 
 12689 3f18 03       		.byte	3
 12690 3f19 04       		.byte	4
 12691 3f1a 00000000 		.zero	6
 12691      0000
 12692 3f20 00000000 		.zero	32
 12692      00000000 
 12692      00000000 
 12692      00000000 
 12692      00000000 
 12693              		.align 32
 12696              	.Lubsan_data635:
 12697 3f40 00000000 		.quad	.LC28
 12697      00000000 
 12698 3f48 E1000000 		.long	225
 12699 3f4c 06000000 		.long	6
 12700 3f50 00000000 		.quad	.Lubsan_type5
 12700      00000000 
 12701 3f58 03       		.byte	3
 12702 3f59 04       		.byte	4
 12703 3f5a 00000000 		.zero	6
 12703      0000
 12704 3f60 00000000 		.zero	32
 12704      00000000 
 12704      00000000 
 12704      00000000 
 12704      00000000 
 12705              		.align 32
 12708              	.Lubsan_data636:
 12709 3f80 00000000 		.quad	.LC28
 12709      00000000 
 12710 3f88 E8000000 		.long	232
 12711 3f8c 02000000 		.long	2
 12712 3f90 00000000 		.quad	.Lubsan_type5
 12712      00000000 
 12713 3f98 03       		.byte	3
 12714 3f99 04       		.byte	4
 12715 3f9a 00000000 		.zero	6
 12715      0000
 12716 3fa0 00000000 		.zero	32
 12716      00000000 
 12716      00000000 
 12716      00000000 
 12716      00000000 
 12717              		.align 32
 12720              	.Lubsan_data637:
 12721 3fc0 00000000 		.quad	.LC28
 12721      00000000 
 12722 3fc8 E4000000 		.long	228
 12723 3fcc 06000000 		.long	6
 12724 3fd0 00000000 		.quad	.Lubsan_type5
 12724      00000000 
 12725 3fd8 03       		.byte	3
 12726 3fd9 04       		.byte	4
 12727 3fda 00000000 		.zero	6
 12727      0000
 12728 3fe0 00000000 		.zero	32
 12728      00000000 
 12728      00000000 
 12728      00000000 
 12728      00000000 
 12729              		.section	.rodata
 12730              	.LC29:
 12731 0920 31203332 		.string	"1 32 8 10 __dnew:215"
 12731      20382031 
 12731      30205F5F 
 12731      646E6577 
 12731      3A323135 
 12732 0935 00000000 		.align 32
 12732      00000000 
 12732      000000
 12733              	.LC30:
 12734 0940 62617369 		.string	"basic_string::_M_construct null not valid"
 12734      635F7374 
 12734      72696E67 
 12734      3A3A5F4D 
 12734      5F636F6E 
 12735 096a 00000000 		.zero	54
 12735      00000000 
 12735      00000000 
 12735      00000000 
 12735      00000000 
 12736              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20
 12737              		.align 2
 12738              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_i
 12740              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator
 12741              	.LASANPC2899:
 12742              	.LFB2899:
 12743              		.file 18 "/usr/include/c++/9/bits/basic_string.tcc"
   1:/usr/include/c++/9/bits/basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/9/bits/basic_string.tcc **** 
   3:/usr/include/c++/9/bits/basic_string.tcc **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/basic_string.tcc **** //
   5:/usr/include/c++/9/bits/basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/basic_string.tcc **** // any later version.
  10:/usr/include/c++/9/bits/basic_string.tcc **** 
  11:/usr/include/c++/9/bits/basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/basic_string.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/basic_string.tcc **** 
  16:/usr/include/c++/9/bits/basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/basic_string.tcc **** 
  20:/usr/include/c++/9/bits/basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/basic_string.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/basic_string.tcc **** 
  25:/usr/include/c++/9/bits/basic_string.tcc **** /** @file bits/basic_string.tcc
  26:/usr/include/c++/9/bits/basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/9/bits/basic_string.tcc ****  */
  29:/usr/include/c++/9/bits/basic_string.tcc **** 
  30:/usr/include/c++/9/bits/basic_string.tcc **** //
  31:/usr/include/c++/9/bits/basic_string.tcc **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/9/bits/basic_string.tcc **** //
  33:/usr/include/c++/9/bits/basic_string.tcc **** 
  34:/usr/include/c++/9/bits/basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:/usr/include/c++/9/bits/basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:/usr/include/c++/9/bits/basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:/usr/include/c++/9/bits/basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:/usr/include/c++/9/bits/basic_string.tcc **** 
  39:/usr/include/c++/9/bits/basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:/usr/include/c++/9/bits/basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:/usr/include/c++/9/bits/basic_string.tcc **** 
  42:/usr/include/c++/9/bits/basic_string.tcc **** #pragma GCC system_header
  43:/usr/include/c++/9/bits/basic_string.tcc **** 
  44:/usr/include/c++/9/bits/basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:/usr/include/c++/9/bits/basic_string.tcc **** 
  46:/usr/include/c++/9/bits/basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/c++/9/bits/basic_string.tcc **** {
  48:/usr/include/c++/9/bits/basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/c++/9/bits/basic_string.tcc **** 
  50:/usr/include/c++/9/bits/basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/c++/9/bits/basic_string.tcc **** 
  52:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:/usr/include/c++/9/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:/usr/include/c++/9/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:/usr/include/c++/9/bits/basic_string.tcc **** 
  56:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:/usr/include/c++/9/bits/basic_string.tcc ****     void
  58:/usr/include/c++/9/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  59:/usr/include/c++/9/bits/basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  60:/usr/include/c++/9/bits/basic_string.tcc ****     {
  61:/usr/include/c++/9/bits/basic_string.tcc ****       if (this == &__s)
  62:/usr/include/c++/9/bits/basic_string.tcc **** 	return;
  63:/usr/include/c++/9/bits/basic_string.tcc **** 
  64:/usr/include/c++/9/bits/basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
  65:/usr/include/c++/9/bits/basic_string.tcc **** 
  66:/usr/include/c++/9/bits/basic_string.tcc ****       if (_M_is_local())
  67:/usr/include/c++/9/bits/basic_string.tcc **** 	if (__s._M_is_local())
  68:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
  69:/usr/include/c++/9/bits/basic_string.tcc **** 	    if (length() && __s.length())
  70:/usr/include/c++/9/bits/basic_string.tcc **** 	      {
  71:/usr/include/c++/9/bits/basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  72:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  73:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  74:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  75:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  76:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  77:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  78:/usr/include/c++/9/bits/basic_string.tcc **** 	      }
  79:/usr/include/c++/9/bits/basic_string.tcc **** 	    else if (__s.length())
  80:/usr/include/c++/9/bits/basic_string.tcc **** 	      {
  81:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  82:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  83:/usr/include/c++/9/bits/basic_string.tcc **** 		_M_length(__s.length());
  84:/usr/include/c++/9/bits/basic_string.tcc **** 		__s._M_set_length(0);
  85:/usr/include/c++/9/bits/basic_string.tcc **** 		return;
  86:/usr/include/c++/9/bits/basic_string.tcc **** 	      }
  87:/usr/include/c++/9/bits/basic_string.tcc **** 	    else if (length())
  88:/usr/include/c++/9/bits/basic_string.tcc **** 	      {
  89:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  90:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  91:/usr/include/c++/9/bits/basic_string.tcc **** 		__s._M_length(length());
  92:/usr/include/c++/9/bits/basic_string.tcc **** 		_M_set_length(0);
  93:/usr/include/c++/9/bits/basic_string.tcc **** 		return;
  94:/usr/include/c++/9/bits/basic_string.tcc **** 	      }
  95:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
  96:/usr/include/c++/9/bits/basic_string.tcc **** 	else
  97:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
  98:/usr/include/c++/9/bits/basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
  99:/usr/include/c++/9/bits/basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 100:/usr/include/c++/9/bits/basic_string.tcc **** 			      _S_local_capacity + 1);
 101:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_data(__s._M_data());
 102:/usr/include/c++/9/bits/basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 103:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 104:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 105:/usr/include/c++/9/bits/basic_string.tcc ****       else
 106:/usr/include/c++/9/bits/basic_string.tcc **** 	{
 107:/usr/include/c++/9/bits/basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 108:/usr/include/c++/9/bits/basic_string.tcc **** 	  if (__s._M_is_local())
 109:/usr/include/c++/9/bits/basic_string.tcc **** 	    {
 110:/usr/include/c++/9/bits/basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 111:/usr/include/c++/9/bits/basic_string.tcc **** 				_S_local_capacity + 1);
 112:/usr/include/c++/9/bits/basic_string.tcc **** 	      __s._M_data(_M_data());
 113:/usr/include/c++/9/bits/basic_string.tcc **** 	      _M_data(_M_local_buf);
 114:/usr/include/c++/9/bits/basic_string.tcc **** 	    }
 115:/usr/include/c++/9/bits/basic_string.tcc **** 	  else
 116:/usr/include/c++/9/bits/basic_string.tcc **** 	    {
 117:/usr/include/c++/9/bits/basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
 118:/usr/include/c++/9/bits/basic_string.tcc **** 	      _M_data(__s._M_data());
 119:/usr/include/c++/9/bits/basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 120:/usr/include/c++/9/bits/basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 121:/usr/include/c++/9/bits/basic_string.tcc **** 	    }
 122:/usr/include/c++/9/bits/basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 123:/usr/include/c++/9/bits/basic_string.tcc **** 	}
 124:/usr/include/c++/9/bits/basic_string.tcc **** 
 125:/usr/include/c++/9/bits/basic_string.tcc ****       const size_type __tmp_length = length();
 126:/usr/include/c++/9/bits/basic_string.tcc ****       _M_length(__s.length());
 127:/usr/include/c++/9/bits/basic_string.tcc ****       __s._M_length(__tmp_length);
 128:/usr/include/c++/9/bits/basic_string.tcc ****     }
 129:/usr/include/c++/9/bits/basic_string.tcc **** 
 130:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 131:/usr/include/c++/9/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
 132:/usr/include/c++/9/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 133:/usr/include/c++/9/bits/basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 134:/usr/include/c++/9/bits/basic_string.tcc ****     {
 135:/usr/include/c++/9/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/c++/9/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 137:/usr/include/c++/9/bits/basic_string.tcc ****       if (__capacity > max_size())
 138:/usr/include/c++/9/bits/basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 139:/usr/include/c++/9/bits/basic_string.tcc **** 
 140:/usr/include/c++/9/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 141:/usr/include/c++/9/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 142:/usr/include/c++/9/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 143:/usr/include/c++/9/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 144:/usr/include/c++/9/bits/basic_string.tcc **** 	{
 145:/usr/include/c++/9/bits/basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
 146:/usr/include/c++/9/bits/basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 147:/usr/include/c++/9/bits/basic_string.tcc **** 	  if (__capacity > max_size())
 148:/usr/include/c++/9/bits/basic_string.tcc **** 	    __capacity = max_size();
 149:/usr/include/c++/9/bits/basic_string.tcc **** 	}
 150:/usr/include/c++/9/bits/basic_string.tcc **** 
 151:/usr/include/c++/9/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 152:/usr/include/c++/9/bits/basic_string.tcc ****       // null char_type() element.
 153:/usr/include/c++/9/bits/basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 154:/usr/include/c++/9/bits/basic_string.tcc ****     }
 155:/usr/include/c++/9/bits/basic_string.tcc **** 
 156:/usr/include/c++/9/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 157:/usr/include/c++/9/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 158:/usr/include/c++/9/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 159:/usr/include/c++/9/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 160:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 161:/usr/include/c++/9/bits/basic_string.tcc ****     template<typename _InIterator>
 162:/usr/include/c++/9/bits/basic_string.tcc ****       void
 163:/usr/include/c++/9/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 164:/usr/include/c++/9/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 165:/usr/include/c++/9/bits/basic_string.tcc **** 		   std::input_iterator_tag)
 166:/usr/include/c++/9/bits/basic_string.tcc ****       {
 167:/usr/include/c++/9/bits/basic_string.tcc **** 	size_type __len = 0;
 168:/usr/include/c++/9/bits/basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 169:/usr/include/c++/9/bits/basic_string.tcc **** 
 170:/usr/include/c++/9/bits/basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 171:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 172:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_data()[__len++] = *__beg;
 173:/usr/include/c++/9/bits/basic_string.tcc **** 	    ++__beg;
 174:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 175:/usr/include/c++/9/bits/basic_string.tcc **** 
 176:/usr/include/c++/9/bits/basic_string.tcc **** 	__try
 177:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 178:/usr/include/c++/9/bits/basic_string.tcc **** 	    while (__beg != __end)
 179:/usr/include/c++/9/bits/basic_string.tcc **** 	      {
 180:/usr/include/c++/9/bits/basic_string.tcc **** 		if (__len == __capacity)
 181:/usr/include/c++/9/bits/basic_string.tcc **** 		  {
 182:/usr/include/c++/9/bits/basic_string.tcc **** 		    // Allocate more space.
 183:/usr/include/c++/9/bits/basic_string.tcc **** 		    __capacity = __len + 1;
 184:/usr/include/c++/9/bits/basic_string.tcc **** 		    pointer __another = _M_create(__capacity, __len);
 185:/usr/include/c++/9/bits/basic_string.tcc **** 		    this->_S_copy(__another, _M_data(), __len);
 186:/usr/include/c++/9/bits/basic_string.tcc **** 		    _M_dispose();
 187:/usr/include/c++/9/bits/basic_string.tcc **** 		    _M_data(__another);
 188:/usr/include/c++/9/bits/basic_string.tcc **** 		    _M_capacity(__capacity);
 189:/usr/include/c++/9/bits/basic_string.tcc **** 		  }
 190:/usr/include/c++/9/bits/basic_string.tcc **** 		_M_data()[__len++] = *__beg;
 191:/usr/include/c++/9/bits/basic_string.tcc **** 		++__beg;
 192:/usr/include/c++/9/bits/basic_string.tcc **** 	      }
 193:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 194:/usr/include/c++/9/bits/basic_string.tcc **** 	__catch(...)
 195:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 196:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_dispose();
 197:/usr/include/c++/9/bits/basic_string.tcc **** 	    __throw_exception_again;
 198:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 199:/usr/include/c++/9/bits/basic_string.tcc **** 
 200:/usr/include/c++/9/bits/basic_string.tcc **** 	_M_set_length(__len);
 201:/usr/include/c++/9/bits/basic_string.tcc ****       }
 202:/usr/include/c++/9/bits/basic_string.tcc **** 
 203:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 204:/usr/include/c++/9/bits/basic_string.tcc ****     template<typename _InIterator>
 205:/usr/include/c++/9/bits/basic_string.tcc ****       void
 206:/usr/include/c++/9/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 12744              		.loc 18 206 7
 12745              		.cfi_startproc
 12746              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 12747              		.cfi_lsda 0x1b,.LLSDA2899
 12748 0000 F30F1EFA 		endbr64
 12749 0004 55       		pushq	%rbp
 12750              		.cfi_def_cfa_offset 16
 12751              		.cfi_offset 6, -16
 12752 0005 4889E5   		movq	%rsp, %rbp
 12753              		.cfi_def_cfa_register 6
 12754 0008 4156     		pushq	%r14
 12755 000a 4155     		pushq	%r13
 12756 000c 4154     		pushq	%r12
 12757 000e 53       		pushq	%rbx
 12758 000f 4883C480 		addq	$-128, %rsp
 12759              		.cfi_offset 14, -24
 12760              		.cfi_offset 13, -32
 12761              		.cfi_offset 12, -40
 12762              		.cfi_offset 3, -48
 12763 0013 4889BD78 		movq	%rdi, -136(%rbp)
 12763      FFFFFF
 12764 001a 4889B570 		movq	%rsi, -144(%rbp)
 12764      FFFFFF
 12765 0021 48899568 		movq	%rdx, -152(%rbp)
 12765      FFFFFF
 12766 0028 488D5D80 		leaq	-128(%rbp), %rbx
 12767 002c 4989DE   		movq	%rbx, %r14
 12768 002f 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 12768      000000
 12769 0036 7412     		je	.L795
 12770 0038 BF400000 		movl	$64, %edi
 12770      00
 12771 003d E8000000 		call	__asan_stack_malloc_0@PLT
 12771      00
 12772              	.LVL19:
 12773 0042 4885C0   		testq	%rax, %rax
 12774 0045 7403     		je	.L795
 12775 0047 4889C3   		movq	%rax, %rbx
 12776              	.L795:
 12777 004a 488D4360 		leaq	96(%rbx), %rax
 12778 004e 4989C4   		movq	%rax, %r12
 12779 0051 48C703B3 		movq	$1102416563, (%rbx)
 12779      8AB541
 12780 0058 488D0500 		leaq	.LC29(%rip), %rax
 12780      000000
 12781 005f 48894308 		movq	%rax, 8(%rbx)
 12782 0063 488D0596 		leaq	.LASANPC2899(%rip), %rax
 12782      FFFFFF
 12783 006a 48894310 		movq	%rax, 16(%rbx)
 12784 006e 4989DD   		movq	%rbx, %r13
 12785 0071 49C1ED03 		shrq	$3, %r13
 12786 0075 41C78500 		movl	$-235802127, 2147450880(%r13)
 12786      80FF7FF1 
 12786      F1F1F1
 12787 0080 41C78504 		movl	$-202116352, 2147450884(%r13)
 12787      80FF7F00 
 12787      F3F3F3
 12788              		.loc 18 206 7
 12789 008b 64488B04 		movq	%fs:40, %rax
 12789      25280000 
 12789      00
 12790 0094 488945D8 		movq	%rax, -40(%rbp)
 12791 0098 31C0     		xorl	%eax, %eax
 207:/usr/include/c++/9/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 208:/usr/include/c++/9/bits/basic_string.tcc **** 		   std::forward_iterator_tag)
 209:/usr/include/c++/9/bits/basic_string.tcc ****       {
 210:/usr/include/c++/9/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 211:/usr/include/c++/9/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 12792              		.loc 18 211 34
 12793 009a 488B8570 		movq	-144(%rbp), %rax
 12793      FFFFFF
 12794 00a1 4889C7   		movq	%rax, %rdi
 12795 00a4 E8000000 		call	_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_
 12795      00
 12796              		.loc 18 211 42
 12797 00a9 84C0     		testb	%al, %al
 12798 00ab 7417     		je	.L799
 12799              		.loc 18 211 42 is_stmt 0 discriminator 1
 12800 00ad 488B8570 		movq	-144(%rbp), %rax
 12800      FFFFFF
 12801 00b4 483B8568 		cmpq	-152(%rbp), %rax
 12801      FFFFFF
 12802 00bb 7407     		je	.L799
 12803              		.loc 18 211 42 discriminator 3
 12804 00bd B8010000 		movl	$1, %eax
 12804      00
 12805 00c2 EB05     		jmp	.L800
 12806              	.L799:
 12807              		.loc 18 211 42 discriminator 4
 12808 00c4 B8000000 		movl	$0, %eax
 12808      00
 12809              	.L800:
 12810              		.loc 18 211 2 is_stmt 1 discriminator 6
 12811 00c9 84C0     		testb	%al, %al
 12812 00cb 7411     		je	.L801
 212:/usr/include/c++/9/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 12813              		.loc 18 212 28
 12814 00cd E8000000 		call	__asan_handle_no_return@PLT
 12814      00
 12815 00d2 488D3D00 		leaq	.LC30(%rip), %rdi
 12815      000000
 12816              	.LEHB33:
 12817 00d9 E8000000 		call	_ZSt19__throw_logic_errorPKc@PLT
 12817      00
 12818              	.L801:
 213:/usr/include/c++/9/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 214:/usr/include/c++/9/bits/basic_string.tcc **** 
 215:/usr/include/c++/9/bits/basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 12819              		.loc 18 215 57
 12820 00de 488B9568 		movq	-152(%rbp), %rdx
 12820      FFFFFF
 12821 00e5 488B8570 		movq	-144(%rbp), %rax
 12821      FFFFFF
 12822 00ec 4889D6   		movq	%rdx, %rsi
 12823 00ef 4889C7   		movq	%rax, %rdi
 12824 00f2 E8000000 		call	_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_
 12824      00
 12825 00f7 4889C1   		movq	%rax, %rcx
 12826              		.loc 18 215 12
 12827 00fa 498D4424 		leaq	-64(%r12), %rax
 12827      C0
 12828 00ff 4889C2   		movq	%rax, %rdx
 12829 0102 48C1EA03 		shrq	$3, %rdx
 12830 0106 4881C200 		addq	$2147450880, %rdx
 12830      80FF7F
 12831 010d 0FB612   		movzbl	(%rdx), %edx
 12832 0110 84D2     		testb	%dl, %dl
 12833 0112 7408     		je	.L802
 12834 0114 4889C7   		movq	%rax, %rdi
 12835 0117 E8000000 		call	__asan_report_store8@PLT
 12835      00
 12836              	.L802:
 12837 011c 49894C24 		movq	%rcx, -64(%r12)
 12837      C0
 216:/usr/include/c++/9/bits/basic_string.tcc **** 
 217:/usr/include/c++/9/bits/basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 12838              		.loc 18 217 13
 12839 0121 498B4424 		movq	-64(%r12), %rax
 12839      C0
 12840              		.loc 18 217 2
 12841 0126 4883F80F 		cmpq	$15, %rax
 12842 012a 0F86EB00 		jbe	.L803
 12842      0000
 218:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 219:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 12843              		.loc 18 219 6
 12844 0130 488B8578 		movq	-136(%rbp), %rax
 12844      FFFFFF
 12845 0137 4883BD78 		cmpq	$0, -136(%rbp)
 12845      FFFFFF00 
 12846 013f 740B     		je	.L804
 12847 0141 4889C2   		movq	%rax, %rdx
 12848 0144 83E207   		andl	$7, %edx
 12849 0147 4885D2   		testq	%rdx, %rdx
 12850 014a 740F     		je	.L805
 12851              	.L804:
 12852 014c 4889C6   		movq	%rax, %rsi
 12853 014f 488D3D00 		leaq	.Lubsan_data632(%rip), %rdi
 12853      000000
 12854 0156 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12854      00
 12855              	.L805:
 12856 015b 488B8578 		movq	-136(%rbp), %rax
 12856      FFFFFF
 12857 0162 4883BD78 		cmpq	$0, -136(%rbp)
 12857      FFFFFF00 
 12858 016a 740B     		je	.L806
 12859 016c 4889C2   		movq	%rax, %rdx
 12860 016f 83E207   		andl	$7, %edx
 12861 0172 4885D2   		testq	%rdx, %rdx
 12862 0175 740F     		je	.L807
 12863              	.L806:
 12864 0177 4889C6   		movq	%rax, %rsi
 12865 017a 488D3D00 		leaq	.Lubsan_data633(%rip), %rdi
 12865      000000
 12866 0181 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12866      00
 12867              	.L807:
 12868 0186 498D4C24 		leaq	-64(%r12), %rcx
 12868      C0
 12869 018b 488B8578 		movq	-136(%rbp), %rax
 12869      FFFFFF
 12870 0192 BA000000 		movl	$0, %edx
 12870      00
 12871 0197 4889CE   		movq	%rcx, %rsi
 12872 019a 4889C7   		movq	%rax, %rdi
 12873 019d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT
 12873      00
 12874 01a2 4889C2   		movq	%rax, %rdx
 12875 01a5 488B8578 		movq	-136(%rbp), %rax
 12875      FFFFFF
 12876 01ac 4889D6   		movq	%rdx, %rsi
 12877 01af 4889C7   		movq	%rax, %rdi
 12878 01b2 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@PLT
 12878      00
 220:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 12879              		.loc 18 220 6
 12880 01b7 488B8578 		movq	-136(%rbp), %rax
 12880      FFFFFF
 12881 01be 4883BD78 		cmpq	$0, -136(%rbp)
 12881      FFFFFF00 
 12882 01c6 740B     		je	.L808
 12883 01c8 4889C2   		movq	%rax, %rdx
 12884 01cb 83E207   		andl	$7, %edx
 12885 01ce 4885D2   		testq	%rdx, %rdx
 12886 01d1 740F     		je	.L809
 12887              	.L808:
 12888 01d3 4889C6   		movq	%rax, %rsi
 12889 01d6 488D3D00 		leaq	.Lubsan_data634(%rip), %rdi
 12889      000000
 12890 01dd E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12890      00
 12891              	.L809:
 12892 01e2 498D4424 		leaq	-64(%r12), %rax
 12892      C0
 12893 01e7 4889C2   		movq	%rax, %rdx
 12894 01ea 48C1EA03 		shrq	$3, %rdx
 12895 01ee 4881C200 		addq	$2147450880, %rdx
 12895      80FF7F
 12896 01f5 0FB612   		movzbl	(%rdx), %edx
 12897 01f8 84D2     		testb	%dl, %dl
 12898 01fa 7408     		je	.L810
 12899 01fc 4889C7   		movq	%rax, %rdi
 12900 01ff E8000000 		call	__asan_report_load8@PLT
 12900      00
 12901              	.L810:
 12902 0204 498B5424 		movq	-64(%r12), %rdx
 12902      C0
 12903 0209 488B8578 		movq	-136(%rbp), %rax
 12903      FFFFFF
 12904 0210 4889D6   		movq	%rdx, %rsi
 12905 0213 4889C7   		movq	%rax, %rdi
 12906 0216 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@PLT
 12906      00
 12907              	.LEHE33:
 12908              	.L803:
 221:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 222:/usr/include/c++/9/bits/basic_string.tcc **** 
 223:/usr/include/c++/9/bits/basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 224:/usr/include/c++/9/bits/basic_string.tcc **** 	__try
 225:/usr/include/c++/9/bits/basic_string.tcc **** 	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 12909              		.loc 18 225 6
 12910 021b 488B8578 		movq	-136(%rbp), %rax
 12910      FFFFFF
 12911 0222 4883BD78 		cmpq	$0, -136(%rbp)
 12911      FFFFFF00 
 12912 022a 740B     		je	.L811
 12913 022c 4889C2   		movq	%rax, %rdx
 12914 022f 83E207   		andl	$7, %edx
 12915 0232 4885D2   		testq	%rdx, %rdx
 12916 0235 740F     		je	.L812
 12917              	.L811:
 12918 0237 4889C6   		movq	%rax, %rsi
 12919 023a 488D3D00 		leaq	.Lubsan_data635(%rip), %rdi
 12919      000000
 12920 0241 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12920      00
 12921              	.L812:
 12922 0246 488B8578 		movq	-136(%rbp), %rax
 12922      FFFFFF
 12923 024d 4889C7   		movq	%rax, %rdi
 12924              	.LEHB34:
 12925 0250 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@PLT
 12925      00
 12926              	.LEHE34:
 12927 0255 4889C1   		movq	%rax, %rcx
 12928 0258 488B9568 		movq	-152(%rbp), %rdx
 12928      FFFFFF
 12929 025f 488B8570 		movq	-144(%rbp), %rax
 12929      FFFFFF
 12930 0266 4889C6   		movq	%rax, %rsi
 12931 0269 4889CF   		movq	%rcx, %rdi
 12932 026c E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@PLT
 12932      00
 226:/usr/include/c++/9/bits/basic_string.tcc **** 	__catch(...)
 227:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 228:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_dispose();
 229:/usr/include/c++/9/bits/basic_string.tcc **** 	    __throw_exception_again;
 230:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 231:/usr/include/c++/9/bits/basic_string.tcc **** 
 232:/usr/include/c++/9/bits/basic_string.tcc **** 	_M_set_length(__dnew);
 12933              		.loc 18 232 2
 12934 0271 488B8578 		movq	-136(%rbp), %rax
 12934      FFFFFF
 12935 0278 4883BD78 		cmpq	$0, -136(%rbp)
 12935      FFFFFF00 
 12936 0280 740B     		je	.L813
 12937              		.loc 18 232 2 is_stmt 0 discriminator 1
 12938 0282 4889C2   		movq	%rax, %rdx
 12939 0285 83E207   		andl	$7, %edx
 12940 0288 4885D2   		testq	%rdx, %rdx
 12941 028b 740F     		je	.L814
 12942              	.L813:
 12943              		.loc 18 232 2
 12944 028d 4889C6   		movq	%rax, %rsi
 12945 0290 488D3D00 		leaq	.Lubsan_data636(%rip), %rdi
 12945      000000
 12946 0297 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12946      00
 12947              	.L814:
 12948              		.loc 18 232 2 discriminator 1
 12949 029c 498D4424 		leaq	-64(%r12), %rax
 12949      C0
 12950 02a1 4889C2   		movq	%rax, %rdx
 12951 02a4 48C1EA03 		shrq	$3, %rdx
 12952 02a8 4881C200 		addq	$2147450880, %rdx
 12952      80FF7F
 12953 02af 0FB612   		movzbl	(%rdx), %edx
 12954 02b2 84D2     		testb	%dl, %dl
 12955 02b4 7408     		je	.L815
 12956              		.loc 18 232 2
 12957 02b6 4889C7   		movq	%rax, %rdi
 12958 02b9 E8000000 		call	__asan_report_load8@PLT
 12958      00
 12959              	.L815:
 12960              		.loc 18 232 2 discriminator 1
 12961 02be 498B5424 		movq	-64(%r12), %rdx
 12961      C0
 12962 02c3 488B8578 		movq	-136(%rbp), %rax
 12962      FFFFFF
 12963 02ca 4889D6   		movq	%rdx, %rsi
 12964 02cd 4889C7   		movq	%rax, %rdi
 12965              	.LEHB35:
 12966 02d0 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@PLT
 12966      00
 12967              	.LEHE35:
 233:/usr/include/c++/9/bits/basic_string.tcc ****       }
 12968              		.loc 18 233 7 is_stmt 1 discriminator 1
 12969 02d5 90       		nop
 206:/usr/include/c++/9/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 12970              		.loc 18 206 7 discriminator 1
 12971 02d6 4939DE   		cmpq	%rbx, %r14
 12972 02d9 0F848C00 		je	.L796
 12972      0000
 12973 02df EB69     		jmp	.L823
 12974              	.L821:
 12975 02e1 F30F1EFA 		endbr64
 226:/usr/include/c++/9/bits/basic_string.tcc **** 	__catch(...)
 12976              		.loc 18 226 2
 12977 02e5 4889C7   		movq	%rax, %rdi
 12978 02e8 E8000000 		call	__cxa_begin_catch@PLT
 12978      00
 228:/usr/include/c++/9/bits/basic_string.tcc **** 	    __throw_exception_again;
 12979              		.loc 18 228 6
 12980 02ed 488B8578 		movq	-136(%rbp), %rax
 12980      FFFFFF
 12981 02f4 4883BD78 		cmpq	$0, -136(%rbp)
 12981      FFFFFF00 
 12982 02fc 740B     		je	.L817
 12983 02fe 4889C2   		movq	%rax, %rdx
 12984 0301 83E207   		andl	$7, %edx
 12985 0304 4885D2   		testq	%rdx, %rdx
 12986 0307 740F     		je	.L818
 12987              	.L817:
 12988 0309 4889C6   		movq	%rax, %rsi
 12989 030c 488D3D00 		leaq	.Lubsan_data637(%rip), %rdi
 12989      000000
 12990 0313 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 12990      00
 12991              	.L818:
 12992 0318 488B8578 		movq	-136(%rbp), %rax
 12992      FFFFFF
 12993 031f 4889C7   		movq	%rax, %rdi
 12994              	.LEHB36:
 12995 0322 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 12995      00
 229:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 12996              		.loc 18 229 6
 12997 0327 E8000000 		call	__asan_handle_no_return@PLT
 12997      00
 12998 032c E8000000 		call	__cxa_rethrow@PLT
 12998      00
 12999              	.LEHE36:
 13000              	.L822:
 13001 0331 F30F1EFA 		endbr64
 13002 0335 4889C3   		movq	%rax, %rbx
 226:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 13003              		.loc 18 226 2
 13004 0338 E8000000 		call	__cxa_end_catch@PLT
 13004      00
 13005 033d E8000000 		call	__asan_handle_no_return@PLT
 13005      00
 13006 0342 4889DF   		movq	%rbx, %rdi
 13007              	.LEHB37:
 13008 0345 E8000000 		call	_Unwind_Resume@PLT
 13008      00
 13009              	.LEHE37:
 13010              	.L823:
 206:/usr/include/c++/9/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 13011              		.loc 18 206 7
 13012 034a 48C7030E 		movq	$1172321806, (%rbx)
 13012      36E045
 13013 0351 48B8F5F5 		movabsq	$-723401728380766731, %rax
 13013      F5F5F5F5 
 13013      F5F5
 13014 035b 49898500 		movq	%rax, 2147450880(%r13)
 13014      80FF7F
 13015 0362 488B4338 		movq	56(%rbx), %rax
 13016 0366 C60000   		movb	$0, (%rax)
 13017 0369 EB0B     		jmp	.L797
 13018              	.L796:
 13019 036b 49C78500 		movq	$0, 2147450880(%r13)
 13019      80FF7F00 
 13019      000000
 13020              	.L797:
 13021              		.loc 18 233 7
 13022 0376 488B45D8 		movq	-40(%rbp), %rax
 13023 037a 64483304 		xorq	%fs:40, %rax
 13023      25280000 
 13023      00
 13024 0383 7405     		je	.L820
 13025 0385 E8000000 		call	__stack_chk_fail@PLT
 13025      00
 13026              	.L820:
 13027 038a 4883EC80 		subq	$-128, %rsp
 13028 038e 5B       		popq	%rbx
 13029 038f 415C     		popq	%r12
 13030 0391 415D     		popq	%r13
 13031 0393 415E     		popq	%r14
 13032 0395 5D       		popq	%rbp
 13033              		.cfi_def_cfa 7, 8
 13034 0396 C3       		ret
 13035              		.cfi_endproc
 13036              	.LFE2899:
 13037              		.section	.gcc_except_table
 13038 00eb 00       		.align 4
 13039              	.LLSDA2899:
 13040 00ec FF       		.byte	0xff
 13041 00ed 9B       		.byte	0x9b
 13042 00ee 25       		.uleb128 .LLSDATT2899-.LLSDATTD2899
 13043              	.LLSDATTD2899:
 13044 00ef 01       		.byte	0x1
 13045 00f0 1C       		.uleb128 .LLSDACSE2899-.LLSDACSB2899
 13046              	.LLSDACSB2899:
 13047 00f1 D901     		.uleb128 .LEHB33-.LFB2899
 13048 00f3 C202     		.uleb128 .LEHE33-.LEHB33
 13049 00f5 00       		.uleb128 0
 13050 00f6 00       		.uleb128 0
 13051 00f7 D004     		.uleb128 .LEHB34-.LFB2899
 13052 00f9 05       		.uleb128 .LEHE34-.LEHB34
 13053 00fa E105     		.uleb128 .L821-.LFB2899
 13054 00fc 01       		.uleb128 0x1
 13055 00fd D005     		.uleb128 .LEHB35-.LFB2899
 13056 00ff 05       		.uleb128 .LEHE35-.LEHB35
 13057 0100 00       		.uleb128 0
 13058 0101 00       		.uleb128 0
 13059 0102 A206     		.uleb128 .LEHB36-.LFB2899
 13060 0104 0F       		.uleb128 .LEHE36-.LEHB36
 13061 0105 B106     		.uleb128 .L822-.LFB2899
 13062 0107 00       		.uleb128 0
 13063 0108 C506     		.uleb128 .LEHB37-.LFB2899
 13064 010a 05       		.uleb128 .LEHE37-.LEHB37
 13065 010b 00       		.uleb128 0
 13066 010c 00       		.uleb128 0
 13067              	.LLSDACSE2899:
 13068 010d 01       		.byte	0x1
 13069 010e 00       		.byte	0
 13070 010f 00       		.align 4
 13071 0110 00000000 		.long	0
 13072              	
 13073              	.LLSDATT2899:
 13074              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20
 13076              		.section	.data.rel.local
 13077              		.align 32
 13080              	.Lubsan_data638:
 13081 4000 00000000 		.quad	.LC10
 13081      00000000 
 13082 4008 8D000000 		.long	141
 13083 400c 22000000 		.long	34
 13084 4010 00000000 		.quad	.Lubsan_type22
 13084      00000000 
 13085 4018 00       		.byte	0
 13086 4019 05       		.byte	5
 13087 401a 00000000 		.zero	6
 13087      0000
 13088 4020 00000000 		.zero	32
 13088      00000000 
 13088      00000000 
 13088      00000000 
 13088      00000000 
 13089              		.data
 13090              		.align 32
 13093              	.Lubsan_type48:
 13096 0be4 27636F6E 		.string	"'const struct new_allocator'"
 13096      73742073 
 13096      74727563 
 13096      74206E65 
 13096      775F616C 
 13097 0c01 00000000 		.zero	63
 13097      00000000 
 13097      00000000 
 13097      00000000 
 13097      00000000 
 13098              		.section	.data.rel.local
 13099              		.align 32
 13102              	.Lubsan_data639:
 13103 4040 00000000 		.quad	.LC10
 13103      00000000 
 13104 4048 8D000000 		.long	141
 13105 404c 22000000 		.long	34
 13106 4050 00000000 		.quad	.Lubsan_type48
 13106      00000000 
 13107 4058 00       		.byte	0
 13108 4059 02       		.byte	2
 13109 405a 00000000 		.zero	6
 13109      0000
 13110 4060 00000000 		.zero	32
 13110      00000000 
 13110      00000000 
 13110      00000000 
 13110      00000000 
 13111              		.section	.text._ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS5_,"axG",@progbits
 13112              		.align 2
 13113              		.weak	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS5_
 13115              	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS5_:
 13116              	.LASANPC2929:
 13117              	.LFB2929:
 140:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 13118              		.loc 6 140 7
 13119              		.cfi_startproc
 13120 0000 F30F1EFA 		endbr64
 13121 0004 55       		pushq	%rbp
 13122              		.cfi_def_cfa_offset 16
 13123              		.cfi_offset 6, -16
 13124 0005 4889E5   		movq	%rsp, %rbp
 13125              		.cfi_def_cfa_register 6
 13126 0008 4883EC10 		subq	$16, %rsp
 13127 000c 48897DF8 		movq	%rdi, -8(%rbp)
 13128 0010 488975F0 		movq	%rsi, -16(%rbp)
 13129              	.LBB25:
 141:/usr/include/c++/9/bits/allocator.h **** 
 13130              		.loc 6 141 34
 13131 0014 48837DF8 		cmpq	$0, -8(%rbp)
 13131      00
 13132 0019 7511     		jne	.L825
 13133 001b BE000000 		movl	$0, %esi
 13133      00
 13134 0020 488D3D00 		leaq	.Lubsan_data638(%rip), %rdi
 13134      000000
 13135 0027 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13135      00
 13136              	.L825:
 13137 002c 48837DF0 		cmpq	$0, -16(%rbp)
 13137      00
 13138 0031 7511     		jne	.L826
 13139 0033 BE000000 		movl	$0, %esi
 13139      00
 13140 0038 488D3D00 		leaq	.Lubsan_data639(%rip), %rdi
 13140      000000
 13141 003f E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13141      00
 13142              	.L826:
 13143 0044 488B55F0 		movq	-16(%rbp), %rdx
 13144 0048 488B45F8 		movq	-8(%rbp), %rax
 13145 004c 4889D6   		movq	%rdx, %rsi
 13146 004f 4889C7   		movq	%rax, %rdi
 13147 0052 E8000000 		call	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS7_
 13147      00
 13148              	.LBE25:
 141:/usr/include/c++/9/bits/allocator.h **** 
 13149              		.loc 6 141 38
 13150 0057 90       		nop
 13151 0058 C9       		leave
 13152              		.cfi_def_cfa 7, 8
 13153 0059 C3       		ret
 13154              		.cfi_endproc
 13155              	.LFE2929:
 13157              		.weak	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_
 13158              		.set	_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_,_ZNSaINSt7__cxx1112basic_
 13159              		.data
 13160              		.align 32
 13163              	.Lubsan_type49:
 13166 0c44 27636F6E 		.string	"'const struct allocator_type'"
 13166      73742073 
 13166      74727563 
 13166      7420616C 
 13166      6C6F6361 
 13167 0c62 00000000 		.zero	62
 13167      00000000 
 13167      00000000 
 13167      00000000 
 13167      00000000 
 13168              		.section	.data.rel.local
 13169              		.align 32
 13172              	.Lubsan_data640:
 13173 4080 00000000 		.quad	.LC3
 13173      00000000 
 13174 4088 F4060000 		.long	1780
 13175 408c 33000000 		.long	51
 13176 4090 00000000 		.quad	.Lubsan_type49
 13176      00000000 
 13177 4098 00       		.byte	0
 13178 4099 02       		.byte	2
 13179 409a 00000000 		.zero	6
 13179      0000
 13180 40a0 00000000 		.zero	32
 13180      00000000 
 13180      00000000 
 13180      00000000 
 13180      00000000 
 13181              		.align 32
 13184              	.Lubsan_data641:
 13185 40c0 00000000 		.quad	.LC3
 13185      00000000 
 13186 40c8 F5060000 		.long	1781
 13187 40cc 29000000 		.long	41
 13188 40d0 00000000 		.quad	.Lubsan_type47
 13188      00000000 
 13189 40d8 03       		.byte	3
 13190 40d9 00       		.byte	0
 13191 40da 00000000 		.zero	6
 13191      0000
 13192 40e0 00000000 		.zero	32
 13192      00000000 
 13192      00000000 
 13192      00000000 
 13192      00000000 
 13193              		.section	.rodata
 13194              		.align 8
 13195              	.LC31:
 13196 09a0 32203332 		.string	"2 32 8 14 __diffmax:1778 64 8 15 __allocmax:1780"
 13196      20382031 
 13196      34205F5F 
 13196      64696666 
 13196      6D61783A 
 13197              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_s
 13198              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_
 13200              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_:
 13201              	.LASANPC2931:
 13202              	.LFB2931:
1771:/usr/include/c++/9/bits/stl_vector.h **** 
1772:/usr/include/c++/9/bits/stl_vector.h ****       static size_type
1773:/usr/include/c++/9/bits/stl_vector.h ****       _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 13203              		.loc 4 1773 7
 13204              		.cfi_startproc
 13205 0000 F30F1EFA 		endbr64
 13206 0004 55       		pushq	%rbp
 13207              		.cfi_def_cfa_offset 16
 13208              		.cfi_offset 6, -16
 13209 0005 4889E5   		movq	%rsp, %rbp
 13210              		.cfi_def_cfa_register 6
 13211 0008 4156     		pushq	%r14
 13212 000a 4155     		pushq	%r13
 13213 000c 4154     		pushq	%r12
 13214 000e 53       		pushq	%rbx
 13215 000f 4881EC90 		subq	$144, %rsp
 13215      000000
 13216              		.cfi_offset 14, -24
 13217              		.cfi_offset 13, -32
 13218              		.cfi_offset 12, -40
 13219              		.cfi_offset 3, -48
 13220 0016 4889BD58 		movq	%rdi, -168(%rbp)
 13220      FFFFFF
 13221 001d 488D9D60 		leaq	-160(%rbp), %rbx
 13221      FFFFFF
 13222 0024 4989DE   		movq	%rbx, %r14
 13223 0027 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 13223      000000
 13224 002e 7412     		je	.L827
 13225 0030 BF600000 		movl	$96, %edi
 13225      00
 13226 0035 E8000000 		call	__asan_stack_malloc_1@PLT
 13226      00
 13227              	.LVL20:
 13228 003a 4885C0   		testq	%rax, %rax
 13229 003d 7403     		je	.L827
 13230 003f 4889C3   		movq	%rax, %rbx
 13231              	.L827:
 13232 0042 488D8380 		leaq	128(%rbx), %rax
 13232      000000
 13233 0049 4989C5   		movq	%rax, %r13
 13234 004c 48C703B3 		movq	$1102416563, (%rbx)
 13234      8AB541
 13235 0053 488D0500 		leaq	.LC31(%rip), %rax
 13235      000000
 13236 005a 48894308 		movq	%rax, 8(%rbx)
 13237 005e 488D059B 		leaq	.LASANPC2931(%rip), %rax
 13237      FFFFFF
 13238 0065 48894310 		movq	%rax, 16(%rbx)
 13239 0069 4989DC   		movq	%rbx, %r12
 13240 006c 49C1EC03 		shrq	$3, %r12
 13241 0070 41C78424 		movl	$-235802127, 2147450880(%r12)
 13241      0080FF7F 
 13241      F1F1F1F1 
 13242 007c 41C78424 		movl	$-218959360, 2147450884(%r12)
 13242      0480FF7F 
 13242      00F2F2F2 
 13243 0088 41C78424 		movl	$-202116352, 2147450888(%r12)
 13243      0880FF7F 
 13243      00F3F3F3 
 13244              		.loc 4 1773 7
 13245 0094 64488B04 		movq	%fs:40, %rax
 13245      25280000 
 13245      00
 13246 009d 488945D8 		movq	%rax, -40(%rbp)
 13247 00a1 31C0     		xorl	%eax, %eax
1774:/usr/include/c++/9/bits/stl_vector.h ****       {
1775:/usr/include/c++/9/bits/stl_vector.h **** 	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
1776:/usr/include/c++/9/bits/stl_vector.h **** 	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
1777:/usr/include/c++/9/bits/stl_vector.h **** 	// (even if std::allocator_traits::max_size says we can).
1778:/usr/include/c++/9/bits/stl_vector.h **** 	const size_t __diffmax
 13248              		.loc 4 1778 15
 13249 00a3 498D45A0 		leaq	-96(%r13), %rax
 13250 00a7 4889C2   		movq	%rax, %rdx
 13251 00aa 48C1EA03 		shrq	$3, %rdx
 13252 00ae 4881C200 		addq	$2147450880, %rdx
 13252      80FF7F
 13253 00b5 0FB612   		movzbl	(%rdx), %edx
 13254 00b8 84D2     		testb	%dl, %dl
 13255 00ba 7408     		je	.L831
 13256 00bc 4889C7   		movq	%rax, %rdi
 13257 00bf E8000000 		call	__asan_report_store8@PLT
 13257      00
 13258              	.L831:
 13259 00c4 48B8FFFF 		movabsq	$288230376151711743, %rax
 13259      FFFFFFFF 
 13259      FF03
 13260 00ce 498945A0 		movq	%rax, -96(%r13)
1779:/usr/include/c++/9/bits/stl_vector.h **** 	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
1780:/usr/include/c++/9/bits/stl_vector.h **** 	const size_t __allocmax = _Alloc_traits::max_size(__a);
 13261              		.loc 4 1780 51
 13262 00d2 4883BD58 		cmpq	$0, -168(%rbp)
 13262      FFFFFF00 
 13263 00da 7511     		jne	.L832
 13264 00dc BE000000 		movl	$0, %esi
 13264      00
 13265 00e1 488D3D00 		leaq	.Lubsan_data640(%rip), %rdi
 13265      000000
 13266 00e8 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13266      00
 13267              	.L832:
 13268 00ed 488B8558 		movq	-168(%rbp), %rax
 13268      FFFFFF
 13269 00f4 4889C7   		movq	%rax, %rdi
 13270 00f7 E8000000 		call	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERK
 13270      00
 13271              		.loc 4 1780 15
 13272 00fc 498D55C0 		leaq	-64(%r13), %rdx
 13273 0100 4889D1   		movq	%rdx, %rcx
 13274 0103 48C1E903 		shrq	$3, %rcx
 13275 0107 4881C100 		addq	$2147450880, %rcx
 13275      80FF7F
 13276 010e 0FB609   		movzbl	(%rcx), %ecx
 13277 0111 84C9     		testb	%cl, %cl
 13278 0113 7408     		je	.L833
 13279 0115 4889D7   		movq	%rdx, %rdi
 13280 0118 E8000000 		call	__asan_report_store8@PLT
 13280      00
 13281              	.L833:
 13282 011d 498945C0 		movq	%rax, -64(%r13)
1781:/usr/include/c++/9/bits/stl_vector.h **** 	return (std::min)(__diffmax, __allocmax);
 13283              		.loc 4 1781 41
 13284 0121 498D45C0 		leaq	-64(%r13), %rax
 13285 0125 498D55A0 		leaq	-96(%r13), %rdx
 13286 0129 4889C6   		movq	%rax, %rsi
 13287 012c 4889D7   		movq	%rdx, %rdi
 13288 012f E8000000 		call	_ZSt3minImERKT_S2_S2_
 13288      00
 13289 0134 4989C5   		movq	%rax, %r13
 13290 0137 4C89E8   		movq	%r13, %rax
 13291 013a 4D85ED   		testq	%r13, %r13
 13292 013d 740B     		je	.L834
 13293 013f 4889C2   		movq	%rax, %rdx
 13294 0142 83E207   		andl	$7, %edx
 13295 0145 4885D2   		testq	%rdx, %rdx
 13296 0148 740F     		je	.L835
 13297              	.L834:
 13298 014a 4889C6   		movq	%rax, %rsi
 13299 014d 488D3D00 		leaq	.Lubsan_data641(%rip), %rdi
 13299      000000
 13300 0154 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13300      00
 13301              	.L835:
 13302 0159 4C89E8   		movq	%r13, %rax
 13303 015c 4889C2   		movq	%rax, %rdx
 13304 015f 48C1EA03 		shrq	$3, %rdx
 13305 0163 4881C200 		addq	$2147450880, %rdx
 13305      80FF7F
 13306 016a 0FB612   		movzbl	(%rdx), %edx
 13307 016d 84D2     		testb	%dl, %dl
 13308 016f 7408     		je	.L836
 13309 0171 4889C7   		movq	%rax, %rdi
 13310 0174 E8000000 		call	__asan_report_load8@PLT
 13310      00
 13311              	.L836:
 13312 0179 498B4500 		movq	0(%r13), %rax
 13313 017d 4889C2   		movq	%rax, %rdx
1773:/usr/include/c++/9/bits/stl_vector.h ****       {
 13314              		.loc 4 1773 7
 13315 0180 4939DE   		cmpq	%rbx, %r14
 13316 0183 742E     		je	.L828
 13317 0185 48C7030E 		movq	$1172321806, (%rbx)
 13317      36E045
 13318 018c 48B8F5F5 		movabsq	$-723401728380766731, %rax
 13318      F5F5F5F5 
 13318      F5F5
 13319 0196 49898424 		movq	%rax, 2147450880(%r12)
 13319      0080FF7F 
 13320 019e 41C78424 		movl	$-168430091, 2147450888(%r12)
 13320      0880FF7F 
 13320      F5F5F5F5 
 13321 01aa 488B4378 		movq	120(%rbx), %rax
 13322 01ae C60000   		movb	$0, (%rax)
 13323 01b1 EB18     		jmp	.L829
 13324              	.L828:
 13325 01b3 49C78424 		movq	$0, 2147450880(%r12)
 13325      0080FF7F 
 13325      00000000 
 13326 01bf 41C78424 		movl	$0, 2147450888(%r12)
 13326      0880FF7F 
 13326      00000000 
 13327              	.L829:
1782:/usr/include/c++/9/bits/stl_vector.h ****       }
 13328              		.loc 4 1782 7
 13329 01cb 488B45D8 		movq	-40(%rbp), %rax
 13330 01cf 64483304 		xorq	%fs:40, %rax
 13330      25280000 
 13330      00
 13331 01d8 7405     		je	.L838
 13332 01da E8000000 		call	__stack_chk_fail@PLT
 13332      00
 13333              	.L838:
 13334 01df 4889D0   		movq	%rdx, %rax
 13335 01e2 4881C490 		addq	$144, %rsp
 13335      000000
 13336 01e9 5B       		popq	%rbx
 13337 01ea 415C     		popq	%r12
 13338 01ec 415D     		popq	%r13
 13339 01ee 415E     		popq	%r14
 13340 01f0 5D       		popq	%rbp
 13341              		.cfi_def_cfa 7, 8
 13342 01f1 C3       		ret
 13343              		.cfi_endproc
 13344              	.LFE2931:
 13346              		.section	.data.rel.local
 13347              		.align 32
 13350              	.Lubsan_data642:
 13351 4100 00000000 		.quad	.LC18
 13351      00000000 
 13352 4108 BB010000 		.long	443
 13353 410c 20000000 		.long	32
 13354 4110 00000000 		.quad	.Lubsan_type22
 13354      00000000 
 13355 4118 00       		.byte	0
 13356 4119 04       		.byte	4
 13357 411a 00000000 		.zero	6
 13357      0000
 13358 4120 00000000 		.zero	32
 13358      00000000 
 13358      00000000 
 13358      00000000 
 13358      00000000 
 13359              		.section	.text._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8a
 13360              		.weak	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateER
 13362              	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m:
 13363              	.LASANPC2932:
 13364              	.LFB2932:
 442:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 13365              		.loc 13 442 7
 13366              		.cfi_startproc
 13367 0000 F30F1EFA 		endbr64
 13368 0004 55       		pushq	%rbp
 13369              		.cfi_def_cfa_offset 16
 13370              		.cfi_offset 6, -16
 13371 0005 4889E5   		movq	%rsp, %rbp
 13372              		.cfi_def_cfa_register 6
 13373 0008 4883EC10 		subq	$16, %rsp
 13374 000c 48897DF8 		movq	%rdi, -8(%rbp)
 13375 0010 488975F0 		movq	%rsi, -16(%rbp)
 443:/usr/include/c++/9/bits/alloc_traits.h **** 
 13376              		.loc 13 443 32
 13377 0014 48837DF8 		cmpq	$0, -8(%rbp)
 13377      00
 13378 0019 7511     		jne	.L840
 13379 001b BE000000 		movl	$0, %esi
 13379      00
 13380 0020 488D3D00 		leaq	.Lubsan_data642(%rip), %rdi
 13380      000000
 13381 0027 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13381      00
 13382              	.L840:
 13383 002c 488B4DF0 		movq	-16(%rbp), %rcx
 13384 0030 488B45F8 		movq	-8(%rbp), %rax
 13385 0034 BA000000 		movl	$0, %edx
 13385      00
 13386 0039 4889CE   		movq	%rcx, %rsi
 13387 003c 4889C7   		movq	%rax, %rdi
 13388 003f E8000000 		call	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEm
 13388      00
 443:/usr/include/c++/9/bits/alloc_traits.h **** 
 13389              		.loc 13 443 35
 13390 0044 C9       		leave
 13391              		.cfi_def_cfa 7, 8
 13392 0045 C3       		ret
 13393              		.cfi_endproc
 13394              	.LFE2932:
 13396              		.section	.text._ZSt18uninitialized_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_
 13397              		.weak	_ZSt18uninitialized_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET0_T_SA_
 13399              	_ZSt18uninitialized_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET0_T_SA_S9_:
 13400              	.LASANPC2933:
 13401              	.LFB2933:
 115:/usr/include/c++/9/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 13402              		.loc 16 115 5
 13403              		.cfi_startproc
 13404 0000 F30F1EFA 		endbr64
 13405 0004 55       		pushq	%rbp
 13406              		.cfi_def_cfa_offset 16
 13407              		.cfi_offset 6, -16
 13408 0005 4889E5   		movq	%rsp, %rbp
 13409              		.cfi_def_cfa_register 6
 13410 0008 4883EC30 		subq	$48, %rsp
 13411 000c 48897DE8 		movq	%rdi, -24(%rbp)
 13412 0010 488975E0 		movq	%rsi, -32(%rbp)
 13413 0014 488955D8 		movq	%rdx, -40(%rbp)
 134:/usr/include/c++/9/bits/stl_uninitialized.h **** #endif
 13414              		.loc 16 134 18
 13415 0018 C645FF01 		movb	$1, -1(%rbp)
 140:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 13416              		.loc 16 140 15
 13417 001c 488B55D8 		movq	-40(%rbp), %rdx
 13418 0020 488B4DE0 		movq	-32(%rbp), %rcx
 13419 0024 488B45E8 		movq	-24(%rbp), %rax
 13420 0028 4889CE   		movq	%rcx, %rsi
 13421 002b 4889C7   		movq	%rax, %rdi
 13422 002e E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traits
 13422      00
 141:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 13423              		.loc 16 141 5
 13424 0033 C9       		leave
 13425              		.cfi_def_cfa 7, 8
 13426 0034 C3       		ret
 13427              		.cfi_endproc
 13428              	.LFE2933:
 13430              		.section	.rodata
 13431 09d1 00000000 		.align 32
 13431      00000000 
 13431      00000000 
 13431      000000
 13432              	.LC32:
 13433 09e0 2F757372 		.string	"/usr/include/c++/9/bits/stl_construct.h"
 13433      2F696E63 
 13433      6C756465 
 13433      2F632B2B 
 13433      2F392F62 
 13434 0a08 00000000 		.zero	56
 13434      00000000 
 13434      00000000 
 13434      00000000 
 13434      00000000 
 13435              		.section	.data.rel.local
 13436              		.align 32
 13439              	.Lubsan_data643:
 13440 4140 00000000 		.quad	.LC32
 13440      00000000 
 13441 4148 6C000000 		.long	108
 13442 414c 13000000 		.long	19
 13443 4150 00000000 		.quad	.Lubsan_type5
 13443      00000000 
 13444 4158 03       		.byte	3
 13445 4159 02       		.byte	2
 13446 415a 00000000 		.zero	6
 13446      0000
 13447 4160 00000000 		.zero	32
 13447      00000000 
 13447      00000000 
 13447      00000000 
 13447      00000000 
 13448              		.align 32
 13451              	.Lubsan_data644:
 13452 4180 00000000 		.quad	.LC32
 13452      00000000 
 13453 4188 6B000000 		.long	107
 13454 418c 04000000 		.long	4
 13455 4190 00000000 		.zero	48
 13455      00000000 
 13455      00000000 
 13455      00000000 
 13455      00000000 
 13456              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcES
 13457              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEv
 13459              	_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:
 13460              	.LASANPC2934:
 13461              	.LFB2934:
 105:/usr/include/c++/9/bits/stl_construct.h **** 	{
 13462              		.loc 12 105 9
 13463              		.cfi_startproc
 13464 0000 F30F1EFA 		endbr64
 13465 0004 55       		pushq	%rbp
 13466              		.cfi_def_cfa_offset 16
 13467              		.cfi_offset 6, -16
 13468 0005 4889E5   		movq	%rsp, %rbp
 13469              		.cfi_def_cfa_register 6
 13470 0008 53       		pushq	%rbx
 13471 0009 4883EC18 		subq	$24, %rsp
 13472              		.cfi_offset 3, -24
 13473 000d 48897DE8 		movq	%rdi, -24(%rbp)
 13474 0011 488975E0 		movq	%rsi, -32(%rbp)
 13475              	.L849:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 13476              		.loc 12 107 19 discriminator 2
 13477 0015 488B45E8 		movq	-24(%rbp), %rax
 13478 0019 483B45E0 		cmpq	-32(%rbp), %rax
 13479 001d 745E     		je	.L850
 108:/usr/include/c++/9/bits/stl_construct.h **** 	}
 13480              		.loc 12 108 19 discriminator 1
 13481 001f 488B5DE8 		movq	-24(%rbp), %rbx
 13482 0023 4889D8   		movq	%rbx, %rax
 13483 0026 4885DB   		testq	%rbx, %rbx
 13484 0029 740B     		je	.L846
 13485 002b 4889C2   		movq	%rax, %rdx
 13486 002e 83E207   		andl	$7, %edx
 13487 0031 4885D2   		testq	%rdx, %rdx
 13488 0034 740F     		je	.L847
 13489              	.L846:
 108:/usr/include/c++/9/bits/stl_construct.h **** 	}
 13490              		.loc 12 108 19 is_stmt 0
 13491 0036 4889C6   		movq	%rax, %rsi
 13492 0039 488D3D00 		leaq	.Lubsan_data643(%rip), %rdi
 13492      000000
 13493 0040 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13493      00
 13494              	.L847:
 108:/usr/include/c++/9/bits/stl_construct.h **** 	}
 13495              		.loc 12 108 19 discriminator 1
 13496 0045 4889DF   		movq	%rbx, %rdi
 13497 0048 E8000000 		call	_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_
 13497      00
 13498 004d 4889C7   		movq	%rax, %rdi
 13499 0050 E8000000 		call	_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_
 13499      00
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 13500              		.loc 12 107 4 is_stmt 1 discriminator 1
 13501 0055 488B45E8 		movq	-24(%rbp), %rax
 13502 0059 488D5020 		leaq	32(%rax), %rdx
 13503 005d 4883F8E0 		cmpq	$-32, %rax
 13504 0061 7213     		jb	.L848
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 13505              		.loc 12 107 4 is_stmt 0
 13506 0063 488B45E8 		movq	-24(%rbp), %rax
 13507 0067 4889C6   		movq	%rax, %rsi
 13508 006a 488D3D00 		leaq	.Lubsan_data644(%rip), %rdi
 13508      000000
 13509 0071 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 13509      00
 13510              	.L848:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 13511              		.loc 12 107 4 discriminator 1
 13512 0076 488345E8 		addq	$32, -24(%rbp)
 13512      20
 13513 007b EB98     		jmp	.L849
 13514              	.L850:
 109:/usr/include/c++/9/bits/stl_construct.h ****     };
 13515              		.loc 12 109 2 is_stmt 1
 13516 007d 90       		nop
 13517 007e 4883C418 		addq	$24, %rsp
 13518 0082 5B       		popq	%rbx
 13519 0083 5D       		popq	%rbp
 13520              		.cfi_def_cfa 7, 8
 13521 0084 C3       		ret
 13522              		.cfi_endproc
 13523              	.LFE2934:
 13525              		.section	.text._ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1
 13526              		.align 2
 13527              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10dealloca
 13529              	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_
 13530              	.LASANPC2935:
 13531              	.LFB2935:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 13532              		.loc 9 119 7
 13533              		.cfi_startproc
 13534 0000 F30F1EFA 		endbr64
 13535 0004 55       		pushq	%rbp
 13536              		.cfi_def_cfa_offset 16
 13537              		.cfi_offset 6, -16
 13538 0005 4889E5   		movq	%rsp, %rbp
 13539              		.cfi_def_cfa_register 6
 13540 0008 4883EC20 		subq	$32, %rsp
 13541 000c 48897DF8 		movq	%rdi, -8(%rbp)
 13542 0010 488975F0 		movq	%rsi, -16(%rbp)
 13543 0014 488955E8 		movq	%rdx, -24(%rbp)
 128:/usr/include/c++/9/ext/new_allocator.h ****       }
 13544              		.loc 9 128 19
 13545 0018 488B45F0 		movq	-16(%rbp), %rax
 13546 001c 4889C7   		movq	%rax, %rdi
 13547 001f E8000000 		call	_ZdlPv@PLT
 13547      00
 129:/usr/include/c++/9/ext/new_allocator.h **** 
 13548              		.loc 9 129 7
 13549 0024 C9       		leave
 13550              		.cfi_def_cfa 7, 8
 13551 0025 C3       		ret
 13552              		.cfi_endproc
 13553              	.LFE2935:
 13555              		.section	.data.rel.local
 13556              		.align 32
 13559              	.Lubsan_data645:
 13560 41c0 00000000 		.quad	.LC3
 13560      00000000 
 13561 41c8 99030000 		.long	921
 13562 41cc 2F000000 		.long	47
 13563 41d0 00000000 		.quad	.Lubsan_type44
 13563      00000000 
 13564 41d8 03       		.byte	3
 13565 41d9 03       		.byte	3
 13566 41da 00000000 		.zero	6
 13566      0000
 13567 41e0 00000000 		.zero	32
 13567      00000000 
 13567      00000000 
 13567      00000000 
 13567      00000000 
 13568              		.data
 13569              		.align 32
 13572              	.Lubsan_type50:
 13575 0ca4 27636F6E 		.string	"'const struct _Vector_base'"
 13575      73742073 
 13575      74727563 
 13575      74205F56 
 13575      6563746F 
 13576 0cc0 00000000 		.zero	32
 13576      00000000 
 13576      00000000 
 13576      00000000 
 13576      00000000 
 13577              		.section	.data.rel.local
 13578              		.align 32
 13581              	.Lubsan_data646:
 13582 4200 00000000 		.quad	.LC3
 13582      00000000 
 13583 4208 99030000 		.long	921
 13584 420c 2F000000 		.long	47
 13585 4210 00000000 		.quad	.Lubsan_type50
 13585      00000000 
 13586 4218 03       		.byte	3
 13587 4219 04       		.byte	4
 13588 421a 00000000 		.zero	6
 13588      0000
 13589 4220 00000000 		.zero	32
 13589      00000000 
 13589      00000000 
 13589      00000000 
 13589      00000000 
 13590              		.align 32
 13593              	.Lubsan_data647:
 13594 4240 00000000 		.quad	.LC3
 13594      00000000 
 13595 4248 99030000 		.long	921
 13596 424c 2F000000 		.long	47
 13597 4250 00000000 		.quad	.Lubsan_type44
 13597      00000000 
 13598 4258 03       		.byte	3
 13599 4259 03       		.byte	3
 13600 425a 00000000 		.zero	6
 13600      0000
 13601 4260 00000000 		.zero	32
 13601      00000000 
 13601      00000000 
 13601      00000000 
 13601      00000000 
 13602              		.data
 13603              		.align 32
 13606              	.Lubsan_type51:
 13609 0ce4 27636F6E 		.string	"'const struct _Tp_alloc_type'"
 13609      73742073 
 13609      74727563 
 13609      74205F54 
 13609      705F616C 
 13610 0d02 00000000 		.zero	62
 13610      00000000 
 13610      00000000 
 13610      00000000 
 13610      00000000 
 13611              		.section	.data.rel.local
 13612              		.align 32
 13615              	.Lubsan_data648:
 13616 4280 00000000 		.quad	.LC3
 13616      00000000 
 13617 4288 99030000 		.long	921
 13618 428c 1B000000 		.long	27
 13619 4290 00000000 		.quad	.Lubsan_type51
 13619      00000000 
 13620 4298 00       		.byte	0
 13621 4299 02       		.byte	2
 13622 429a 00000000 		.zero	6
 13622      0000
 13623 42a0 00000000 		.zero	32
 13623      00000000 
 13623      00000000 
 13623      00000000 
 13623      00000000 
 13624              		.section	.text._ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_size
 13625              		.align 2
 13626              		.weak	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv
 13628              	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv:
 13629              	.LASANPC2936:
 13630              	.LFB2936:
 920:/usr/include/c++/9/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 13631              		.loc 4 920 7
 13632              		.cfi_startproc
 13633 0000 F30F1EFA 		endbr64
 13634 0004 55       		pushq	%rbp
 13635              		.cfi_def_cfa_offset 16
 13636              		.cfi_offset 6, -16
 13637 0005 4889E5   		movq	%rsp, %rbp
 13638              		.cfi_def_cfa_register 6
 13639 0008 53       		pushq	%rbx
 13640 0009 4883EC18 		subq	$24, %rsp
 13641              		.cfi_offset 3, -24
 13642 000d 48897DE8 		movq	%rdi, -24(%rbp)
 921:/usr/include/c++/9/bits/stl_vector.h **** 
 13643              		.loc 4 921 47
 13644 0011 488B45E8 		movq	-24(%rbp), %rax
 13645 0015 48837DE8 		cmpq	$0, -24(%rbp)
 13645      00
 13646 001a 740B     		je	.L854
 13647 001c 4889C2   		movq	%rax, %rdx
 13648 001f 83E207   		andl	$7, %edx
 13649 0022 4885D2   		testq	%rdx, %rdx
 13650 0025 740F     		je	.L855
 13651              	.L854:
 13652 0027 4889C6   		movq	%rax, %rsi
 13653 002a 488D3D00 		leaq	.Lubsan_data645(%rip), %rdi
 13653      000000
 13654 0031 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13654      00
 13655              	.L855:
 13656 0036 488B45E8 		movq	-24(%rbp), %rax
 13657 003a 4889C2   		movq	%rax, %rdx
 13658 003d 4885C0   		testq	%rax, %rax
 13659 0040 740B     		je	.L856
 13660 0042 4889D0   		movq	%rdx, %rax
 13661 0045 83E007   		andl	$7, %eax
 13662 0048 4885C0   		testq	%rax, %rax
 13663 004b 740F     		je	.L857
 13664              	.L856:
 13665 004d 4889D6   		movq	%rdx, %rsi
 13666 0050 488D3D00 		leaq	.Lubsan_data646(%rip), %rdi
 13666      000000
 13667 0057 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13667      00
 13668              	.L857:
 13669 005c 488B45E8 		movq	-24(%rbp), %rax
 13670 0060 48837DE8 		cmpq	$0, -24(%rbp)
 13670      00
 13671 0065 740B     		je	.L858
 13672 0067 4889C2   		movq	%rax, %rdx
 13673 006a 83E207   		andl	$7, %edx
 13674 006d 4885D2   		testq	%rdx, %rdx
 13675 0070 740F     		je	.L859
 13676              	.L858:
 13677 0072 4889C6   		movq	%rax, %rsi
 13678 0075 488D3D00 		leaq	.Lubsan_data647(%rip), %rdi
 13678      000000
 13679 007c E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13679      00
 13680              	.L859:
 13681 0081 488B45E8 		movq	-24(%rbp), %rax
 13682 0085 4889C7   		movq	%rax, %rdi
 13683 0088 E8000000 		call	_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_
 13683      00
 13684 008d 4889C3   		movq	%rax, %rbx
 921:/usr/include/c++/9/bits/stl_vector.h **** 
 13685              		.loc 4 921 27
 13686 0090 4885DB   		testq	%rbx, %rbx
 13687 0093 7511     		jne	.L860
 13688 0095 BE000000 		movl	$0, %esi
 13688      00
 13689 009a 488D3D00 		leaq	.Lubsan_data648(%rip), %rdi
 13689      000000
 13690 00a1 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13690      00
 13691              	.L860:
 13692 00a6 4889DF   		movq	%rbx, %rdi
 13693 00a9 E8000000 		call	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_
 13693      00
 921:/usr/include/c++/9/bits/stl_vector.h **** 
 13694              		.loc 4 921 52
 13695 00ae 4883C418 		addq	$24, %rsp
 13696 00b2 5B       		popq	%rbx
 13697 00b3 5D       		popq	%rbp
 13698              		.cfi_def_cfa 7, 8
 13699 00b4 C3       		ret
 13700              		.cfi_endproc
 13701              	.LFE2936:
 13703              		.section	.data.rel.local
 13704              		.align 32
 13707              	.Lubsan_data649:
 13708 42c0 00000000 		.quad	.LC3
 13708      00000000 
 13709 42c8 94030000 		.long	916
 13710 42cc 28000000 		.long	40
 13711 42d0 00000000 		.quad	.Lubsan_type44
 13711      00000000 
 13712 42d8 03       		.byte	3
 13713 42d9 03       		.byte	3
 13714 42da 00000000 		.zero	6
 13714      0000
 13715 42e0 00000000 		.zero	32
 13715      00000000 
 13715      00000000 
 13715      00000000 
 13715      00000000 
 13716              		.align 32
 13719              	.Lubsan_data650:
 13720 4300 00000000 		.quad	.LC3
 13720      00000000 
 13721 4308 94030000 		.long	916
 13722 430c 28000000 		.long	40
 13723 4310 00000000 		.zero	48
 13723      00000000 
 13723      00000000 
 13723      00000000 
 13723      00000000 
 13724              		.align 32
 13727              	.Lubsan_data651:
 13728 4340 00000000 		.quad	.LC3
 13728      00000000 
 13729 4348 94030000 		.long	916
 13730 434c 42000000 		.long	66
 13731 4350 00000000 		.quad	.Lubsan_type44
 13731      00000000 
 13732 4358 03       		.byte	3
 13733 4359 03       		.byte	3
 13734 435a 00000000 		.zero	6
 13734      0000
 13735 4360 00000000 		.zero	32
 13735      00000000 
 13735      00000000 
 13735      00000000 
 13735      00000000 
 13736              		.section	.text._ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv,"
 13737              		.align 2
 13738              		.weak	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv
 13740              	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv:
 13741              	.LASANPC2937:
 13742              	.LFB2937:
 915:/usr/include/c++/9/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 13743              		.loc 4 915 7
 13744              		.cfi_startproc
 13745 0000 F30F1EFA 		endbr64
 13746 0004 55       		pushq	%rbp
 13747              		.cfi_def_cfa_offset 16
 13748              		.cfi_offset 6, -16
 13749 0005 4889E5   		movq	%rsp, %rbp
 13750              		.cfi_def_cfa_register 6
 13751 0008 53       		pushq	%rbx
 13752 0009 4883EC18 		subq	$24, %rsp
 13753              		.cfi_offset 3, -24
 13754 000d 48897DE8 		movq	%rdi, -24(%rbp)
 916:/usr/include/c++/9/bits/stl_vector.h **** 
 13755              		.loc 4 916 40
 13756 0011 488B45E8 		movq	-24(%rbp), %rax
 13757 0015 48837DE8 		cmpq	$0, -24(%rbp)
 13757      00
 13758 001a 740B     		je	.L863
 13759 001c 4889C2   		movq	%rax, %rdx
 13760 001f 83E207   		andl	$7, %edx
 13761 0022 4885D2   		testq	%rdx, %rdx
 13762 0025 740F     		je	.L864
 13763              	.L863:
 13764 0027 4889C6   		movq	%rax, %rsi
 13765 002a 488D3D00 		leaq	.Lubsan_data649(%rip), %rdi
 13765      000000
 13766 0031 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13766      00
 13767              	.L864:
 13768 0036 488B45E8 		movq	-24(%rbp), %rax
 13769 003a 488D5008 		leaq	8(%rax), %rdx
 13770 003e 4883F8F8 		cmpq	$-8, %rax
 13771 0042 7213     		jb	.L865
 13772 0044 488B45E8 		movq	-24(%rbp), %rax
 13773 0048 4889C6   		movq	%rax, %rsi
 13774 004b 488D3D00 		leaq	.Lubsan_data650(%rip), %rdi
 13774      000000
 13775 0052 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 13775      00
 13776              	.L865:
 13777 0057 488B45E8 		movq	-24(%rbp), %rax
 13778 005b 4883C008 		addq	$8, %rax
 13779 005f 4889C2   		movq	%rax, %rdx
 13780 0062 48C1EA03 		shrq	$3, %rdx
 13781 0066 4881C200 		addq	$2147450880, %rdx
 13781      80FF7F
 13782 006d 0FB612   		movzbl	(%rdx), %edx
 13783 0070 84D2     		testb	%dl, %dl
 13784 0072 7408     		je	.L866
 13785 0074 4889C7   		movq	%rax, %rdi
 13786 0077 E8000000 		call	__asan_report_load8@PLT
 13786      00
 13787              	.L866:
 13788 007c 488B45E8 		movq	-24(%rbp), %rax
 13789 0080 488B5808 		movq	8(%rax), %rbx
 916:/usr/include/c++/9/bits/stl_vector.h **** 
 13790              		.loc 4 916 66
 13791 0084 488B45E8 		movq	-24(%rbp), %rax
 13792 0088 48837DE8 		cmpq	$0, -24(%rbp)
 13792      00
 13793 008d 740B     		je	.L867
 13794 008f 4889C2   		movq	%rax, %rdx
 13795 0092 83E207   		andl	$7, %edx
 13796 0095 4885D2   		testq	%rdx, %rdx
 13797 0098 740F     		je	.L868
 13798              	.L867:
 13799 009a 4889C6   		movq	%rax, %rsi
 13800 009d 488D3D00 		leaq	.Lubsan_data651(%rip), %rdi
 13800      000000
 13801 00a4 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13801      00
 13802              	.L868:
 13803 00a9 488B45E8 		movq	-24(%rbp), %rax
 13804 00ad 4889C2   		movq	%rax, %rdx
 13805 00b0 48C1EA03 		shrq	$3, %rdx
 13806 00b4 4881C200 		addq	$2147450880, %rdx
 13806      80FF7F
 13807 00bb 0FB612   		movzbl	(%rdx), %edx
 13808 00be 84D2     		testb	%dl, %dl
 13809 00c0 7408     		je	.L869
 13810 00c2 4889C7   		movq	%rax, %rdi
 13811 00c5 E8000000 		call	__asan_report_load8@PLT
 13811      00
 13812              	.L869:
 13813 00ca 488B45E8 		movq	-24(%rbp), %rax
 13814 00ce 488B00   		movq	(%rax), %rax
 916:/usr/include/c++/9/bits/stl_vector.h **** 
 13815              		.loc 4 916 50
 13816 00d1 4829C3   		subq	%rax, %rbx
 13817 00d4 4889D8   		movq	%rbx, %rax
 13818 00d7 48C1F805 		sarq	$5, %rax
 916:/usr/include/c++/9/bits/stl_vector.h **** 
 13819              		.loc 4 916 77
 13820 00db 4883C418 		addq	$24, %rsp
 13821 00df 5B       		popq	%rbx
 13822 00e0 5D       		popq	%rbp
 13823              		.cfi_def_cfa 7, 8
 13824 00e1 C3       		ret
 13825              		.cfi_endproc
 13826              	.LFE2937:
 13828              		.section	.rodata
 13829              		.align 32
 13830              	.LC33:
 13831 0a40 2F757372 		.string	"/usr/include/c++/9/bits/stl_algobase.h"
 13831      2F696E63 
 13831      6C756465 
 13831      2F632B2B 
 13831      2F392F62 
 13832 0a67 00000000 		.zero	57
 13832      00000000 
 13832      00000000 
 13832      00000000 
 13832      00000000 
 13833              		.section	.data.rel.local
 13834              		.align 32
 13837              	.Lubsan_data652:
 13838 4380 00000000 		.quad	.LC33
 13838      00000000 
 13839 4388 E3000000 		.long	227
 13840 438c 0F000000 		.long	15
 13841 4390 00000000 		.quad	.Lubsan_type47
 13841      00000000 
 13842 4398 03       		.byte	3
 13843 4399 00       		.byte	0
 13844 439a 00000000 		.zero	6
 13844      0000
 13845 43a0 00000000 		.zero	32
 13845      00000000 
 13845      00000000 
 13845      00000000 
 13845      00000000 
 13846              		.align 32
 13849              	.Lubsan_data653:
 13850 43c0 00000000 		.quad	.LC33
 13850      00000000 
 13851 43c8 E3000000 		.long	227
 13852 43cc 0F000000 		.long	15
 13853 43d0 00000000 		.quad	.Lubsan_type47
 13853      00000000 
 13854 43d8 03       		.byte	3
 13855 43d9 00       		.byte	0
 13856 43da 00000000 		.zero	6
 13856      0000
 13857 43e0 00000000 		.zero	32
 13857      00000000 
 13857      00000000 
 13857      00000000 
 13857      00000000 
 13858              		.section	.text._ZSt3maxImERKT_S2_S2_,"axG",@progbits,_ZSt3maxImERKT_S2_S2_,comdat
 13859              		.weak	_ZSt3maxImERKT_S2_S2_
 13861              	_ZSt3maxImERKT_S2_S2_:
 13862              	.LASANPC2938:
 13863              	.LFB2938:
 222:/usr/include/c++/9/bits/stl_algobase.h ****     {
 13864              		.loc 17 222 5
 13865              		.cfi_startproc
 13866 0000 F30F1EFA 		endbr64
 13867 0004 55       		pushq	%rbp
 13868              		.cfi_def_cfa_offset 16
 13869              		.cfi_offset 6, -16
 13870 0005 4889E5   		movq	%rsp, %rbp
 13871              		.cfi_def_cfa_register 6
 13872 0008 53       		pushq	%rbx
 13873 0009 4883EC18 		subq	$24, %rsp
 13874              		.cfi_offset 3, -24
 13875 000d 48897DE8 		movq	%rdi, -24(%rbp)
 13876 0011 488975E0 		movq	%rsi, -32(%rbp)
 227:/usr/include/c++/9/bits/stl_algobase.h **** 	return __b;
 13877              		.loc 17 227 15
 13878 0015 488B45E8 		movq	-24(%rbp), %rax
 13879 0019 48837DE8 		cmpq	$0, -24(%rbp)
 13879      00
 13880 001e 740B     		je	.L872
 13881 0020 4889C2   		movq	%rax, %rdx
 13882 0023 83E207   		andl	$7, %edx
 13883 0026 4885D2   		testq	%rdx, %rdx
 13884 0029 740F     		je	.L873
 13885              	.L872:
 13886 002b 4889C6   		movq	%rax, %rsi
 13887 002e 488D3D00 		leaq	.Lubsan_data652(%rip), %rdi
 13887      000000
 13888 0035 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13888      00
 13889              	.L873:
 13890 003a 488B45E8 		movq	-24(%rbp), %rax
 13891 003e 4889C2   		movq	%rax, %rdx
 13892 0041 48C1EA03 		shrq	$3, %rdx
 13893 0045 4881C200 		addq	$2147450880, %rdx
 13893      80FF7F
 13894 004c 0FB612   		movzbl	(%rdx), %edx
 13895 004f 84D2     		testb	%dl, %dl
 13896 0051 7408     		je	.L874
 13897 0053 4889C7   		movq	%rax, %rdi
 13898 0056 E8000000 		call	__asan_report_load8@PLT
 13898      00
 13899              	.L874:
 13900 005b 488B45E8 		movq	-24(%rbp), %rax
 13901 005f 488B18   		movq	(%rax), %rbx
 13902 0062 488B45E0 		movq	-32(%rbp), %rax
 13903 0066 48837DE0 		cmpq	$0, -32(%rbp)
 13903      00
 13904 006b 740B     		je	.L875
 13905 006d 4889C2   		movq	%rax, %rdx
 13906 0070 83E207   		andl	$7, %edx
 13907 0073 4885D2   		testq	%rdx, %rdx
 13908 0076 740F     		je	.L876
 13909              	.L875:
 13910 0078 4889C6   		movq	%rax, %rsi
 13911 007b 488D3D00 		leaq	.Lubsan_data653(%rip), %rdi
 13911      000000
 13912 0082 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13912      00
 13913              	.L876:
 13914 0087 488B45E0 		movq	-32(%rbp), %rax
 13915 008b 4889C2   		movq	%rax, %rdx
 13916 008e 48C1EA03 		shrq	$3, %rdx
 13917 0092 4881C200 		addq	$2147450880, %rdx
 13917      80FF7F
 13918 0099 0FB612   		movzbl	(%rdx), %edx
 13919 009c 84D2     		testb	%dl, %dl
 13920 009e 7408     		je	.L877
 13921 00a0 4889C7   		movq	%rax, %rdi
 13922 00a3 E8000000 		call	__asan_report_load8@PLT
 13922      00
 13923              	.L877:
 13924 00a8 488B45E0 		movq	-32(%rbp), %rax
 13925 00ac 488B00   		movq	(%rax), %rax
 227:/usr/include/c++/9/bits/stl_algobase.h **** 	return __b;
 13926              		.loc 17 227 7
 13927 00af 4839C3   		cmpq	%rax, %rbx
 13928 00b2 7306     		jnb	.L878
 228:/usr/include/c++/9/bits/stl_algobase.h ****       return __a;
 13929              		.loc 17 228 9
 13930 00b4 488B45E0 		movq	-32(%rbp), %rax
 13931 00b8 EB04     		jmp	.L879
 13932              	.L878:
 229:/usr/include/c++/9/bits/stl_algobase.h ****     }
 13933              		.loc 17 229 14
 13934 00ba 488B45E8 		movq	-24(%rbp), %rax
 13935              	.L879:
 230:/usr/include/c++/9/bits/stl_algobase.h **** 
 13936              		.loc 17 230 5
 13937 00be 4883C418 		addq	$24, %rsp
 13938 00c2 5B       		popq	%rbx
 13939 00c3 5D       		popq	%rbp
 13940              		.cfi_def_cfa 7, 8
 13941 00c4 C3       		ret
 13942              		.cfi_endproc
 13943              	.LFE2938:
 13945              		.section	.data.rel.local
 13946              		.align 32
 13949              	.Lubsan_data654:
 13950 4400 00000000 		.quad	.LC3
 13950      00000000 
 13951 4408 C5010000 		.long	453
 13952 440c 1A000000 		.long	26
 13953 4410 00000000 		.quad	.Lubsan_type6
 13953      00000000 
 13954 4418 00       		.byte	0
 13955 4419 02       		.byte	2
 13956 441a 00000000 		.zero	6
 13956      0000
 13957 4420 00000000 		.zero	32
 13957      00000000 
 13957      00000000 
 13957      00000000 
 13957      00000000 
 13958              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_re
 13959              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS
 13961              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8
 13962              	.LASANPC2939:
 13963              	.LFB2939:
 450:/usr/include/c++/9/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 13964              		.loc 4 450 7
 13965              		.cfi_startproc
 13966 0000 F30F1EFA 		endbr64
 13967 0004 55       		pushq	%rbp
 13968              		.cfi_def_cfa_offset 16
 13969              		.cfi_offset 6, -16
 13970 0005 4889E5   		movq	%rsp, %rbp
 13971              		.cfi_def_cfa_register 6
 13972 0008 4883EC20 		subq	$32, %rsp
 13973 000c 48897DF8 		movq	%rdi, -8(%rbp)
 13974 0010 488975F0 		movq	%rsi, -16(%rbp)
 13975 0014 488955E8 		movq	%rdx, -24(%rbp)
 13976 0018 48894DE0 		movq	%rcx, -32(%rbp)
 453:/usr/include/c++/9/bits/stl_vector.h ****       }
 13977              		.loc 4 453 26
 13978 001c 48837DE0 		cmpq	$0, -32(%rbp)
 13978      00
 13979 0021 7511     		jne	.L881
 13980 0023 BE000000 		movl	$0, %esi
 13980      00
 13981 0028 488D3D00 		leaq	.Lubsan_data654(%rip), %rdi
 13981      000000
 13982 002f E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 13982      00
 13983              	.L881:
 13984 0034 488B4DE0 		movq	-32(%rbp), %rcx
 13985 0038 488B55E8 		movq	-24(%rbp), %rdx
 13986 003c 488B75F0 		movq	-16(%rbp), %rsi
 13987 0040 488B45F8 		movq	-8(%rbp), %rax
 13988 0044 4889C7   		movq	%rax, %rdi
 13989 0047 E8000000 		call	_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8
 13989      00
 454:/usr/include/c++/9/bits/stl_vector.h **** 
 13990              		.loc 4 454 7
 13991 004c C9       		leave
 13992              		.cfi_def_cfa 7, 8
 13993 004d C3       		ret
 13994              		.cfi_endproc
 13995              	.LFE2939:
 13997              		.section	.data.rel.local
 13998              		.align 32
 14001              	.Lubsan_data655:
 14002 4440 00000000 		.quad	.LC25
 14002      00000000 
 14003 4448 98000000 		.long	152
 14004 444c 04000000 		.long	4
 14005 4450 00000000 		.quad	.Lubsan_type5
 14005      00000000 
 14006 4458 03       		.byte	3
 14007 4459 04       		.byte	4
 14008 445a 00000000 		.zero	6
 14008      0000
 14009 4460 00000000 		.zero	32
 14009      00000000 
 14009      00000000 
 14009      00000000 
 14009      00000000 
 14010              		.section	.text._ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7
 14011              		.align 2
 14012              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS
 14014              	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT
 14015              	.LASANPC2940:
 14016              	.LFB2940:
 147:/usr/include/c++/9/ext/new_allocator.h **** 
 148:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Up>
 149:/usr/include/c++/9/ext/new_allocator.h **** 	void
 150:/usr/include/c++/9/ext/new_allocator.h **** 	destroy(_Up* __p)
 14017              		.loc 9 150 2
 14018              		.cfi_startproc
 14019 0000 F30F1EFA 		endbr64
 14020 0004 55       		pushq	%rbp
 14021              		.cfi_def_cfa_offset 16
 14022              		.cfi_offset 6, -16
 14023 0005 4889E5   		movq	%rsp, %rbp
 14024              		.cfi_def_cfa_register 6
 14025 0008 53       		pushq	%rbx
 14026 0009 4883EC18 		subq	$24, %rsp
 14027              		.cfi_offset 3, -24
 14028 000d 48897DE8 		movq	%rdi, -24(%rbp)
 14029 0011 488975E0 		movq	%rsi, -32(%rbp)
 151:/usr/include/c++/9/ext/new_allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 152:/usr/include/c++/9/ext/new_allocator.h **** 	{ __p->~_Up(); }
 14030              		.loc 9 152 4
 14031 0015 488B5DE0 		movq	-32(%rbp), %rbx
 14032 0019 4889D8   		movq	%rbx, %rax
 14033 001c 4885DB   		testq	%rbx, %rbx
 14034 001f 740B     		je	.L884
 14035 0021 4889C2   		movq	%rax, %rdx
 14036 0024 83E207   		andl	$7, %edx
 14037 0027 4885D2   		testq	%rdx, %rdx
 14038 002a 740F     		je	.L885
 14039              	.L884:
 14040 002c 4889C6   		movq	%rax, %rsi
 14041 002f 488D3D00 		leaq	.Lubsan_data655(%rip), %rdi
 14041      000000
 14042 0036 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14042      00
 14043              	.L885:
 14044 003b 4889DF   		movq	%rbx, %rdi
 14045 003e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 14045      00
 14046              		.loc 9 152 17
 14047 0043 90       		nop
 14048 0044 4883C418 		addq	$24, %rsp
 14049 0048 5B       		popq	%rbx
 14050 0049 5D       		popq	%rbp
 14051              		.cfi_def_cfa 7, 8
 14052 004a C3       		ret
 14053              		.cfi_endproc
 14054              	.LFE2940:
 14056              		.section	.rodata
 14057              	.LC34:
 14058 0aa0 31203332 		.string	"1 32 8 8 __it:428"
 14058      20382038 
 14058      205F5F69 
 14058      743A3432 
 14058      3800
 14059              		.section	.text._ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11c
 14060              		.weak	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_trait
 14062              	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 14063              	.LASANPC2941:
 14064              	.LFB2941:
 14065              		.file 19 "/usr/include/c++/9/bits/cpp_type_traits.h"
   1:/usr/include/c++/9/bits/cpp_type_traits.h **** // The  -*- C++ -*- type traits classes for internal use in libstdc++
   2:/usr/include/c++/9/bits/cpp_type_traits.h **** 
   3:/usr/include/c++/9/bits/cpp_type_traits.h **** // Copyright (C) 2000-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/cpp_type_traits.h **** //
   5:/usr/include/c++/9/bits/cpp_type_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/cpp_type_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/cpp_type_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/cpp_type_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/cpp_type_traits.h **** // any later version.
  10:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  11:/usr/include/c++/9/bits/cpp_type_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/cpp_type_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/cpp_type_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/cpp_type_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  16:/usr/include/c++/9/bits/cpp_type_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/cpp_type_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/cpp_type_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  20:/usr/include/c++/9/bits/cpp_type_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/cpp_type_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/cpp_type_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/cpp_type_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  25:/usr/include/c++/9/bits/cpp_type_traits.h **** /** @file bits/cpp_type_traits.h
  26:/usr/include/c++/9/bits/cpp_type_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/cpp_type_traits.h ****  *  Do not attempt to use it directly. @headername{ext/type_traits}
  28:/usr/include/c++/9/bits/cpp_type_traits.h ****  */
  29:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  30:/usr/include/c++/9/bits/cpp_type_traits.h **** // Written by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>
  31:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  32:/usr/include/c++/9/bits/cpp_type_traits.h **** #ifndef _CPP_TYPE_TRAITS_H
  33:/usr/include/c++/9/bits/cpp_type_traits.h **** #define _CPP_TYPE_TRAITS_H 1
  34:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  35:/usr/include/c++/9/bits/cpp_type_traits.h **** #pragma GCC system_header
  36:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  37:/usr/include/c++/9/bits/cpp_type_traits.h **** #include <bits/c++config.h>
  38:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  39:/usr/include/c++/9/bits/cpp_type_traits.h **** //
  40:/usr/include/c++/9/bits/cpp_type_traits.h **** // This file provides some compile-time information about various types.
  41:/usr/include/c++/9/bits/cpp_type_traits.h **** // These representations were designed, on purpose, to be constant-expressions
  42:/usr/include/c++/9/bits/cpp_type_traits.h **** // and not types as found in <bits/type_traits.h>.  In particular, they
  43:/usr/include/c++/9/bits/cpp_type_traits.h **** // can be used in control structures and the optimizer hopefully will do
  44:/usr/include/c++/9/bits/cpp_type_traits.h **** // the obvious thing.
  45:/usr/include/c++/9/bits/cpp_type_traits.h **** //
  46:/usr/include/c++/9/bits/cpp_type_traits.h **** // Why integral expressions, and not functions nor types?
  47:/usr/include/c++/9/bits/cpp_type_traits.h **** // Firstly, these compile-time entities are used as template-arguments
  48:/usr/include/c++/9/bits/cpp_type_traits.h **** // so function return values won't work:  We need compile-time entities.
  49:/usr/include/c++/9/bits/cpp_type_traits.h **** // We're left with types and constant  integral expressions.
  50:/usr/include/c++/9/bits/cpp_type_traits.h **** // Secondly, from the point of view of ease of use, type-based compile-time
  51:/usr/include/c++/9/bits/cpp_type_traits.h **** // information is -not- *that* convenient.  One has to write lots of
  52:/usr/include/c++/9/bits/cpp_type_traits.h **** // overloaded functions and to hope that the compiler will select the right
  53:/usr/include/c++/9/bits/cpp_type_traits.h **** // one. As a net effect, the overall structure isn't very clear at first
  54:/usr/include/c++/9/bits/cpp_type_traits.h **** // glance.
  55:/usr/include/c++/9/bits/cpp_type_traits.h **** // Thirdly, partial ordering and overload resolution (of function templates)
  56:/usr/include/c++/9/bits/cpp_type_traits.h **** // is highly costly in terms of compiler-resource.  It is a Good Thing to
  57:/usr/include/c++/9/bits/cpp_type_traits.h **** // keep these resource consumption as least as possible.
  58:/usr/include/c++/9/bits/cpp_type_traits.h **** //
  59:/usr/include/c++/9/bits/cpp_type_traits.h **** // See valarray_array.h for a case use.
  60:/usr/include/c++/9/bits/cpp_type_traits.h **** //
  61:/usr/include/c++/9/bits/cpp_type_traits.h **** // -- Gaby (dosreis@cmla.ens-cachan.fr) 2000-03-06.
  62:/usr/include/c++/9/bits/cpp_type_traits.h **** //
  63:/usr/include/c++/9/bits/cpp_type_traits.h **** // Update 2005: types are also provided and <bits/type_traits.h> has been
  64:/usr/include/c++/9/bits/cpp_type_traits.h **** // removed.
  65:/usr/include/c++/9/bits/cpp_type_traits.h **** //
  66:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  67:/usr/include/c++/9/bits/cpp_type_traits.h **** extern "C++" {
  68:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  69:/usr/include/c++/9/bits/cpp_type_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/include/c++/9/bits/cpp_type_traits.h **** {
  71:/usr/include/c++/9/bits/cpp_type_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  73:/usr/include/c++/9/bits/cpp_type_traits.h ****   struct __true_type { };
  74:/usr/include/c++/9/bits/cpp_type_traits.h ****   struct __false_type { };
  75:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  76:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<bool>
  77:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __truth_type
  78:/usr/include/c++/9/bits/cpp_type_traits.h ****     { typedef __false_type __type; };
  79:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  80:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
  81:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __truth_type<true>
  82:/usr/include/c++/9/bits/cpp_type_traits.h ****     { typedef __true_type __type; };
  83:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  84:/usr/include/c++/9/bits/cpp_type_traits.h ****   // N.B. The conversions to bool are needed due to the issue
  85:/usr/include/c++/9/bits/cpp_type_traits.h ****   // explained in c++/19404.
  86:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<class _Sp, class _Tp>
  87:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __traitor
  88:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
  89:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
  90:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef typename __truth_type<__value>::__type __type;
  91:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
  92:/usr/include/c++/9/bits/cpp_type_traits.h **** 
  93:/usr/include/c++/9/bits/cpp_type_traits.h ****   // Compare for equality of types.
  94:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename, typename>
  95:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __are_same
  96:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
  97:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 0 };
  98:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __false_type __type;
  99:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 100:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 101:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 102:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __are_same<_Tp, _Tp>
 103:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 104:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 105:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 106:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 107:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 108:/usr/include/c++/9/bits/cpp_type_traits.h ****   // Holds if the template-argument is a void type.
 109:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 110:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_void
 111:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 112:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 0 };
 113:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __false_type __type;
 114:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 115:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 116:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 117:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_void<void>
 118:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 119:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 120:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 121:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 122:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 123:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 124:/usr/include/c++/9/bits/cpp_type_traits.h ****   // Integer types
 125:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 126:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 127:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer
 128:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 129:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 0 };
 130:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __false_type __type;
 131:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 132:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 133:/usr/include/c++/9/bits/cpp_type_traits.h ****   // Thirteen specializations (yes there are eleven standard integer
 134:/usr/include/c++/9/bits/cpp_type_traits.h ****   // types; <em>long long</em> and <em>unsigned long long</em> are
 135:/usr/include/c++/9/bits/cpp_type_traits.h ****   // supported as extensions).  Up to four target-specific __int<N>
 136:/usr/include/c++/9/bits/cpp_type_traits.h ****   // types are supported as well.
 137:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 138:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<bool>
 139:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 140:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 141:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 142:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 143:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 144:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 145:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<char>
 146:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 147:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 148:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 149:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 150:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 151:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 152:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<signed char>
 153:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 154:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 155:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 156:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 157:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 158:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 159:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<unsigned char>
 160:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 161:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 162:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 163:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 164:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 165:/usr/include/c++/9/bits/cpp_type_traits.h **** # ifdef _GLIBCXX_USE_WCHAR_T
 166:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 167:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<wchar_t>
 168:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 169:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 170:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 171:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 172:/usr/include/c++/9/bits/cpp_type_traits.h **** # endif
 173:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 174:/usr/include/c++/9/bits/cpp_type_traits.h **** #ifdef _GLIBCXX_USE_CHAR8_T
 175:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 176:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<char8_t>
 177:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 178:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 179:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 180:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 181:/usr/include/c++/9/bits/cpp_type_traits.h **** #endif
 182:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 183:/usr/include/c++/9/bits/cpp_type_traits.h **** #if __cplusplus >= 201103L
 184:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 185:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<char16_t>
 186:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 187:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 188:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 189:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 190:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 191:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 192:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<char32_t>
 193:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 194:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 195:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 196:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 197:/usr/include/c++/9/bits/cpp_type_traits.h **** #endif
 198:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 199:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 200:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<short>
 201:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 202:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 203:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 204:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 205:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 206:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 207:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<unsigned short>
 208:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 209:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 210:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 211:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 212:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 213:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 214:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<int>
 215:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 216:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 217:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 218:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 219:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 220:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 221:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<unsigned int>
 222:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 223:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 224:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 225:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 226:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 227:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 228:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<long>
 229:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 230:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 231:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 232:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 233:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 234:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 235:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<unsigned long>
 236:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 237:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 238:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 239:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 240:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 241:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 242:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<long long>
 243:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 244:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 245:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 246:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 247:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 248:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 249:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<unsigned long long>
 250:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 251:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 252:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 253:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 254:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 255:/usr/include/c++/9/bits/cpp_type_traits.h **** #define __INT_N(TYPE) 			\
 256:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>				\
 257:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<TYPE>		\
 258:/usr/include/c++/9/bits/cpp_type_traits.h ****     {					\
 259:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };		\
 260:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;	\
 261:/usr/include/c++/9/bits/cpp_type_traits.h ****     };					\
 262:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>				\
 263:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_integer<unsigned TYPE>	\
 264:/usr/include/c++/9/bits/cpp_type_traits.h ****     {					\
 265:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };		\
 266:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;	\
 267:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 268:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 269:/usr/include/c++/9/bits/cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_0
 270:/usr/include/c++/9/bits/cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_0)
 271:/usr/include/c++/9/bits/cpp_type_traits.h **** #endif
 272:/usr/include/c++/9/bits/cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_1
 273:/usr/include/c++/9/bits/cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_1)
 274:/usr/include/c++/9/bits/cpp_type_traits.h **** #endif
 275:/usr/include/c++/9/bits/cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_2
 276:/usr/include/c++/9/bits/cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_2)
 277:/usr/include/c++/9/bits/cpp_type_traits.h **** #endif
 278:/usr/include/c++/9/bits/cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_3
 279:/usr/include/c++/9/bits/cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_3)
 280:/usr/include/c++/9/bits/cpp_type_traits.h **** #endif
 281:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 282:/usr/include/c++/9/bits/cpp_type_traits.h **** #undef __INT_N
 283:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 284:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 285:/usr/include/c++/9/bits/cpp_type_traits.h ****   // Floating point types
 286:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 287:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 288:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_floating
 289:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 290:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 0 };
 291:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __false_type __type;
 292:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 293:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 294:/usr/include/c++/9/bits/cpp_type_traits.h ****   // three specializations (float, double and 'long double')
 295:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 296:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_floating<float>
 297:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 298:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 299:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 300:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 301:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 302:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 303:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_floating<double>
 304:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 305:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 306:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 307:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 308:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 309:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 310:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_floating<long double>
 311:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 312:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 313:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 314:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 315:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 316:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 317:/usr/include/c++/9/bits/cpp_type_traits.h ****   // Pointer types
 318:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 319:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 320:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_pointer
 321:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 322:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 0 };
 323:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __false_type __type;
 324:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 325:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 326:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 327:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_pointer<_Tp*>
 328:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 329:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 330:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 331:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 332:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 333:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 334:/usr/include/c++/9/bits/cpp_type_traits.h ****   // An arithmetic type is an integer type or a floating point type
 335:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 336:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 337:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_arithmetic
 338:/usr/include/c++/9/bits/cpp_type_traits.h ****     : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
 339:/usr/include/c++/9/bits/cpp_type_traits.h ****     { };
 340:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 341:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 342:/usr/include/c++/9/bits/cpp_type_traits.h ****   // A scalar type is an arithmetic type or a pointer type
 343:/usr/include/c++/9/bits/cpp_type_traits.h ****   // 
 344:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 345:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_scalar
 346:/usr/include/c++/9/bits/cpp_type_traits.h ****     : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
 347:/usr/include/c++/9/bits/cpp_type_traits.h ****     { };
 348:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 349:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 350:/usr/include/c++/9/bits/cpp_type_traits.h ****   // For use in std::copy and std::find overloads for streambuf iterators.
 351:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 352:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 353:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_char
 354:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 355:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 0 };
 356:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __false_type __type;
 357:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 358:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 359:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 360:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_char<char>
 361:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 362:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 363:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 364:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 365:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 366:/usr/include/c++/9/bits/cpp_type_traits.h **** #ifdef _GLIBCXX_USE_WCHAR_T
 367:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 368:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_char<wchar_t>
 369:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 370:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 371:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 372:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 373:/usr/include/c++/9/bits/cpp_type_traits.h **** #endif
 374:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 375:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 376:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_byte
 377:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 378:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 0 };
 379:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __false_type __type;
 380:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 381:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 382:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 383:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_byte<char>
 384:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 385:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 386:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 387:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 388:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 389:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 390:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_byte<signed char>
 391:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 392:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 393:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 394:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 395:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 396:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 397:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_byte<unsigned char>
 398:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 399:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 400:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 401:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 402:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 403:/usr/include/c++/9/bits/cpp_type_traits.h **** #if __cplusplus >= 201703L
 404:/usr/include/c++/9/bits/cpp_type_traits.h ****   enum class byte : unsigned char;
 405:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 406:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<>
 407:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_byte<byte>
 408:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 409:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 1 };
 410:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __true_type __type;
 411:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 412:/usr/include/c++/9/bits/cpp_type_traits.h **** #endif // C++17
 413:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 414:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 415:/usr/include/c++/9/bits/cpp_type_traits.h ****   // Move iterator type
 416:/usr/include/c++/9/bits/cpp_type_traits.h ****   //
 417:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Tp>
 418:/usr/include/c++/9/bits/cpp_type_traits.h ****     struct __is_move_iterator
 419:/usr/include/c++/9/bits/cpp_type_traits.h ****     {
 420:/usr/include/c++/9/bits/cpp_type_traits.h ****       enum { __value = 0 };
 421:/usr/include/c++/9/bits/cpp_type_traits.h ****       typedef __false_type __type;
 422:/usr/include/c++/9/bits/cpp_type_traits.h ****     };
 423:/usr/include/c++/9/bits/cpp_type_traits.h **** 
 424:/usr/include/c++/9/bits/cpp_type_traits.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 425:/usr/include/c++/9/bits/cpp_type_traits.h ****   // remove the move_iterator wrapper.
 426:/usr/include/c++/9/bits/cpp_type_traits.h ****   template<typename _Iterator>
 427:/usr/include/c++/9/bits/cpp_type_traits.h ****     inline _Iterator
 428:/usr/include/c++/9/bits/cpp_type_traits.h ****     __miter_base(_Iterator __it)
 14066              		.loc 19 428 5
 14067              		.cfi_startproc
 14068 0000 F30F1EFA 		endbr64
 14069 0004 55       		pushq	%rbp
 14070              		.cfi_def_cfa_offset 16
 14071              		.cfi_offset 6, -16
 14072 0005 4889E5   		movq	%rsp, %rbp
 14073              		.cfi_def_cfa_register 6
 14074 0008 4154     		pushq	%r12
 14075 000a 53       		pushq	%rbx
 14076 000b 4883EC70 		subq	$112, %rsp
 14077              		.cfi_offset 12, -24
 14078              		.cfi_offset 3, -32
 14079 000f 48897D88 		movq	%rdi, -120(%rbp)
 14080 0013 488D5D90 		leaq	-112(%rbp), %rbx
 14081 0017 4989DC   		movq	%rbx, %r12
 14082 001a 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 14082      000000
 14083 0021 7412     		je	.L886
 14084 0023 BF400000 		movl	$64, %edi
 14084      00
 14085 0028 E8000000 		call	__asan_stack_malloc_0@PLT
 14085      00
 14086              	.LVL21:
 14087 002d 4885C0   		testq	%rax, %rax
 14088 0030 7403     		je	.L886
 14089 0032 4889C3   		movq	%rax, %rbx
 14090              	.L886:
 14091 0035 488D4360 		leaq	96(%rbx), %rax
 14092 0039 4889C2   		movq	%rax, %rdx
 14093 003c 48C703B3 		movq	$1102416563, (%rbx)
 14093      8AB541
 14094 0043 488D0500 		leaq	.LC34(%rip), %rax
 14094      000000
 14095 004a 48894308 		movq	%rax, 8(%rbx)
 14096 004e 488D05AB 		leaq	.LASANPC2941(%rip), %rax
 14096      FFFFFF
 14097 0055 48894310 		movq	%rax, 16(%rbx)
 14098 0059 4889D8   		movq	%rbx, %rax
 14099 005c 48C1E803 		shrq	$3, %rax
 14100 0060 C7800080 		movl	$-235802127, 2147450880(%rax)
 14100      FF7FF1F1 
 14100      F1F1
 14101 006a C7800480 		movl	$-202116352, 2147450884(%rax)
 14101      FF7F00F3 
 14101      F3F3
 14102              		.loc 19 428 5
 14103 0074 64488B0C 		movq	%fs:40, %rcx
 14103      25280000 
 14103      00
 14104 007d 48894DE8 		movq	%rcx, -24(%rbp)
 14105 0081 31C9     		xorl	%ecx, %ecx
 14106              		.loc 19 428 28
 14107 0083 488B4D88 		movq	-120(%rbp), %rcx
 14108 0087 48894AC0 		movq	%rcx, -64(%rdx)
 429:/usr/include/c++/9/bits/cpp_type_traits.h ****     { return __it; }
 14109              		.loc 19 429 14
 14110 008b 488B52C0 		movq	-64(%rdx), %rdx
 428:/usr/include/c++/9/bits/cpp_type_traits.h ****     { return __it; }
 14111              		.loc 19 428 5
 14112 008f 4939DC   		cmpq	%rbx, %r12
 14113 0092 7421     		je	.L887
 14114 0094 48C7030E 		movq	$1172321806, (%rbx)
 14114      36E045
 14115 009b 48BEF5F5 		movabsq	$-723401728380766731, %rsi
 14115      F5F5F5F5 
 14115      F5F5
 14116 00a5 4889B000 		movq	%rsi, 2147450880(%rax)
 14116      80FF7F
 14117 00ac 488B4338 		movq	56(%rbx), %rax
 14118 00b0 C60000   		movb	$0, (%rax)
 14119 00b3 EB0B     		jmp	.L888
 14120              	.L887:
 14121 00b5 48C78000 		movq	$0, 2147450880(%rax)
 14121      80FF7F00 
 14121      000000
 14122              	.L888:
 14123              		.loc 19 429 20
 14124 00c0 488B45E8 		movq	-24(%rbp), %rax
 14125 00c4 64483304 		xorq	%fs:40, %rax
 14125      25280000 
 14125      00
 14126 00cd 7405     		je	.L891
 14127 00cf E8000000 		call	__stack_chk_fail@PLT
 14127      00
 14128              	.L891:
 14129 00d4 4889D0   		movq	%rdx, %rax
 14130 00d7 4883C470 		addq	$112, %rsp
 14131 00db 5B       		popq	%rbx
 14132 00dc 415C     		popq	%r12
 14133 00de 5D       		popq	%rbp
 14134              		.cfi_def_cfa 7, 8
 14135 00df C3       		ret
 14136              		.cfi_endproc
 14137              	.LFE2941:
 14139              		.section	.rodata
 14140 0ab2 00000000 		.align 8
 14140      0000
 14141              	.LC35:
 14142 0ab8 33203332 		.string	"3 32 8 11 __first:438 64 8 10 __last:438 96 8 12 __result:438"
 14142      20382031 
 14142      31205F5F 
 14142      66697273 
 14142      743A3433 
 14143              		.section	.text._ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringI
 14144              		.weak	_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char
 14146              	_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traits
 14147              	.LASANPC2942:
 14148              	.LFB2942:
 438:/usr/include/c++/9/bits/stl_algobase.h ****     {
 14149              		.loc 17 438 5
 14150              		.cfi_startproc
 14151 0000 F30F1EFA 		endbr64
 14152 0004 55       		pushq	%rbp
 14153              		.cfi_def_cfa_offset 16
 14154              		.cfi_offset 6, -16
 14155 0005 4889E5   		movq	%rsp, %rbp
 14156              		.cfi_def_cfa_register 6
 14157 0008 4157     		pushq	%r15
 14158 000a 4156     		pushq	%r14
 14159 000c 4155     		pushq	%r13
 14160 000e 4154     		pushq	%r12
 14161 0010 53       		pushq	%rbx
 14162 0011 4881ECC8 		subq	$200, %rsp
 14162      000000
 14163              		.cfi_offset 15, -24
 14164              		.cfi_offset 14, -32
 14165              		.cfi_offset 13, -40
 14166              		.cfi_offset 12, -48
 14167              		.cfi_offset 3, -56
 14168 0018 4889BD28 		movq	%rdi, -216(%rbp)
 14168      FFFFFF
 14169 001f 4889B520 		movq	%rsi, -224(%rbp)
 14169      FFFFFF
 14170 0026 48899518 		movq	%rdx, -232(%rbp)
 14170      FFFFFF
 14171 002d 488D9D30 		leaq	-208(%rbp), %rbx
 14171      FFFFFF
 14172 0034 48899D10 		movq	%rbx, -240(%rbp)
 14172      FFFFFF
 14173 003b 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 14173      000000
 14174 0042 7412     		je	.L892
 14175 0044 BF800000 		movl	$128, %edi
 14175      00
 14176 0049 E8000000 		call	__asan_stack_malloc_1@PLT
 14176      00
 14177              	.LVL22:
 14178 004e 4885C0   		testq	%rax, %rax
 14179 0051 7403     		je	.L892
 14180 0053 4889C3   		movq	%rax, %rbx
 14181              	.L892:
 14182 0056 488D83A0 		leaq	160(%rbx), %rax
 14182      000000
 14183 005d 4989C4   		movq	%rax, %r12
 14184 0060 48C703B3 		movq	$1102416563, (%rbx)
 14184      8AB541
 14185 0067 488D0500 		leaq	.LC35(%rip), %rax
 14185      000000
 14186 006e 48894308 		movq	%rax, 8(%rbx)
 14187 0072 488D0587 		leaq	.LASANPC2942(%rip), %rax
 14187      FFFFFF
 14188 0079 48894310 		movq	%rax, 16(%rbx)
 14189 007d 4989DD   		movq	%rbx, %r13
 14190 0080 49C1ED03 		shrq	$3, %r13
 14191 0084 41C78500 		movl	$-235802127, 2147450880(%r13)
 14191      80FF7FF1 
 14191      F1F1F1
 14192 008f 41C78504 		movl	$-218959360, 2147450884(%r13)
 14192      80FF7F00 
 14192      F2F2F2
 14193 009a 41C78508 		movl	$-218959360, 2147450888(%r13)
 14193      80FF7F00 
 14193      F2F2F2
 14194 00a5 41C7850C 		movl	$-202116352, 2147450892(%r13)
 14194      80FF7F00 
 14194      F3F3F3
 438:/usr/include/c++/9/bits/stl_algobase.h ****     {
 14195              		.loc 17 438 5
 14196 00b0 64488B04 		movq	%fs:40, %rax
 14196      25280000 
 14196      00
 14197 00b9 488945C8 		movq	%rax, -56(%rbp)
 14198 00bd 31C0     		xorl	%eax, %eax
 438:/usr/include/c++/9/bits/stl_algobase.h ****     {
 14199              		.loc 17 438 24
 14200 00bf 488B8528 		movq	-216(%rbp), %rax
 14200      FFFFFF
 14201 00c6 49894424 		movq	%rax, -128(%r12)
 14201      80
 438:/usr/include/c++/9/bits/stl_algobase.h ****     {
 14202              		.loc 17 438 37
 14203 00cb 488B8520 		movq	-224(%rbp), %rax
 14203      FFFFFF
 14204 00d2 49894424 		movq	%rax, -96(%r12)
 14204      A0
 438:/usr/include/c++/9/bits/stl_algobase.h ****     {
 14205              		.loc 17 438 49
 14206 00d7 488B8518 		movq	-232(%rbp), %rax
 14206      FFFFFF
 14207 00de 49894424 		movq	%rax, -64(%r12)
 14207      C0
 440:/usr/include/c++/9/bits/stl_algobase.h **** 		std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 14208              		.loc 17 440 31
 14209 00e3 498B4424 		movq	-64(%r12), %rax
 14209      C0
 14210 00e8 4889C7   		movq	%rax, %rdi
 14211 00eb E8000000 		call	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EE
 14211      00
 14212 00f0 4989C7   		movq	%rax, %r15
 14213 00f3 498B4424 		movq	-96(%r12), %rax
 14213      A0
 14214 00f8 4889C7   		movq	%rax, %rdi
 14215 00fb E8000000 		call	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EE
 14215      00
 14216 0100 4989C6   		movq	%rax, %r14
 14217 0103 498B4424 		movq	-128(%r12), %rax
 14217      80
 14218 0108 4889C7   		movq	%rax, %rdi
 14219 010b E8000000 		call	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EE
 14219      00
 14220 0110 4C89FA   		movq	%r15, %rdx
 14221 0113 4C89F6   		movq	%r14, %rsi
 14222 0116 4889C7   		movq	%rax, %rdi
 14223 0119 E8000000 		call	_ZSt13__copy_move_aILb1EPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET1_T0_S8_S7_
 14223      00
 14224 011e 4889C2   		movq	%rax, %rdx
 14225 0121 498B4424 		movq	-64(%r12), %rax
 14225      C0
 14226 0126 4889D6   		movq	%rdx, %rsi
 14227 0129 4889C7   		movq	%rax, %rdi
 14228 012c E8000000 		call	_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traits
 14228      00
 443:/usr/include/c++/9/bits/stl_algobase.h ****     }
 14229              		.loc 17 443 38
 14230 0131 4889C2   		movq	%rax, %rdx
 438:/usr/include/c++/9/bits/stl_algobase.h ****     {
 14231              		.loc 17 438 5
 14232 0134 48399D10 		cmpq	%rbx, -240(%rbp)
 14232      FFFFFF
 14233 013b 7432     		je	.L893
 14234 013d 48C7030E 		movq	$1172321806, (%rbx)
 14234      36E045
 14235 0144 48BEF5F5 		movabsq	$-723401728380766731, %rsi
 14235      F5F5F5F5 
 14235      F5F5
 14236 014e 48BFF5F5 		movabsq	$-723401728380766731, %rdi
 14236      F5F5F5F5 
 14236      F5F5
 14237 0158 4989B500 		movq	%rsi, 2147450880(%r13)
 14237      80FF7F
 14238 015f 4989BD08 		movq	%rdi, 2147450888(%r13)
 14238      80FF7F
 14239 0166 488B4378 		movq	120(%rbx), %rax
 14240 016a C60000   		movb	$0, (%rax)
 14241 016d EB16     		jmp	.L894
 14242              	.L893:
 14243 016f 49C78500 		movq	$0, 2147450880(%r13)
 14243      80FF7F00 
 14243      000000
 14244 017a 49C78508 		movq	$0, 2147450888(%r13)
 14244      80FF7F00 
 14244      000000
 14245              	.L894:
 444:/usr/include/c++/9/bits/stl_algobase.h **** 
 14246              		.loc 17 444 5
 14247 0185 488B45C8 		movq	-56(%rbp), %rax
 14248 0189 64483304 		xorq	%fs:40, %rax
 14248      25280000 
 14248      00
 14249 0192 7405     		je	.L897
 14250 0194 E8000000 		call	__stack_chk_fail@PLT
 14250      00
 14251              	.L897:
 14252 0199 4889D0   		movq	%rdx, %rax
 14253 019c 4881C4C8 		addq	$200, %rsp
 14253      000000
 14254 01a3 5B       		popq	%rbx
 14255 01a4 415C     		popq	%r12
 14256 01a6 415D     		popq	%r13
 14257 01a8 415E     		popq	%r14
 14258 01aa 415F     		popq	%r15
 14259 01ac 5D       		popq	%rbp
 14260              		.cfi_def_cfa 7, 8
 14261 01ad C3       		ret
 14262              		.cfi_endproc
 14263              	.LFE2942:
 14265              		.section	.text._ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_,"axG",@progbits,_ZN9__gnu_cxx17__is_null_
 14266              		.weak	_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_
 14268              	_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_:
 14269              	.LASANPC2950:
 14270              	.LFB2950:
 14271              		.file 20 "/usr/include/c++/9/ext/type_traits.h"
   1:/usr/include/c++/9/ext/type_traits.h **** // -*- C++ -*-
   2:/usr/include/c++/9/ext/type_traits.h **** 
   3:/usr/include/c++/9/ext/type_traits.h **** // Copyright (C) 2005-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/ext/type_traits.h **** //
   5:/usr/include/c++/9/ext/type_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/ext/type_traits.h **** // software; you can redistribute it and/or modify it under the terms
   7:/usr/include/c++/9/ext/type_traits.h **** // of the GNU General Public License as published by the Free Software
   8:/usr/include/c++/9/ext/type_traits.h **** // Foundation; either version 3, or (at your option) any later
   9:/usr/include/c++/9/ext/type_traits.h **** // version.
  10:/usr/include/c++/9/ext/type_traits.h **** 
  11:/usr/include/c++/9/ext/type_traits.h **** // This library is distributed in the hope that it will be useful, but
  12:/usr/include/c++/9/ext/type_traits.h **** // WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/ext/type_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:/usr/include/c++/9/ext/type_traits.h **** // General Public License for more details.
  15:/usr/include/c++/9/ext/type_traits.h **** 
  16:/usr/include/c++/9/ext/type_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/ext/type_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/ext/type_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/ext/type_traits.h **** 
  20:/usr/include/c++/9/ext/type_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/ext/type_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/ext/type_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/ext/type_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/ext/type_traits.h **** 
  25:/usr/include/c++/9/ext/type_traits.h **** /** @file ext/type_traits.h
  26:/usr/include/c++/9/ext/type_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/9/ext/type_traits.h ****  */
  28:/usr/include/c++/9/ext/type_traits.h **** 
  29:/usr/include/c++/9/ext/type_traits.h **** #ifndef _EXT_TYPE_TRAITS
  30:/usr/include/c++/9/ext/type_traits.h **** #define _EXT_TYPE_TRAITS 1
  31:/usr/include/c++/9/ext/type_traits.h **** 
  32:/usr/include/c++/9/ext/type_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/9/ext/type_traits.h **** 
  34:/usr/include/c++/9/ext/type_traits.h **** #include <bits/c++config.h>
  35:/usr/include/c++/9/ext/type_traits.h **** #include <bits/cpp_type_traits.h>
  36:/usr/include/c++/9/ext/type_traits.h **** 
  37:/usr/include/c++/9/ext/type_traits.h **** extern "C++" {
  38:/usr/include/c++/9/ext/type_traits.h **** 
  39:/usr/include/c++/9/ext/type_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  40:/usr/include/c++/9/ext/type_traits.h **** {
  41:/usr/include/c++/9/ext/type_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  42:/usr/include/c++/9/ext/type_traits.h **** 
  43:/usr/include/c++/9/ext/type_traits.h ****   // Define a nested type if some predicate holds.
  44:/usr/include/c++/9/ext/type_traits.h ****   template<bool, typename>
  45:/usr/include/c++/9/ext/type_traits.h ****     struct __enable_if 
  46:/usr/include/c++/9/ext/type_traits.h ****     { };
  47:/usr/include/c++/9/ext/type_traits.h **** 
  48:/usr/include/c++/9/ext/type_traits.h ****   template<typename _Tp>
  49:/usr/include/c++/9/ext/type_traits.h ****     struct __enable_if<true, _Tp>
  50:/usr/include/c++/9/ext/type_traits.h ****     { typedef _Tp __type; };
  51:/usr/include/c++/9/ext/type_traits.h **** 
  52:/usr/include/c++/9/ext/type_traits.h **** 
  53:/usr/include/c++/9/ext/type_traits.h ****   // Conditional expression for types. If true, first, if false, second.
  54:/usr/include/c++/9/ext/type_traits.h ****   template<bool _Cond, typename _Iftrue, typename _Iffalse>
  55:/usr/include/c++/9/ext/type_traits.h ****     struct __conditional_type
  56:/usr/include/c++/9/ext/type_traits.h ****     { typedef _Iftrue __type; };
  57:/usr/include/c++/9/ext/type_traits.h **** 
  58:/usr/include/c++/9/ext/type_traits.h ****   template<typename _Iftrue, typename _Iffalse>
  59:/usr/include/c++/9/ext/type_traits.h ****     struct __conditional_type<false, _Iftrue, _Iffalse>
  60:/usr/include/c++/9/ext/type_traits.h ****     { typedef _Iffalse __type; };
  61:/usr/include/c++/9/ext/type_traits.h **** 
  62:/usr/include/c++/9/ext/type_traits.h **** 
  63:/usr/include/c++/9/ext/type_traits.h ****   // Given an integral builtin type, return the corresponding unsigned type.
  64:/usr/include/c++/9/ext/type_traits.h ****   template<typename _Tp>
  65:/usr/include/c++/9/ext/type_traits.h ****     struct __add_unsigned
  66:/usr/include/c++/9/ext/type_traits.h ****     { 
  67:/usr/include/c++/9/ext/type_traits.h ****     private:
  68:/usr/include/c++/9/ext/type_traits.h ****       typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;
  69:/usr/include/c++/9/ext/type_traits.h ****       
  70:/usr/include/c++/9/ext/type_traits.h ****     public:
  71:/usr/include/c++/9/ext/type_traits.h ****       typedef typename __if_type::__type __type; 
  72:/usr/include/c++/9/ext/type_traits.h ****     };
  73:/usr/include/c++/9/ext/type_traits.h **** 
  74:/usr/include/c++/9/ext/type_traits.h ****   template<>
  75:/usr/include/c++/9/ext/type_traits.h ****     struct __add_unsigned<char>
  76:/usr/include/c++/9/ext/type_traits.h ****     { typedef unsigned char __type; };
  77:/usr/include/c++/9/ext/type_traits.h **** 
  78:/usr/include/c++/9/ext/type_traits.h ****   template<>
  79:/usr/include/c++/9/ext/type_traits.h ****     struct __add_unsigned<signed char>
  80:/usr/include/c++/9/ext/type_traits.h ****     { typedef unsigned char __type; };
  81:/usr/include/c++/9/ext/type_traits.h **** 
  82:/usr/include/c++/9/ext/type_traits.h ****   template<>
  83:/usr/include/c++/9/ext/type_traits.h ****     struct __add_unsigned<short>
  84:/usr/include/c++/9/ext/type_traits.h ****     { typedef unsigned short __type; };
  85:/usr/include/c++/9/ext/type_traits.h **** 
  86:/usr/include/c++/9/ext/type_traits.h ****   template<>
  87:/usr/include/c++/9/ext/type_traits.h ****     struct __add_unsigned<int>
  88:/usr/include/c++/9/ext/type_traits.h ****     { typedef unsigned int __type; };
  89:/usr/include/c++/9/ext/type_traits.h **** 
  90:/usr/include/c++/9/ext/type_traits.h ****   template<>
  91:/usr/include/c++/9/ext/type_traits.h ****     struct __add_unsigned<long>
  92:/usr/include/c++/9/ext/type_traits.h ****     { typedef unsigned long __type; };
  93:/usr/include/c++/9/ext/type_traits.h **** 
  94:/usr/include/c++/9/ext/type_traits.h ****   template<>
  95:/usr/include/c++/9/ext/type_traits.h ****     struct __add_unsigned<long long>
  96:/usr/include/c++/9/ext/type_traits.h ****     { typedef unsigned long long __type; };
  97:/usr/include/c++/9/ext/type_traits.h **** 
  98:/usr/include/c++/9/ext/type_traits.h ****   // Declare but don't define.
  99:/usr/include/c++/9/ext/type_traits.h ****   template<>
 100:/usr/include/c++/9/ext/type_traits.h ****     struct __add_unsigned<bool>;
 101:/usr/include/c++/9/ext/type_traits.h **** 
 102:/usr/include/c++/9/ext/type_traits.h ****   template<>
 103:/usr/include/c++/9/ext/type_traits.h ****     struct __add_unsigned<wchar_t>;
 104:/usr/include/c++/9/ext/type_traits.h **** 
 105:/usr/include/c++/9/ext/type_traits.h **** 
 106:/usr/include/c++/9/ext/type_traits.h ****   // Given an integral builtin type, return the corresponding signed type.
 107:/usr/include/c++/9/ext/type_traits.h ****   template<typename _Tp>
 108:/usr/include/c++/9/ext/type_traits.h ****     struct __remove_unsigned
 109:/usr/include/c++/9/ext/type_traits.h ****     { 
 110:/usr/include/c++/9/ext/type_traits.h ****     private:
 111:/usr/include/c++/9/ext/type_traits.h ****       typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;
 112:/usr/include/c++/9/ext/type_traits.h ****       
 113:/usr/include/c++/9/ext/type_traits.h ****     public:
 114:/usr/include/c++/9/ext/type_traits.h ****       typedef typename __if_type::__type __type; 
 115:/usr/include/c++/9/ext/type_traits.h ****     };
 116:/usr/include/c++/9/ext/type_traits.h **** 
 117:/usr/include/c++/9/ext/type_traits.h ****   template<>
 118:/usr/include/c++/9/ext/type_traits.h ****     struct __remove_unsigned<char>
 119:/usr/include/c++/9/ext/type_traits.h ****     { typedef signed char __type; };
 120:/usr/include/c++/9/ext/type_traits.h **** 
 121:/usr/include/c++/9/ext/type_traits.h ****   template<>
 122:/usr/include/c++/9/ext/type_traits.h ****     struct __remove_unsigned<unsigned char>
 123:/usr/include/c++/9/ext/type_traits.h ****     { typedef signed char __type; };
 124:/usr/include/c++/9/ext/type_traits.h **** 
 125:/usr/include/c++/9/ext/type_traits.h ****   template<>
 126:/usr/include/c++/9/ext/type_traits.h ****     struct __remove_unsigned<unsigned short>
 127:/usr/include/c++/9/ext/type_traits.h ****     { typedef short __type; };
 128:/usr/include/c++/9/ext/type_traits.h **** 
 129:/usr/include/c++/9/ext/type_traits.h ****   template<>
 130:/usr/include/c++/9/ext/type_traits.h ****     struct __remove_unsigned<unsigned int>
 131:/usr/include/c++/9/ext/type_traits.h ****     { typedef int __type; };
 132:/usr/include/c++/9/ext/type_traits.h **** 
 133:/usr/include/c++/9/ext/type_traits.h ****   template<>
 134:/usr/include/c++/9/ext/type_traits.h ****     struct __remove_unsigned<unsigned long>
 135:/usr/include/c++/9/ext/type_traits.h ****     { typedef long __type; };
 136:/usr/include/c++/9/ext/type_traits.h **** 
 137:/usr/include/c++/9/ext/type_traits.h ****   template<>
 138:/usr/include/c++/9/ext/type_traits.h ****     struct __remove_unsigned<unsigned long long>
 139:/usr/include/c++/9/ext/type_traits.h ****     { typedef long long __type; };
 140:/usr/include/c++/9/ext/type_traits.h **** 
 141:/usr/include/c++/9/ext/type_traits.h ****   // Declare but don't define.
 142:/usr/include/c++/9/ext/type_traits.h ****   template<>
 143:/usr/include/c++/9/ext/type_traits.h ****     struct __remove_unsigned<bool>;
 144:/usr/include/c++/9/ext/type_traits.h **** 
 145:/usr/include/c++/9/ext/type_traits.h ****   template<>
 146:/usr/include/c++/9/ext/type_traits.h ****     struct __remove_unsigned<wchar_t>;
 147:/usr/include/c++/9/ext/type_traits.h **** 
 148:/usr/include/c++/9/ext/type_traits.h **** 
 149:/usr/include/c++/9/ext/type_traits.h ****   // For use in string and vstring.
 150:/usr/include/c++/9/ext/type_traits.h ****   template<typename _Type>
 151:/usr/include/c++/9/ext/type_traits.h ****     inline bool
 152:/usr/include/c++/9/ext/type_traits.h ****     __is_null_pointer(_Type* __ptr)
 14272              		.loc 20 152 5
 14273              		.cfi_startproc
 14274 0000 F30F1EFA 		endbr64
 14275 0004 55       		pushq	%rbp
 14276              		.cfi_def_cfa_offset 16
 14277              		.cfi_offset 6, -16
 14278 0005 4889E5   		movq	%rsp, %rbp
 14279              		.cfi_def_cfa_register 6
 14280 0008 48897DF8 		movq	%rdi, -8(%rbp)
 153:/usr/include/c++/9/ext/type_traits.h ****     { return __ptr == 0; }
 14281              		.loc 20 153 23
 14282 000c 48837DF8 		cmpq	$0, -8(%rbp)
 14282      00
 14283 0011 0F94C0   		sete	%al
 14284              		.loc 20 153 26
 14285 0014 5D       		popq	%rbp
 14286              		.cfi_def_cfa 7, 8
 14287 0015 C3       		ret
 14288              		.cfi_endproc
 14289              	.LFE2950:
 14291              		.section	.text._ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_,"ax
 14292              		.weak	_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_
 14294              	_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_:
 14295              	.LASANPC2951:
 14296              	.LFB2951:
 205:/usr/include/c++/9/bits/stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 14297              		.loc 15 205 5
 14298              		.cfi_startproc
 14299 0000 F30F1EFA 		endbr64
 14300 0004 55       		pushq	%rbp
 14301              		.cfi_def_cfa_offset 16
 14302              		.cfi_offset 6, -16
 14303 0005 4889E5   		movq	%rsp, %rbp
 14304              		.cfi_def_cfa_register 6
 14305 0008 48897DF8 		movq	%rdi, -8(%rbp)
 14306              		.loc 15 206 68
 14307 000c 5D       		popq	%rbp
 14308              		.cfi_def_cfa 7, 8
 14309 000d C3       		ret
 14310              		.cfi_endproc
 14311              	.LFE2951:
 14313              		.section	.text._ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_acc
 14314              		.weak	_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_itera
 14316              	_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag
 14317              	.LASANPC2952:
 14318              	.LFB2952:
  98:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 14319              		.loc 11 98 5
 14320              		.cfi_startproc
 14321 0000 F30F1EFA 		endbr64
 14322 0004 55       		pushq	%rbp
 14323              		.cfi_def_cfa_offset 16
 14324              		.cfi_offset 6, -16
 14325 0005 4889E5   		movq	%rsp, %rbp
 14326              		.cfi_def_cfa_register 6
 14327 0008 48897DF8 		movq	%rdi, -8(%rbp)
 14328 000c 488975F0 		movq	%rsi, -16(%rbp)
 104:/usr/include/c++/9/bits/stl_iterator_base_funcs.h ****     }
 14329              		.loc 11 104 23
 14330 0010 488B45F0 		movq	-16(%rbp), %rax
 14331 0014 482B45F8 		subq	-8(%rbp), %rax
 105:/usr/include/c++/9/bits/stl_iterator_base_funcs.h **** 
 14332              		.loc 11 105 5
 14333 0018 5D       		popq	%rbp
 14334              		.cfi_def_cfa 7, 8
 14335 0019 C3       		ret
 14336              		.cfi_endproc
 14337              	.LFE2952:
 14339              		.section	.text._ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC
 14340              		.align 2
 14341              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS7_
 14343              	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS7_:
 14344              	.LASANPC2990:
 14345              	.LFB2990:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 14346              		.loc 9 83 7
 14347              		.cfi_startproc
 14348 0000 F30F1EFA 		endbr64
 14349 0004 55       		pushq	%rbp
 14350              		.cfi_def_cfa_offset 16
 14351              		.cfi_offset 6, -16
 14352 0005 4889E5   		movq	%rsp, %rbp
 14353              		.cfi_def_cfa_register 6
 14354 0008 48897DF8 		movq	%rdi, -8(%rbp)
 14355 000c 488975F0 		movq	%rsi, -16(%rbp)
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 14356              		.loc 9 83 67
 14357 0010 90       		nop
 14358 0011 5D       		popq	%rbp
 14359              		.cfi_def_cfa 7, 8
 14360 0012 C3       		ret
 14361              		.cfi_endproc
 14362              	.LFE2990:
 14364              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS7_
 14365              		.set	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS7_,_Z
 14366              		.section	.data.rel.local
 14367              		.align 32
 14370              	.Lubsan_data656:
 14371 4480 00000000 		.quad	.LC18
 14371      00000000 
 14372 4488 F9010000 		.long	505
 14373 448c 1D000000 		.long	29
 14374 4490 00000000 		.quad	.Lubsan_type48
 14374      00000000 
 14375 4498 00       		.byte	0
 14376 4499 04       		.byte	4
 14377 449a 00000000 		.zero	6
 14377      0000
 14378 44a0 00000000 		.zero	32
 14378      00000000 
 14378      00000000 
 14378      00000000 
 14378      00000000 
 14379              		.section	.text._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8m
 14380              		.weak	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeER
 14382              	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_:
 14383              	.LASANPC2992:
 14384              	.LFB2992:
 497:/usr/include/c++/9/bits/alloc_traits.h **** 
 498:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 499:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 500:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 501:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 502:/usr/include/c++/9/bits/alloc_traits.h ****       */
 503:/usr/include/c++/9/bits/alloc_traits.h ****       static size_type
 504:/usr/include/c++/9/bits/alloc_traits.h ****       max_size(const allocator_type& __a) noexcept
 14385              		.loc 13 504 7
 14386              		.cfi_startproc
 14387 0000 F30F1EFA 		endbr64
 14388 0004 55       		pushq	%rbp
 14389              		.cfi_def_cfa_offset 16
 14390              		.cfi_offset 6, -16
 14391 0005 4889E5   		movq	%rsp, %rbp
 14392              		.cfi_def_cfa_register 6
 14393 0008 4883EC10 		subq	$16, %rsp
 14394 000c 48897DF8 		movq	%rdi, -8(%rbp)
 505:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.max_size(); }
 14395              		.loc 13 505 29
 14396 0010 48837DF8 		cmpq	$0, -8(%rbp)
 14396      00
 14397 0015 7511     		jne	.L906
 14398 0017 BE000000 		movl	$0, %esi
 14398      00
 14399 001c 488D3D00 		leaq	.Lubsan_data656(%rip), %rdi
 14399      000000
 14400 0023 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14400      00
 14401              	.L906:
 14402 0028 488B45F8 		movq	-8(%rbp), %rax
 14403 002c 4889C7   		movq	%rax, %rdi
 14404 002f E8000000 		call	_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeE
 14404      00
 14405              		.loc 13 505 32
 14406 0034 C9       		leave
 14407              		.cfi_def_cfa 7, 8
 14408 0035 C3       		ret
 14409              		.cfi_endproc
 14410              	.LFE2992:
 14412              		.section	.data.rel.local
 14413              		.align 32
 14416              	.Lubsan_data657:
 14417 44c0 00000000 		.quad	.LC33
 14417      00000000 
 14418 44c8 CB000000 		.long	203
 14419 44cc 0F000000 		.long	15
 14420 44d0 00000000 		.quad	.Lubsan_type47
 14420      00000000 
 14421 44d8 03       		.byte	3
 14422 44d9 00       		.byte	0
 14423 44da 00000000 		.zero	6
 14423      0000
 14424 44e0 00000000 		.zero	32
 14424      00000000 
 14424      00000000 
 14424      00000000 
 14424      00000000 
 14425              		.align 32
 14428              	.Lubsan_data658:
 14429 4500 00000000 		.quad	.LC33
 14429      00000000 
 14430 4508 CB000000 		.long	203
 14431 450c 0F000000 		.long	15
 14432 4510 00000000 		.quad	.Lubsan_type47
 14432      00000000 
 14433 4518 03       		.byte	3
 14434 4519 00       		.byte	0
 14435 451a 00000000 		.zero	6
 14435      0000
 14436 4520 00000000 		.zero	32
 14436      00000000 
 14436      00000000 
 14436      00000000 
 14436      00000000 
 14437              		.section	.text._ZSt3minImERKT_S2_S2_,"axG",@progbits,_ZSt3minImERKT_S2_S2_,comdat
 14438              		.weak	_ZSt3minImERKT_S2_S2_
 14440              	_ZSt3minImERKT_S2_S2_:
 14441              	.LASANPC2993:
 14442              	.LFB2993:
 198:/usr/include/c++/9/bits/stl_algobase.h ****     {
 14443              		.loc 17 198 5
 14444              		.cfi_startproc
 14445 0000 F30F1EFA 		endbr64
 14446 0004 55       		pushq	%rbp
 14447              		.cfi_def_cfa_offset 16
 14448              		.cfi_offset 6, -16
 14449 0005 4889E5   		movq	%rsp, %rbp
 14450              		.cfi_def_cfa_register 6
 14451 0008 53       		pushq	%rbx
 14452 0009 4883EC18 		subq	$24, %rsp
 14453              		.cfi_offset 3, -24
 14454 000d 48897DE8 		movq	%rdi, -24(%rbp)
 14455 0011 488975E0 		movq	%rsi, -32(%rbp)
 203:/usr/include/c++/9/bits/stl_algobase.h **** 	return __b;
 14456              		.loc 17 203 15
 14457 0015 488B45E0 		movq	-32(%rbp), %rax
 14458 0019 48837DE0 		cmpq	$0, -32(%rbp)
 14458      00
 14459 001e 740B     		je	.L909
 14460 0020 4889C2   		movq	%rax, %rdx
 14461 0023 83E207   		andl	$7, %edx
 14462 0026 4885D2   		testq	%rdx, %rdx
 14463 0029 740F     		je	.L910
 14464              	.L909:
 14465 002b 4889C6   		movq	%rax, %rsi
 14466 002e 488D3D00 		leaq	.Lubsan_data657(%rip), %rdi
 14466      000000
 14467 0035 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14467      00
 14468              	.L910:
 14469 003a 488B45E0 		movq	-32(%rbp), %rax
 14470 003e 4889C2   		movq	%rax, %rdx
 14471 0041 48C1EA03 		shrq	$3, %rdx
 14472 0045 4881C200 		addq	$2147450880, %rdx
 14472      80FF7F
 14473 004c 0FB612   		movzbl	(%rdx), %edx
 14474 004f 84D2     		testb	%dl, %dl
 14475 0051 7408     		je	.L911
 14476 0053 4889C7   		movq	%rax, %rdi
 14477 0056 E8000000 		call	__asan_report_load8@PLT
 14477      00
 14478              	.L911:
 14479 005b 488B45E0 		movq	-32(%rbp), %rax
 14480 005f 488B18   		movq	(%rax), %rbx
 14481 0062 488B45E8 		movq	-24(%rbp), %rax
 14482 0066 48837DE8 		cmpq	$0, -24(%rbp)
 14482      00
 14483 006b 740B     		je	.L912
 14484 006d 4889C2   		movq	%rax, %rdx
 14485 0070 83E207   		andl	$7, %edx
 14486 0073 4885D2   		testq	%rdx, %rdx
 14487 0076 740F     		je	.L913
 14488              	.L912:
 14489 0078 4889C6   		movq	%rax, %rsi
 14490 007b 488D3D00 		leaq	.Lubsan_data658(%rip), %rdi
 14490      000000
 14491 0082 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14491      00
 14492              	.L913:
 14493 0087 488B45E8 		movq	-24(%rbp), %rax
 14494 008b 4889C2   		movq	%rax, %rdx
 14495 008e 48C1EA03 		shrq	$3, %rdx
 14496 0092 4881C200 		addq	$2147450880, %rdx
 14496      80FF7F
 14497 0099 0FB612   		movzbl	(%rdx), %edx
 14498 009c 84D2     		testb	%dl, %dl
 14499 009e 7408     		je	.L914
 14500 00a0 4889C7   		movq	%rax, %rdi
 14501 00a3 E8000000 		call	__asan_report_load8@PLT
 14501      00
 14502              	.L914:
 14503 00a8 488B45E8 		movq	-24(%rbp), %rax
 14504 00ac 488B00   		movq	(%rax), %rax
 203:/usr/include/c++/9/bits/stl_algobase.h **** 	return __b;
 14505              		.loc 17 203 7
 14506 00af 4839C3   		cmpq	%rax, %rbx
 14507 00b2 7306     		jnb	.L915
 204:/usr/include/c++/9/bits/stl_algobase.h ****       return __a;
 14508              		.loc 17 204 9
 14509 00b4 488B45E0 		movq	-32(%rbp), %rax
 14510 00b8 EB04     		jmp	.L916
 14511              	.L915:
 205:/usr/include/c++/9/bits/stl_algobase.h ****     }
 14512              		.loc 17 205 14
 14513 00ba 488B45E8 		movq	-24(%rbp), %rax
 14514              	.L916:
 206:/usr/include/c++/9/bits/stl_algobase.h **** 
 14515              		.loc 17 206 5
 14516 00be 4883C418 		addq	$24, %rsp
 14517 00c2 5B       		popq	%rbx
 14518 00c3 5D       		popq	%rbp
 14519              		.cfi_def_cfa 7, 8
 14520 00c4 C3       		ret
 14521              		.cfi_endproc
 14522              	.LFE2993:
 14524              		.section	.data.rel.local
 14525              		.align 32
 14528              	.Lubsan_data659:
 14529 4540 00000000 		.quad	.LC25
 14529      00000000 
 14530 4548 68000000 		.long	104
 14531 454c 0A000000 		.long	10
 14532 4550 00000000 		.quad	.Lubsan_type22
 14532      00000000 
 14533 4558 00       		.byte	0
 14534 4559 04       		.byte	4
 14535 455a 00000000 		.zero	6
 14535      0000
 14536 4560 00000000 		.zero	32
 14536      00000000 
 14536      00000000 
 14536      00000000 
 14536      00000000 
 14537              		.section	.text._ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8
 14538              		.align 2
 14539              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateE
 14541              	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv:
 14542              	.LASANPC2994:
 14543              	.LFB2994:
 102:/usr/include/c++/9/ext/new_allocator.h ****       {
 14544              		.loc 9 102 7
 14545              		.cfi_startproc
 14546 0000 F30F1EFA 		endbr64
 14547 0004 55       		pushq	%rbp
 14548              		.cfi_def_cfa_offset 16
 14549              		.cfi_offset 6, -16
 14550 0005 4889E5   		movq	%rsp, %rbp
 14551              		.cfi_def_cfa_register 6
 14552 0008 4883EC20 		subq	$32, %rsp
 14553 000c 48897DF8 		movq	%rdi, -8(%rbp)
 14554 0010 488975F0 		movq	%rsi, -16(%rbp)
 14555 0014 488955E8 		movq	%rdx, -24(%rbp)
 104:/usr/include/c++/9/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 14556              		.loc 9 104 10
 14557 0018 48837DF8 		cmpq	$0, -8(%rbp)
 14557      00
 14558 001d 7511     		jne	.L918
 14559 001f BE000000 		movl	$0, %esi
 14559      00
 14560 0024 488D3D00 		leaq	.Lubsan_data659(%rip), %rdi
 14560      000000
 14561 002b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14561      00
 14562              	.L918:
 14563 0030 488B45F8 		movq	-8(%rbp), %rax
 14564 0034 4889C7   		movq	%rax, %rdi
 14565 0037 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeE
 14565      00
 14566 003c 483945F0 		cmpq	%rax, -16(%rbp)
 14567 0040 0F97C0   		seta	%al
 104:/usr/include/c++/9/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 14568              		.loc 9 104 2
 14569 0043 84C0     		testb	%al, %al
 14570 0045 740A     		je	.L919
 105:/usr/include/c++/9/ext/new_allocator.h **** 
 14571              		.loc 9 105 26
 14572 0047 E8000000 		call	__asan_handle_no_return@PLT
 14572      00
 14573 004c E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 14573      00
 14574              	.L919:
 114:/usr/include/c++/9/ext/new_allocator.h ****       }
 14575              		.loc 9 114 41
 14576 0051 488B45F0 		movq	-16(%rbp), %rax
 14577 0055 48C1E005 		salq	$5, %rax
 14578 0059 4889C7   		movq	%rax, %rdi
 14579 005c E8000000 		call	_Znwm@PLT
 14579      00
 114:/usr/include/c++/9/ext/new_allocator.h ****       }
 14580              		.loc 9 114 60
 14581 0061 90       		nop
 115:/usr/include/c++/9/ext/new_allocator.h **** 
 14582              		.loc 9 115 7
 14583 0062 C9       		leave
 14584              		.cfi_def_cfa 7, 8
 14585 0063 C3       		ret
 14586              		.cfi_endproc
 14587              	.LFE2994:
 14589              		.section	.rodata
 14590 0af6 00000000 		.align 32
 14590      00000000 
 14590      0000
 14591              	.LC36:
 14592 0b00 2F757372 		.string	"/usr/include/c++/9/bits/stl_uninitialized.h"
 14592      2F696E63 
 14592      6C756465 
 14592      2F632B2B 
 14592      2F392F62 
 14593 0b2c 00000000 		.zero	52
 14593      00000000 
 14593      00000000 
 14593      00000000 
 14593      00000000 
 14594              		.section	.data.rel.local
 14595              		.align 32
 14598              	.Lubsan_data660:
 14599 4580 00000000 		.quad	.LC36
 14599      00000000 
 14600 4588 53000000 		.long	83
 14601 458c 12000000 		.long	18
 14602 4590 00000000 		.quad	.Lubsan_type15
 14602      00000000 
 14603 4598 03       		.byte	3
 14604 4599 02       		.byte	2
 14605 459a 00000000 		.zero	6
 14605      0000
 14606 45a0 00000000 		.zero	32
 14606      00000000 
 14606      00000000 
 14606      00000000 
 14606      00000000 
 14607              		.align 32
 14610              	.Lubsan_data661:
 14611 45c0 00000000 		.quad	.LC36
 14611      00000000 
 14612 45c8 53000000 		.long	83
 14613 45cc 12000000 		.long	18
 14614 45d0 00000000 		.quad	.Lubsan_type5
 14614      00000000 
 14615 45d8 03       		.byte	3
 14616 45d9 02       		.byte	2
 14617 45da 00000000 		.zero	6
 14617      0000
 14618 45e0 00000000 		.zero	32
 14618      00000000 
 14618      00000000 
 14618      00000000 
 14618      00000000 
 14619              		.align 32
 14622              	.Lubsan_data662:
 14623 4600 00000000 		.quad	.LC36
 14623      00000000 
 14624 4608 52000000 		.long	82
 14625 460c 08000000 		.long	8
 14626 4610 00000000 		.zero	48
 14626      00000000 
 14626      00000000 
 14626      00000000 
 14626      00000000 
 14627              		.align 32
 14630              	.Lubsan_data663:
 14631 4640 00000000 		.quad	.LC36
 14631      00000000 
 14632 4648 52000000 		.long	82
 14633 464c 08000000 		.long	8
 14634 4650 00000000 		.zero	48
 14634      00000000 
 14634      00000000 
 14634      00000000 
 14634      00000000 
 14635              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11c
 14636              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_trait
 14638              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 14639              	.LASANPC2995:
 14640              	.LFB2995:
  76:/usr/include/c++/9/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 14641              		.loc 16 76 9
 14642              		.cfi_startproc
 14643              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 14644              		.cfi_lsda 0x1b,.LLSDA2995
 14645 0000 F30F1EFA 		endbr64
 14646 0004 55       		pushq	%rbp
 14647              		.cfi_def_cfa_offset 16
 14648              		.cfi_offset 6, -16
 14649 0005 4889E5   		movq	%rsp, %rbp
 14650              		.cfi_def_cfa_register 6
 14651 0008 4154     		pushq	%r12
 14652 000a 53       		pushq	%rbx
 14653 000b 4883EC30 		subq	$48, %rsp
 14654              		.cfi_offset 12, -24
 14655              		.cfi_offset 3, -32
 14656 000f 48897DD8 		movq	%rdi, -40(%rbp)
 14657 0013 488975D0 		movq	%rsi, -48(%rbp)
 14658 0017 488955C8 		movq	%rdx, -56(%rbp)
  79:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __try
 14659              		.loc 16 79 21
 14660 001b 488B45C8 		movq	-56(%rbp), %rax
 14661 001f 488945E8 		movq	%rax, -24(%rbp)
 14662              	.L929:
  82:/usr/include/c++/9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 14663              		.loc 16 82 23 discriminator 1
 14664 0023 488B45D8 		movq	-40(%rbp), %rax
 14665 0027 483B45D0 		cmpq	-48(%rbp), %rax
 14666 002b 0F84B000 		je	.L922
 14666      0000
  83:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      return __cur;
 14667              		.loc 16 83 18
 14668 0031 488B5DD8 		movq	-40(%rbp), %rbx
 14669 0035 4889D8   		movq	%rbx, %rax
 14670 0038 4885DB   		testq	%rbx, %rbx
 14671 003b 740B     		je	.L923
 14672 003d 4889C2   		movq	%rax, %rdx
 14673 0040 83E207   		andl	$7, %edx
 14674 0043 4885D2   		testq	%rdx, %rdx
 14675 0046 740F     		je	.L924
 14676              	.L923:
 14677 0048 4889C6   		movq	%rax, %rsi
 14678 004b 488D3D00 		leaq	.Lubsan_data660(%rip), %rdi
 14678      000000
 14679 0052 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14679      00
 14680              	.L924:
 14681 0057 4C8B65E8 		movq	-24(%rbp), %r12
 14682 005b 4C89E0   		movq	%r12, %rax
 14683 005e 4D85E4   		testq	%r12, %r12
 14684 0061 740B     		je	.L925
 14685 0063 4889C2   		movq	%rax, %rdx
 14686 0066 83E207   		andl	$7, %edx
 14687 0069 4885D2   		testq	%rdx, %rdx
 14688 006c 740F     		je	.L926
 14689              	.L925:
 14690 006e 4889C6   		movq	%rax, %rsi
 14691 0071 488D3D00 		leaq	.Lubsan_data661(%rip), %rdi
 14691      000000
 14692 0078 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14692      00
 14693              	.L926:
 14694 007d 4C89E7   		movq	%r12, %rdi
 14695 0080 E8000000 		call	_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_
 14695      00
 14696 0085 4889DE   		movq	%rbx, %rsi
 14697 0088 4889C7   		movq	%rax, %rdi
 14698              	.LEHB38:
 14699 008b E8000000 		call	_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_DpOT0_
 14699      00
 14700              	.LEHE38:
  82:/usr/include/c++/9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 14701              		.loc 16 82 8
 14702 0090 488B45D8 		movq	-40(%rbp), %rax
 14703 0094 488D5020 		leaq	32(%rax), %rdx
 14704 0098 4883F8E0 		cmpq	$-32, %rax
 14705 009c 7213     		jb	.L927
 14706 009e 488B45D8 		movq	-40(%rbp), %rax
 14707 00a2 4889C6   		movq	%rax, %rsi
 14708 00a5 488D3D00 		leaq	.Lubsan_data662(%rip), %rdi
 14708      000000
 14709 00ac E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 14709      00
 14710              	.L927:
 14711 00b1 488345D8 		addq	$32, -40(%rbp)
 14711      20
 14712 00b6 488B45E8 		movq	-24(%rbp), %rax
 14713 00ba 488D5020 		leaq	32(%rax), %rdx
 14714 00be 4883F8E0 		cmpq	$-32, %rax
 14715 00c2 7213     		jb	.L928
 14716 00c4 488B45E8 		movq	-24(%rbp), %rax
 14717 00c8 4889C6   		movq	%rax, %rsi
 14718 00cb 488D3D00 		leaq	.Lubsan_data663(%rip), %rdi
 14718      000000
 14719 00d2 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 14719      00
 14720              	.L928:
 14721 00d7 488345E8 		addq	$32, -24(%rbp)
 14721      20
 14722 00dc E942FFFF 		jmp	.L929
 14722      FF
 14723              	.L922:
  84:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 14724              		.loc 16 84 15
 14725 00e1 488B45E8 		movq	-24(%rbp), %rax
 14726 00e5 EB42     		jmp	.L935
 14727              	.L933:
 14728 00e7 F30F1EFA 		endbr64
  86:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 14729              		.loc 16 86 4
 14730 00eb 4889C7   		movq	%rax, %rdi
 14731 00ee E8000000 		call	__cxa_begin_catch@PLT
 14731      00
  88:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 14732              		.loc 16 88 21
 14733 00f3 488B55E8 		movq	-24(%rbp), %rdx
 14734 00f7 488B45C8 		movq	-56(%rbp), %rax
 14735 00fb 4889D6   		movq	%rdx, %rsi
 14736 00fe 4889C7   		movq	%rax, %rdi
 14737              	.LEHB39:
 14738 0101 E8000000 		call	_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_
 14738      00
  89:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 14739              		.loc 16 89 8
 14740 0106 E8000000 		call	__asan_handle_no_return@PLT
 14740      00
 14741 010b E8000000 		call	__cxa_rethrow@PLT
 14741      00
 14742              	.LEHE39:
 14743              	.L934:
 14744 0110 F30F1EFA 		endbr64
 14745 0114 4889C3   		movq	%rax, %rbx
  86:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 14746              		.loc 16 86 4
 14747 0117 E8000000 		call	__cxa_end_catch@PLT
 14747      00
 14748 011c E8000000 		call	__asan_handle_no_return@PLT
 14748      00
 14749 0121 4889DF   		movq	%rbx, %rdi
 14750              	.LEHB40:
 14751 0124 E8000000 		call	_Unwind_Resume@PLT
 14751      00
 14752              	.LEHE40:
 14753              	.L935:
  91:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 14754              		.loc 16 91 2
 14755 0129 4883C430 		addq	$48, %rsp
 14756 012d 5B       		popq	%rbx
 14757 012e 415C     		popq	%r12
 14758 0130 5D       		popq	%rbp
 14759              		.cfi_def_cfa 7, 8
 14760 0131 C3       		ret
 14761              		.cfi_endproc
 14762              	.LFE2995:
 14763              		.section	.gcc_except_table
 14764              		.align 4
 14765              	.LLSDA2995:
 14766 0114 FF       		.byte	0xff
 14767 0115 9B       		.byte	0x9b
 14768 0116 19       		.uleb128 .LLSDATT2995-.LLSDATTD2995
 14769              	.LLSDATTD2995:
 14770 0117 01       		.byte	0x1
 14771 0118 11       		.uleb128 .LLSDACSE2995-.LLSDACSB2995
 14772              	.LLSDACSB2995:
 14773 0119 8B01     		.uleb128 .LEHB38-.LFB2995
 14774 011b 05       		.uleb128 .LEHE38-.LEHB38
 14775 011c E701     		.uleb128 .L933-.LFB2995
 14776 011e 01       		.uleb128 0x1
 14777 011f 8102     		.uleb128 .LEHB39-.LFB2995
 14778 0121 0F       		.uleb128 .LEHE39-.LEHB39
 14779 0122 9002     		.uleb128 .L934-.LFB2995
 14780 0124 00       		.uleb128 0
 14781 0125 A402     		.uleb128 .LEHB40-.LFB2995
 14782 0127 05       		.uleb128 .LEHE40-.LEHB40
 14783 0128 00       		.uleb128 0
 14784 0129 00       		.uleb128 0
 14785              	.LLSDACSE2995:
 14786 012a 01       		.byte	0x1
 14787 012b 00       		.byte	0
 14788              		.align 4
 14789 012c 00000000 		.long	0
 14790              	
 14791              	.LLSDATT2995:
 14792              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11c
 14794              		.section	.text._ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_,"axG
 14795              		.weak	_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_
 14797              	_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_:
 14798              	.LASANPC2996:
 14799              	.LFB2996:
  47:/usr/include/c++/9/bits/move.h ****     { return __builtin_addressof(__r); }
 14800              		.loc 8 47 5
 14801              		.cfi_startproc
 14802 0000 F30F1EFA 		endbr64
 14803 0004 55       		pushq	%rbp
 14804              		.cfi_def_cfa_offset 16
 14805              		.cfi_offset 6, -16
 14806 0005 4889E5   		movq	%rsp, %rbp
 14807              		.cfi_def_cfa_register 6
 14808 0008 48897DF8 		movq	%rdi, -8(%rbp)
  48:/usr/include/c++/9/bits/move.h **** 
 14809              		.loc 8 48 37
 14810 000c 488B45F8 		movq	-8(%rbp), %rax
  48:/usr/include/c++/9/bits/move.h **** 
 14811              		.loc 8 48 40
 14812 0010 5D       		popq	%rbp
 14813              		.cfi_def_cfa 7, 8
 14814 0011 C3       		ret
 14815              		.cfi_endproc
 14816              	.LFE2996:
 14818              		.section	.data.rel.local
 14819              		.align 32
 14822              	.Lubsan_data664:
 14823 4680 00000000 		.quad	.LC32
 14823      00000000 
 14824 4688 62000000 		.long	98
 14825 468c 07000000 		.long	7
 14826 4690 00000000 		.quad	.Lubsan_type5
 14826      00000000 
 14827 4698 03       		.byte	3
 14828 4699 04       		.byte	4
 14829 469a 00000000 		.zero	6
 14829      0000
 14830 46a0 00000000 		.zero	32
 14830      00000000 
 14830      00000000 
 14830      00000000 
 14830      00000000 
 14831              		.section	.text._ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_,"axG",@prog
 14832              		.weak	_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_
 14834              	_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_:
 14835              	.LASANPC2997:
 14836              	.LFB2997:
  97:/usr/include/c++/9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 14837              		.loc 12 97 5
 14838              		.cfi_startproc
 14839 0000 F30F1EFA 		endbr64
 14840 0004 55       		pushq	%rbp
 14841              		.cfi_def_cfa_offset 16
 14842              		.cfi_offset 6, -16
 14843 0005 4889E5   		movq	%rsp, %rbp
 14844              		.cfi_def_cfa_register 6
 14845 0008 53       		pushq	%rbx
 14846 0009 4883EC18 		subq	$24, %rsp
 14847              		.cfi_offset 3, -24
 14848 000d 48897DE8 		movq	%rdi, -24(%rbp)
  98:/usr/include/c++/9/bits/stl_construct.h **** 
 14849              		.loc 12 98 7
 14850 0011 488B5DE8 		movq	-24(%rbp), %rbx
 14851 0015 4889D8   		movq	%rbx, %rax
 14852 0018 4885DB   		testq	%rbx, %rbx
 14853 001b 740B     		je	.L939
 14854 001d 4889C2   		movq	%rax, %rdx
 14855 0020 83E207   		andl	$7, %edx
 14856 0023 4885D2   		testq	%rdx, %rdx
 14857 0026 740F     		je	.L940
 14858              	.L939:
 14859 0028 4889C6   		movq	%rax, %rsi
 14860 002b 488D3D00 		leaq	.Lubsan_data664(%rip), %rdi
 14860      000000
 14861 0032 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14861      00
 14862              	.L940:
 14863 0037 4889DF   		movq	%rbx, %rdi
 14864 003a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 14864      00
  98:/usr/include/c++/9/bits/stl_construct.h **** 
 14865              		.loc 12 98 26
 14866 003f 90       		nop
 14867 0040 4883C418 		addq	$24, %rsp
 14868 0044 5B       		popq	%rbx
 14869 0045 5D       		popq	%rbp
 14870              		.cfi_def_cfa 7, 8
 14871 0046 C3       		ret
 14872              		.cfi_endproc
 14873              	.LFE2997:
 14875              		.section	.data.rel.local
 14876              		.align 32
 14879              	.Lubsan_data665:
 14880 46c0 00000000 		.quad	.LC3
 14880      00000000 
 14881 46c8 16010000 		.long	278
 14882 46cc 16000000 		.long	22
 14883 46d0 00000000 		.quad	.Lubsan_type50
 14883      00000000 
 14884 46d8 03       		.byte	3
 14885 46d9 03       		.byte	3
 14886 46da 00000000 		.zero	6
 14886      0000
 14887 46e0 00000000 		.zero	32
 14887      00000000 
 14887      00000000 
 14887      00000000 
 14887      00000000 
 14888              		.align 32
 14891              	.Lubsan_data666:
 14892 4700 00000000 		.quad	.LC3
 14892      00000000 
 14893 4708 16010000 		.long	278
 14894 470c 16000000 		.long	22
 14895 4710 00000000 		.quad	.Lubsan_type35
 14895      00000000 
 14896 4718 00       		.byte	0
 14897 4719 02       		.byte	2
 14898 471a 00000000 		.zero	6
 14898      0000
 14899 4720 00000000 		.zero	32
 14899      00000000 
 14899      00000000 
 14899      00000000 
 14899      00000000 
 14900              		.align 32
 14903              	.Lubsan_data667:
 14904 4740 00000000 		.quad	.LC3
 14904      00000000 
 14905 4748 16010000 		.long	278
 14906 474c 16000000 		.long	22
 14907 4750 00000000 		.quad	.Lubsan_type50
 14907      00000000 
 14908 4758 03       		.byte	3
 14909 4759 03       		.byte	3
 14910 475a 00000000 		.zero	6
 14910      0000
 14911 4760 00000000 		.zero	32
 14911      00000000 
 14911      00000000 
 14911      00000000 
 14911      00000000 
 14912              		.section	.text._ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19
 14913              		.align 2
 14914              		.weak	_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp
 14916              	_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_alloca
 14917              	.LASANPC2998:
 14918              	.LFB2998:
 277:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 14919              		.loc 4 277 7
 14920              		.cfi_startproc
 14921 0000 F30F1EFA 		endbr64
 14922 0004 55       		pushq	%rbp
 14923              		.cfi_def_cfa_offset 16
 14924              		.cfi_offset 6, -16
 14925 0005 4889E5   		movq	%rsp, %rbp
 14926              		.cfi_def_cfa_register 6
 14927 0008 4883EC10 		subq	$16, %rsp
 14928 000c 48897DF8 		movq	%rdi, -8(%rbp)
 278:/usr/include/c++/9/bits/stl_vector.h **** 
 14929              		.loc 4 278 22
 14930 0010 488B45F8 		movq	-8(%rbp), %rax
 14931 0014 48837DF8 		cmpq	$0, -8(%rbp)
 14931      00
 14932 0019 740B     		je	.L942
 14933 001b 4889C2   		movq	%rax, %rdx
 14934 001e 83E207   		andl	$7, %edx
 14935 0021 4885D2   		testq	%rdx, %rdx
 14936 0024 740F     		je	.L943
 14937              	.L942:
 14938 0026 4889C6   		movq	%rax, %rsi
 14939 0029 488D3D00 		leaq	.Lubsan_data665(%rip), %rdi
 14939      000000
 14940 0030 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14940      00
 14941              	.L943:
 14942 0035 488B45F8 		movq	-8(%rbp), %rax
 14943 0039 4885C0   		testq	%rax, %rax
 14944 003c 7511     		jne	.L944
 14945 003e BE000000 		movl	$0, %esi
 14945      00
 14946 0043 488D3D00 		leaq	.Lubsan_data666(%rip), %rdi
 14946      000000
 14947 004a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14947      00
 14948              	.L944:
 14949 004f 488B45F8 		movq	-8(%rbp), %rax
 14950 0053 48837DF8 		cmpq	$0, -8(%rbp)
 14950      00
 14951 0058 740B     		je	.L945
 14952 005a 4889C2   		movq	%rax, %rdx
 14953 005d 83E207   		andl	$7, %edx
 14954 0060 4885D2   		testq	%rdx, %rdx
 14955 0063 740F     		je	.L946
 14956              	.L945:
 14957 0065 4889C6   		movq	%rax, %rsi
 14958 0068 488D3D00 		leaq	.Lubsan_data667(%rip), %rdi
 14958      000000
 14959 006f E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 14959      00
 14960              	.L946:
 14961 0074 488B45F8 		movq	-8(%rbp), %rax
 278:/usr/include/c++/9/bits/stl_vector.h **** 
 14962              		.loc 4 278 31
 14963 0078 C9       		leave
 14964              		.cfi_def_cfa 7, 8
 14965 0079 C3       		ret
 14966              		.cfi_endproc
 14967              	.LFE2998:
 14969              		.section	.text._ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EE
 14970              		.weak	_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S
 14972              	_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_:
 14973              	.LASANPC2999:
 14974              	.LFB2999:
 308:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 309:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 310:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _Allocator>
 311:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 312:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 313:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 314:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 315:/usr/include/c++/9/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 316:/usr/include/c++/9/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 317:/usr/include/c++/9/bits/stl_uninitialized.h **** 					 __result, __alloc);
 318:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 319:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 320:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 321:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _Allocator>
 322:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 323:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 324:/usr/include/c++/9/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 325:/usr/include/c++/9/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 326:/usr/include/c++/9/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 327:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 328:/usr/include/c++/9/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 329:/usr/include/c++/9/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 330:/usr/include/c++/9/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 331:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 332:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 333:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 334:/usr/include/c++/9/bits/stl_uninitialized.h ****     void
 335:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 336:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 337:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 338:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 339:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 340:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 341:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 342:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 343:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 344:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 345:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 346:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 347:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 348:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 349:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 350:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 351:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 352:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 353:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline void
 354:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 355:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 356:/usr/include/c++/9/bits/stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 357:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 358:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 359:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _Allocator>
 360:/usr/include/c++/9/bits/stl_uninitialized.h ****     _ForwardIterator
 361:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 362:/usr/include/c++/9/bits/stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 363:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 364:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 365:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 366:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 367:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 368:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 369:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 370:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  return __cur;
 371:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 372:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 373:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 374:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 375:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 376:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 377:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 378:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 379:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 380:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _Tp2>
 381:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 382:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 383:/usr/include/c++/9/bits/stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 384:/usr/include/c++/9/bits/stl_uninitialized.h ****     { return std::uninitialized_fill_n(__first, __n, __x); }
 385:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 386:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 387:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
 388:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_fill_move, __uninitialized_move_fill.
 389:/usr/include/c++/9/bits/stl_uninitialized.h ****   // All of these algorithms take a user-supplied allocator, which is used
 390:/usr/include/c++/9/bits/stl_uninitialized.h ****   // for construction and destruction.
 391:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 392:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_copy_move
 393:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Copies [first1, last1) into [result, result + (last1 - first1)), and
 394:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  move [first2, last2) into
 395:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 396:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 397:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 398:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 399:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_copy_move(_InputIterator1 __first1,
 400:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 401:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 402:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 403:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 404:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 405:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 406:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 407:/usr/include/c++/9/bits/stl_uninitialized.h **** 							   __result,
 408:/usr/include/c++/9/bits/stl_uninitialized.h **** 							   __alloc);
 409:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 410:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 411:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 412:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 413:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 414:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 415:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 416:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 417:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 418:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 419:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 420:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_move_copy
 421:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [result, result + (last1 - first1)), and
 422:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  copies [first2, last2) into
 423:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 424:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 425:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 426:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 427:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_move_copy(_InputIterator1 __first1,
 428:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 429:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 430:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 431:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 432:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 433:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 434:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 435:/usr/include/c++/9/bits/stl_uninitialized.h **** 							   __result,
 436:/usr/include/c++/9/bits/stl_uninitialized.h **** 							   __alloc);
 437:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 438:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 439:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 440:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 441:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 442:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 443:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 444:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 445:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 446:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 447:/usr/include/c++/9/bits/stl_uninitialized.h ****   
 448:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_fill_move
 449:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Fills [result, mid) with x, and moves [first, last) into
 450:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  [mid, mid + (last - first)).
 451:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
 452:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _Allocator>
 453:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 454:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
 455:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      const _Tp& __x, _InputIterator __first,
 456:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _InputIterator __last, _Allocator& __alloc)
 457:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 458:/usr/include/c++/9/bits/stl_uninitialized.h ****       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
 459:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 460:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 461:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 462:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 463:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 464:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 465:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 466:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 467:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 468:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 469:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 470:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_move_fill
 471:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
 472:/usr/include/c++/9/bits/stl_uninitialized.h ****   //  fills [first2 + (last1 - first1), last2) with x.
 473:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
 474:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _Allocator>
 475:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline void
 476:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
 477:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _ForwardIterator __first2,
 478:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _ForwardIterator __last2, const _Tp& __x,
 479:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 480:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 481:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
 482:/usr/include/c++/9/bits/stl_uninitialized.h **** 							    __first2,
 483:/usr/include/c++/9/bits/stl_uninitialized.h **** 							    __alloc);
 484:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 485:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 486:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 487:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 488:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 489:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 490:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__first2, __mid2, __alloc);
 491:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 492:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 493:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 494:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 495:/usr/include/c++/9/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
 496:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_default, __uninitialized_default_n,
 497:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_default_a, __uninitialized_default_n_a.
 498:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 499:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 500:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_default_1
 501:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 502:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 503:/usr/include/c++/9/bits/stl_uninitialized.h ****         static void
 504:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 505:/usr/include/c++/9/bits/stl_uninitialized.h ****         {
 506:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 507:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __try
 508:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 509:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 510:/usr/include/c++/9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 511:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 512:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __catch(...)
 513:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 514:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 515:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 516:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 517:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 518:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 519:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 520:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<>
 521:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_default_1<true>
 522:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 523:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 524:/usr/include/c++/9/bits/stl_uninitialized.h ****         static void
 525:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 526:/usr/include/c++/9/bits/stl_uninitialized.h ****         {
 527:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 528:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    _ValueType;
 529:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 530:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::fill(__first, __last, _ValueType());
 531:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 532:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 533:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 534:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 535:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1
 536:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 537:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 538:/usr/include/c++/9/bits/stl_uninitialized.h ****         static _ForwardIterator
 539:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 540:/usr/include/c++/9/bits/stl_uninitialized.h ****         {
 541:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 542:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __try
 543:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 544:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 545:/usr/include/c++/9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 546:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      return __cur;
 547:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 548:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __catch(...)
 549:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 550:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 551:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 552:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 553:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 554:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 555:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 556:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<>
 557:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1<true>
 558:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 559:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 560:/usr/include/c++/9/bits/stl_uninitialized.h ****         static _ForwardIterator
 561:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 562:/usr/include/c++/9/bits/stl_uninitialized.h ****         {
 563:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 564:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    _ValueType;
 565:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 566:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  return std::fill_n(__first, __n, _ValueType());
 567:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 568:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 569:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 570:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_default
 571:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 572:/usr/include/c++/9/bits/stl_uninitialized.h ****   // constructed value_types(s).
 573:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator>
 574:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline void
 575:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_default(_ForwardIterator __first,
 576:/usr/include/c++/9/bits/stl_uninitialized.h **** 			    _ForwardIterator __last)
 577:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 578:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 579:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType;
 580:/usr/include/c++/9/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 581:/usr/include/c++/9/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 582:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 583:/usr/include/c++/9/bits/stl_uninitialized.h ****       std::__uninitialized_default_1<__is_trivial(_ValueType)
 584:/usr/include/c++/9/bits/stl_uninitialized.h **** 				     && __assignable>::
 585:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_default(__first, __last);
 586:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 587:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 588:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_default_n
 589:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_type(s).
 590:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 591:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 592:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 593:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 594:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 595:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType;
 596:/usr/include/c++/9/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 597:/usr/include/c++/9/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 598:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 599:/usr/include/c++/9/bits/stl_uninitialized.h ****       return __uninitialized_default_n_1<__is_trivial(_ValueType)
 600:/usr/include/c++/9/bits/stl_uninitialized.h **** 				       && __assignable>::
 601:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_default_n(__first, __n);
 602:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 603:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 604:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 605:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_default_a
 606:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 607:/usr/include/c++/9/bits/stl_uninitialized.h ****   // constructed value_types(s), constructed with the allocator alloc.
 608:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Allocator>
 609:/usr/include/c++/9/bits/stl_uninitialized.h ****     void
 610:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 611:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 612:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 613:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 614:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 615:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 616:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 617:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 618:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 619:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 620:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 621:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 622:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 623:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 624:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 625:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 626:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 627:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 628:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 629:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline void
 630:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 631:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 632:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      allocator<_Tp>&)
 633:/usr/include/c++/9/bits/stl_uninitialized.h ****     { std::__uninitialized_default(__first, __last); }
 634:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 635:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 636:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_default_n_a
 637:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_types(s),
 638:/usr/include/c++/9/bits/stl_uninitialized.h ****   // constructed with the allocator alloc.
 639:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Allocator>
 640:/usr/include/c++/9/bits/stl_uninitialized.h ****     _ForwardIterator
 641:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 642:/usr/include/c++/9/bits/stl_uninitialized.h **** 				_Allocator& __alloc)
 643:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 644:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 645:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 646:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 647:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 648:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 649:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 650:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  return __cur;
 651:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 652:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 653:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 654:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 655:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 656:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 657:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 658:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 659:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 660:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 661:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 662:/usr/include/c++/9/bits/stl_uninitialized.h **** 				allocator<_Tp>&)
 663:/usr/include/c++/9/bits/stl_uninitialized.h ****     { return std::__uninitialized_default_n(__first, __n); }
 664:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 665:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 666:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_default_novalue_1
 667:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 668:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 669:/usr/include/c++/9/bits/stl_uninitialized.h **** 	static void
 670:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_default_novalue(_ForwardIterator __first,
 671:/usr/include/c++/9/bits/stl_uninitialized.h **** 				 _ForwardIterator __last)
 672:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 673:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 674:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __try
 675:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 676:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 677:/usr/include/c++/9/bits/stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 678:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 679:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __catch(...)
 680:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 681:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 682:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 683:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 684:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 685:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 686:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 687:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<>
 688:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_default_novalue_1<true>
 689:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 690:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 691:/usr/include/c++/9/bits/stl_uninitialized.h ****         static void
 692:/usr/include/c++/9/bits/stl_uninitialized.h ****         __uninit_default_novalue(_ForwardIterator __first,
 693:/usr/include/c++/9/bits/stl_uninitialized.h **** 				 _ForwardIterator __last)
 694:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 695:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 696:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 697:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 698:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 699:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1
 700:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 701:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 702:/usr/include/c++/9/bits/stl_uninitialized.h **** 	static _ForwardIterator
 703:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 704:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 705:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 706:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __try
 707:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 708:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 709:/usr/include/c++/9/bits/stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 710:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      return __cur;
 711:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 712:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __catch(...)
 713:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    {
 714:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 715:/usr/include/c++/9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 716:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    }
 717:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 718:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 719:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 720:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<>
 721:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1<true>
 722:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 723:/usr/include/c++/9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 724:/usr/include/c++/9/bits/stl_uninitialized.h **** 	static _ForwardIterator
 725:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 726:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{ return std::next(__first, __n); }
 727:/usr/include/c++/9/bits/stl_uninitialized.h ****     };
 728:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 729:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_default_novalue
 730:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default-initialized
 731:/usr/include/c++/9/bits/stl_uninitialized.h ****   // value_types(s).
 732:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator>
 733:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline void
 734:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_default_novalue(_ForwardIterator __first,
 735:/usr/include/c++/9/bits/stl_uninitialized.h **** 				    _ForwardIterator __last)
 736:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 737:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 738:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType;
 739:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 740:/usr/include/c++/9/bits/stl_uninitialized.h ****       std::__uninitialized_default_novalue_1<
 741:/usr/include/c++/9/bits/stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 742:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_default_novalue(__first, __last);
 743:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 744:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 745:/usr/include/c++/9/bits/stl_uninitialized.h ****   // __uninitialized_default_n
 746:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default-initialized value_type(s).
 747:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 748:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 749:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
 750:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 751:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 752:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType;
 753:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 754:/usr/include/c++/9/bits/stl_uninitialized.h ****       return __uninitialized_default_novalue_n_1<
 755:/usr/include/c++/9/bits/stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 756:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__uninit_default_novalue_n(__first, __n);
 757:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 758:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 759:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 760:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _ForwardIterator>
 761:/usr/include/c++/9/bits/stl_uninitialized.h ****     _ForwardIterator
 762:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_copy_n(_InputIterator __first, _Size __n,
 763:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 764:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 765:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 766:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 767:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 768:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 769:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 770:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  return __cur;
 771:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 772:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 773:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 774:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 775:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 776:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 777:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 778:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 779:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 780:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _ForwardIterator>
 781:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 782:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
 783:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result,
 784:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   random_access_iterator_tag)
 785:/usr/include/c++/9/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __first + __n, __result); }
 786:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 787:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 788:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _ForwardIterator>
 789:/usr/include/c++/9/bits/stl_uninitialized.h ****     pair<_InputIterator, _ForwardIterator>
 790:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 791:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 792:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 793:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 794:/usr/include/c++/9/bits/stl_uninitialized.h ****       __try
 795:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 796:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 797:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 798:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  return {__first, __cur};
 799:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 800:/usr/include/c++/9/bits/stl_uninitialized.h ****       __catch(...)
 801:/usr/include/c++/9/bits/stl_uninitialized.h **** 	{
 802:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 803:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 804:/usr/include/c++/9/bits/stl_uninitialized.h **** 	}
 805:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 806:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 807:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 808:/usr/include/c++/9/bits/stl_uninitialized.h **** 	   typename _ForwardIterator>
 809:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline pair<_RandomAccessIterator, _ForwardIterator>
 810:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
 811:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result,
 812:/usr/include/c++/9/bits/stl_uninitialized.h **** 			   random_access_iterator_tag)
 813:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 814:/usr/include/c++/9/bits/stl_uninitialized.h ****       auto __second_res = uninitialized_copy(__first, __first + __n, __result);
 815:/usr/include/c++/9/bits/stl_uninitialized.h ****       auto __first_res = std::next(__first, __n);
 816:/usr/include/c++/9/bits/stl_uninitialized.h ****       return {__first_res, __second_res};
 817:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 818:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 819:/usr/include/c++/9/bits/stl_uninitialized.h ****   /**
 820:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,first+n) into result.
 821:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 822:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __n      The number of elements to copy.
 823:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 824:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  @return  __result + __n
 825:/usr/include/c++/9/bits/stl_uninitialized.h ****    *
 826:/usr/include/c++/9/bits/stl_uninitialized.h ****    *  Like copy_n(), but does not require an initialized output range.
 827:/usr/include/c++/9/bits/stl_uninitialized.h ****   */
 828:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 829:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 830:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_copy_n(_InputIterator __first, _Size __n,
 831:/usr/include/c++/9/bits/stl_uninitialized.h **** 			 _ForwardIterator __result)
 832:/usr/include/c++/9/bits/stl_uninitialized.h ****     { return std::__uninitialized_copy_n(__first, __n, __result,
 833:/usr/include/c++/9/bits/stl_uninitialized.h **** 					 std::__iterator_category(__first)); }
 834:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 835:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 836:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 837:/usr/include/c++/9/bits/stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 838:/usr/include/c++/9/bits/stl_uninitialized.h **** 			      _ForwardIterator __result)
 839:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 840:/usr/include/c++/9/bits/stl_uninitialized.h ****       return
 841:/usr/include/c++/9/bits/stl_uninitialized.h **** 	std::__uninitialized_copy_n_pair(__first, __n, __result,
 842:/usr/include/c++/9/bits/stl_uninitialized.h **** 					 std::__iterator_category(__first));
 843:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 844:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 845:/usr/include/c++/9/bits/stl_uninitialized.h **** #endif
 846:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 847:/usr/include/c++/9/bits/stl_uninitialized.h **** #if __cplusplus >= 201703L
 848:/usr/include/c++/9/bits/stl_uninitialized.h **** # define __cpp_lib_raw_memory_algorithms 201606L
 849:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 850:/usr/include/c++/9/bits/stl_uninitialized.h ****   template <typename _ForwardIterator>
 851:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline void
 852:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_default_construct(_ForwardIterator __first,
 853:/usr/include/c++/9/bits/stl_uninitialized.h **** 				    _ForwardIterator __last)
 854:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 855:/usr/include/c++/9/bits/stl_uninitialized.h ****       __uninitialized_default_novalue(__first, __last);
 856:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 857:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 858:/usr/include/c++/9/bits/stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 859:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 860:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)
 861:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 862:/usr/include/c++/9/bits/stl_uninitialized.h ****       return __uninitialized_default_novalue_n(__first, __count);
 863:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 864:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 865:/usr/include/c++/9/bits/stl_uninitialized.h ****   template <typename _ForwardIterator>
 866:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline void
 867:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_value_construct(_ForwardIterator __first,
 868:/usr/include/c++/9/bits/stl_uninitialized.h **** 				  _ForwardIterator __last)
 869:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 870:/usr/include/c++/9/bits/stl_uninitialized.h ****       return __uninitialized_default(__first, __last);
 871:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 872:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 873:/usr/include/c++/9/bits/stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 874:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 875:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)
 876:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 877:/usr/include/c++/9/bits/stl_uninitialized.h ****       return __uninitialized_default_n(__first, __count);
 878:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 879:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 880:/usr/include/c++/9/bits/stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator>
 881:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 882:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_move(_InputIterator __first, _InputIterator __last,
 883:/usr/include/c++/9/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 884:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 885:/usr/include/c++/9/bits/stl_uninitialized.h ****       return std::uninitialized_copy
 886:/usr/include/c++/9/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 887:/usr/include/c++/9/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);
 888:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 889:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 890:/usr/include/c++/9/bits/stl_uninitialized.h ****   template <typename _InputIterator, typename _Size, typename _ForwardIterator>
 891:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 892:/usr/include/c++/9/bits/stl_uninitialized.h ****     uninitialized_move_n(_InputIterator __first, _Size __count,
 893:/usr/include/c++/9/bits/stl_uninitialized.h **** 			 _ForwardIterator __result)
 894:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 895:/usr/include/c++/9/bits/stl_uninitialized.h ****       auto __res = std::__uninitialized_copy_n_pair
 896:/usr/include/c++/9/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 897:/usr/include/c++/9/bits/stl_uninitialized.h **** 	 __count, __result);
 898:/usr/include/c++/9/bits/stl_uninitialized.h ****       return {__res.first.base(), __res.second};
 899:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 900:/usr/include/c++/9/bits/stl_uninitialized.h **** #endif // C++17
 901:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 902:/usr/include/c++/9/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
 903:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _Tp, typename _Up, typename _Allocator>
 904:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline void
 905:/usr/include/c++/9/bits/stl_uninitialized.h ****     __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 906:/usr/include/c++/9/bits/stl_uninitialized.h ****     noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
 907:/usr/include/c++/9/bits/stl_uninitialized.h **** 			 __dest, std::move(*__orig)))
 908:/usr/include/c++/9/bits/stl_uninitialized.h **** 	     && noexcept(std::allocator_traits<_Allocator>::destroy(
 909:/usr/include/c++/9/bits/stl_uninitialized.h **** 			    __alloc, std::__addressof(*__orig))))
 910:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 911:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef std::allocator_traits<_Allocator> __traits;
 912:/usr/include/c++/9/bits/stl_uninitialized.h ****       __traits::construct(__alloc, __dest, std::move(*__orig));
 913:/usr/include/c++/9/bits/stl_uninitialized.h ****       __traits::destroy(__alloc, std::__addressof(*__orig));
 914:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 915:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 916:/usr/include/c++/9/bits/stl_uninitialized.h ****   // This class may be specialized for specific types.
 917:/usr/include/c++/9/bits/stl_uninitialized.h ****   // Also known as is_trivially_relocatable.
 918:/usr/include/c++/9/bits/stl_uninitialized.h ****   template<typename _Tp, typename = void>
 919:/usr/include/c++/9/bits/stl_uninitialized.h ****     struct __is_bitwise_relocatable
 920:/usr/include/c++/9/bits/stl_uninitialized.h ****     : is_trivial<_Tp> { };
 921:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 922:/usr/include/c++/9/bits/stl_uninitialized.h ****   template <typename _Tp, typename _Up>
 923:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
 924:/usr/include/c++/9/bits/stl_uninitialized.h ****     __relocate_a_1(_Tp* __first, _Tp* __last,
 925:/usr/include/c++/9/bits/stl_uninitialized.h **** 		   _Tp* __result, allocator<_Up>&) noexcept
 926:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 927:/usr/include/c++/9/bits/stl_uninitialized.h ****       ptrdiff_t __count = __last - __first;
 928:/usr/include/c++/9/bits/stl_uninitialized.h ****       if (__count > 0)
 929:/usr/include/c++/9/bits/stl_uninitialized.h **** 	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 930:/usr/include/c++/9/bits/stl_uninitialized.h ****       return __result + __count;
 931:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 932:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 933:/usr/include/c++/9/bits/stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
 934:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    typename _Allocator>
 935:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 936:/usr/include/c++/9/bits/stl_uninitialized.h ****     __relocate_a_1(_InputIterator __first, _InputIterator __last,
 937:/usr/include/c++/9/bits/stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
 938:/usr/include/c++/9/bits/stl_uninitialized.h ****     noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
 939:/usr/include/c++/9/bits/stl_uninitialized.h **** 					       std::addressof(*__first),
 940:/usr/include/c++/9/bits/stl_uninitialized.h **** 					       __alloc)))
 941:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 942:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 943:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType;
 944:/usr/include/c++/9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 945:/usr/include/c++/9/bits/stl_uninitialized.h **** 	_ValueType2;
 946:/usr/include/c++/9/bits/stl_uninitialized.h ****       static_assert(std::is_same<_ValueType, _ValueType2>::value,
 947:/usr/include/c++/9/bits/stl_uninitialized.h **** 	  "relocation is only possible for values of the same type");
 948:/usr/include/c++/9/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 949:/usr/include/c++/9/bits/stl_uninitialized.h ****       for (; __first != __last; ++__first, (void)++__cur)
 950:/usr/include/c++/9/bits/stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 951:/usr/include/c++/9/bits/stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
 952:/usr/include/c++/9/bits/stl_uninitialized.h ****       return __cur;
 953:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 954:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 955:/usr/include/c++/9/bits/stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
 956:/usr/include/c++/9/bits/stl_uninitialized.h **** 	    typename _Allocator>
 957:/usr/include/c++/9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 958:/usr/include/c++/9/bits/stl_uninitialized.h ****     __relocate_a(_InputIterator __first, _InputIterator __last,
 14975              		.loc 16 958 5
 14976              		.cfi_startproc
 14977 0000 F30F1EFA 		endbr64
 14978 0004 55       		pushq	%rbp
 14979              		.cfi_def_cfa_offset 16
 14980              		.cfi_offset 6, -16
 14981 0005 4889E5   		movq	%rsp, %rbp
 14982              		.cfi_def_cfa_register 6
 14983 0008 4154     		pushq	%r12
 14984 000a 53       		pushq	%rbx
 14985 000b 4883EC20 		subq	$32, %rsp
 14986              		.cfi_offset 12, -24
 14987              		.cfi_offset 3, -32
 14988 000f 48897DE8 		movq	%rdi, -24(%rbp)
 14989 0013 488975E0 		movq	%rsi, -32(%rbp)
 14990 0017 488955D8 		movq	%rdx, -40(%rbp)
 14991 001b 48894DD0 		movq	%rcx, -48(%rbp)
 959:/usr/include/c++/9/bits/stl_uninitialized.h **** 		 _ForwardIterator __result, _Allocator& __alloc)
 960:/usr/include/c++/9/bits/stl_uninitialized.h ****     noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
 961:/usr/include/c++/9/bits/stl_uninitialized.h **** 				     std::__niter_base(__last),
 962:/usr/include/c++/9/bits/stl_uninitialized.h **** 				     std::__niter_base(__result), __alloc)))
 963:/usr/include/c++/9/bits/stl_uninitialized.h ****     {
 964:/usr/include/c++/9/bits/stl_uninitialized.h ****       return __relocate_a_1(std::__niter_base(__first),
 14992              		.loc 16 964 28
 14993 001f 488B45D8 		movq	-40(%rbp), %rax
 14994 0023 4889C7   		movq	%rax, %rdi
 14995 0026 E8000000 		call	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_
 14995      00
 14996 002b 4989C4   		movq	%rax, %r12
 14997 002e 488B45E0 		movq	-32(%rbp), %rax
 14998 0032 4889C7   		movq	%rax, %rdi
 14999 0035 E8000000 		call	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_
 14999      00
 15000 003a 4889C3   		movq	%rax, %rbx
 15001 003d 488B45E8 		movq	-24(%rbp), %rax
 15002 0041 4889C7   		movq	%rax, %rdi
 15003 0044 E8000000 		call	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_
 15003      00
 15004 0049 4889C7   		movq	%rax, %rdi
 15005 004c 488B45D0 		movq	-48(%rbp), %rax
 15006 0050 4889C1   		movq	%rax, %rcx
 15007 0053 4C89E2   		movq	%r12, %rdx
 15008 0056 4889DE   		movq	%rbx, %rsi
 15009 0059 E8000000 		call	_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_
 15009      00
 965:/usr/include/c++/9/bits/stl_uninitialized.h **** 			    std::__niter_base(__last),
 966:/usr/include/c++/9/bits/stl_uninitialized.h **** 			    std::__niter_base(__result), __alloc);
 967:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 15010              		.loc 16 967 5
 15011 005e 4883C420 		addq	$32, %rsp
 15012 0062 5B       		popq	%rbx
 15013 0063 415C     		popq	%r12
 15014 0065 5D       		popq	%rbp
 15015              		.cfi_def_cfa 7, 8
 15016 0066 C3       		ret
 15017              		.cfi_endproc
 15018              	.LFE2999:
 15020              		.section	.data.rel.local
 15021              		.align 32
 15024              	.Lubsan_data668:
 15025 4780 00000000 		.quad	.LC13
 15025      00000000 
 15026 4788 F1030000 		.long	1009
 15027 478c 18000000 		.long	24
 15028 4790 00000000 		.quad	.Lubsan_type29
 15028      00000000 
 15029 4798 03       		.byte	3
 15030 4799 00       		.byte	0
 15031 479a 00000000 		.zero	6
 15031      0000
 15032 47a0 00000000 		.zero	32
 15032      00000000 
 15032      00000000 
 15032      00000000 
 15032      00000000 
 15033              		.section	.rodata
 15034              	.LC37:
 15035 0b60 31203332 		.string	"1 32 8 9 __it:1007"
 15035      20382039 
 15035      205F5F69 
 15035      743A3130 
 15035      303700
 15036              		.section	.text._ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS
 15037              		.weak	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_E
 15039              	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EEET_N9_
 15040              	.LASANPC3000:
 15041              	.LFB3000:
 990:/usr/include/c++/9/bits/stl_iterator.h **** 
 991:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 992:/usr/include/c++/9/bits/stl_iterator.h ****     inline __normal_iterator<_Iterator, _Container>
 993:/usr/include/c++/9/bits/stl_iterator.h ****     operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
 994:/usr/include/c++/9/bits/stl_iterator.h **** 	      __n, const __normal_iterator<_Iterator, _Container>& __i)
 995:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 996:/usr/include/c++/9/bits/stl_iterator.h ****     { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
 997:/usr/include/c++/9/bits/stl_iterator.h **** 
 998:/usr/include/c++/9/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 999:/usr/include/c++/9/bits/stl_iterator.h **** } // namespace
1000:/usr/include/c++/9/bits/stl_iterator.h **** 
1001:/usr/include/c++/9/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
1002:/usr/include/c++/9/bits/stl_iterator.h **** {
1003:/usr/include/c++/9/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
1004:/usr/include/c++/9/bits/stl_iterator.h **** 
1005:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1006:/usr/include/c++/9/bits/stl_iterator.h ****     _Iterator
1007:/usr/include/c++/9/bits/stl_iterator.h ****     __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 15042              		.loc 7 1007 5
 15043              		.cfi_startproc
 15044 0000 F30F1EFA 		endbr64
 15045 0004 55       		pushq	%rbp
 15046              		.cfi_def_cfa_offset 16
 15047              		.cfi_offset 6, -16
 15048 0005 4889E5   		movq	%rsp, %rbp
 15049              		.cfi_def_cfa_register 6
 15050 0008 4156     		pushq	%r14
 15051 000a 4155     		pushq	%r13
 15052 000c 4154     		pushq	%r12
 15053 000e 53       		pushq	%rbx
 15054 000f 4883EC70 		subq	$112, %rsp
 15055              		.cfi_offset 14, -24
 15056              		.cfi_offset 13, -32
 15057              		.cfi_offset 12, -40
 15058              		.cfi_offset 3, -48
 15059 0013 4889BD78 		movq	%rdi, -136(%rbp)
 15059      FFFFFF
 15060 001a 488D5D80 		leaq	-128(%rbp), %rbx
 15061 001e 4989DE   		movq	%rbx, %r14
 15062 0021 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 15062      000000
 15063 0028 7412     		je	.L950
 15064 002a BF400000 		movl	$64, %edi
 15064      00
 15065 002f E8000000 		call	__asan_stack_malloc_0@PLT
 15065      00
 15066              	.LVL23:
 15067 0034 4885C0   		testq	%rax, %rax
 15068 0037 7403     		je	.L950
 15069 0039 4889C3   		movq	%rax, %rbx
 15070              	.L950:
 15071 003c 488D4360 		leaq	96(%rbx), %rax
 15072 0040 48C703B3 		movq	$1102416563, (%rbx)
 15072      8AB541
 15073 0047 488D1500 		leaq	.LC37(%rip), %rdx
 15073      000000
 15074 004e 48895308 		movq	%rdx, 8(%rbx)
 15075 0052 488D15A7 		leaq	.LASANPC3000(%rip), %rdx
 15075      FFFFFF
 15076 0059 48895310 		movq	%rdx, 16(%rbx)
 15077 005d 4989DC   		movq	%rbx, %r12
 15078 0060 49C1EC03 		shrq	$3, %r12
 15079 0064 41C78424 		movl	$-235802127, 2147450880(%r12)
 15079      0080FF7F 
 15079      F1F1F1F1 
 15080 0070 41C78424 		movl	$-202116352, 2147450884(%r12)
 15080      0480FF7F 
 15080      00F3F3F3 
 15081              		.loc 7 1007 5
 15082 007c 64488B0C 		movq	%fs:40, %rcx
 15082      25280000 
 15082      00
 15083 0085 48894DD8 		movq	%rcx, -40(%rbp)
 15084 0089 31C9     		xorl	%ecx, %ecx
 15085              		.loc 7 1007 70
 15086 008b 488B9578 		movq	-136(%rbp), %rdx
 15086      FFFFFF
 15087 0092 488950C0 		movq	%rdx, -64(%rax)
1008:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
1009:/usr/include/c++/9/bits/stl_iterator.h ****     { return __it.base(); }
 15088              		.loc 7 1009 24
 15089 0096 4883E840 		subq	$64, %rax
 15090 009a 4889C7   		movq	%rax, %rdi
 15091 009d E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 15091      00
 15092 00a2 4989C5   		movq	%rax, %r13
 15093 00a5 4C89E8   		movq	%r13, %rax
 15094 00a8 4D85ED   		testq	%r13, %r13
 15095 00ab 740B     		je	.L954
 15096 00ad 4889C2   		movq	%rax, %rdx
 15097 00b0 83E207   		andl	$7, %edx
 15098 00b3 4885D2   		testq	%rdx, %rdx
 15099 00b6 740F     		je	.L955
 15100              	.L954:
 15101 00b8 4889C6   		movq	%rax, %rsi
 15102 00bb 488D3D00 		leaq	.Lubsan_data668(%rip), %rdi
 15102      000000
 15103 00c2 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15103      00
 15104              	.L955:
 15105 00c7 4C89E8   		movq	%r13, %rax
 15106 00ca 4889C2   		movq	%rax, %rdx
 15107 00cd 48C1EA03 		shrq	$3, %rdx
 15108 00d1 4881C200 		addq	$2147450880, %rdx
 15108      80FF7F
 15109 00d8 0FB612   		movzbl	(%rdx), %edx
 15110 00db 84D2     		testb	%dl, %dl
 15111 00dd 7408     		je	.L956
 15112 00df 4889C7   		movq	%rax, %rdi
 15113 00e2 E8000000 		call	__asan_report_load8@PLT
 15113      00
 15114              	.L956:
 15115 00e7 498B4500 		movq	0(%r13), %rax
 15116 00eb 4889C2   		movq	%rax, %rdx
1007:/usr/include/c++/9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 15117              		.loc 7 1007 5
 15118 00ee 4939DE   		cmpq	%rbx, %r14
 15119 00f1 7422     		je	.L951
 15120 00f3 48C7030E 		movq	$1172321806, (%rbx)
 15120      36E045
 15121 00fa 48B8F5F5 		movabsq	$-723401728380766731, %rax
 15121      F5F5F5F5 
 15121      F5F5
 15122 0104 49898424 		movq	%rax, 2147450880(%r12)
 15122      0080FF7F 
 15123 010c 488B4338 		movq	56(%rbx), %rax
 15124 0110 C60000   		movb	$0, (%rax)
 15125 0113 EB0C     		jmp	.L952
 15126              	.L951:
 15127 0115 49C78424 		movq	$0, 2147450880(%r12)
 15127      0080FF7F 
 15127      00000000 
 15128              	.L952:
 15129              		.loc 7 1009 27
 15130 0121 488B45D8 		movq	-40(%rbp), %rax
 15131 0125 64483304 		xorq	%fs:40, %rax
 15131      25280000 
 15131      00
 15132 012e 7405     		je	.L958
 15133 0130 E8000000 		call	__stack_chk_fail@PLT
 15133      00
 15134              	.L958:
 15135 0135 4889D0   		movq	%rdx, %rax
 15136 0138 4883C470 		addq	$112, %rsp
 15137 013c 5B       		popq	%rbx
 15138 013d 415C     		popq	%r12
 15139 013f 415D     		popq	%r13
 15140 0141 415E     		popq	%r14
 15141 0143 5D       		popq	%rbp
 15142              		.cfi_def_cfa 7, 8
 15143 0144 C3       		ret
 15144              		.cfi_endproc
 15145              	.LFE3000:
 15147              		.section	.text._ZSt13__copy_move_aILb1EPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET1
 15148              		.weak	_ZSt13__copy_move_aILb1EPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET1_T0_S8_S7
 15150              	_ZSt13__copy_move_aILb1EPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET1_T0_S8_S7_:
 15151              	.LASANPC3001:
 15152              	.LFB3001:
 393:/usr/include/c++/9/bits/stl_algobase.h ****     {
 15153              		.loc 17 393 5
 15154              		.cfi_startproc
 15155 0000 F30F1EFA 		endbr64
 15156 0004 55       		pushq	%rbp
 15157              		.cfi_def_cfa_offset 16
 15158              		.cfi_offset 6, -16
 15159 0005 4889E5   		movq	%rsp, %rbp
 15160              		.cfi_def_cfa_register 6
 15161 0008 4883EC30 		subq	$48, %rsp
 15162 000c 48897DE8 		movq	%rdi, -24(%rbp)
 15163 0010 488975E0 		movq	%rsi, -32(%rbp)
 15164 0014 488955D8 		movq	%rdx, -40(%rbp)
 398:/usr/include/c++/9/bits/stl_algobase.h **** 			     && __is_pointer<_II>::__value
 15165              		.loc 17 398 18
 15166 0018 C645FF00 		movb	$0, -1(%rbp)
 404:/usr/include/c++/9/bits/stl_algobase.h ****     }
 15167              		.loc 17 404 30
 15168 001c 488B55D8 		movq	-40(%rbp), %rdx
 15169 0020 488B4DE0 		movq	-32(%rbp), %rcx
 15170 0024 488B45E8 		movq	-24(%rbp), %rax
 15171 0028 4889CE   		movq	%rcx, %rsi
 15172 002b 4889C7   		movq	%rax, %rdi
 15173 002e E8000000 		call	_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_strin
 15173      00
 405:/usr/include/c++/9/bits/stl_algobase.h **** 
 15174              		.loc 17 405 5
 15175 0033 C9       		leave
 15176              		.cfi_def_cfa 7, 8
 15177 0034 C3       		ret
 15178              		.cfi_endproc
 15179              	.LFE3001:
 15181              		.section	.rodata
 15182              	.LC38:
 15183 0b73 31203332 		.string	"1 32 8 10 __from:289"
 15183      20382031 
 15183      30205F5F 
 15183      66726F6D 
 15183      3A323839 
 15184              		.section	.text._ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11c
 15185              		.weak	_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_trait
 15187              	_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 15188              	.LASANPC3002:
 15189              	.LFB3002:
 289:/usr/include/c++/9/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 15190              		.loc 17 289 5
 15191              		.cfi_startproc
 15192 0000 F30F1EFA 		endbr64
 15193 0004 55       		pushq	%rbp
 15194              		.cfi_def_cfa_offset 16
 15195              		.cfi_offset 6, -16
 15196 0005 4889E5   		movq	%rsp, %rbp
 15197              		.cfi_def_cfa_register 6
 15198 0008 4156     		pushq	%r14
 15199 000a 4155     		pushq	%r13
 15200 000c 4154     		pushq	%r12
 15201 000e 53       		pushq	%rbx
 15202 000f 4883EC70 		subq	$112, %rsp
 15203              		.cfi_offset 14, -24
 15204              		.cfi_offset 13, -32
 15205              		.cfi_offset 12, -40
 15206              		.cfi_offset 3, -48
 15207 0013 4889BD78 		movq	%rdi, -136(%rbp)
 15207      FFFFFF
 15208 001a 4889B570 		movq	%rsi, -144(%rbp)
 15208      FFFFFF
 15209 0021 488D5D80 		leaq	-128(%rbp), %rbx
 15210 0025 4989DE   		movq	%rbx, %r14
 15211 0028 833D0000 		cmpl	$0, __asan_option_detect_stack_use_after_return(%rip)
 15211      000000
 15212 002f 7412     		je	.L961
 15213 0031 BF400000 		movl	$64, %edi
 15213      00
 15214 0036 E8000000 		call	__asan_stack_malloc_0@PLT
 15214      00
 15215              	.LVL24:
 15216 003b 4885C0   		testq	%rax, %rax
 15217 003e 7403     		je	.L961
 15218 0040 4889C3   		movq	%rax, %rbx
 15219              	.L961:
 15220 0043 488D4360 		leaq	96(%rbx), %rax
 15221 0047 4989C5   		movq	%rax, %r13
 15222 004a 48C703B3 		movq	$1102416563, (%rbx)
 15222      8AB541
 15223 0051 488D0500 		leaq	.LC38(%rip), %rax
 15223      000000
 15224 0058 48894308 		movq	%rax, 8(%rbx)
 15225 005c 488D059D 		leaq	.LASANPC3002(%rip), %rax
 15225      FFFFFF
 15226 0063 48894310 		movq	%rax, 16(%rbx)
 15227 0067 4989DC   		movq	%rbx, %r12
 15228 006a 49C1EC03 		shrq	$3, %r12
 15229 006e 41C78424 		movl	$-235802127, 2147450880(%r12)
 15229      0080FF7F 
 15229      F1F1F1F1 
 15230 007a 41C78424 		movl	$-202116352, 2147450884(%r12)
 15230      0480FF7F 
 15230      00F3F3F3 
 289:/usr/include/c++/9/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 15231              		.loc 17 289 5
 15232 0086 64488B04 		movq	%fs:40, %rax
 15232      25280000 
 15232      00
 15233 008f 488945D8 		movq	%rax, -40(%rbp)
 15234 0093 31C0     		xorl	%eax, %eax
 289:/usr/include/c++/9/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 15235              		.loc 17 289 24
 15236 0095 488B8578 		movq	-136(%rbp), %rax
 15236      FFFFFF
 15237 009c 498945C0 		movq	%rax, -64(%r13)
 290:/usr/include/c++/9/bits/stl_algobase.h **** 
 15238              		.loc 17 290 49
 15239 00a0 498B45C0 		movq	-64(%r13), %rax
 15240 00a4 4889C7   		movq	%rax, %rdi
 15241 00a7 E8000000 		call	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EE
 15241      00
 290:/usr/include/c++/9/bits/stl_algobase.h **** 
 15242              		.loc 17 290 30
 15243 00ac 488B9570 		movq	-144(%rbp), %rdx
 15243      FFFFFF
 15244 00b3 4829C2   		subq	%rax, %rdx
 15245 00b6 4889D0   		movq	%rdx, %rax
 290:/usr/include/c++/9/bits/stl_algobase.h **** 
 15246              		.loc 17 290 21
 15247 00b9 48C1F805 		sarq	$5, %rax
 15248 00bd 4889C2   		movq	%rax, %rdx
 15249 00c0 498D45C0 		leaq	-64(%r13), %rax
 15250 00c4 4889D6   		movq	%rdx, %rsi
 15251 00c7 4889C7   		movq	%rax, %rdi
 15252 00ca E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vec
 15252      00
 290:/usr/include/c++/9/bits/stl_algobase.h **** 
 15253              		.loc 17 290 57
 15254 00cf 4889C2   		movq	%rax, %rdx
 289:/usr/include/c++/9/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 15255              		.loc 17 289 5
 15256 00d2 4939DE   		cmpq	%rbx, %r14
 15257 00d5 7422     		je	.L962
 15258 00d7 48C7030E 		movq	$1172321806, (%rbx)
 15258      36E045
 15259 00de 48B8F5F5 		movabsq	$-723401728380766731, %rax
 15259      F5F5F5F5 
 15259      F5F5
 15260 00e8 49898424 		movq	%rax, 2147450880(%r12)
 15260      0080FF7F 
 15261 00f0 488B4338 		movq	56(%rbx), %rax
 15262 00f4 C60000   		movb	$0, (%rax)
 15263 00f7 EB0C     		jmp	.L963
 15264              	.L962:
 15265 00f9 49C78424 		movq	$0, 2147450880(%r12)
 15265      0080FF7F 
 15265      00000000 
 15266              	.L963:
 290:/usr/include/c++/9/bits/stl_algobase.h **** 
 15267              		.loc 17 290 60
 15268 0105 488B45D8 		movq	-40(%rbp), %rax
 15269 0109 64483304 		xorq	%fs:40, %rax
 15269      25280000 
 15269      00
 15270 0112 7405     		je	.L966
 15271 0114 E8000000 		call	__stack_chk_fail@PLT
 15271      00
 15272              	.L966:
 15273 0119 4889D0   		movq	%rdx, %rax
 15274 011c 4883C470 		addq	$112, %rsp
 15275 0120 5B       		popq	%rbx
 15276 0121 415C     		popq	%r12
 15277 0123 415D     		popq	%r13
 15278 0125 415E     		popq	%r14
 15279 0127 5D       		popq	%rbp
 15280              		.cfi_def_cfa 7, 8
 15281 0128 C3       		ret
 15282              		.cfi_endproc
 15283              	.LFE3002:
 15285              		.section	.text._ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 15286              		.align 2
 15287              		.weak	_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_size
 15289              	_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv:
 15290              	.LASANPC3023:
 15291              	.LFB3023:
 132:/usr/include/c++/9/ext/new_allocator.h ****       {
 15292              		.loc 9 132 7
 15293              		.cfi_startproc
 15294 0000 F30F1EFA 		endbr64
 15295 0004 55       		pushq	%rbp
 15296              		.cfi_def_cfa_offset 16
 15297              		.cfi_offset 6, -16
 15298 0005 4889E5   		movq	%rsp, %rbp
 15299              		.cfi_def_cfa_register 6
 15300 0008 48897DF8 		movq	%rdi, -8(%rbp)
 135:/usr/include/c++/9/ext/new_allocator.h **** #else
 15301              		.loc 9 135 45
 15302 000c 48B8FFFF 		movabsq	$288230376151711743, %rax
 15302      FFFFFFFF 
 15302      FF03
 139:/usr/include/c++/9/ext/new_allocator.h **** 
 15303              		.loc 9 139 7
 15304 0016 5D       		popq	%rbp
 15305              		.cfi_def_cfa 7, 8
 15306 0017 C3       		ret
 15307              		.cfi_endproc
 15308              	.LFE3023:
 15310              		.section	.data.rel.local
 15311              		.align 32
 15314              	.Lubsan_data669:
 15315 47c0 00000000 		.quad	.LC32
 15315      00000000 
 15316 47c8 4B000000 		.long	75
 15317 47cc 3D000000 		.long	61
 15318 47d0 00000000 		.quad	.Lubsan_type40
 15318      00000000 
 15319 47d8 03       		.byte	3
 15320 47d9 02       		.byte	2
 15321 47da 00000000 		.zero	6
 15321      0000
 15322 47e0 00000000 		.zero	32
 15322      00000000 
 15322      00000000 
 15322      00000000 
 15322      00000000 
 15323              		.align 32
 15326              	.Lubsan_data670:
 15327 4800 00000000 		.quad	.LC32
 15327      00000000 
 15328 4808 4B000000 		.long	75
 15329 480c 07000000 		.long	7
 15330 4810 00000000 		.quad	.Lubsan_type5
 15330      00000000 
 15331 4818 03       		.byte	3
 15332 4819 05       		.byte	5
 15333 481a 00000000 		.zero	6
 15333      0000
 15334 4820 00000000 		.zero	32
 15334      00000000 
 15334      00000000 
 15334      00000000 
 15334      00000000 
 15335              		.section	.text._ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_Dp
 15336              		.weak	_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_DpOT0_
 15338              	_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_DpOT0_:
 15339              	.LASANPC3024:
 15340              	.LFB3024:
  74:/usr/include/c++/9/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 15341              		.loc 12 74 5
 15342              		.cfi_startproc
 15343              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 15344              		.cfi_lsda 0x1b,.LLSDA3024
 15345 0000 F30F1EFA 		endbr64
 15346 0004 55       		pushq	%rbp
 15347              		.cfi_def_cfa_offset 16
 15348              		.cfi_offset 6, -16
 15349 0005 4889E5   		movq	%rsp, %rbp
 15350              		.cfi_def_cfa_register 6
 15351 0008 4155     		pushq	%r13
 15352 000a 4154     		pushq	%r12
 15353 000c 53       		pushq	%rbx
 15354 000d 4883EC18 		subq	$24, %rsp
 15355              		.cfi_offset 13, -24
 15356              		.cfi_offset 12, -32
 15357              		.cfi_offset 3, -40
 15358 0011 48897DD8 		movq	%rdi, -40(%rbp)
 15359 0015 488975D0 		movq	%rsi, -48(%rbp)
  75:/usr/include/c++/9/bits/stl_construct.h **** #else
 15360              		.loc 12 75 61
 15361 0019 488B45D0 		movq	-48(%rbp), %rax
 15362 001d 48837DD0 		cmpq	$0, -48(%rbp)
 15362      00
 15363 0022 740B     		je	.L970
 15364 0024 4889C2   		movq	%rax, %rdx
 15365 0027 83E207   		andl	$7, %edx
 15366 002a 4885D2   		testq	%rdx, %rdx
 15367 002d 740F     		je	.L971
 15368              	.L970:
 15369 002f 4889C6   		movq	%rax, %rsi
 15370 0032 488D3D00 		leaq	.Lubsan_data669(%rip), %rdi
 15370      000000
 15371 0039 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15371      00
 15372              	.L971:
 15373 003e 488B45D0 		movq	-48(%rbp), %rax
 15374 0042 4889C7   		movq	%rax, %rdi
 15375 0045 E8000000 		call	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_reference
 15375      00
 15376 004a 4989C5   		movq	%rax, %r13
  75:/usr/include/c++/9/bits/stl_construct.h **** #else
 15377              		.loc 12 75 32
 15378 004d 4C8B65D8 		movq	-40(%rbp), %r12
  75:/usr/include/c++/9/bits/stl_construct.h **** #else
 15379              		.loc 12 75 7
 15380 0051 4C89E6   		movq	%r12, %rsi
 15381 0054 BF200000 		movl	$32, %edi
 15381      00
 15382 0059 E8000000 		call	_ZnwmPv
 15382      00
 15383 005e 4889C3   		movq	%rax, %rbx
 15384 0061 4889D8   		movq	%rbx, %rax
 15385 0064 4885DB   		testq	%rbx, %rbx
 15386 0067 740B     		je	.L972
 15387 0069 4889C2   		movq	%rax, %rdx
 15388 006c 83E207   		andl	$7, %edx
 15389 006f 4885D2   		testq	%rdx, %rdx
 15390 0072 740F     		je	.L973
 15391              	.L972:
 15392 0074 4889C6   		movq	%rax, %rsi
 15393 0077 488D3D00 		leaq	.Lubsan_data670(%rip), %rdi
 15393      000000
 15394 007e E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15394      00
 15395              	.L973:
 15396 0083 4C89EE   		movq	%r13, %rsi
 15397 0086 4889DF   		movq	%rbx, %rdi
 15398              	.LEHB41:
 15399 0089 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 15399      00
 15400              	.LEHE41:
  75:/usr/include/c++/9/bits/stl_construct.h **** #else
 15401              		.loc 12 75 75
 15402 008e EB22     		jmp	.L976
 15403              	.L975:
 15404 0090 F30F1EFA 		endbr64
 15405 0094 4989C5   		movq	%rax, %r13
  75:/usr/include/c++/9/bits/stl_construct.h **** #else
 15406              		.loc 12 75 7
 15407 0097 4C89E6   		movq	%r12, %rsi
 15408 009a 4889DF   		movq	%rbx, %rdi
 15409 009d E8000000 		call	_ZdlPvS_
 15409      00
 15410 00a2 4C89EB   		movq	%r13, %rbx
 15411 00a5 E8000000 		call	__asan_handle_no_return@PLT
 15411      00
 15412 00aa 4889DF   		movq	%rbx, %rdi
 15413              	.LEHB42:
 15414 00ad E8000000 		call	_Unwind_Resume@PLT
 15414      00
 15415              	.LEHE42:
 15416              	.L976:
  75:/usr/include/c++/9/bits/stl_construct.h **** #else
 15417              		.loc 12 75 75
 15418 00b2 4883C418 		addq	$24, %rsp
 15419 00b6 5B       		popq	%rbx
 15420 00b7 415C     		popq	%r12
 15421 00b9 415D     		popq	%r13
 15422 00bb 5D       		popq	%rbp
 15423              		.cfi_def_cfa 7, 8
 15424 00bc C3       		ret
 15425              		.cfi_endproc
 15426              	.LFE3024:
 15427              		.section	.gcc_except_table
 15428              	.LLSDA3024:
 15429 0130 FF       		.byte	0xff
 15430 0131 FF       		.byte	0xff
 15431 0132 01       		.byte	0x1
 15432 0133 0B       		.uleb128 .LLSDACSE3024-.LLSDACSB3024
 15433              	.LLSDACSB3024:
 15434 0134 8901     		.uleb128 .LEHB41-.LFB3024
 15435 0136 05       		.uleb128 .LEHE41-.LEHB41
 15436 0137 9001     		.uleb128 .L975-.LFB3024
 15437 0139 00       		.uleb128 0
 15438 013a AD01     		.uleb128 .LEHB42-.LFB3024
 15439 013c 05       		.uleb128 .LEHE42-.LEHB42
 15440 013d 00       		.uleb128 0
 15441 013e 00       		.uleb128 0
 15442              	.LLSDACSE3024:
 15443              		.section	.text._ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_Dp
 15445              		.section	.text._ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_,"axG
 15446              		.weak	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_
 15448              	_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_:
 15449              	.LASANPC3025:
 15450              	.LFB3025:
 280:/usr/include/c++/9/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 15451              		.loc 17 280 5
 15452              		.cfi_startproc
 15453 0000 F30F1EFA 		endbr64
 15454 0004 55       		pushq	%rbp
 15455              		.cfi_def_cfa_offset 16
 15456              		.cfi_offset 6, -16
 15457 0005 4889E5   		movq	%rsp, %rbp
 15458              		.cfi_def_cfa_register 6
 15459 0008 48897DF8 		movq	%rdi, -8(%rbp)
 282:/usr/include/c++/9/bits/stl_algobase.h **** 
 15460              		.loc 17 282 14
 15461 000c 488B45F8 		movq	-8(%rbp), %rax
 282:/usr/include/c++/9/bits/stl_algobase.h **** 
 15462              		.loc 17 282 20
 15463 0010 5D       		popq	%rbp
 15464              		.cfi_def_cfa 7, 8
 15465 0011 C3       		ret
 15466              		.cfi_endproc
 15467              	.LFE3025:
 15469              		.section	.data.rel.local
 15470              		.align 32
 15473              	.Lubsan_data671:
 15474 4840 00000000 		.quad	.LC36
 15474      00000000 
 15475 4848 B6030000 		.long	950
 15476 484c 1A000000 		.long	26
 15477 4850 00000000 		.quad	.Lubsan_type5
 15477      00000000 
 15478 4858 03       		.byte	3
 15479 4859 02       		.byte	2
 15480 485a 00000000 		.zero	6
 15480      0000
 15481 4860 00000000 		.zero	32
 15481      00000000 
 15481      00000000 
 15481      00000000 
 15481      00000000 
 15482              		.align 32
 15485              	.Lubsan_data672:
 15486 4880 00000000 		.quad	.LC36
 15486      00000000 
 15487 4888 B6030000 		.long	950
 15488 488c 1A000000 		.long	26
 15489 4890 00000000 		.quad	.Lubsan_type5
 15489      00000000 
 15490 4898 03       		.byte	3
 15491 4899 02       		.byte	2
 15492 489a 00000000 		.zero	6
 15492      0000
 15493 48a0 00000000 		.zero	32
 15493      00000000 
 15493      00000000 
 15493      00000000 
 15493      00000000 
 15494              		.align 32
 15497              	.Lubsan_data673:
 15498 48c0 00000000 		.quad	.LC36
 15498      00000000 
 15499 48c8 B5030000 		.long	949
 15500 48cc 07000000 		.long	7
 15501 48d0 00000000 		.zero	48
 15501      00000000 
 15501      00000000 
 15501      00000000 
 15501      00000000 
 15502              		.align 32
 15505              	.Lubsan_data674:
 15506 4900 00000000 		.quad	.LC36
 15506      00000000 
 15507 4908 B5030000 		.long	949
 15508 490c 07000000 		.long	7
 15509 4910 00000000 		.zero	48
 15509      00000000 
 15509      00000000 
 15509      00000000 
 15509      00000000 
 15510              		.section	.text._ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_
 15511              		.weak	_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9
 15513              	_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1
 15514              	.LASANPC3026:
 15515              	.LFB3026:
 936:/usr/include/c++/9/bits/stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
 15516              		.loc 16 936 5
 15517              		.cfi_startproc
 15518 0000 F30F1EFA 		endbr64
 15519 0004 55       		pushq	%rbp
 15520              		.cfi_def_cfa_offset 16
 15521              		.cfi_offset 6, -16
 15522 0005 4889E5   		movq	%rsp, %rbp
 15523              		.cfi_def_cfa_register 6
 15524 0008 4154     		pushq	%r12
 15525 000a 53       		pushq	%rbx
 15526 000b 4883EC30 		subq	$48, %rsp
 15527              		.cfi_offset 12, -24
 15528              		.cfi_offset 3, -32
 15529 000f 48897DD8 		movq	%rdi, -40(%rbp)
 15530 0013 488975D0 		movq	%rsi, -48(%rbp)
 15531 0017 488955C8 		movq	%rdx, -56(%rbp)
 15532 001b 48894DC0 		movq	%rcx, -64(%rbp)
 948:/usr/include/c++/9/bits/stl_uninitialized.h ****       for (; __first != __last; ++__first, (void)++__cur)
 15533              		.loc 16 948 24
 15534 001f 488B45C8 		movq	-56(%rbp), %rax
 15535 0023 488945E8 		movq	%rax, -24(%rbp)
 15536              	.L987:
 949:/usr/include/c++/9/bits/stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 15537              		.loc 16 949 22 discriminator 2
 15538 0027 488B45D8 		movq	-40(%rbp), %rax
 15539 002b 483B45D0 		cmpq	-48(%rbp), %rax
 15540 002f 0F84C500 		je	.L980
 15540      0000
 950:/usr/include/c++/9/bits/stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
 15541              		.loc 16 950 26 discriminator 1
 15542 0035 488B5DD8 		movq	-40(%rbp), %rbx
 15543 0039 4889D8   		movq	%rbx, %rax
 15544 003c 4885DB   		testq	%rbx, %rbx
 15545 003f 740B     		je	.L981
 15546 0041 4889C2   		movq	%rax, %rdx
 15547 0044 83E207   		andl	$7, %edx
 15548 0047 4885D2   		testq	%rdx, %rdx
 15549 004a 740F     		je	.L982
 15550              	.L981:
 950:/usr/include/c++/9/bits/stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
 15551              		.loc 16 950 26 is_stmt 0
 15552 004c 4889C6   		movq	%rax, %rsi
 15553 004f 488D3D00 		leaq	.Lubsan_data671(%rip), %rdi
 15553      000000
 15554 0056 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15554      00
 15555              	.L982:
 950:/usr/include/c++/9/bits/stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
 15556              		.loc 16 950 26 discriminator 1
 15557 005b 4889DF   		movq	%rbx, %rdi
 15558 005e E8000000 		call	_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_
 15558      00
 15559 0063 4989C4   		movq	%rax, %r12
 15560 0066 488B5DE8 		movq	-24(%rbp), %rbx
 15561 006a 4889D8   		movq	%rbx, %rax
 15562 006d 4885DB   		testq	%rbx, %rbx
 15563 0070 740B     		je	.L983
 15564 0072 4889C2   		movq	%rax, %rdx
 15565 0075 83E207   		andl	$7, %edx
 15566 0078 4885D2   		testq	%rdx, %rdx
 15567 007b 740F     		je	.L984
 15568              	.L983:
 950:/usr/include/c++/9/bits/stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
 15569              		.loc 16 950 26
 15570 007d 4889C6   		movq	%rax, %rsi
 15571 0080 488D3D00 		leaq	.Lubsan_data672(%rip), %rdi
 15571      000000
 15572 0087 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15572      00
 15573              	.L984:
 950:/usr/include/c++/9/bits/stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
 15574              		.loc 16 950 26 discriminator 1
 15575 008c 4889DF   		movq	%rbx, %rdi
 15576 008f E8000000 		call	_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_
 15576      00
 15577 0094 4889C1   		movq	%rax, %rcx
 15578 0097 488B45C0 		movq	-64(%rbp), %rax
 15579 009b 4889C2   		movq	%rax, %rdx
 15580 009e 4C89E6   		movq	%r12, %rsi
 15581 00a1 4889CF   		movq	%rcx, %rdi
 15582 00a4 E8000000 		call	_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_
 15582      00
 949:/usr/include/c++/9/bits/stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 15583              		.loc 16 949 7 is_stmt 1 discriminator 1
 15584 00a9 488B45D8 		movq	-40(%rbp), %rax
 15585 00ad 488D5020 		leaq	32(%rax), %rdx
 15586 00b1 4883F8E0 		cmpq	$-32, %rax
 15587 00b5 7213     		jb	.L985
 949:/usr/include/c++/9/bits/stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 15588              		.loc 16 949 7 is_stmt 0
 15589 00b7 488B45D8 		movq	-40(%rbp), %rax
 15590 00bb 4889C6   		movq	%rax, %rsi
 15591 00be 488D3D00 		leaq	.Lubsan_data673(%rip), %rdi
 15591      000000
 15592 00c5 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 15592      00
 15593              	.L985:
 949:/usr/include/c++/9/bits/stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 15594              		.loc 16 949 7 discriminator 1
 15595 00ca 488345D8 		addq	$32, -40(%rbp)
 15595      20
 15596 00cf 488B45E8 		movq	-24(%rbp), %rax
 15597 00d3 488D5020 		leaq	32(%rax), %rdx
 15598 00d7 4883F8E0 		cmpq	$-32, %rax
 15599 00db 7213     		jb	.L986
 949:/usr/include/c++/9/bits/stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 15600              		.loc 16 949 7
 15601 00dd 488B45E8 		movq	-24(%rbp), %rax
 15602 00e1 4889C6   		movq	%rax, %rsi
 15603 00e4 488D3D00 		leaq	.Lubsan_data674(%rip), %rdi
 15603      000000
 15604 00eb E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 15604      00
 15605              	.L986:
 949:/usr/include/c++/9/bits/stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 15606              		.loc 16 949 7 discriminator 1
 15607 00f0 488345E8 		addq	$32, -24(%rbp)
 15607      20
 15608 00f5 E92DFFFF 		jmp	.L987
 15608      FF
 15609              	.L980:
 952:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 15610              		.loc 16 952 14 is_stmt 1
 15611 00fa 488B45E8 		movq	-24(%rbp), %rax
 953:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 15612              		.loc 16 953 5
 15613 00fe 4883C430 		addq	$48, %rsp
 15614 0102 5B       		popq	%rbx
 15615 0103 415C     		popq	%r12
 15616 0105 5D       		popq	%rbp
 15617              		.cfi_def_cfa 7, 8
 15618 0106 C3       		ret
 15619              		.cfi_endproc
 15620              	.LFE3026:
 15622              		.section	.data.rel.local
 15623              		.align 32
 15626              	.Lubsan_data675:
 15627 4940 00000000 		.quad	.LC33
 15627      00000000 
 15628 4948 69010000 		.long	361
 15629 494c 1D000000 		.long	29
 15630 4950 00000000 		.quad	.Lubsan_type5
 15630      00000000 
 15631 4958 03       		.byte	3
 15632 4959 02       		.byte	2
 15633 495a 00000000 		.zero	6
 15633      0000
 15634 4960 00000000 		.zero	32
 15634      00000000 
 15634      00000000 
 15634      00000000 
 15634      00000000 
 15635              		.align 32
 15638              	.Lubsan_data676:
 15639 4980 00000000 		.quad	.LC33
 15639      00000000 
 15640 4988 69010000 		.long	361
 15641 498c 12000000 		.long	18
 15642 4990 00000000 		.quad	.Lubsan_type5
 15642      00000000 
 15643 4998 03       		.byte	3
 15644 4999 02       		.byte	2
 15645 499a 00000000 		.zero	6
 15645      0000
 15646 49a0 00000000 		.zero	32
 15646      00000000 
 15646      00000000 
 15646      00000000 
 15646      00000000 
 15647              		.align 32
 15650              	.Lubsan_data677:
 15651 49c0 00000000 		.quad	.LC33
 15651      00000000 
 15652 49c8 69010000 		.long	361
 15653 49cc 12000000 		.long	18
 15654 49d0 00000000 		.quad	.Lubsan_type5
 15654      00000000 
 15655 49d8 03       		.byte	3
 15656 49d9 04       		.byte	4
 15657 49da 00000000 		.zero	6
 15657      0000
 15658 49e0 00000000 		.zero	32
 15658      00000000 
 15658      00000000 
 15658      00000000 
 15658      00000000 
 15659              		.align 32
 15662              	.Lubsan_data678:
 15663 4a00 00000000 		.quad	.LC33
 15663      00000000 
 15664 4a08 6A010000 		.long	362
 15665 4a0c 08000000 		.long	8
 15666 4a10 00000000 		.zero	48
 15666      00000000 
 15666      00000000 
 15666      00000000 
 15666      00000000 
 15667              		.align 32
 15670              	.Lubsan_data679:
 15671 4a40 00000000 		.quad	.LC33
 15671      00000000 
 15672 4a48 6B010000 		.long	363
 15673 4a4c 08000000 		.long	8
 15674 4a50 00000000 		.zero	48
 15674      00000000 
 15674      00000000 
 15674      00000000 
 15674      00000000 
 15675              		.data
 15676              		.align 32
 15679              	.Lubsan_type52:
 15682 0d44 276C6F6E 		.string	"'long int'"
 15682      6720696E 
 15682      742700
 15683 0d4f 00000000 		.zero	49
 15683      00000000 
 15683      00000000 
 15683      00000000 
 15683      00000000 
 15684              		.section	.data.rel.local
 15685              		.align 32
 15688              	.Lubsan_data680:
 15689 4a80 00000000 		.quad	.LC33
 15689      00000000 
 15690 4a88 67010000 		.long	359
 15691 4a8c 04000000 		.long	4
 15692 4a90 00000000 		.quad	.Lubsan_type52
 15692      00000000 
 15693 4a98 00000000 		.zero	40
 15693      00000000 
 15693      00000000 
 15693      00000000 
 15693      00000000 
 15694              		.section	.text._ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112b
 15695              		.weak	_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stri
 15697              	_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt1
 15698              	.LASANPC3027:
 15699              	.LFB3027:
 356:/usr/include/c++/9/bits/stl_algobase.h **** 	{
 15700              		.loc 17 356 2
 15701              		.cfi_startproc
 15702 0000 F30F1EFA 		endbr64
 15703 0004 55       		pushq	%rbp
 15704              		.cfi_def_cfa_offset 16
 15705              		.cfi_offset 6, -16
 15706 0005 4889E5   		movq	%rsp, %rbp
 15707              		.cfi_def_cfa_register 6
 15708 0008 4154     		pushq	%r12
 15709 000a 53       		pushq	%rbx
 15710 000b 4883EC30 		subq	$48, %rsp
 15711              		.cfi_offset 12, -24
 15712              		.cfi_offset 3, -32
 15713 000f 48897DD8 		movq	%rdi, -40(%rbp)
 15714 0013 488975D0 		movq	%rsi, -48(%rbp)
 15715 0017 488955C8 		movq	%rdx, -56(%rbp)
 15716              	.LBB26:
 359:/usr/include/c++/9/bits/stl_algobase.h **** 	    {
 15717              		.loc 17 359 31
 15718 001b 488B45D0 		movq	-48(%rbp), %rax
 15719 001f 482B45D8 		subq	-40(%rbp), %rax
 359:/usr/include/c++/9/bits/stl_algobase.h **** 	    {
 15720              		.loc 17 359 18
 15721 0023 48C1F805 		sarq	$5, %rax
 15722 0027 488945E8 		movq	%rax, -24(%rbp)
 15723              	.L1001:
 359:/usr/include/c++/9/bits/stl_algobase.h **** 	    {
 15724              		.loc 17 359 46 discriminator 3
 15725 002b 48837DE8 		cmpq	$0, -24(%rbp)
 15725      00
 15726 0030 0F8EFE00 		jle	.L990
 15726      0000
 361:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 15727              		.loc 17 361 29 discriminator 2
 15728 0036 488B5DD8 		movq	-40(%rbp), %rbx
 15729 003a 4889D8   		movq	%rbx, %rax
 15730 003d 4885DB   		testq	%rbx, %rbx
 15731 0040 740B     		je	.L991
 15732 0042 4889C2   		movq	%rax, %rdx
 15733 0045 83E207   		andl	$7, %edx
 15734 0048 4885D2   		testq	%rdx, %rdx
 15735 004b 740F     		je	.L992
 15736              	.L991:
 361:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 15737              		.loc 17 361 29 is_stmt 0
 15738 004d 4889C6   		movq	%rax, %rsi
 15739 0050 488D3D00 		leaq	.Lubsan_data675(%rip), %rdi
 15739      000000
 15740 0057 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15740      00
 15741              	.L992:
 361:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 15742              		.loc 17 361 29 discriminator 2
 15743 005c 4889DF   		movq	%rbx, %rdi
 15744 005f E8000000 		call	_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4ty
 15744      00
 15745 0064 4989C4   		movq	%rax, %r12
 361:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 15746              		.loc 17 361 18 is_stmt 1 discriminator 2
 15747 0067 4C89E0   		movq	%r12, %rax
 15748 006a 4D85E4   		testq	%r12, %r12
 15749 006d 740B     		je	.L993
 15750 006f 4889C2   		movq	%rax, %rdx
 15751 0072 83E207   		andl	$7, %edx
 15752 0075 4885D2   		testq	%rdx, %rdx
 15753 0078 740F     		je	.L994
 15754              	.L993:
 361:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 15755              		.loc 17 361 18 is_stmt 0
 15756 007a 4889C6   		movq	%rax, %rsi
 15757 007d 488D3D00 		leaq	.Lubsan_data676(%rip), %rdi
 15757      000000
 15758 0084 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15758      00
 15759              	.L994:
 361:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 15760              		.loc 17 361 18 discriminator 2
 15761 0089 488B5DC8 		movq	-56(%rbp), %rbx
 15762 008d 4889D8   		movq	%rbx, %rax
 15763 0090 4885DB   		testq	%rbx, %rbx
 15764 0093 740B     		je	.L995
 15765 0095 4889C2   		movq	%rax, %rdx
 15766 0098 83E207   		andl	$7, %edx
 15767 009b 4885D2   		testq	%rdx, %rdx
 15768 009e 740F     		je	.L996
 15769              	.L995:
 361:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 15770              		.loc 17 361 18
 15771 00a0 4889C6   		movq	%rax, %rsi
 15772 00a3 488D3D00 		leaq	.Lubsan_data677(%rip), %rdi
 15772      000000
 15773 00aa E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15773      00
 15774              	.L996:
 361:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__first;
 15775              		.loc 17 361 18 discriminator 2
 15776 00af 4C89E6   		movq	%r12, %rsi
 15777 00b2 4889DF   		movq	%rbx, %rdi
 15778 00b5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT
 15778      00
 362:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__result;
 15779              		.loc 17 362 8 is_stmt 1 discriminator 2
 15780 00ba 488B45D8 		movq	-40(%rbp), %rax
 15781 00be 488D5020 		leaq	32(%rax), %rdx
 15782 00c2 4883F8E0 		cmpq	$-32, %rax
 15783 00c6 7213     		jb	.L997
 362:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__result;
 15784              		.loc 17 362 8 is_stmt 0
 15785 00c8 488B45D8 		movq	-40(%rbp), %rax
 15786 00cc 4889C6   		movq	%rax, %rsi
 15787 00cf 488D3D00 		leaq	.Lubsan_data678(%rip), %rdi
 15787      000000
 15788 00d6 E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 15788      00
 15789              	.L997:
 362:/usr/include/c++/9/bits/stl_algobase.h **** 	      ++__result;
 15790              		.loc 17 362 8 discriminator 2
 15791 00db 488345D8 		addq	$32, -40(%rbp)
 15791      20
 363:/usr/include/c++/9/bits/stl_algobase.h **** 	    }
 15792              		.loc 17 363 8 is_stmt 1 discriminator 2
 15793 00e0 488B45C8 		movq	-56(%rbp), %rax
 15794 00e4 488D5020 		leaq	32(%rax), %rdx
 15795 00e8 4883F8E0 		cmpq	$-32, %rax
 15796 00ec 7213     		jb	.L998
 363:/usr/include/c++/9/bits/stl_algobase.h **** 	    }
 15797              		.loc 17 363 8 is_stmt 0
 15798 00ee 488B45C8 		movq	-56(%rbp), %rax
 15799 00f2 4889C6   		movq	%rax, %rsi
 15800 00f5 488D3D00 		leaq	.Lubsan_data679(%rip), %rdi
 15800      000000
 15801 00fc E8000000 		call	__ubsan_handle_pointer_overflow@PLT
 15801      00
 15802              	.L998:
 363:/usr/include/c++/9/bits/stl_algobase.h **** 	    }
 15803              		.loc 17 363 8 discriminator 2
 15804 0101 488345C8 		addq	$32, -56(%rbp)
 15804      20
 359:/usr/include/c++/9/bits/stl_algobase.h **** 	    {
 15805              		.loc 17 359 4 is_stmt 1 discriminator 2
 15806 0106 488B45E8 		movq	-24(%rbp), %rax
 15807 010a 4883E801 		subq	$1, %rax
 15808 010e 4889C3   		movq	%rax, %rbx
 15809 0111 7118     		jno	.L999
 15810 0113 488B45E8 		movq	-24(%rbp), %rax
 15811 0117 BA010000 		movl	$1, %edx
 15811      00
 15812 011c 4889C6   		movq	%rax, %rsi
 15813 011f 488D3D00 		leaq	.Lubsan_data680(%rip), %rdi
 15813      000000
 15814 0126 E8000000 		call	__ubsan_handle_sub_overflow@PLT
 15814      00
 15815              	.L999:
 15816 012b 48895DE8 		movq	%rbx, -24(%rbp)
 15817 012f E9F7FEFF 		jmp	.L1001
 15817      FF
 15818              	.L990:
 15819              	.LBE26:
 365:/usr/include/c++/9/bits/stl_algobase.h **** 	}
 15820              		.loc 17 365 11
 15821 0134 488B45C8 		movq	-56(%rbp), %rax
 366:/usr/include/c++/9/bits/stl_algobase.h ****     };
 15822              		.loc 17 366 2
 15823 0138 4883C430 		addq	$48, %rsp
 15824 013c 5B       		popq	%rbx
 15825 013d 415C     		popq	%r12
 15826 013f 5D       		popq	%rbp
 15827              		.cfi_def_cfa 7, 8
 15828 0140 C3       		ret
 15829              		.cfi_endproc
 15830              	.LFE3027:
 15832              		.section	.data.rel.local
 15833              		.align 32
 15836              	.Lubsan_data681:
 15837 4ac0 00000000 		.quad	.LC36
 15837      00000000 
 15838 4ac8 90030000 		.long	912
 15839 4acc 35000000 		.long	53
 15840 4ad0 00000000 		.quad	.Lubsan_type5
 15840      00000000 
 15841 4ad8 03       		.byte	3
 15842 4ad9 02       		.byte	2
 15843 4ada 00000000 		.zero	6
 15843      0000
 15844 4ae0 00000000 		.zero	32
 15844      00000000 
 15844      00000000 
 15844      00000000 
 15844      00000000 
 15845              		.align 32
 15848              	.Lubsan_data682:
 15849 4b00 00000000 		.quad	.LC36
 15849      00000000 
 15850 4b08 90030000 		.long	912
 15851 4b0c 1A000000 		.long	26
 15852 4b10 00000000 		.quad	.Lubsan_type5
 15852      00000000 
 15853 4b18 03       		.byte	3
 15854 4b19 02       		.byte	2
 15855 4b1a 00000000 		.zero	6
 15855      0000
 15856 4b20 00000000 		.zero	32
 15856      00000000 
 15856      00000000 
 15856      00000000 
 15856      00000000 
 15857              		.align 32
 15860              	.Lubsan_data683:
 15861 4b40 00000000 		.quad	.LC36
 15861      00000000 
 15862 4b48 90030000 		.long	912
 15863 4b4c 1A000000 		.long	26
 15864 4b50 00000000 		.quad	.Lubsan_type28
 15864      00000000 
 15865 4b58 00       		.byte	0
 15866 4b59 02       		.byte	2
 15867 4b5a 00000000 		.zero	6
 15867      0000
 15868 4b60 00000000 		.zero	32
 15868      00000000 
 15868      00000000 
 15868      00000000 
 15868      00000000 
 15869              		.align 32
 15872              	.Lubsan_data684:
 15873 4b80 00000000 		.quad	.LC36
 15873      00000000 
 15874 4b88 91030000 		.long	913
 15875 4b8c 18000000 		.long	24
 15876 4b90 00000000 		.quad	.Lubsan_type5
 15876      00000000 
 15877 4b98 03       		.byte	3
 15878 4b99 02       		.byte	2
 15879 4b9a 00000000 		.zero	6
 15879      0000
 15880 4ba0 00000000 		.zero	32
 15880      00000000 
 15880      00000000 
 15880      00000000 
 15880      00000000 
 15881              		.align 32
 15884              	.Lubsan_data685:
 15885 4bc0 00000000 		.quad	.LC36
 15885      00000000 
 15886 4bc8 91030000 		.long	913
 15887 4bcc 18000000 		.long	24
 15888 4bd0 00000000 		.quad	.Lubsan_type28
 15888      00000000 
 15889 4bd8 00       		.byte	0
 15890 4bd9 02       		.byte	2
 15891 4bda 00000000 		.zero	6
 15891      0000
 15892 4be0 00000000 		.zero	32
 15892      00000000 
 15892      00000000 
 15892      00000000 
 15892      00000000 
 15893              		.section	.text._ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_Sa
 15894              		.weak	_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT
 15896              	_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT
 15897              	.LASANPC3041:
 15898              	.LFB3041:
 905:/usr/include/c++/9/bits/stl_uninitialized.h ****     noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
 15899              		.loc 16 905 5
 15900              		.cfi_startproc
 15901 0000 F30F1EFA 		endbr64
 15902 0004 55       		pushq	%rbp
 15903              		.cfi_def_cfa_offset 16
 15904              		.cfi_offset 6, -16
 15905 0005 4889E5   		movq	%rsp, %rbp
 15906              		.cfi_def_cfa_register 6
 15907 0008 53       		pushq	%rbx
 15908 0009 4883EC28 		subq	$40, %rsp
 15909              		.cfi_offset 3, -24
 15910 000d 48897DE8 		movq	%rdi, -24(%rbp)
 15911 0011 488975E0 		movq	%rsi, -32(%rbp)
 15912 0015 488955D8 		movq	%rdx, -40(%rbp)
 912:/usr/include/c++/9/bits/stl_uninitialized.h ****       __traits::destroy(__alloc, std::__addressof(*__orig));
 15913              		.loc 16 912 53
 15914 0019 488B5DE0 		movq	-32(%rbp), %rbx
 15915 001d 4889D8   		movq	%rbx, %rax
 15916 0020 4885DB   		testq	%rbx, %rbx
 15917 0023 740B     		je	.L1004
 15918 0025 4889C2   		movq	%rax, %rdx
 15919 0028 83E207   		andl	$7, %edx
 15920 002b 4885D2   		testq	%rdx, %rdx
 15921 002e 740F     		je	.L1005
 15922              	.L1004:
 15923 0030 4889C6   		movq	%rax, %rsi
 15924 0033 488D3D00 		leaq	.Lubsan_data681(%rip), %rdi
 15924      000000
 15925 003a E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15925      00
 15926              	.L1005:
 15927 003f 4889DF   		movq	%rbx, %rdi
 15928 0042 E8000000 		call	_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4ty
 15928      00
 15929 0047 4889C3   		movq	%rax, %rbx
 912:/usr/include/c++/9/bits/stl_uninitialized.h ****       __traits::destroy(__alloc, std::__addressof(*__orig));
 15930              		.loc 16 912 26
 15931 004a 4889D8   		movq	%rbx, %rax
 15932 004d 4885DB   		testq	%rbx, %rbx
 15933 0050 740B     		je	.L1006
 15934 0052 4889C2   		movq	%rax, %rdx
 15935 0055 83E207   		andl	$7, %edx
 15936 0058 4885D2   		testq	%rdx, %rdx
 15937 005b 740F     		je	.L1007
 15938              	.L1006:
 15939 005d 4889C6   		movq	%rax, %rsi
 15940 0060 488D3D00 		leaq	.Lubsan_data682(%rip), %rdi
 15940      000000
 15941 0067 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15941      00
 15942              	.L1007:
 15943 006c 48837DD8 		cmpq	$0, -40(%rbp)
 15943      00
 15944 0071 7511     		jne	.L1008
 15945 0073 BE000000 		movl	$0, %esi
 15945      00
 15946 0078 488D3D00 		leaq	.Lubsan_data683(%rip), %rdi
 15946      000000
 15947 007f E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15947      00
 15948              	.L1008:
 15949 0084 488B4DE8 		movq	-24(%rbp), %rcx
 15950 0088 488B45D8 		movq	-40(%rbp), %rax
 15951 008c 4889DA   		movq	%rbx, %rdx
 15952 008f 4889CE   		movq	%rcx, %rsi
 15953 0092 4889C7   		movq	%rax, %rdi
 15954 0095 E8000000 		call	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS
 15954      00
 913:/usr/include/c++/9/bits/stl_uninitialized.h ****     }
 15955              		.loc 16 913 24
 15956 009a 488B5DE0 		movq	-32(%rbp), %rbx
 15957 009e 4889D8   		movq	%rbx, %rax
 15958 00a1 4885DB   		testq	%rbx, %rbx
 15959 00a4 740B     		je	.L1009
 15960 00a6 4889C2   		movq	%rax, %rdx
 15961 00a9 83E207   		andl	$7, %edx
 15962 00ac 4885D2   		testq	%rdx, %rdx
 15963 00af 740F     		je	.L1010
 15964              	.L1009:
 15965 00b1 4889C6   		movq	%rax, %rsi
 15966 00b4 488D3D00 		leaq	.Lubsan_data684(%rip), %rdi
 15966      000000
 15967 00bb E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15967      00
 15968              	.L1010:
 15969 00c0 4889DF   		movq	%rbx, %rdi
 15970 00c3 E8000000 		call	_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_
 15970      00
 15971 00c8 4889C3   		movq	%rax, %rbx
 15972 00cb 48837DD8 		cmpq	$0, -40(%rbp)
 15972      00
 15973 00d0 7511     		jne	.L1011
 15974 00d2 BE000000 		movl	$0, %esi
 15974      00
 15975 00d7 488D3D00 		leaq	.Lubsan_data685(%rip), %rdi
 15975      000000
 15976 00de E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 15976      00
 15977              	.L1011:
 15978 00e3 488B45D8 		movq	-40(%rbp), %rax
 15979 00e7 4889DE   		movq	%rbx, %rsi
 15980 00ea 4889C7   		movq	%rax, %rdi
 15981 00ed E8000000 		call	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_
 15981      00
 914:/usr/include/c++/9/bits/stl_uninitialized.h **** 
 15982              		.loc 16 914 5
 15983 00f2 90       		nop
 15984 00f3 4883C428 		addq	$40, %rsp
 15985 00f7 5B       		popq	%rbx
 15986 00f8 5D       		popq	%rbp
 15987              		.cfi_def_cfa 7, 8
 15988 00f9 C3       		ret
 15989              		.cfi_endproc
 15990              	.LFE3041:
 15992              		.section	.data.rel.local
 15993              		.align 32
 15996              	.Lubsan_data686:
 15997 4c00 00000000 		.quad	.LC18
 15997      00000000 
 15998 4c08 E3010000 		.long	483
 15999 4c0c 04000000 		.long	4
 16000 4c10 00000000 		.quad	.Lubsan_type22
 16000      00000000 
 16001 4c18 00       		.byte	0
 16002 4c19 04       		.byte	4
 16003 4c1a 00000000 		.zero	6
 16003      0000
 16004 4c20 00000000 		.zero	32
 16004      00000000 
 16004      00000000 
 16004      00000000 
 16004      00000000 
 16005              		.data
 16006              		.align 32
 16009              	.Lubsan_type53:
 16012 0d84 27737472 		.string	"'struct type'"
 16012      75637420 
 16012      74797065 
 16012      2700
 16013 0d92 00000000 		.zero	46
 16013      00000000 
 16013      00000000 
 16013      00000000 
 16013      00000000 
 16014              		.section	.data.rel.local
 16015              		.align 32
 16018              	.Lubsan_data687:
 16019 4c40 00000000 		.quad	.LC18
 16019      00000000 
 16020 4c48 E3010000 		.long	483
 16021 4c4c 04000000 		.long	4
 16022 4c50 00000000 		.quad	.Lubsan_type53
 16022      00000000 
 16023 4c58 03       		.byte	3
 16024 4c59 02       		.byte	2
 16025 4c5a 00000000 		.zero	6
 16025      0000
 16026 4c60 00000000 		.zero	32
 16026      00000000 
 16026      00000000 
 16026      00000000 
 16026      00000000 
 16027              		.section	.text._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9c
 16028              		.weak	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructI
 16030              	_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_
 16031              	.LASANPC3045:
 16032              	.LFB3045:
 481:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 16033              		.loc 13 481 2
 16034              		.cfi_startproc
 16035 0000 F30F1EFA 		endbr64
 16036 0004 55       		pushq	%rbp
 16037              		.cfi_def_cfa_offset 16
 16038              		.cfi_offset 6, -16
 16039 0005 4889E5   		movq	%rsp, %rbp
 16040              		.cfi_def_cfa_register 6
 16041 0008 4883EC20 		subq	$32, %rsp
 16042 000c 48897DF8 		movq	%rdi, -8(%rbp)
 16043 0010 488975F0 		movq	%rsi, -16(%rbp)
 16044 0014 488955E8 		movq	%rdx, -24(%rbp)
 483:/usr/include/c++/9/bits/alloc_traits.h **** 
 16045              		.loc 13 483 4
 16046 0018 48837DF8 		cmpq	$0, -8(%rbp)
 16046      00
 16047 001d 7511     		jne	.L1013
 16048 001f BE000000 		movl	$0, %esi
 16048      00
 16049 0024 488D3D00 		leaq	.Lubsan_data686(%rip), %rdi
 16049      000000
 16050 002b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 16050      00
 16051              	.L1013:
 16052 0030 488B45E8 		movq	-24(%rbp), %rax
 16053 0034 48837DE8 		cmpq	$0, -24(%rbp)
 16053      00
 16054 0039 740B     		je	.L1014
 16055 003b 4889C2   		movq	%rax, %rdx
 16056 003e 83E207   		andl	$7, %edx
 16057 0041 4885D2   		testq	%rdx, %rdx
 16058 0044 740F     		je	.L1015
 16059              	.L1014:
 16060 0046 4889C6   		movq	%rax, %rsi
 16061 0049 488D3D00 		leaq	.Lubsan_data687(%rip), %rdi
 16061      000000
 16062 0050 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 16062      00
 16063              	.L1015:
 16064 0055 488B45E8 		movq	-24(%rbp), %rax
 16065 0059 4889C7   		movq	%rax, %rdi
 16066 005c E8000000 		call	_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS
 16066      00
 16067 0061 4889C2   		movq	%rax, %rdx
 16068 0064 488B4DF0 		movq	-16(%rbp), %rcx
 16069 0068 488B45F8 		movq	-8(%rbp), %rax
 16070 006c 4889CE   		movq	%rcx, %rsi
 16071 006f 4889C7   		movq	%rax, %rdi
 16072 0072 E8000000 		call	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructI
 16072      00
 483:/usr/include/c++/9/bits/alloc_traits.h **** 
 16073              		.loc 13 483 56
 16074 0077 90       		nop
 16075 0078 C9       		leave
 16076              		.cfi_def_cfa 7, 8
 16077 0079 C3       		ret
 16078              		.cfi_endproc
 16079              	.LFE3045:
 16081              		.section	.data.rel.local
 16082              		.align 32
 16085              	.Lubsan_data688:
 16086 4c80 00000000 		.quad	.LC15
 16086      00000000 
 16087 4c88 4B000000 		.long	75
 16088 4c8c 24000000 		.long	36
 16089 4c90 00000000 		.quad	.Lubsan_type5
 16089      00000000 
 16090 4c98 03       		.byte	3
 16091 4c99 02       		.byte	2
 16092 4c9a 00000000 		.zero	6
 16092      0000
 16093 4ca0 00000000 		.zero	32
 16093      00000000 
 16093      00000000 
 16093      00000000 
 16093      00000000 
 16094              		.section	.text._ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_r
 16095              		.weak	_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceI
 16097              	_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4ty
 16098              	.LASANPC3051:
 16099              	.LFB3051:
  74:/usr/include/c++/9/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 16100              		.loc 8 74 5
 16101              		.cfi_startproc
 16102 0000 F30F1EFA 		endbr64
 16103 0004 55       		pushq	%rbp
 16104              		.cfi_def_cfa_offset 16
 16105              		.cfi_offset 6, -16
 16106 0005 4889E5   		movq	%rsp, %rbp
 16107              		.cfi_def_cfa_register 6
 16108 0008 4883EC10 		subq	$16, %rsp
 16109 000c 48897DF8 		movq	%rdi, -8(%rbp)
  75:/usr/include/c++/9/bits/move.h **** 
 16110              		.loc 8 75 36
 16111 0010 488B45F8 		movq	-8(%rbp), %rax
 16112 0014 48837DF8 		cmpq	$0, -8(%rbp)
 16112      00
 16113 0019 740B     		je	.L1017
 16114 001b 4889C2   		movq	%rax, %rdx
 16115 001e 83E207   		andl	$7, %edx
 16116 0021 4885D2   		testq	%rdx, %rdx
 16117 0024 740F     		je	.L1018
 16118              	.L1017:
 16119 0026 4889C6   		movq	%rax, %rsi
 16120 0029 488D3D00 		leaq	.Lubsan_data688(%rip), %rdi
 16120      000000
 16121 0030 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 16121      00
 16122              	.L1018:
 16123 0035 488B45F8 		movq	-8(%rbp), %rax
  75:/usr/include/c++/9/bits/move.h **** 
 16124              		.loc 8 75 39
 16125 0039 C9       		leave
 16126              		.cfi_def_cfa 7, 8
 16127 003a C3       		ret
 16128              		.cfi_endproc
 16129              	.LFE3051:
 16131              		.section	.data.rel.local
 16132              		.align 32
 16135              	.Lubsan_data689:
 16136 4cc0 00000000 		.quad	.LC25
 16136      00000000 
 16137 4cc8 92000000 		.long	146
 16138 4ccc 2E000000 		.long	46
 16139 4cd0 00000000 		.quad	.Lubsan_type53
 16139      00000000 
 16140 4cd8 03       		.byte	3
 16141 4cd9 02       		.byte	2
 16142 4cda 00000000 		.zero	6
 16142      0000
 16143 4ce0 00000000 		.zero	32
 16143      00000000 
 16143      00000000 
 16143      00000000 
 16143      00000000 
 16144              		.align 32
 16147              	.Lubsan_data690:
 16148 4d00 00000000 		.quad	.LC25
 16148      00000000 
 16149 4d08 92000000 		.long	146
 16150 4d0c 04000000 		.long	4
 16151 4d10 00000000 		.quad	.Lubsan_type5
 16151      00000000 
 16152 4d18 03       		.byte	3
 16153 4d19 05       		.byte	5
 16154 4d1a 00000000 		.zero	6
 16154      0000
 16155 4d20 00000000 		.zero	32
 16155      00000000 
 16155      00000000 
 16155      00000000 
 16155      00000000 
 16156              		.section	.text._ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9
 16157              		.align 2
 16158              		.weak	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9construct
 16160              	_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6
 16161              	.LASANPC3052:
 16162              	.LFB3052:
 144:/usr/include/c++/9/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 16163              		.loc 9 144 2
 16164              		.cfi_startproc
 16165 0000 F30F1EFA 		endbr64
 16166 0004 55       		pushq	%rbp
 16167              		.cfi_def_cfa_offset 16
 16168              		.cfi_offset 6, -16
 16169 0005 4889E5   		movq	%rsp, %rbp
 16170              		.cfi_def_cfa_register 6
 16171 0008 4154     		pushq	%r12
 16172 000a 53       		pushq	%rbx
 16173 000b 4883EC20 		subq	$32, %rsp
 16174              		.cfi_offset 12, -24
 16175              		.cfi_offset 3, -32
 16176 000f 48897DE8 		movq	%rdi, -24(%rbp)
 16177 0013 488975E0 		movq	%rsi, -32(%rbp)
 16178 0017 488955D8 		movq	%rdx, -40(%rbp)
 146:/usr/include/c++/9/ext/new_allocator.h **** 
 16179              		.loc 9 146 46
 16180 001b 488B45D8 		movq	-40(%rbp), %rax
 16181 001f 48837DD8 		cmpq	$0, -40(%rbp)
 16181      00
 16182 0024 740B     		je	.L1021
 16183 0026 4889C2   		movq	%rax, %rdx
 16184 0029 83E207   		andl	$7, %edx
 16185 002c 4885D2   		testq	%rdx, %rdx
 16186 002f 740F     		je	.L1022
 16187              	.L1021:
 16188 0031 4889C6   		movq	%rax, %rsi
 16189 0034 488D3D00 		leaq	.Lubsan_data689(%rip), %rdi
 16189      000000
 16190 003b E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 16190      00
 16191              	.L1022:
 16192 0040 488B45D8 		movq	-40(%rbp), %rax
 16193 0044 4889C7   		movq	%rax, %rdi
 16194 0047 E8000000 		call	_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS
 16194      00
 16195 004c 4989C4   		movq	%rax, %r12
 146:/usr/include/c++/9/ext/new_allocator.h **** 
 16196              		.loc 9 146 18
 16197 004f 488B45E0 		movq	-32(%rbp), %rax
 146:/usr/include/c++/9/ext/new_allocator.h **** 
 16198              		.loc 9 146 4
 16199 0053 4889C6   		movq	%rax, %rsi
 16200 0056 BF200000 		movl	$32, %edi
 16200      00
 16201 005b E8000000 		call	_ZnwmPv
 16201      00
 16202 0060 4889C3   		movq	%rax, %rbx
 16203 0063 4889D8   		movq	%rbx, %rax
 16204 0066 4885DB   		testq	%rbx, %rbx
 16205 0069 740B     		je	.L1023
 16206 006b 4889C2   		movq	%rax, %rdx
 16207 006e 83E207   		andl	$7, %edx
 16208 0071 4885D2   		testq	%rdx, %rdx
 16209 0074 740F     		je	.L1024
 16210              	.L1023:
 16211 0076 4889C6   		movq	%rax, %rsi
 16212 0079 488D3D00 		leaq	.Lubsan_data690(%rip), %rdi
 16212      000000
 16213 0080 E8000000 		call	__ubsan_handle_type_mismatch_v1@PLT
 16213      00
 16214              	.L1024:
 16215 0085 4C89E6   		movq	%r12, %rsi
 16216 0088 4889DF   		movq	%rbx, %rdi
 16217 008b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@PLT
 16217      00
 146:/usr/include/c++/9/ext/new_allocator.h **** 
 16218              		.loc 9 146 60
 16219 0090 90       		nop
 16220 0091 4883C420 		addq	$32, %rsp
 16221 0095 5B       		popq	%rbx
 16222 0096 415C     		popq	%r12
 16223 0098 5D       		popq	%rbp
 16224              		.cfi_def_cfa 7, 8
 16225 0099 C3       		ret
 16226              		.cfi_endproc
 16227              	.LFE3052:
 16229              		.section	.data.rel.local
 16230              		.align 32
 16233              	.Lubsan_data373:
 16234 4d40 00000000 		.quad	.LC7
 16234      00000000 
 16235 4d48 56010000 		.long	342
 16236 4d4c 19000000 		.long	25
 16237 4d50 00000000 		.quad	0
 16237      00000000 
 16238 4d58 00000000 		.long	0
 16239 4d5c 00000000 		.long	0
 16240 4d60 01000000 		.long	1
 16241 4d64 00000000 		.zero	4
 16242 4d68 00000000 		.zero	56
 16242      00000000 
 16242      00000000 
 16242      00000000 
 16242      00000000 
 16243              		.section	.rodata
 16244              	.LC39:
 16245 0b88 2A2E4C75 		.string	"*.Lubsan_data690"
 16245      6273616E 
 16245      5F646174 
 16245      61363930 
 16245      00
 16246              	.LC40:
 16247 0b99 2A2E4C75 		.string	"*.Lubsan_data689"
 16247      6273616E 
 16247      5F646174 
 16247      61363839 
 16247      00
 16248              	.LC41:
 16249 0baa 2A2E4C75 		.string	"*.Lubsan_data688"
 16249      6273616E 
 16249      5F646174 
 16249      61363838 
 16249      00
 16250              	.LC42:
 16251 0bbb 2A2E4C75 		.string	"*.Lubsan_data687"
 16251      6273616E 
 16251      5F646174 
 16251      61363837 
 16251      00
 16252              	.LC43:
 16253 0bcc 2A2E4C75 		.string	"*.Lubsan_type53"
 16253      6273616E 
 16253      5F747970 
 16253      65353300 
 16254              	.LC44:
 16255 0bdc 2A2E4C75 		.string	"*.Lubsan_data686"
 16255      6273616E 
 16255      5F646174 
 16255      61363836 
 16255      00
 16256              	.LC45:
 16257 0bed 2A2E4C75 		.string	"*.Lubsan_data685"
 16257      6273616E 
 16257      5F646174 
 16257      61363835 
 16257      00
 16258              	.LC46:
 16259 0bfe 2A2E4C75 		.string	"*.Lubsan_data684"
 16259      6273616E 
 16259      5F646174 
 16259      61363834 
 16259      00
 16260              	.LC47:
 16261 0c0f 2A2E4C75 		.string	"*.Lubsan_data683"
 16261      6273616E 
 16261      5F646174 
 16261      61363833 
 16261      00
 16262              	.LC48:
 16263 0c20 2A2E4C75 		.string	"*.Lubsan_data682"
 16263      6273616E 
 16263      5F646174 
 16263      61363832 
 16263      00
 16264              	.LC49:
 16265 0c31 2A2E4C75 		.string	"*.Lubsan_data681"
 16265      6273616E 
 16265      5F646174 
 16265      61363831 
 16265      00
 16266              	.LC50:
 16267 0c42 2A2E4C75 		.string	"*.Lubsan_data680"
 16267      6273616E 
 16267      5F646174 
 16267      61363830 
 16267      00
 16268              	.LC51:
 16269 0c53 2A2E4C75 		.string	"*.Lubsan_type52"
 16269      6273616E 
 16269      5F747970 
 16269      65353200 
 16270              	.LC52:
 16271 0c63 2A2E4C75 		.string	"*.Lubsan_data679"
 16271      6273616E 
 16271      5F646174 
 16271      61363739 
 16271      00
 16272              	.LC53:
 16273 0c74 2A2E4C75 		.string	"*.Lubsan_data678"
 16273      6273616E 
 16273      5F646174 
 16273      61363738 
 16273      00
 16274              	.LC54:
 16275 0c85 2A2E4C75 		.string	"*.Lubsan_data677"
 16275      6273616E 
 16275      5F646174 
 16275      61363737 
 16275      00
 16276              	.LC55:
 16277 0c96 2A2E4C75 		.string	"*.Lubsan_data676"
 16277      6273616E 
 16277      5F646174 
 16277      61363736 
 16277      00
 16278              	.LC56:
 16279 0ca7 2A2E4C75 		.string	"*.Lubsan_data675"
 16279      6273616E 
 16279      5F646174 
 16279      61363735 
 16279      00
 16280              	.LC57:
 16281 0cb8 2A2E4C75 		.string	"*.Lubsan_data674"
 16281      6273616E 
 16281      5F646174 
 16281      61363734 
 16281      00
 16282              	.LC58:
 16283 0cc9 2A2E4C75 		.string	"*.Lubsan_data673"
 16283      6273616E 
 16283      5F646174 
 16283      61363733 
 16283      00
 16284              	.LC59:
 16285 0cda 2A2E4C75 		.string	"*.Lubsan_data672"
 16285      6273616E 
 16285      5F646174 
 16285      61363732 
 16285      00
 16286              	.LC60:
 16287 0ceb 2A2E4C75 		.string	"*.Lubsan_data671"
 16287      6273616E 
 16287      5F646174 
 16287      61363731 
 16287      00
 16288              	.LC61:
 16289 0cfc 2A2E4C75 		.string	"*.Lubsan_data670"
 16289      6273616E 
 16289      5F646174 
 16289      61363730 
 16289      00
 16290              	.LC62:
 16291 0d0d 2A2E4C75 		.string	"*.Lubsan_data669"
 16291      6273616E 
 16291      5F646174 
 16291      61363639 
 16291      00
 16292              	.LC63:
 16293 0d1e 2A2E4C75 		.string	"*.Lubsan_data668"
 16293      6273616E 
 16293      5F646174 
 16293      61363638 
 16293      00
 16294              	.LC64:
 16295 0d2f 2A2E4C75 		.string	"*.Lubsan_data667"
 16295      6273616E 
 16295      5F646174 
 16295      61363637 
 16295      00
 16296              	.LC65:
 16297 0d40 2A2E4C75 		.string	"*.Lubsan_data666"
 16297      6273616E 
 16297      5F646174 
 16297      61363636 
 16297      00
 16298              	.LC66:
 16299 0d51 2A2E4C75 		.string	"*.Lubsan_data665"
 16299      6273616E 
 16299      5F646174 
 16299      61363635 
 16299      00
 16300              	.LC67:
 16301 0d62 2A2E4C75 		.string	"*.Lubsan_data664"
 16301      6273616E 
 16301      5F646174 
 16301      61363634 
 16301      00
 16302              	.LC68:
 16303 0d73 2A2E4C75 		.string	"*.Lubsan_data663"
 16303      6273616E 
 16303      5F646174 
 16303      61363633 
 16303      00
 16304              	.LC69:
 16305 0d84 2A2E4C75 		.string	"*.Lubsan_data662"
 16305      6273616E 
 16305      5F646174 
 16305      61363632 
 16305      00
 16306              	.LC70:
 16307 0d95 2A2E4C75 		.string	"*.Lubsan_data661"
 16307      6273616E 
 16307      5F646174 
 16307      61363631 
 16307      00
 16308              	.LC71:
 16309 0da6 2A2E4C75 		.string	"*.Lubsan_data660"
 16309      6273616E 
 16309      5F646174 
 16309      61363630 
 16309      00
 16310              	.LC72:
 16311 0db7 2A2E4C75 		.string	"*.Lubsan_data659"
 16311      6273616E 
 16311      5F646174 
 16311      61363539 
 16311      00
 16312              	.LC73:
 16313 0dc8 2A2E4C75 		.string	"*.Lubsan_data658"
 16313      6273616E 
 16313      5F646174 
 16313      61363538 
 16313      00
 16314              	.LC74:
 16315 0dd9 2A2E4C75 		.string	"*.Lubsan_data657"
 16315      6273616E 
 16315      5F646174 
 16315      61363537 
 16315      00
 16316              	.LC75:
 16317 0dea 2A2E4C75 		.string	"*.Lubsan_data656"
 16317      6273616E 
 16317      5F646174 
 16317      61363536 
 16317      00
 16318              	.LC76:
 16319 0dfb 2A2E4C75 		.string	"*.Lubsan_data655"
 16319      6273616E 
 16319      5F646174 
 16319      61363535 
 16319      00
 16320              	.LC77:
 16321 0e0c 2A2E4C75 		.string	"*.Lubsan_data654"
 16321      6273616E 
 16321      5F646174 
 16321      61363534 
 16321      00
 16322              	.LC78:
 16323 0e1d 2A2E4C75 		.string	"*.Lubsan_data653"
 16323      6273616E 
 16323      5F646174 
 16323      61363533 
 16323      00
 16324              	.LC79:
 16325 0e2e 2A2E4C75 		.string	"*.Lubsan_data652"
 16325      6273616E 
 16325      5F646174 
 16325      61363532 
 16325      00
 16326              	.LC80:
 16327 0e3f 2A2E4C75 		.string	"*.Lubsan_data651"
 16327      6273616E 
 16327      5F646174 
 16327      61363531 
 16327      00
 16328              	.LC81:
 16329 0e50 2A2E4C75 		.string	"*.Lubsan_data650"
 16329      6273616E 
 16329      5F646174 
 16329      61363530 
 16329      00
 16330              	.LC82:
 16331 0e61 2A2E4C75 		.string	"*.Lubsan_data649"
 16331      6273616E 
 16331      5F646174 
 16331      61363439 
 16331      00
 16332              	.LC83:
 16333 0e72 2A2E4C75 		.string	"*.Lubsan_data648"
 16333      6273616E 
 16333      5F646174 
 16333      61363438 
 16333      00
 16334              	.LC84:
 16335 0e83 2A2E4C75 		.string	"*.Lubsan_type51"
 16335      6273616E 
 16335      5F747970 
 16335      65353100 
 16336              	.LC85:
 16337 0e93 2A2E4C75 		.string	"*.Lubsan_data647"
 16337      6273616E 
 16337      5F646174 
 16337      61363437 
 16337      00
 16338              	.LC86:
 16339 0ea4 2A2E4C75 		.string	"*.Lubsan_data646"
 16339      6273616E 
 16339      5F646174 
 16339      61363436 
 16339      00
 16340              	.LC87:
 16341 0eb5 2A2E4C75 		.string	"*.Lubsan_type50"
 16341      6273616E 
 16341      5F747970 
 16341      65353000 
 16342              	.LC88:
 16343 0ec5 2A2E4C75 		.string	"*.Lubsan_data645"
 16343      6273616E 
 16343      5F646174 
 16343      61363435 
 16343      00
 16344              	.LC89:
 16345 0ed6 2A2E4C75 		.string	"*.Lubsan_data644"
 16345      6273616E 
 16345      5F646174 
 16345      61363434 
 16345      00
 16346              	.LC90:
 16347 0ee7 2A2E4C75 		.string	"*.Lubsan_data643"
 16347      6273616E 
 16347      5F646174 
 16347      61363433 
 16347      00
 16348              	.LC91:
 16349 0ef8 2A2E4C75 		.string	"*.Lubsan_data642"
 16349      6273616E 
 16349      5F646174 
 16349      61363432 
 16349      00
 16350              	.LC92:
 16351 0f09 2A2E4C75 		.string	"*.Lubsan_data641"
 16351      6273616E 
 16351      5F646174 
 16351      61363431 
 16351      00
 16352              	.LC93:
 16353 0f1a 2A2E4C75 		.string	"*.Lubsan_data640"
 16353      6273616E 
 16353      5F646174 
 16353      61363430 
 16353      00
 16354              	.LC94:
 16355 0f2b 2A2E4C75 		.string	"*.Lubsan_type49"
 16355      6273616E 
 16355      5F747970 
 16355      65343900 
 16356              	.LC95:
 16357 0f3b 2A2E4C75 		.string	"*.Lubsan_data639"
 16357      6273616E 
 16357      5F646174 
 16357      61363339 
 16357      00
 16358              	.LC96:
 16359 0f4c 2A2E4C75 		.string	"*.Lubsan_type48"
 16359      6273616E 
 16359      5F747970 
 16359      65343800 
 16360              	.LC97:
 16361 0f5c 2A2E4C75 		.string	"*.Lubsan_data638"
 16361      6273616E 
 16361      5F646174 
 16361      61363338 
 16361      00
 16362              	.LC98:
 16363 0f6d 2A2E4C75 		.string	"*.Lubsan_data637"
 16363      6273616E 
 16363      5F646174 
 16363      61363337 
 16363      00
 16364              	.LC99:
 16365 0f7e 2A2E4C75 		.string	"*.Lubsan_data636"
 16365      6273616E 
 16365      5F646174 
 16365      61363336 
 16365      00
 16366              	.LC100:
 16367 0f8f 2A2E4C75 		.string	"*.Lubsan_data635"
 16367      6273616E 
 16367      5F646174 
 16367      61363335 
 16367      00
 16368              	.LC101:
 16369 0fa0 2A2E4C75 		.string	"*.Lubsan_data634"
 16369      6273616E 
 16369      5F646174 
 16369      61363334 
 16369      00
 16370              	.LC102:
 16371 0fb1 2A2E4C75 		.string	"*.Lubsan_data633"
 16371      6273616E 
 16371      5F646174 
 16371      61363333 
 16371      00
 16372              	.LC103:
 16373 0fc2 2A2E4C75 		.string	"*.Lubsan_data632"
 16373      6273616E 
 16373      5F646174 
 16373      61363332 
 16373      00
 16374              	.LC104:
 16375 0fd3 2A2E4C75 		.string	"*.Lubsan_data631"
 16375      6273616E 
 16375      5F646174 
 16375      61363331 
 16375      00
 16376              	.LC105:
 16377 0fe4 2A2E4C75 		.string	"*.Lubsan_data630"
 16377      6273616E 
 16377      5F646174 
 16377      61363330 
 16377      00
 16378              	.LC106:
 16379 0ff5 2A2E4C75 		.string	"*.Lubsan_data629"
 16379      6273616E 
 16379      5F646174 
 16379      61363239 
 16379      00
 16380              	.LC107:
 16381 1006 2A2E4C75 		.string	"*.Lubsan_data628"
 16381      6273616E 
 16381      5F646174 
 16381      61363238 
 16381      00
 16382              	.LC108:
 16383 1017 2A2E4C75 		.string	"*.Lubsan_data627"
 16383      6273616E 
 16383      5F646174 
 16383      61363237 
 16383      00
 16384              	.LC109:
 16385 1028 2A2E4C75 		.string	"*.Lubsan_data626"
 16385      6273616E 
 16385      5F646174 
 16385      61363236 
 16385      00
 16386              	.LC110:
 16387 1039 2A2E4C75 		.string	"*.Lubsan_data625"
 16387      6273616E 
 16387      5F646174 
 16387      61363235 
 16387      00
 16388              	.LC111:
 16389 104a 2A2E4C75 		.string	"*.Lubsan_data624"
 16389      6273616E 
 16389      5F646174 
 16389      61363234 
 16389      00
 16390              	.LC112:
 16391 105b 2A2E4C75 		.string	"*.Lubsan_data623"
 16391      6273616E 
 16391      5F646174 
 16391      61363233 
 16391      00
 16392              	.LC113:
 16393 106c 2A2E4C75 		.string	"*.Lubsan_data622"
 16393      6273616E 
 16393      5F646174 
 16393      61363232 
 16393      00
 16394              	.LC114:
 16395 107d 2A2E4C75 		.string	"*.Lubsan_data621"
 16395      6273616E 
 16395      5F646174 
 16395      61363231 
 16395      00
 16396              	.LC115:
 16397 108e 2A2E4C75 		.string	"*.Lubsan_data620"
 16397      6273616E 
 16397      5F646174 
 16397      61363230 
 16397      00
 16398              	.LC116:
 16399 109f 2A2E4C75 		.string	"*.Lubsan_data619"
 16399      6273616E 
 16399      5F646174 
 16399      61363139 
 16399      00
 16400              	.LC117:
 16401 10b0 2A2E4C75 		.string	"*.Lubsan_data618"
 16401      6273616E 
 16401      5F646174 
 16401      61363138 
 16401      00
 16402              	.LC118:
 16403 10c1 2A2E4C75 		.string	"*.Lubsan_data617"
 16403      6273616E 
 16403      5F646174 
 16403      61363137 
 16403      00
 16404              	.LC119:
 16405 10d2 2A2E4C75 		.string	"*.Lubsan_data616"
 16405      6273616E 
 16405      5F646174 
 16405      61363136 
 16405      00
 16406              	.LC120:
 16407 10e3 2A2E4C75 		.string	"*.Lubsan_data615"
 16407      6273616E 
 16407      5F646174 
 16407      61363135 
 16407      00
 16408              	.LC121:
 16409 10f4 2A2E4C75 		.string	"*.Lubsan_data614"
 16409      6273616E 
 16409      5F646174 
 16409      61363134 
 16409      00
 16410              	.LC122:
 16411 1105 2A2E4C75 		.string	"*.Lubsan_data613"
 16411      6273616E 
 16411      5F646174 
 16411      61363133 
 16411      00
 16412              	.LC123:
 16413 1116 2A2E4C75 		.string	"*.Lubsan_data612"
 16413      6273616E 
 16413      5F646174 
 16413      61363132 
 16413      00
 16414              	.LC124:
 16415 1127 2A2E4C75 		.string	"*.Lubsan_type47"
 16415      6273616E 
 16415      5F747970 
 16415      65343700 
 16416              	.LC125:
 16417 1137 2A2E4C75 		.string	"*.Lubsan_data611"
 16417      6273616E 
 16417      5F646174 
 16417      61363131 
 16417      00
 16418              	.LC126:
 16419 1148 2A2E4C75 		.string	"*.Lubsan_data610"
 16419      6273616E 
 16419      5F646174 
 16419      61363130 
 16419      00
 16420              	.LC127:
 16421 1159 2A2E4C75 		.string	"*.Lubsan_data609"
 16421      6273616E 
 16421      5F646174 
 16421      61363039 
 16421      00
 16422              	.LC128:
 16423 116a 2A2E4C75 		.string	"*.Lubsan_data608"
 16423      6273616E 
 16423      5F646174 
 16423      61363038 
 16423      00
 16424              	.LC129:
 16425 117b 2A2E4C75 		.string	"*.Lubsan_data607"
 16425      6273616E 
 16425      5F646174 
 16425      61363037 
 16425      00
 16426              	.LC130:
 16427 118c 2A2E4C75 		.string	"*.Lubsan_data606"
 16427      6273616E 
 16427      5F646174 
 16427      61363036 
 16427      00
 16428              	.LC131:
 16429 119d 2A2E4C75 		.string	"*.Lubsan_data605"
 16429      6273616E 
 16429      5F646174 
 16429      61363035 
 16429      00
 16430              	.LC132:
 16431 11ae 2A2E4C75 		.string	"*.Lubsan_data604"
 16431      6273616E 
 16431      5F646174 
 16431      61363034 
 16431      00
 16432              	.LC133:
 16433 11bf 2A2E4C75 		.string	"*.Lubsan_data603"
 16433      6273616E 
 16433      5F646174 
 16433      61363033 
 16433      00
 16434              	.LC134:
 16435 11d0 2A2E4C75 		.string	"*.Lubsan_data602"
 16435      6273616E 
 16435      5F646174 
 16435      61363032 
 16435      00
 16436              	.LC135:
 16437 11e1 2A2E4C75 		.string	"*.Lubsan_data601"
 16437      6273616E 
 16437      5F646174 
 16437      61363031 
 16437      00
 16438              	.LC136:
 16439 11f2 2A2E4C75 		.string	"*.Lubsan_data600"
 16439      6273616E 
 16439      5F646174 
 16439      61363030 
 16439      00
 16440              	.LC137:
 16441 1203 2A2E4C75 		.string	"*.Lubsan_data599"
 16441      6273616E 
 16441      5F646174 
 16441      61353939 
 16441      00
 16442              	.LC138:
 16443 1214 2A2E4C75 		.string	"*.Lubsan_data598"
 16443      6273616E 
 16443      5F646174 
 16443      61353938 
 16443      00
 16444              	.LC139:
 16445 1225 2A2E4C75 		.string	"*.Lubsan_data597"
 16445      6273616E 
 16445      5F646174 
 16445      61353937 
 16445      00
 16446              	.LC140:
 16447 1236 2A2E4C75 		.string	"*.Lubsan_data596"
 16447      6273616E 
 16447      5F646174 
 16447      61353936 
 16447      00
 16448              	.LC141:
 16449 1247 2A2E4C75 		.string	"*.Lubsan_type46"
 16449      6273616E 
 16449      5F747970 
 16449      65343600 
 16450              	.LC142:
 16451 1257 2A2E4C75 		.string	"*.Lubsan_data595"
 16451      6273616E 
 16451      5F646174 
 16451      61353935 
 16451      00
 16452              	.LC143:
 16453 1268 2A2E4C75 		.string	"*.Lubsan_data594"
 16453      6273616E 
 16453      5F646174 
 16453      61353934 
 16453      00
 16454              	.LC144:
 16455 1279 2A2E4C75 		.string	"*.Lubsan_data593"
 16455      6273616E 
 16455      5F646174 
 16455      61353933 
 16455      00
 16456              	.LC145:
 16457 128a 2A2E4C75 		.string	"*.Lubsan_data592"
 16457      6273616E 
 16457      5F646174 
 16457      61353932 
 16457      00
 16458              	.LC146:
 16459 129b 2A2E4C75 		.string	"*.Lubsan_data591"
 16459      6273616E 
 16459      5F646174 
 16459      61353931 
 16459      00
 16460              	.LC147:
 16461 12ac 2A2E4C75 		.string	"*.Lubsan_data590"
 16461      6273616E 
 16461      5F646174 
 16461      61353930 
 16461      00
 16462              	.LC148:
 16463 12bd 2A2E4C75 		.string	"*.Lubsan_data589"
 16463      6273616E 
 16463      5F646174 
 16463      61353839 
 16463      00
 16464              	.LC149:
 16465 12ce 2A2E4C75 		.string	"*.Lubsan_data588"
 16465      6273616E 
 16465      5F646174 
 16465      61353838 
 16465      00
 16466              	.LC150:
 16467 12df 2A2E4C75 		.string	"*.Lubsan_data587"
 16467      6273616E 
 16467      5F646174 
 16467      61353837 
 16467      00
 16468              	.LC151:
 16469 12f0 2A2E4C75 		.string	"*.Lubsan_data586"
 16469      6273616E 
 16469      5F646174 
 16469      61353836 
 16469      00
 16470              	.LC152:
 16471 1301 2A2E4C75 		.string	"*.Lubsan_data585"
 16471      6273616E 
 16471      5F646174 
 16471      61353835 
 16471      00
 16472              	.LC153:
 16473 1312 2A2E4C75 		.string	"*.Lubsan_data584"
 16473      6273616E 
 16473      5F646174 
 16473      61353834 
 16473      00
 16474              	.LC154:
 16475 1323 2A2E4C75 		.string	"*.Lubsan_data583"
 16475      6273616E 
 16475      5F646174 
 16475      61353833 
 16475      00
 16476              	.LC155:
 16477 1334 2A2E4C75 		.string	"*.Lubsan_data582"
 16477      6273616E 
 16477      5F646174 
 16477      61353832 
 16477      00
 16478              	.LC156:
 16479 1345 2A2E4C75 		.string	"*.Lubsan_data581"
 16479      6273616E 
 16479      5F646174 
 16479      61353831 
 16479      00
 16480              	.LC157:
 16481 1356 2A2E4C75 		.string	"*.Lubsan_data580"
 16481      6273616E 
 16481      5F646174 
 16481      61353830 
 16481      00
 16482              	.LC158:
 16483 1367 2A2E4C75 		.string	"*.Lubsan_data579"
 16483      6273616E 
 16483      5F646174 
 16483      61353739 
 16483      00
 16484              	.LC159:
 16485 1378 2A2E4C75 		.string	"*.Lubsan_data578"
 16485      6273616E 
 16485      5F646174 
 16485      61353738 
 16485      00
 16486              	.LC160:
 16487 1389 2A2E4C75 		.string	"*.Lubsan_data577"
 16487      6273616E 
 16487      5F646174 
 16487      61353737 
 16487      00
 16488              	.LC161:
 16489 139a 2A2E4C75 		.string	"*.Lubsan_data576"
 16489      6273616E 
 16489      5F646174 
 16489      61353736 
 16489      00
 16490              	.LC162:
 16491 13ab 2A2E4C75 		.string	"*.Lubsan_data575"
 16491      6273616E 
 16491      5F646174 
 16491      61353735 
 16491      00
 16492              	.LC163:
 16493 13bc 2A2E4C75 		.string	"*.Lubsan_data574"
 16493      6273616E 
 16493      5F646174 
 16493      61353734 
 16493      00
 16494              	.LC164:
 16495 13cd 2A2E4C75 		.string	"*.Lubsan_data573"
 16495      6273616E 
 16495      5F646174 
 16495      61353733 
 16495      00
 16496              	.LC165:
 16497 13de 2A2E4C75 		.string	"*.Lubsan_data572"
 16497      6273616E 
 16497      5F646174 
 16497      61353732 
 16497      00
 16498              	.LC166:
 16499 13ef 2A2E4C75 		.string	"*.Lubsan_type45"
 16499      6273616E 
 16499      5F747970 
 16499      65343500 
 16500              	.LC167:
 16501 13ff 2A2E4C75 		.string	"*.Lubsan_data571"
 16501      6273616E 
 16501      5F646174 
 16501      61353731 
 16501      00
 16502              	.LC168:
 16503 1410 2A2E4C75 		.string	"*.Lubsan_type44"
 16503      6273616E 
 16503      5F747970 
 16503      65343400 
 16504              	.LC169:
 16505 1420 2A2E4C75 		.string	"*.Lubsan_data570"
 16505      6273616E 
 16505      5F646174 
 16505      61353730 
 16505      00
 16506              	.LC170:
 16507 1431 2A2E4C75 		.string	"*.Lubsan_data569"
 16507      6273616E 
 16507      5F646174 
 16507      61353639 
 16507      00
 16508              	.LC171:
 16509 1442 2A2E4C75 		.string	"*.Lubsan_data568"
 16509      6273616E 
 16509      5F646174 
 16509      61353638 
 16509      00
 16510              	.LC172:
 16511 1453 2A2E4C75 		.string	"*.Lubsan_data567"
 16511      6273616E 
 16511      5F646174 
 16511      61353637 
 16511      00
 16512              	.LC173:
 16513 1464 2A2E4C75 		.string	"*.Lubsan_type43"
 16513      6273616E 
 16513      5F747970 
 16513      65343300 
 16514              	.LC174:
 16515 1474 2A2E4C75 		.string	"*.Lubsan_data566"
 16515      6273616E 
 16515      5F646174 
 16515      61353636 
 16515      00
 16516              	.LC175:
 16517 1485 2A2E4C75 		.string	"*.Lubsan_data565"
 16517      6273616E 
 16517      5F646174 
 16517      61353635 
 16517      00
 16518              	.LC176:
 16519 1496 2A2E4C75 		.string	"*.Lubsan_type42"
 16519      6273616E 
 16519      5F747970 
 16519      65343200 
 16520              	.LC177:
 16521 14a6 2A2E4C75 		.string	"*.Lubsan_data564"
 16521      6273616E 
 16521      5F646174 
 16521      61353634 
 16521      00
 16522              	.LC178:
 16523 14b7 2A2E4C75 		.string	"*.Lubsan_data563"
 16523      6273616E 
 16523      5F646174 
 16523      61353633 
 16523      00
 16524              	.LC179:
 16525 14c8 2A2E4C75 		.string	"*.Lubsan_data562"
 16525      6273616E 
 16525      5F646174 
 16525      61353632 
 16525      00
 16526              	.LC180:
 16527 14d9 2A2E4C75 		.string	"*.Lubsan_data561"
 16527      6273616E 
 16527      5F646174 
 16527      61353631 
 16527      00
 16528              	.LC181:
 16529 14ea 2A2E4C75 		.string	"*.Lubsan_data560"
 16529      6273616E 
 16529      5F646174 
 16529      61353630 
 16529      00
 16530              	.LC182:
 16531 14fb 2A2E4C75 		.string	"*.Lubsan_data559"
 16531      6273616E 
 16531      5F646174 
 16531      61353539 
 16531      00
 16532              	.LC183:
 16533 150c 2A2E4C75 		.string	"*.Lubsan_data558"
 16533      6273616E 
 16533      5F646174 
 16533      61353538 
 16533      00
 16534              	.LC184:
 16535 151d 2A2E4C75 		.string	"*.Lubsan_data557"
 16535      6273616E 
 16535      5F646174 
 16535      61353537 
 16535      00
 16536              	.LC185:
 16537 152e 2A2E4C75 		.string	"*.Lubsan_data556"
 16537      6273616E 
 16537      5F646174 
 16537      61353536 
 16537      00
 16538              	.LC186:
 16539 153f 2A2E4C75 		.string	"*.Lubsan_data555"
 16539      6273616E 
 16539      5F646174 
 16539      61353535 
 16539      00
 16540              	.LC187:
 16541 1550 2A2E4C75 		.string	"*.Lubsan_data554"
 16541      6273616E 
 16541      5F646174 
 16541      61353534 
 16541      00
 16542              	.LC188:
 16543 1561 2A2E4C75 		.string	"*.Lubsan_data553"
 16543      6273616E 
 16543      5F646174 
 16543      61353533 
 16543      00
 16544              	.LC189:
 16545 1572 2A2E4C75 		.string	"*.Lubsan_data552"
 16545      6273616E 
 16545      5F646174 
 16545      61353532 
 16545      00
 16546              	.LC190:
 16547 1583 2A2E4C75 		.string	"*.Lubsan_data551"
 16547      6273616E 
 16547      5F646174 
 16547      61353531 
 16547      00
 16548              	.LC191:
 16549 1594 2A2E4C75 		.string	"*.Lubsan_data550"
 16549      6273616E 
 16549      5F646174 
 16549      61353530 
 16549      00
 16550              	.LC192:
 16551 15a5 2A2E4C75 		.string	"*.Lubsan_data549"
 16551      6273616E 
 16551      5F646174 
 16551      61353439 
 16551      00
 16552              	.LC193:
 16553 15b6 2A2E4C75 		.string	"*.Lubsan_data548"
 16553      6273616E 
 16553      5F646174 
 16553      61353438 
 16553      00
 16554              	.LC194:
 16555 15c7 2A2E4C75 		.string	"*.Lubsan_data547"
 16555      6273616E 
 16555      5F646174 
 16555      61353437 
 16555      00
 16556              	.LC195:
 16557 15d8 2A2E4C75 		.string	"*.Lubsan_data546"
 16557      6273616E 
 16557      5F646174 
 16557      61353436 
 16557      00
 16558              	.LC196:
 16559 15e9 2A2E4C75 		.string	"*.Lubsan_data545"
 16559      6273616E 
 16559      5F646174 
 16559      61353435 
 16559      00
 16560              	.LC197:
 16561 15fa 2A2E4C75 		.string	"*.Lubsan_data544"
 16561      6273616E 
 16561      5F646174 
 16561      61353434 
 16561      00
 16562              	.LC198:
 16563 160b 2A2E4C75 		.string	"*.Lubsan_data543"
 16563      6273616E 
 16563      5F646174 
 16563      61353433 
 16563      00
 16564              	.LC199:
 16565 161c 2A2E4C75 		.string	"*.Lubsan_data542"
 16565      6273616E 
 16565      5F646174 
 16565      61353432 
 16565      00
 16566              	.LC200:
 16567 162d 2A2E4C75 		.string	"*.Lubsan_data541"
 16567      6273616E 
 16567      5F646174 
 16567      61353431 
 16567      00
 16568              	.LC201:
 16569 163e 2A2E4C75 		.string	"*.Lubsan_data540"
 16569      6273616E 
 16569      5F646174 
 16569      61353430 
 16569      00
 16570              	.LC202:
 16571 164f 2A2E4C75 		.string	"*.Lubsan_type41"
 16571      6273616E 
 16571      5F747970 
 16571      65343100 
 16572              	.LC203:
 16573 165f 2A2E4C75 		.string	"*.Lubsan_data539"
 16573      6273616E 
 16573      5F646174 
 16573      61353339 
 16573      00
 16574              	.LC204:
 16575 1670 2A2E4C75 		.string	"*.Lubsan_data538"
 16575      6273616E 
 16575      5F646174 
 16575      61353338 
 16575      00
 16576              	.LC205:
 16577 1681 2A2E4C75 		.string	"*.Lubsan_data537"
 16577      6273616E 
 16577      5F646174 
 16577      61353337 
 16577      00
 16578              	.LC206:
 16579 1692 2A2E4C75 		.string	"*.Lubsan_data536"
 16579      6273616E 
 16579      5F646174 
 16579      61353336 
 16579      00
 16580              	.LC207:
 16581 16a3 2A2E4C75 		.string	"*.Lubsan_data535"
 16581      6273616E 
 16581      5F646174 
 16581      61353335 
 16581      00
 16582              	.LC208:
 16583 16b4 2A2E4C75 		.string	"*.Lubsan_data534"
 16583      6273616E 
 16583      5F646174 
 16583      61353334 
 16583      00
 16584              	.LC209:
 16585 16c5 2A2E4C75 		.string	"*.Lubsan_data533"
 16585      6273616E 
 16585      5F646174 
 16585      61353333 
 16585      00
 16586              	.LC210:
 16587 16d6 2A2E4C75 		.string	"*.Lubsan_data532"
 16587      6273616E 
 16587      5F646174 
 16587      61353332 
 16587      00
 16588              	.LC211:
 16589 16e7 2A2E4C75 		.string	"*.Lubsan_data531"
 16589      6273616E 
 16589      5F646174 
 16589      61353331 
 16589      00
 16590              	.LC212:
 16591 16f8 2A2E4C75 		.string	"*.Lubsan_data530"
 16591      6273616E 
 16591      5F646174 
 16591      61353330 
 16591      00
 16592              	.LC213:
 16593 1709 2A2E4C75 		.string	"*.Lubsan_data529"
 16593      6273616E 
 16593      5F646174 
 16593      61353239 
 16593      00
 16594              	.LC214:
 16595 171a 2A2E4C75 		.string	"*.Lubsan_data528"
 16595      6273616E 
 16595      5F646174 
 16595      61353238 
 16595      00
 16596              	.LC215:
 16597 172b 2A2E4C75 		.string	"*.Lubsan_data527"
 16597      6273616E 
 16597      5F646174 
 16597      61353237 
 16597      00
 16598              	.LC216:
 16599 173c 2A2E4C75 		.string	"*.Lubsan_data526"
 16599      6273616E 
 16599      5F646174 
 16599      61353236 
 16599      00
 16600              	.LC217:
 16601 174d 2A2E4C75 		.string	"*.Lubsan_data525"
 16601      6273616E 
 16601      5F646174 
 16601      61353235 
 16601      00
 16602              	.LC218:
 16603 175e 2A2E4C75 		.string	"*.Lubsan_data524"
 16603      6273616E 
 16603      5F646174 
 16603      61353234 
 16603      00
 16604              	.LC219:
 16605 176f 2A2E4C75 		.string	"*.Lubsan_data523"
 16605      6273616E 
 16605      5F646174 
 16605      61353233 
 16605      00
 16606              	.LC220:
 16607 1780 2A2E4C75 		.string	"*.Lubsan_data522"
 16607      6273616E 
 16607      5F646174 
 16607      61353232 
 16607      00
 16608              	.LC221:
 16609 1791 2A2E4C75 		.string	"*.Lubsan_type40"
 16609      6273616E 
 16609      5F747970 
 16609      65343000 
 16610              	.LC222:
 16611 17a1 2A2E4C75 		.string	"*.Lubsan_data521"
 16611      6273616E 
 16611      5F646174 
 16611      61353231 
 16611      00
 16612              	.LC223:
 16613 17b2 2A2E4C75 		.string	"*.Lubsan_data520"
 16613      6273616E 
 16613      5F646174 
 16613      61353230 
 16613      00
 16614              	.LC224:
 16615 17c3 2A2E4C75 		.string	"*.Lubsan_data519"
 16615      6273616E 
 16615      5F646174 
 16615      61353139 
 16615      00
 16616              	.LC225:
 16617 17d4 2A2E4C75 		.string	"*.Lubsan_data518"
 16617      6273616E 
 16617      5F646174 
 16617      61353138 
 16617      00
 16618              	.LC226:
 16619 17e5 2A2E4C75 		.string	"*.Lubsan_data517"
 16619      6273616E 
 16619      5F646174 
 16619      61353137 
 16619      00
 16620              	.LC227:
 16621 17f6 2A2E4C75 		.string	"*.Lubsan_data516"
 16621      6273616E 
 16621      5F646174 
 16621      61353136 
 16621      00
 16622              	.LC228:
 16623 1807 2A2E4C75 		.string	"*.Lubsan_data515"
 16623      6273616E 
 16623      5F646174 
 16623      61353135 
 16623      00
 16624              	.LC229:
 16625 1818 2A2E4C75 		.string	"*.Lubsan_data514"
 16625      6273616E 
 16625      5F646174 
 16625      61353134 
 16625      00
 16626              	.LC230:
 16627 1829 2A2E4C75 		.string	"*.Lubsan_data513"
 16627      6273616E 
 16627      5F646174 
 16627      61353133 
 16627      00
 16628              	.LC231:
 16629 183a 2A2E4C75 		.string	"*.Lubsan_type39"
 16629      6273616E 
 16629      5F747970 
 16629      65333900 
 16630              	.LC232:
 16631 184a 2A2E4C75 		.string	"*.Lubsan_data512"
 16631      6273616E 
 16631      5F646174 
 16631      61353132 
 16631      00
 16632              	.LC233:
 16633 185b 2A2E4C75 		.string	"*.Lubsan_type38"
 16633      6273616E 
 16633      5F747970 
 16633      65333800 
 16634              	.LC234:
 16635 186b 2A2E4C75 		.string	"*.Lubsan_data511"
 16635      6273616E 
 16635      5F646174 
 16635      61353131 
 16635      00
 16636              	.LC235:
 16637 187c 2A2E4C75 		.string	"*.Lubsan_data510"
 16637      6273616E 
 16637      5F646174 
 16637      61353130 
 16637      00
 16638              	.LC236:
 16639 188d 2A2E4C75 		.string	"*.Lubsan_data509"
 16639      6273616E 
 16639      5F646174 
 16639      61353039 
 16639      00
 16640              	.LC237:
 16641 189e 2A2E4C75 		.string	"*.Lubsan_data508"
 16641      6273616E 
 16641      5F646174 
 16641      61353038 
 16641      00
 16642              	.LC238:
 16643 18af 2A2E4C75 		.string	"*.Lubsan_data507"
 16643      6273616E 
 16643      5F646174 
 16643      61353037 
 16643      00
 16644              	.LC239:
 16645 18c0 2A2E4C75 		.string	"*.Lubsan_data506"
 16645      6273616E 
 16645      5F646174 
 16645      61353036 
 16645      00
 16646              	.LC240:
 16647 18d1 2A2E4C75 		.string	"*.Lubsan_data505"
 16647      6273616E 
 16647      5F646174 
 16647      61353035 
 16647      00
 16648              	.LC241:
 16649 18e2 2A2E4C75 		.string	"*.Lubsan_data504"
 16649      6273616E 
 16649      5F646174 
 16649      61353034 
 16649      00
 16650              	.LC242:
 16651 18f3 2A2E4C75 		.string	"*.Lubsan_data503"
 16651      6273616E 
 16651      5F646174 
 16651      61353033 
 16651      00
 16652              	.LC243:
 16653 1904 2A2E4C75 		.string	"*.Lubsan_data502"
 16653      6273616E 
 16653      5F646174 
 16653      61353032 
 16653      00
 16654              	.LC244:
 16655 1915 2A2E4C75 		.string	"*.Lubsan_data501"
 16655      6273616E 
 16655      5F646174 
 16655      61353031 
 16655      00
 16656              	.LC245:
 16657 1926 2A2E4C75 		.string	"*.Lubsan_data500"
 16657      6273616E 
 16657      5F646174 
 16657      61353030 
 16657      00
 16658              	.LC246:
 16659 1937 2A2E4C75 		.string	"*.Lubsan_data499"
 16659      6273616E 
 16659      5F646174 
 16659      61343939 
 16659      00
 16660              	.LC247:
 16661 1948 2A2E4C75 		.string	"*.Lubsan_type37"
 16661      6273616E 
 16661      5F747970 
 16661      65333700 
 16662              	.LC248:
 16663 1958 2A2E4C75 		.string	"*.Lubsan_data498"
 16663      6273616E 
 16663      5F646174 
 16663      61343938 
 16663      00
 16664              	.LC249:
 16665 1969 2A2E4C75 		.string	"*.Lubsan_data497"
 16665      6273616E 
 16665      5F646174 
 16665      61343937 
 16665      00
 16666              	.LC250:
 16667 197a 2A2E4C75 		.string	"*.Lubsan_data496"
 16667      6273616E 
 16667      5F646174 
 16667      61343936 
 16667      00
 16668              	.LC251:
 16669 198b 2A2E4C75 		.string	"*.Lubsan_data495"
 16669      6273616E 
 16669      5F646174 
 16669      61343935 
 16669      00
 16670              	.LC252:
 16671 199c 2A2E4C75 		.string	"*.Lubsan_data494"
 16671      6273616E 
 16671      5F646174 
 16671      61343934 
 16671      00
 16672              	.LC253:
 16673 19ad 2A2E4C75 		.string	"*.Lubsan_data493"
 16673      6273616E 
 16673      5F646174 
 16673      61343933 
 16673      00
 16674              	.LC254:
 16675 19be 2A2E4C75 		.string	"*.Lubsan_data492"
 16675      6273616E 
 16675      5F646174 
 16675      61343932 
 16675      00
 16676              	.LC255:
 16677 19cf 2A2E4C75 		.string	"*.Lubsan_data491"
 16677      6273616E 
 16677      5F646174 
 16677      61343931 
 16677      00
 16678              	.LC256:
 16679 19e0 2A2E4C75 		.string	"*.Lubsan_type36"
 16679      6273616E 
 16679      5F747970 
 16679      65333600 
 16680              	.LC257:
 16681 19f0 2A2E4C75 		.string	"*.Lubsan_data490"
 16681      6273616E 
 16681      5F646174 
 16681      61343930 
 16681      00
 16682              	.LC258:
 16683 1a01 2A2E4C75 		.string	"*.Lubsan_type35"
 16683      6273616E 
 16683      5F747970 
 16683      65333500 
 16684              	.LC259:
 16685 1a11 2A2E4C75 		.string	"*.Lubsan_data489"
 16685      6273616E 
 16685      5F646174 
 16685      61343839 
 16685      00
 16686              	.LC260:
 16687 1a22 2A2E4C75 		.string	"*.Lubsan_data488"
 16687      6273616E 
 16687      5F646174 
 16687      61343838 
 16687      00
 16688              	.LC261:
 16689 1a33 2A2E4C75 		.string	"*.Lubsan_data487"
 16689      6273616E 
 16689      5F646174 
 16689      61343837 
 16689      00
 16690              	.LC262:
 16691 1a44 2A2E4C75 		.string	"*.Lubsan_data486"
 16691      6273616E 
 16691      5F646174 
 16691      61343836 
 16691      00
 16692              	.LC263:
 16693 1a55 2A2E4C75 		.string	"*.Lubsan_type34"
 16693      6273616E 
 16693      5F747970 
 16693      65333400 
 16694              	.LC264:
 16695 1a65 2A2E4C75 		.string	"*.Lubsan_data485"
 16695      6273616E 
 16695      5F646174 
 16695      61343835 
 16695      00
 16696              	.LC265:
 16697 1a76 2A2E4C75 		.string	"*.Lubsan_data484"
 16697      6273616E 
 16697      5F646174 
 16697      61343834 
 16697      00
 16698              	.LC266:
 16699 1a87 2A2E4C75 		.string	"*.Lubsan_type33"
 16699      6273616E 
 16699      5F747970 
 16699      65333300 
 16700              	.LC267:
 16701 1a97 2A2E4C75 		.string	"*.Lubsan_data483"
 16701      6273616E 
 16701      5F646174 
 16701      61343833 
 16701      00
 16702              	.LC268:
 16703 1aa8 2A2E4C75 		.string	"*.Lubsan_data482"
 16703      6273616E 
 16703      5F646174 
 16703      61343832 
 16703      00
 16704              	.LC269:
 16705 1ab9 2A2E4C75 		.string	"*.Lubsan_type32"
 16705      6273616E 
 16705      5F747970 
 16705      65333200 
 16706              	.LC270:
 16707 1ac9 2A2E4C75 		.string	"*.Lubsan_data481"
 16707      6273616E 
 16707      5F646174 
 16707      61343831 
 16707      00
 16708              	.LC271:
 16709 1ada 2A2E4C75 		.string	"*.Lubsan_data480"
 16709      6273616E 
 16709      5F646174 
 16709      61343830 
 16709      00
 16710              	.LC272:
 16711 1aeb 2A2E4C75 		.string	"*.Lubsan_data479"
 16711      6273616E 
 16711      5F646174 
 16711      61343739 
 16711      00
 16712              	.LC273:
 16713 1afc 2A2E4C75 		.string	"*.Lubsan_type31"
 16713      6273616E 
 16713      5F747970 
 16713      65333100 
 16714              	.LC274:
 16715 1b0c 2A2E4C75 		.string	"*.Lubsan_data478"
 16715      6273616E 
 16715      5F646174 
 16715      61343738 
 16715      00
 16716              	.LC275:
 16717 1b1d 2A2E4C75 		.string	"*.Lubsan_data477"
 16717      6273616E 
 16717      5F646174 
 16717      61343737 
 16717      00
 16718              	.LC276:
 16719 1b2e 2A2E4C75 		.string	"*.Lubsan_data476"
 16719      6273616E 
 16719      5F646174 
 16719      61343736 
 16719      00
 16720              	.LC277:
 16721 1b3f 2A2E4C75 		.string	"*.Lubsan_type30"
 16721      6273616E 
 16721      5F747970 
 16721      65333000 
 16722              	.LC278:
 16723 1b4f 2A2E4C75 		.string	"*.Lubsan_data475"
 16723      6273616E 
 16723      5F646174 
 16723      61343735 
 16723      00
 16724              	.LC279:
 16725 1b60 2A2E4C75 		.string	"*.Lubsan_type29"
 16725      6273616E 
 16725      5F747970 
 16725      65323900 
 16726              	.LC280:
 16727 1b70 2A2E4C75 		.string	"*.Lubsan_data474"
 16727      6273616E 
 16727      5F646174 
 16727      61343734 
 16727      00
 16728              	.LC281:
 16729 1b81 2A2E4C75 		.string	"*.Lubsan_data473"
 16729      6273616E 
 16729      5F646174 
 16729      61343733 
 16729      00
 16730              	.LC282:
 16731 1b92 2A2E4C75 		.string	"*.Lubsan_data472"
 16731      6273616E 
 16731      5F646174 
 16731      61343732 
 16731      00
 16732              	.LC283:
 16733 1ba3 2A2E4C75 		.string	"*.Lubsan_data471"
 16733      6273616E 
 16733      5F646174 
 16733      61343731 
 16733      00
 16734              	.LC284:
 16735 1bb4 2A2E4C75 		.string	"*.Lubsan_data470"
 16735      6273616E 
 16735      5F646174 
 16735      61343730 
 16735      00
 16736              	.LC285:
 16737 1bc5 2A2E4C75 		.string	"*.Lubsan_data469"
 16737      6273616E 
 16737      5F646174 
 16737      61343639 
 16737      00
 16738              	.LC286:
 16739 1bd6 2A2E4C75 		.string	"*.Lubsan_data468"
 16739      6273616E 
 16739      5F646174 
 16739      61343638 
 16739      00
 16740              	.LC287:
 16741 1be7 2A2E4C75 		.string	"*.Lubsan_data467"
 16741      6273616E 
 16741      5F646174 
 16741      61343637 
 16741      00
 16742              	.LC288:
 16743 1bf8 2A2E4C75 		.string	"*.Lubsan_data466"
 16743      6273616E 
 16743      5F646174 
 16743      61343636 
 16743      00
 16744              	.LC289:
 16745 1c09 2A2E4C75 		.string	"*.Lubsan_data465"
 16745      6273616E 
 16745      5F646174 
 16745      61343635 
 16745      00
 16746              	.LC290:
 16747 1c1a 2A2E4C75 		.string	"*.Lubsan_type28"
 16747      6273616E 
 16747      5F747970 
 16747      65323800 
 16748              	.LC291:
 16749 1c2a 2A2E4C75 		.string	"*.Lubsan_data464"
 16749      6273616E 
 16749      5F646174 
 16749      61343634 
 16749      00
 16750              	.LC292:
 16751 1c3b 2A2E4C75 		.string	"*.Lubsan_data463"
 16751      6273616E 
 16751      5F646174 
 16751      61343633 
 16751      00
 16752              	.LC293:
 16753 1c4c 2A2E4C75 		.string	"*.Lubsan_data462"
 16753      6273616E 
 16753      5F646174 
 16753      61343632 
 16753      00
 16754              	.LC294:
 16755 1c5d 2A2E4C75 		.string	"*.Lubsan_data461"
 16755      6273616E 
 16755      5F646174 
 16755      61343631 
 16755      00
 16756              	.LC295:
 16757 1c6e 2A2E4C75 		.string	"*.Lubsan_data460"
 16757      6273616E 
 16757      5F646174 
 16757      61343630 
 16757      00
 16758              	.LC296:
 16759 1c7f 2A2E4C75 		.string	"*.Lubsan_data459"
 16759      6273616E 
 16759      5F646174 
 16759      61343539 
 16759      00
 16760              	.LC297:
 16761 1c90 2A2E4C75 		.string	"*.Lubsan_data458"
 16761      6273616E 
 16761      5F646174 
 16761      61343538 
 16761      00
 16762              	.LC298:
 16763 1ca1 2A2E4C75 		.string	"*.Lubsan_data457"
 16763      6273616E 
 16763      5F646174 
 16763      61343537 
 16763      00
 16764              	.LC299:
 16765 1cb2 2A2E4C75 		.string	"*.Lubsan_data456"
 16765      6273616E 
 16765      5F646174 
 16765      61343536 
 16765      00
 16766              	.LC300:
 16767 1cc3 2A2E4C75 		.string	"*.Lubsan_type27"
 16767      6273616E 
 16767      5F747970 
 16767      65323700 
 16768              	.LC301:
 16769 1cd3 2A2E4C75 		.string	"*.Lubsan_data455"
 16769      6273616E 
 16769      5F646174 
 16769      61343535 
 16769      00
 16770              	.LC302:
 16771 1ce4 2A2E4C75 		.string	"*.Lubsan_data454"
 16771      6273616E 
 16771      5F646174 
 16771      61343534 
 16771      00
 16772              	.LC303:
 16773 1cf5 2A2E4C75 		.string	"*.Lubsan_data453"
 16773      6273616E 
 16773      5F646174 
 16773      61343533 
 16773      00
 16774              	.LC304:
 16775 1d06 2A2E4C75 		.string	"*.Lubsan_type26"
 16775      6273616E 
 16775      5F747970 
 16775      65323600 
 16776              	.LC305:
 16777 1d16 2A2E4C75 		.string	"*.Lubsan_data452"
 16777      6273616E 
 16777      5F646174 
 16777      61343532 
 16777      00
 16778              	.LC306:
 16779 1d27 2A2E4C75 		.string	"*.Lubsan_data451"
 16779      6273616E 
 16779      5F646174 
 16779      61343531 
 16779      00
 16780              	.LC307:
 16781 1d38 2A2E4C75 		.string	"*.Lubsan_data450"
 16781      6273616E 
 16781      5F646174 
 16781      61343530 
 16781      00
 16782              	.LC308:
 16783 1d49 2A2E4C75 		.string	"*.Lubsan_data449"
 16783      6273616E 
 16783      5F646174 
 16783      61343439 
 16783      00
 16784              	.LC309:
 16785 1d5a 2A2E4C75 		.string	"*.Lubsan_data448"
 16785      6273616E 
 16785      5F646174 
 16785      61343438 
 16785      00
 16786              	.LC310:
 16787 1d6b 2A2E4C75 		.string	"*.Lubsan_data447"
 16787      6273616E 
 16787      5F646174 
 16787      61343437 
 16787      00
 16788              	.LC311:
 16789 1d7c 2A2E4C75 		.string	"*.Lubsan_data446"
 16789      6273616E 
 16789      5F646174 
 16789      61343436 
 16789      00
 16790              	.LC312:
 16791 1d8d 2A2E4C75 		.string	"*.Lubsan_data445"
 16791      6273616E 
 16791      5F646174 
 16791      61343435 
 16791      00
 16792              	.LC313:
 16793 1d9e 2A2E4C75 		.string	"*.Lubsan_type25"
 16793      6273616E 
 16793      5F747970 
 16793      65323500 
 16794              	.LC314:
 16795 1dae 2A2E4C75 		.string	"*.Lubsan_data444"
 16795      6273616E 
 16795      5F646174 
 16795      61343434 
 16795      00
 16796              	.LC315:
 16797 1dbf 2A2E4C75 		.string	"*.Lubsan_data443"
 16797      6273616E 
 16797      5F646174 
 16797      61343433 
 16797      00
 16798              	.LC316:
 16799 1dd0 2A2E4C75 		.string	"*.Lubsan_data442"
 16799      6273616E 
 16799      5F646174 
 16799      61343432 
 16799      00
 16800              	.LC317:
 16801 1de1 2A2E4C75 		.string	"*.Lubsan_data441"
 16801      6273616E 
 16801      5F646174 
 16801      61343431 
 16801      00
 16802              	.LC318:
 16803 1df2 2A2E4C75 		.string	"*.Lubsan_data440"
 16803      6273616E 
 16803      5F646174 
 16803      61343430 
 16803      00
 16804              	.LC319:
 16805 1e03 2A2E4C75 		.string	"*.Lubsan_data439"
 16805      6273616E 
 16805      5F646174 
 16805      61343339 
 16805      00
 16806              	.LC320:
 16807 1e14 2A2E4C75 		.string	"*.Lubsan_data438"
 16807      6273616E 
 16807      5F646174 
 16807      61343338 
 16807      00
 16808              	.LC321:
 16809 1e25 2A2E4C75 		.string	"*.Lubsan_data437"
 16809      6273616E 
 16809      5F646174 
 16809      61343337 
 16809      00
 16810              	.LC322:
 16811 1e36 2A2E4C75 		.string	"*.Lubsan_data436"
 16811      6273616E 
 16811      5F646174 
 16811      61343336 
 16811      00
 16812              	.LC323:
 16813 1e47 2A2E4C75 		.string	"*.Lubsan_data435"
 16813      6273616E 
 16813      5F646174 
 16813      61343335 
 16813      00
 16814              	.LC324:
 16815 1e58 2A2E4C75 		.string	"*.Lubsan_data434"
 16815      6273616E 
 16815      5F646174 
 16815      61343334 
 16815      00
 16816              	.LC325:
 16817 1e69 2A2E4C75 		.string	"*.Lubsan_data433"
 16817      6273616E 
 16817      5F646174 
 16817      61343333 
 16817      00
 16818              	.LC326:
 16819 1e7a 2A2E4C75 		.string	"*.Lubsan_data432"
 16819      6273616E 
 16819      5F646174 
 16819      61343332 
 16819      00
 16820              	.LC327:
 16821 1e8b 2A2E4C75 		.string	"*.Lubsan_data431"
 16821      6273616E 
 16821      5F646174 
 16821      61343331 
 16821      00
 16822              	.LC328:
 16823 1e9c 2A2E4C75 		.string	"*.Lubsan_data430"
 16823      6273616E 
 16823      5F646174 
 16823      61343330 
 16823      00
 16824              	.LC329:
 16825 1ead 2A2E4C75 		.string	"*.Lubsan_data429"
 16825      6273616E 
 16825      5F646174 
 16825      61343239 
 16825      00
 16826              	.LC330:
 16827 1ebe 2A2E4C75 		.string	"*.Lubsan_type24"
 16827      6273616E 
 16827      5F747970 
 16827      65323400 
 16828              	.LC331:
 16829 1ece 2A2E4C75 		.string	"*.Lubsan_data428"
 16829      6273616E 
 16829      5F646174 
 16829      61343238 
 16829      00
 16830              	.LC332:
 16831 1edf 2A2E4C75 		.string	"*.Lubsan_data427"
 16831      6273616E 
 16831      5F646174 
 16831      61343237 
 16831      00
 16832              	.LC333:
 16833 1ef0 2A2E4C75 		.string	"*.Lubsan_data426"
 16833      6273616E 
 16833      5F646174 
 16833      61343236 
 16833      00
 16834              	.LC334:
 16835 1f01 2A2E4C75 		.string	"*.Lubsan_type23"
 16835      6273616E 
 16835      5F747970 
 16835      65323300 
 16836              	.LC335:
 16837 1f11 2A2E4C75 		.string	"*.Lubsan_data425"
 16837      6273616E 
 16837      5F646174 
 16837      61343235 
 16837      00
 16838              	.LC336:
 16839 1f22 2A2E4C75 		.string	"*.Lubsan_data424"
 16839      6273616E 
 16839      5F646174 
 16839      61343234 
 16839      00
 16840              	.LC337:
 16841 1f33 2A2E4C75 		.string	"*.Lubsan_type22"
 16841      6273616E 
 16841      5F747970 
 16841      65323200 
 16842              	.LC338:
 16843 1f43 2A2E4C75 		.string	"*.Lubsan_data423"
 16843      6273616E 
 16843      5F646174 
 16843      61343233 
 16843      00
 16844              	.LC339:
 16845 1f54 2A2E4C75 		.string	"*.Lubsan_data422"
 16845      6273616E 
 16845      5F646174 
 16845      61343232 
 16845      00
 16846              	.LC340:
 16847 1f65 2A2E4C75 		.string	"*.Lubsan_data421"
 16847      6273616E 
 16847      5F646174 
 16847      61343231 
 16847      00
 16848              	.LC341:
 16849 1f76 2A2E4C75 		.string	"*.Lubsan_data420"
 16849      6273616E 
 16849      5F646174 
 16849      61343230 
 16849      00
 16850              	.LC342:
 16851 1f87 2A2E4C75 		.string	"*.Lubsan_data419"
 16851      6273616E 
 16851      5F646174 
 16851      61343139 
 16851      00
 16852              	.LC343:
 16853 1f98 2A2E4C75 		.string	"*.Lubsan_data418"
 16853      6273616E 
 16853      5F646174 
 16853      61343138 
 16853      00
 16854              	.LC344:
 16855 1fa9 2A2E4C75 		.string	"*.Lubsan_data417"
 16855      6273616E 
 16855      5F646174 
 16855      61343137 
 16855      00
 16856              	.LC345:
 16857 1fba 2A2E4C75 		.string	"*.Lubsan_type21"
 16857      6273616E 
 16857      5F747970 
 16857      65323100 
 16858              	.LC346:
 16859 1fca 2A2E4C75 		.string	"*.Lubsan_data416"
 16859      6273616E 
 16859      5F646174 
 16859      61343136 
 16859      00
 16860              	.LC347:
 16861 1fdb 2A2E4C75 		.string	"*.Lubsan_data415"
 16861      6273616E 
 16861      5F646174 
 16861      61343135 
 16861      00
 16862              	.LC348:
 16863 1fec 2A2E4C75 		.string	"*.Lubsan_type20"
 16863      6273616E 
 16863      5F747970 
 16863      65323000 
 16864              	.LC349:
 16865 1ffc 2A2E4C75 		.string	"*.Lubsan_data414"
 16865      6273616E 
 16865      5F646174 
 16865      61343134 
 16865      00
 16866              	.LC350:
 16867 200d 2A2E4C75 		.string	"*.Lubsan_type19"
 16867      6273616E 
 16867      5F747970 
 16867      65313900 
 16868              	.LC351:
 16869 201d 2A2E4C75 		.string	"*.Lubsan_data413"
 16869      6273616E 
 16869      5F646174 
 16869      61343133 
 16869      00
 16870              	.LC352:
 16871 202e 2A2E4C75 		.string	"*.Lubsan_type18"
 16871      6273616E 
 16871      5F747970 
 16871      65313800 
 16872              	.LC353:
 16873 203e 2A2E4C75 		.string	"*.Lubsan_data412"
 16873      6273616E 
 16873      5F646174 
 16873      61343132 
 16873      00
 16874              	.LC354:
 16875 204f 2A2E4C75 		.string	"*.Lubsan_data411"
 16875      6273616E 
 16875      5F646174 
 16875      61343131 
 16875      00
 16876              	.LC355:
 16877 2060 2A2E4C75 		.string	"*.Lubsan_data410"
 16877      6273616E 
 16877      5F646174 
 16877      61343130 
 16877      00
 16878              	.LC356:
 16879 2071 2A2E4C75 		.string	"*.Lubsan_data409"
 16879      6273616E 
 16879      5F646174 
 16879      61343039 
 16879      00
 16880              	.LC357:
 16881 2082 2A2E4C75 		.string	"*.Lubsan_type17"
 16881      6273616E 
 16881      5F747970 
 16881      65313700 
 16882              	.LC358:
 16883 2092 2A2E4C75 		.string	"*.Lubsan_data408"
 16883      6273616E 
 16883      5F646174 
 16883      61343038 
 16883      00
 16884              	.LC359:
 16885 20a3 2A2E4C75 		.string	"*.Lubsan_data407"
 16885      6273616E 
 16885      5F646174 
 16885      61343037 
 16885      00
 16886              	.LC360:
 16887 20b4 2A2E4C75 		.string	"*.Lubsan_data406"
 16887      6273616E 
 16887      5F646174 
 16887      61343036 
 16887      00
 16888              	.LC361:
 16889 20c5 2A2E4C75 		.string	"*.Lubsan_data405"
 16889      6273616E 
 16889      5F646174 
 16889      61343035 
 16889      00
 16890              	.LC362:
 16891 20d6 2A2E4C75 		.string	"*.Lubsan_data404"
 16891      6273616E 
 16891      5F646174 
 16891      61343034 
 16891      00
 16892              	.LC363:
 16893 20e7 2A2E4C75 		.string	"*.Lubsan_data403"
 16893      6273616E 
 16893      5F646174 
 16893      61343033 
 16893      00
 16894              	.LC364:
 16895 20f8 2A2E4C75 		.string	"*.Lubsan_type16"
 16895      6273616E 
 16895      5F747970 
 16895      65313600 
 16896              	.LC365:
 16897 2108 2A2E4C75 		.string	"*.Lubsan_data402"
 16897      6273616E 
 16897      5F646174 
 16897      61343032 
 16897      00
 16898              	.LC366:
 16899 2119 2A2E4C75 		.string	"*.Lubsan_data401"
 16899      6273616E 
 16899      5F646174 
 16899      61343031 
 16899      00
 16900              	.LC367:
 16901 212a 2A2E4C75 		.string	"*.Lubsan_data400"
 16901      6273616E 
 16901      5F646174 
 16901      61343030 
 16901      00
 16902              	.LC368:
 16903 213b 2A2E4C75 		.string	"*.Lubsan_type15"
 16903      6273616E 
 16903      5F747970 
 16903      65313500 
 16904              	.LC369:
 16905 214b 2A2E4C75 		.string	"*.Lubsan_data399"
 16905      6273616E 
 16905      5F646174 
 16905      61333939 
 16905      00
 16906              	.LC370:
 16907 215c 2A2E4C75 		.string	"*.Lubsan_data398"
 16907      6273616E 
 16907      5F646174 
 16907      61333938 
 16907      00
 16908              	.LC371:
 16909 216d 2A2E4C75 		.string	"*.Lubsan_data397"
 16909      6273616E 
 16909      5F646174 
 16909      61333937 
 16909      00
 16910              	.LC372:
 16911 217e 2A2E4C75 		.string	"*.Lubsan_type14"
 16911      6273616E 
 16911      5F747970 
 16911      65313400 
 16912              	.LC373:
 16913 218e 2A2E4C75 		.string	"*.Lubsan_data396"
 16913      6273616E 
 16913      5F646174 
 16913      61333936 
 16913      00
 16914              	.LC374:
 16915 219f 2A2E4C75 		.string	"*.Lubsan_data395"
 16915      6273616E 
 16915      5F646174 
 16915      61333935 
 16915      00
 16916              	.LC375:
 16917 21b0 2A2E4C75 		.string	"*.Lubsan_type13"
 16917      6273616E 
 16917      5F747970 
 16917      65313300 
 16918              	.LC376:
 16919 21c0 2A2E4C75 		.string	"*.Lubsan_data394"
 16919      6273616E 
 16919      5F646174 
 16919      61333934 
 16919      00
 16920              	.LC377:
 16921 21d1 2A2E4C75 		.string	"*.Lubsan_type12"
 16921      6273616E 
 16921      5F747970 
 16921      65313200 
 16922              	.LC378:
 16923 21e1 2A2E4C75 		.string	"*.Lubsan_data393"
 16923      6273616E 
 16923      5F646174 
 16923      61333933 
 16923      00
 16924              	.LC379:
 16925 21f2 2A2E4C75 		.string	"*.Lubsan_type11"
 16925      6273616E 
 16925      5F747970 
 16925      65313100 
 16926              	.LC380:
 16927 2202 2A2E4C75 		.string	"*.Lubsan_data392"
 16927      6273616E 
 16927      5F646174 
 16927      61333932 
 16927      00
 16928              	.LC381:
 16929 2213 2A2E4C75 		.string	"*.Lubsan_data391"
 16929      6273616E 
 16929      5F646174 
 16929      61333931 
 16929      00
 16930              	.LC382:
 16931 2224 2A2E4C75 		.string	"*.Lubsan_type10"
 16931      6273616E 
 16931      5F747970 
 16931      65313000 
 16932              	.LC383:
 16933 2234 2A2E4C75 		.string	"*.Lubsan_data390"
 16933      6273616E 
 16933      5F646174 
 16933      61333930 
 16933      00
 16934              	.LC384:
 16935 2245 2A2E4C75 		.string	"*.Lubsan_type9"
 16935      6273616E 
 16935      5F747970 
 16935      653900
 16936              	.LC385:
 16937 2254 2A2E4C75 		.string	"*.Lubsan_data389"
 16937      6273616E 
 16937      5F646174 
 16937      61333839 
 16937      00
 16938              	.LC386:
 16939 2265 2A2E4C75 		.string	"*.Lubsan_type8"
 16939      6273616E 
 16939      5F747970 
 16939      653800
 16940              	.LC387:
 16941 2274 2A2E4C75 		.string	"*.Lubsan_data388"
 16941      6273616E 
 16941      5F646174 
 16941      61333838 
 16941      00
 16942              	.LC388:
 16943 2285 2A2E4C75 		.string	"*.Lubsan_type7"
 16943      6273616E 
 16943      5F747970 
 16943      653700
 16944              	.LC389:
 16945 2294 2A2E4C75 		.string	"*.Lubsan_data387"
 16945      6273616E 
 16945      5F646174 
 16945      61333837 
 16945      00
 16946              	.LC390:
 16947 22a5 2A2E4C75 		.string	"*.Lubsan_type6"
 16947      6273616E 
 16947      5F747970 
 16947      653600
 16948              	.LC391:
 16949 22b4 2A2E4C75 		.string	"*.Lubsan_data386"
 16949      6273616E 
 16949      5F646174 
 16949      61333836 
 16949      00
 16950              	.LC392:
 16951 22c5 2A2E4C75 		.string	"*.Lubsan_data385"
 16951      6273616E 
 16951      5F646174 
 16951      61333835 
 16951      00
 16952              	.LC393:
 16953 22d6 2A2E4C75 		.string	"*.Lubsan_data384"
 16953      6273616E 
 16953      5F646174 
 16953      61333834 
 16953      00
 16954              	.LC394:
 16955 22e7 2A2E4C75 		.string	"*.Lubsan_data383"
 16955      6273616E 
 16955      5F646174 
 16955      61333833 
 16955      00
 16956              	.LC395:
 16957 22f8 2A2E4C75 		.string	"*.Lubsan_data382"
 16957      6273616E 
 16957      5F646174 
 16957      61333832 
 16957      00
 16958              	.LC396:
 16959 2309 2A2E4C75 		.string	"*.Lubsan_data381"
 16959      6273616E 
 16959      5F646174 
 16959      61333831 
 16959      00
 16960              	.LC397:
 16961 231a 2A2E4C75 		.string	"*.Lubsan_data380"
 16961      6273616E 
 16961      5F646174 
 16961      61333830 
 16961      00
 16962              	.LC398:
 16963 232b 2A2E4C75 		.string	"*.Lubsan_data379"
 16963      6273616E 
 16963      5F646174 
 16963      61333739 
 16963      00
 16964              	.LC399:
 16965 233c 2A2E4C75 		.string	"*.Lubsan_data378"
 16965      6273616E 
 16965      5F646174 
 16965      61333738 
 16965      00
 16966              	.LC400:
 16967 234d 2A2E4C75 		.string	"*.Lubsan_data377"
 16967      6273616E 
 16967      5F646174 
 16967      61333737 
 16967      00
 16968              	.LC401:
 16969 235e 2A2E4C75 		.string	"*.Lubsan_type5"
 16969      6273616E 
 16969      5F747970 
 16969      653500
 16970              	.LC402:
 16971 236d 2A2E4C75 		.string	"*.Lubsan_data376"
 16971      6273616E 
 16971      5F646174 
 16971      61333736 
 16971      00
 16972              	.LC403:
 16973 237e 2A2E4C75 		.string	"*.Lubsan_data375"
 16973      6273616E 
 16973      5F646174 
 16973      61333735 
 16973      00
 16974              	.LC404:
 16975 238f 2A2E4C75 		.string	"*.Lubsan_data374"
 16975      6273616E 
 16975      5F646174 
 16975      61333734 
 16975      00
 16976              	.LC405:
 16977 23a0 2A2E4C75 		.string	"*.Lubsan_type4"
 16977      6273616E 
 16977      5F747970 
 16977      653400
 16978              	.LC406:
 16979 23af 2A2E4C75 		.string	"*.Lubsan_data373"
 16979      6273616E 
 16979      5F646174 
 16979      61333733 
 16979      00
 16980              	.LC407:
 16981 23c0 2A2E4C43 		.string	"*.LC5"
 16981      3500
 16982              	.LC408:
 16983 23c6 2A2E4C43 		.string	"*.LC25"
 16983      323500
 16984              	.LC409:
 16985 23cd 2A2E4C43 		.string	"*.LC13"
 16985      313300
 16986              	.LC410:
 16987 23d4 2A2E4C43 		.string	"*.LC3"
 16987      3300
 16988              	.LC411:
 16989 23da 2A2E4C43 		.string	"*.LC7"
 16989      3700
 16990              	.LC412:
 16991 23e0 2A2E4C43 		.string	"*.LC9"
 16991      3900
 16992              	.LC413:
 16993 23e6 2A2E4C43 		.string	"*.LC21"
 16993      323100
 16994              	.LC414:
 16995 23ed 2A2E4C43 		.string	"*.LC16"
 16995      313600
 16996              	.LC415:
 16997 23f4 2A2E4C43 		.string	"*.LC19"
 16997      313900
 16998              	.LC416:
 16999 23fb 2A2E4C43 		.string	"*.LC15"
 16999      313500
 17000              	.LC417:
 17001 2402 2A2E4C43 		.string	"*.LC28"
 17001      323800
 17002              	.LC418:
 17003 2409 2A2E4C43 		.string	"*.LC30"
 17003      333000
 17004              	.LC419:
 17005 2410 2A2E4C43 		.string	"*.LC33"
 17005      333300
 17006              	.LC420:
 17007 2417 2A2E4C43 		.string	"*.LC10"
 17007      313000
 17008              	.LC421:
 17009 241e 2A2E4C43 		.string	"*.LC2"
 17009      3200
 17010              	.LC422:
 17011 2424 2A2E4C43 		.string	"*.LC32"
 17011      333200
 17012              	.LC423:
 17013 242b 2A2E4C43 		.string	"*.LC24"
 17013      323400
 17014              	.LC424:
 17015 2432 2A2E4C43 		.string	"*.LC36"
 17015      333600
 17016              	.LC425:
 17017 2439 2A2E4C43 		.string	"*.LC0"
 17017      3000
 17018              	.LC426:
 17019 243f 2A2E4C43 		.string	"*.LC6"
 17019      3600
 17020              	.LC427:
 17021 2445 2A2E4C43 		.string	"*.LC18"
 17021      313800
 17022              		.section	.data.rel.local
 17023              		.align 32
 17026              	.LASAN0:
 17027 4da0 00000000 		.quad	.Lubsan_data690
 17027      00000000 
 17028 4da8 20000000 		.quad	32
 17028      00000000 
 17029 4db0 40000000 		.quad	64
 17029      00000000 
 17030 4db8 00000000 		.quad	.LC39
 17030      00000000 
 17031 4dc0 00000000 		.quad	.LC0
 17031      00000000 
 17032 4dc8 00000000 		.quad	0
 17032      00000000 
 17033 4dd0 00000000 		.quad	0
 17033      00000000 
 17034 4dd8 00000000 		.quad	0
 17034      00000000 
 17035 4de0 00000000 		.quad	.Lubsan_data689
 17035      00000000 
 17036 4de8 20000000 		.quad	32
 17036      00000000 
 17037 4df0 40000000 		.quad	64
 17037      00000000 
 17038 4df8 00000000 		.quad	.LC40
 17038      00000000 
 17039 4e00 00000000 		.quad	.LC0
 17039      00000000 
 17040 4e08 00000000 		.quad	0
 17040      00000000 
 17041 4e10 00000000 		.quad	0
 17041      00000000 
 17042 4e18 00000000 		.quad	0
 17042      00000000 
 17043 4e20 00000000 		.quad	.Lubsan_data688
 17043      00000000 
 17044 4e28 20000000 		.quad	32
 17044      00000000 
 17045 4e30 40000000 		.quad	64
 17045      00000000 
 17046 4e38 00000000 		.quad	.LC41
 17046      00000000 
 17047 4e40 00000000 		.quad	.LC0
 17047      00000000 
 17048 4e48 00000000 		.quad	0
 17048      00000000 
 17049 4e50 00000000 		.quad	0
 17049      00000000 
 17050 4e58 00000000 		.quad	0
 17050      00000000 
 17051 4e60 00000000 		.quad	.Lubsan_data687
 17051      00000000 
 17052 4e68 20000000 		.quad	32
 17052      00000000 
 17053 4e70 40000000 		.quad	64
 17053      00000000 
 17054 4e78 00000000 		.quad	.LC42
 17054      00000000 
 17055 4e80 00000000 		.quad	.LC0
 17055      00000000 
 17056 4e88 00000000 		.quad	0
 17056      00000000 
 17057 4e90 00000000 		.quad	0
 17057      00000000 
 17058 4e98 00000000 		.quad	0
 17058      00000000 
 17059 4ea0 00000000 		.quad	.Lubsan_type53
 17059      00000000 
 17060 4ea8 12000000 		.quad	18
 17060      00000000 
 17061 4eb0 40000000 		.quad	64
 17061      00000000 
 17062 4eb8 00000000 		.quad	.LC43
 17062      00000000 
 17063 4ec0 00000000 		.quad	.LC0
 17063      00000000 
 17064 4ec8 00000000 		.quad	0
 17064      00000000 
 17065 4ed0 00000000 		.quad	0
 17065      00000000 
 17066 4ed8 00000000 		.quad	0
 17066      00000000 
 17067 4ee0 00000000 		.quad	.Lubsan_data686
 17067      00000000 
 17068 4ee8 20000000 		.quad	32
 17068      00000000 
 17069 4ef0 40000000 		.quad	64
 17069      00000000 
 17070 4ef8 00000000 		.quad	.LC44
 17070      00000000 
 17071 4f00 00000000 		.quad	.LC0
 17071      00000000 
 17072 4f08 00000000 		.quad	0
 17072      00000000 
 17073 4f10 00000000 		.quad	0
 17073      00000000 
 17074 4f18 00000000 		.quad	0
 17074      00000000 
 17075 4f20 00000000 		.quad	.Lubsan_data685
 17075      00000000 
 17076 4f28 20000000 		.quad	32
 17076      00000000 
 17077 4f30 40000000 		.quad	64
 17077      00000000 
 17078 4f38 00000000 		.quad	.LC45
 17078      00000000 
 17079 4f40 00000000 		.quad	.LC0
 17079      00000000 
 17080 4f48 00000000 		.quad	0
 17080      00000000 
 17081 4f50 00000000 		.quad	0
 17081      00000000 
 17082 4f58 00000000 		.quad	0
 17082      00000000 
 17083 4f60 00000000 		.quad	.Lubsan_data684
 17083      00000000 
 17084 4f68 20000000 		.quad	32
 17084      00000000 
 17085 4f70 40000000 		.quad	64
 17085      00000000 
 17086 4f78 00000000 		.quad	.LC46
 17086      00000000 
 17087 4f80 00000000 		.quad	.LC0
 17087      00000000 
 17088 4f88 00000000 		.quad	0
 17088      00000000 
 17089 4f90 00000000 		.quad	0
 17089      00000000 
 17090 4f98 00000000 		.quad	0
 17090      00000000 
 17091 4fa0 00000000 		.quad	.Lubsan_data683
 17091      00000000 
 17092 4fa8 20000000 		.quad	32
 17092      00000000 
 17093 4fb0 40000000 		.quad	64
 17093      00000000 
 17094 4fb8 00000000 		.quad	.LC47
 17094      00000000 
 17095 4fc0 00000000 		.quad	.LC0
 17095      00000000 
 17096 4fc8 00000000 		.quad	0
 17096      00000000 
 17097 4fd0 00000000 		.quad	0
 17097      00000000 
 17098 4fd8 00000000 		.quad	0
 17098      00000000 
 17099 4fe0 00000000 		.quad	.Lubsan_data682
 17099      00000000 
 17100 4fe8 20000000 		.quad	32
 17100      00000000 
 17101 4ff0 40000000 		.quad	64
 17101      00000000 
 17102 4ff8 00000000 		.quad	.LC48
 17102      00000000 
 17103 5000 00000000 		.quad	.LC0
 17103      00000000 
 17104 5008 00000000 		.quad	0
 17104      00000000 
 17105 5010 00000000 		.quad	0
 17105      00000000 
 17106 5018 00000000 		.quad	0
 17106      00000000 
 17107 5020 00000000 		.quad	.Lubsan_data681
 17107      00000000 
 17108 5028 20000000 		.quad	32
 17108      00000000 
 17109 5030 40000000 		.quad	64
 17109      00000000 
 17110 5038 00000000 		.quad	.LC49
 17110      00000000 
 17111 5040 00000000 		.quad	.LC0
 17111      00000000 
 17112 5048 00000000 		.quad	0
 17112      00000000 
 17113 5050 00000000 		.quad	0
 17113      00000000 
 17114 5058 00000000 		.quad	0
 17114      00000000 
 17115 5060 00000000 		.quad	.Lubsan_data680
 17115      00000000 
 17116 5068 18000000 		.quad	24
 17116      00000000 
 17117 5070 40000000 		.quad	64
 17117      00000000 
 17118 5078 00000000 		.quad	.LC50
 17118      00000000 
 17119 5080 00000000 		.quad	.LC0
 17119      00000000 
 17120 5088 00000000 		.quad	0
 17120      00000000 
 17121 5090 00000000 		.quad	0
 17121      00000000 
 17122 5098 00000000 		.quad	0
 17122      00000000 
 17123 50a0 00000000 		.quad	.Lubsan_type52
 17123      00000000 
 17124 50a8 0F000000 		.quad	15
 17124      00000000 
 17125 50b0 40000000 		.quad	64
 17125      00000000 
 17126 50b8 00000000 		.quad	.LC51
 17126      00000000 
 17127 50c0 00000000 		.quad	.LC0
 17127      00000000 
 17128 50c8 00000000 		.quad	0
 17128      00000000 
 17129 50d0 00000000 		.quad	0
 17129      00000000 
 17130 50d8 00000000 		.quad	0
 17130      00000000 
 17131 50e0 00000000 		.quad	.Lubsan_data679
 17131      00000000 
 17132 50e8 10000000 		.quad	16
 17132      00000000 
 17133 50f0 40000000 		.quad	64
 17133      00000000 
 17134 50f8 00000000 		.quad	.LC52
 17134      00000000 
 17135 5100 00000000 		.quad	.LC0
 17135      00000000 
 17136 5108 00000000 		.quad	0
 17136      00000000 
 17137 5110 00000000 		.quad	0
 17137      00000000 
 17138 5118 00000000 		.quad	0
 17138      00000000 
 17139 5120 00000000 		.quad	.Lubsan_data678
 17139      00000000 
 17140 5128 10000000 		.quad	16
 17140      00000000 
 17141 5130 40000000 		.quad	64
 17141      00000000 
 17142 5138 00000000 		.quad	.LC53
 17142      00000000 
 17143 5140 00000000 		.quad	.LC0
 17143      00000000 
 17144 5148 00000000 		.quad	0
 17144      00000000 
 17145 5150 00000000 		.quad	0
 17145      00000000 
 17146 5158 00000000 		.quad	0
 17146      00000000 
 17147 5160 00000000 		.quad	.Lubsan_data677
 17147      00000000 
 17148 5168 20000000 		.quad	32
 17148      00000000 
 17149 5170 40000000 		.quad	64
 17149      00000000 
 17150 5178 00000000 		.quad	.LC54
 17150      00000000 
 17151 5180 00000000 		.quad	.LC0
 17151      00000000 
 17152 5188 00000000 		.quad	0
 17152      00000000 
 17153 5190 00000000 		.quad	0
 17153      00000000 
 17154 5198 00000000 		.quad	0
 17154      00000000 
 17155 51a0 00000000 		.quad	.Lubsan_data676
 17155      00000000 
 17156 51a8 20000000 		.quad	32
 17156      00000000 
 17157 51b0 40000000 		.quad	64
 17157      00000000 
 17158 51b8 00000000 		.quad	.LC55
 17158      00000000 
 17159 51c0 00000000 		.quad	.LC0
 17159      00000000 
 17160 51c8 00000000 		.quad	0
 17160      00000000 
 17161 51d0 00000000 		.quad	0
 17161      00000000 
 17162 51d8 00000000 		.quad	0
 17162      00000000 
 17163 51e0 00000000 		.quad	.Lubsan_data675
 17163      00000000 
 17164 51e8 20000000 		.quad	32
 17164      00000000 
 17165 51f0 40000000 		.quad	64
 17165      00000000 
 17166 51f8 00000000 		.quad	.LC56
 17166      00000000 
 17167 5200 00000000 		.quad	.LC0
 17167      00000000 
 17168 5208 00000000 		.quad	0
 17168      00000000 
 17169 5210 00000000 		.quad	0
 17169      00000000 
 17170 5218 00000000 		.quad	0
 17170      00000000 
 17171 5220 00000000 		.quad	.Lubsan_data674
 17171      00000000 
 17172 5228 10000000 		.quad	16
 17172      00000000 
 17173 5230 40000000 		.quad	64
 17173      00000000 
 17174 5238 00000000 		.quad	.LC57
 17174      00000000 
 17175 5240 00000000 		.quad	.LC0
 17175      00000000 
 17176 5248 00000000 		.quad	0
 17176      00000000 
 17177 5250 00000000 		.quad	0
 17177      00000000 
 17178 5258 00000000 		.quad	0
 17178      00000000 
 17179 5260 00000000 		.quad	.Lubsan_data673
 17179      00000000 
 17180 5268 10000000 		.quad	16
 17180      00000000 
 17181 5270 40000000 		.quad	64
 17181      00000000 
 17182 5278 00000000 		.quad	.LC58
 17182      00000000 
 17183 5280 00000000 		.quad	.LC0
 17183      00000000 
 17184 5288 00000000 		.quad	0
 17184      00000000 
 17185 5290 00000000 		.quad	0
 17185      00000000 
 17186 5298 00000000 		.quad	0
 17186      00000000 
 17187 52a0 00000000 		.quad	.Lubsan_data672
 17187      00000000 
 17188 52a8 20000000 		.quad	32
 17188      00000000 
 17189 52b0 40000000 		.quad	64
 17189      00000000 
 17190 52b8 00000000 		.quad	.LC59
 17190      00000000 
 17191 52c0 00000000 		.quad	.LC0
 17191      00000000 
 17192 52c8 00000000 		.quad	0
 17192      00000000 
 17193 52d0 00000000 		.quad	0
 17193      00000000 
 17194 52d8 00000000 		.quad	0
 17194      00000000 
 17195 52e0 00000000 		.quad	.Lubsan_data671
 17195      00000000 
 17196 52e8 20000000 		.quad	32
 17196      00000000 
 17197 52f0 40000000 		.quad	64
 17197      00000000 
 17198 52f8 00000000 		.quad	.LC60
 17198      00000000 
 17199 5300 00000000 		.quad	.LC0
 17199      00000000 
 17200 5308 00000000 		.quad	0
 17200      00000000 
 17201 5310 00000000 		.quad	0
 17201      00000000 
 17202 5318 00000000 		.quad	0
 17202      00000000 
 17203 5320 00000000 		.quad	.Lubsan_data670
 17203      00000000 
 17204 5328 20000000 		.quad	32
 17204      00000000 
 17205 5330 40000000 		.quad	64
 17205      00000000 
 17206 5338 00000000 		.quad	.LC61
 17206      00000000 
 17207 5340 00000000 		.quad	.LC0
 17207      00000000 
 17208 5348 00000000 		.quad	0
 17208      00000000 
 17209 5350 00000000 		.quad	0
 17209      00000000 
 17210 5358 00000000 		.quad	0
 17210      00000000 
 17211 5360 00000000 		.quad	.Lubsan_data669
 17211      00000000 
 17212 5368 20000000 		.quad	32
 17212      00000000 
 17213 5370 40000000 		.quad	64
 17213      00000000 
 17214 5378 00000000 		.quad	.LC62
 17214      00000000 
 17215 5380 00000000 		.quad	.LC0
 17215      00000000 
 17216 5388 00000000 		.quad	0
 17216      00000000 
 17217 5390 00000000 		.quad	0
 17217      00000000 
 17218 5398 00000000 		.quad	0
 17218      00000000 
 17219 53a0 00000000 		.quad	.Lubsan_data668
 17219      00000000 
 17220 53a8 20000000 		.quad	32
 17220      00000000 
 17221 53b0 40000000 		.quad	64
 17221      00000000 
 17222 53b8 00000000 		.quad	.LC63
 17222      00000000 
 17223 53c0 00000000 		.quad	.LC0
 17223      00000000 
 17224 53c8 00000000 		.quad	0
 17224      00000000 
 17225 53d0 00000000 		.quad	0
 17225      00000000 
 17226 53d8 00000000 		.quad	0
 17226      00000000 
 17227 53e0 00000000 		.quad	.Lubsan_data667
 17227      00000000 
 17228 53e8 20000000 		.quad	32
 17228      00000000 
 17229 53f0 40000000 		.quad	64
 17229      00000000 
 17230 53f8 00000000 		.quad	.LC64
 17230      00000000 
 17231 5400 00000000 		.quad	.LC0
 17231      00000000 
 17232 5408 00000000 		.quad	0
 17232      00000000 
 17233 5410 00000000 		.quad	0
 17233      00000000 
 17234 5418 00000000 		.quad	0
 17234      00000000 
 17235 5420 00000000 		.quad	.Lubsan_data666
 17235      00000000 
 17236 5428 20000000 		.quad	32
 17236      00000000 
 17237 5430 40000000 		.quad	64
 17237      00000000 
 17238 5438 00000000 		.quad	.LC65
 17238      00000000 
 17239 5440 00000000 		.quad	.LC0
 17239      00000000 
 17240 5448 00000000 		.quad	0
 17240      00000000 
 17241 5450 00000000 		.quad	0
 17241      00000000 
 17242 5458 00000000 		.quad	0
 17242      00000000 
 17243 5460 00000000 		.quad	.Lubsan_data665
 17243      00000000 
 17244 5468 20000000 		.quad	32
 17244      00000000 
 17245 5470 40000000 		.quad	64
 17245      00000000 
 17246 5478 00000000 		.quad	.LC66
 17246      00000000 
 17247 5480 00000000 		.quad	.LC0
 17247      00000000 
 17248 5488 00000000 		.quad	0
 17248      00000000 
 17249 5490 00000000 		.quad	0
 17249      00000000 
 17250 5498 00000000 		.quad	0
 17250      00000000 
 17251 54a0 00000000 		.quad	.Lubsan_data664
 17251      00000000 
 17252 54a8 20000000 		.quad	32
 17252      00000000 
 17253 54b0 40000000 		.quad	64
 17253      00000000 
 17254 54b8 00000000 		.quad	.LC67
 17254      00000000 
 17255 54c0 00000000 		.quad	.LC0
 17255      00000000 
 17256 54c8 00000000 		.quad	0
 17256      00000000 
 17257 54d0 00000000 		.quad	0
 17257      00000000 
 17258 54d8 00000000 		.quad	0
 17258      00000000 
 17259 54e0 00000000 		.quad	.Lubsan_data663
 17259      00000000 
 17260 54e8 10000000 		.quad	16
 17260      00000000 
 17261 54f0 40000000 		.quad	64
 17261      00000000 
 17262 54f8 00000000 		.quad	.LC68
 17262      00000000 
 17263 5500 00000000 		.quad	.LC0
 17263      00000000 
 17264 5508 00000000 		.quad	0
 17264      00000000 
 17265 5510 00000000 		.quad	0
 17265      00000000 
 17266 5518 00000000 		.quad	0
 17266      00000000 
 17267 5520 00000000 		.quad	.Lubsan_data662
 17267      00000000 
 17268 5528 10000000 		.quad	16
 17268      00000000 
 17269 5530 40000000 		.quad	64
 17269      00000000 
 17270 5538 00000000 		.quad	.LC69
 17270      00000000 
 17271 5540 00000000 		.quad	.LC0
 17271      00000000 
 17272 5548 00000000 		.quad	0
 17272      00000000 
 17273 5550 00000000 		.quad	0
 17273      00000000 
 17274 5558 00000000 		.quad	0
 17274      00000000 
 17275 5560 00000000 		.quad	.Lubsan_data661
 17275      00000000 
 17276 5568 20000000 		.quad	32
 17276      00000000 
 17277 5570 40000000 		.quad	64
 17277      00000000 
 17278 5578 00000000 		.quad	.LC70
 17278      00000000 
 17279 5580 00000000 		.quad	.LC0
 17279      00000000 
 17280 5588 00000000 		.quad	0
 17280      00000000 
 17281 5590 00000000 		.quad	0
 17281      00000000 
 17282 5598 00000000 		.quad	0
 17282      00000000 
 17283 55a0 00000000 		.quad	.Lubsan_data660
 17283      00000000 
 17284 55a8 20000000 		.quad	32
 17284      00000000 
 17285 55b0 40000000 		.quad	64
 17285      00000000 
 17286 55b8 00000000 		.quad	.LC71
 17286      00000000 
 17287 55c0 00000000 		.quad	.LC0
 17287      00000000 
 17288 55c8 00000000 		.quad	0
 17288      00000000 
 17289 55d0 00000000 		.quad	0
 17289      00000000 
 17290 55d8 00000000 		.quad	0
 17290      00000000 
 17291 55e0 00000000 		.quad	.Lubsan_data659
 17291      00000000 
 17292 55e8 20000000 		.quad	32
 17292      00000000 
 17293 55f0 40000000 		.quad	64
 17293      00000000 
 17294 55f8 00000000 		.quad	.LC72
 17294      00000000 
 17295 5600 00000000 		.quad	.LC0
 17295      00000000 
 17296 5608 00000000 		.quad	0
 17296      00000000 
 17297 5610 00000000 		.quad	0
 17297      00000000 
 17298 5618 00000000 		.quad	0
 17298      00000000 
 17299 5620 00000000 		.quad	.Lubsan_data658
 17299      00000000 
 17300 5628 20000000 		.quad	32
 17300      00000000 
 17301 5630 40000000 		.quad	64
 17301      00000000 
 17302 5638 00000000 		.quad	.LC73
 17302      00000000 
 17303 5640 00000000 		.quad	.LC0
 17303      00000000 
 17304 5648 00000000 		.quad	0
 17304      00000000 
 17305 5650 00000000 		.quad	0
 17305      00000000 
 17306 5658 00000000 		.quad	0
 17306      00000000 
 17307 5660 00000000 		.quad	.Lubsan_data657
 17307      00000000 
 17308 5668 20000000 		.quad	32
 17308      00000000 
 17309 5670 40000000 		.quad	64
 17309      00000000 
 17310 5678 00000000 		.quad	.LC74
 17310      00000000 
 17311 5680 00000000 		.quad	.LC0
 17311      00000000 
 17312 5688 00000000 		.quad	0
 17312      00000000 
 17313 5690 00000000 		.quad	0
 17313      00000000 
 17314 5698 00000000 		.quad	0
 17314      00000000 
 17315 56a0 00000000 		.quad	.Lubsan_data656
 17315      00000000 
 17316 56a8 20000000 		.quad	32
 17316      00000000 
 17317 56b0 40000000 		.quad	64
 17317      00000000 
 17318 56b8 00000000 		.quad	.LC75
 17318      00000000 
 17319 56c0 00000000 		.quad	.LC0
 17319      00000000 
 17320 56c8 00000000 		.quad	0
 17320      00000000 
 17321 56d0 00000000 		.quad	0
 17321      00000000 
 17322 56d8 00000000 		.quad	0
 17322      00000000 
 17323 56e0 00000000 		.quad	.Lubsan_data655
 17323      00000000 
 17324 56e8 20000000 		.quad	32
 17324      00000000 
 17325 56f0 40000000 		.quad	64
 17325      00000000 
 17326 56f8 00000000 		.quad	.LC76
 17326      00000000 
 17327 5700 00000000 		.quad	.LC0
 17327      00000000 
 17328 5708 00000000 		.quad	0
 17328      00000000 
 17329 5710 00000000 		.quad	0
 17329      00000000 
 17330 5718 00000000 		.quad	0
 17330      00000000 
 17331 5720 00000000 		.quad	.Lubsan_data654
 17331      00000000 
 17332 5728 20000000 		.quad	32
 17332      00000000 
 17333 5730 40000000 		.quad	64
 17333      00000000 
 17334 5738 00000000 		.quad	.LC77
 17334      00000000 
 17335 5740 00000000 		.quad	.LC0
 17335      00000000 
 17336 5748 00000000 		.quad	0
 17336      00000000 
 17337 5750 00000000 		.quad	0
 17337      00000000 
 17338 5758 00000000 		.quad	0
 17338      00000000 
 17339 5760 00000000 		.quad	.Lubsan_data653
 17339      00000000 
 17340 5768 20000000 		.quad	32
 17340      00000000 
 17341 5770 40000000 		.quad	64
 17341      00000000 
 17342 5778 00000000 		.quad	.LC78
 17342      00000000 
 17343 5780 00000000 		.quad	.LC0
 17343      00000000 
 17344 5788 00000000 		.quad	0
 17344      00000000 
 17345 5790 00000000 		.quad	0
 17345      00000000 
 17346 5798 00000000 		.quad	0
 17346      00000000 
 17347 57a0 00000000 		.quad	.Lubsan_data652
 17347      00000000 
 17348 57a8 20000000 		.quad	32
 17348      00000000 
 17349 57b0 40000000 		.quad	64
 17349      00000000 
 17350 57b8 00000000 		.quad	.LC79
 17350      00000000 
 17351 57c0 00000000 		.quad	.LC0
 17351      00000000 
 17352 57c8 00000000 		.quad	0
 17352      00000000 
 17353 57d0 00000000 		.quad	0
 17353      00000000 
 17354 57d8 00000000 		.quad	0
 17354      00000000 
 17355 57e0 00000000 		.quad	.Lubsan_data651
 17355      00000000 
 17356 57e8 20000000 		.quad	32
 17356      00000000 
 17357 57f0 40000000 		.quad	64
 17357      00000000 
 17358 57f8 00000000 		.quad	.LC80
 17358      00000000 
 17359 5800 00000000 		.quad	.LC0
 17359      00000000 
 17360 5808 00000000 		.quad	0
 17360      00000000 
 17361 5810 00000000 		.quad	0
 17361      00000000 
 17362 5818 00000000 		.quad	0
 17362      00000000 
 17363 5820 00000000 		.quad	.Lubsan_data650
 17363      00000000 
 17364 5828 10000000 		.quad	16
 17364      00000000 
 17365 5830 40000000 		.quad	64
 17365      00000000 
 17366 5838 00000000 		.quad	.LC81
 17366      00000000 
 17367 5840 00000000 		.quad	.LC0
 17367      00000000 
 17368 5848 00000000 		.quad	0
 17368      00000000 
 17369 5850 00000000 		.quad	0
 17369      00000000 
 17370 5858 00000000 		.quad	0
 17370      00000000 
 17371 5860 00000000 		.quad	.Lubsan_data649
 17371      00000000 
 17372 5868 20000000 		.quad	32
 17372      00000000 
 17373 5870 40000000 		.quad	64
 17373      00000000 
 17374 5878 00000000 		.quad	.LC82
 17374      00000000 
 17375 5880 00000000 		.quad	.LC0
 17375      00000000 
 17376 5888 00000000 		.quad	0
 17376      00000000 
 17377 5890 00000000 		.quad	0
 17377      00000000 
 17378 5898 00000000 		.quad	0
 17378      00000000 
 17379 58a0 00000000 		.quad	.Lubsan_data648
 17379      00000000 
 17380 58a8 20000000 		.quad	32
 17380      00000000 
 17381 58b0 40000000 		.quad	64
 17381      00000000 
 17382 58b8 00000000 		.quad	.LC83
 17382      00000000 
 17383 58c0 00000000 		.quad	.LC0
 17383      00000000 
 17384 58c8 00000000 		.quad	0
 17384      00000000 
 17385 58d0 00000000 		.quad	0
 17385      00000000 
 17386 58d8 00000000 		.quad	0
 17386      00000000 
 17387 58e0 00000000 		.quad	.Lubsan_type51
 17387      00000000 
 17388 58e8 22000000 		.quad	34
 17388      00000000 
 17389 58f0 60000000 		.quad	96
 17389      00000000 
 17390 58f8 00000000 		.quad	.LC84
 17390      00000000 
 17391 5900 00000000 		.quad	.LC0
 17391      00000000 
 17392 5908 00000000 		.quad	0
 17392      00000000 
 17393 5910 00000000 		.quad	0
 17393      00000000 
 17394 5918 00000000 		.quad	0
 17394      00000000 
 17395 5920 00000000 		.quad	.Lubsan_data647
 17395      00000000 
 17396 5928 20000000 		.quad	32
 17396      00000000 
 17397 5930 40000000 		.quad	64
 17397      00000000 
 17398 5938 00000000 		.quad	.LC85
 17398      00000000 
 17399 5940 00000000 		.quad	.LC0
 17399      00000000 
 17400 5948 00000000 		.quad	0
 17400      00000000 
 17401 5950 00000000 		.quad	0
 17401      00000000 
 17402 5958 00000000 		.quad	0
 17402      00000000 
 17403 5960 00000000 		.quad	.Lubsan_data646
 17403      00000000 
 17404 5968 20000000 		.quad	32
 17404      00000000 
 17405 5970 40000000 		.quad	64
 17405      00000000 
 17406 5978 00000000 		.quad	.LC86
 17406      00000000 
 17407 5980 00000000 		.quad	.LC0
 17407      00000000 
 17408 5988 00000000 		.quad	0
 17408      00000000 
 17409 5990 00000000 		.quad	0
 17409      00000000 
 17410 5998 00000000 		.quad	0
 17410      00000000 
 17411 59a0 00000000 		.quad	.Lubsan_type50
 17411      00000000 
 17412 59a8 20000000 		.quad	32
 17412      00000000 
 17413 59b0 40000000 		.quad	64
 17413      00000000 
 17414 59b8 00000000 		.quad	.LC87
 17414      00000000 
 17415 59c0 00000000 		.quad	.LC0
 17415      00000000 
 17416 59c8 00000000 		.quad	0
 17416      00000000 
 17417 59d0 00000000 		.quad	0
 17417      00000000 
 17418 59d8 00000000 		.quad	0
 17418      00000000 
 17419 59e0 00000000 		.quad	.Lubsan_data645
 17419      00000000 
 17420 59e8 20000000 		.quad	32
 17420      00000000 
 17421 59f0 40000000 		.quad	64
 17421      00000000 
 17422 59f8 00000000 		.quad	.LC88
 17422      00000000 
 17423 5a00 00000000 		.quad	.LC0
 17423      00000000 
 17424 5a08 00000000 		.quad	0
 17424      00000000 
 17425 5a10 00000000 		.quad	0
 17425      00000000 
 17426 5a18 00000000 		.quad	0
 17426      00000000 
 17427 5a20 00000000 		.quad	.Lubsan_data644
 17427      00000000 
 17428 5a28 10000000 		.quad	16
 17428      00000000 
 17429 5a30 40000000 		.quad	64
 17429      00000000 
 17430 5a38 00000000 		.quad	.LC89
 17430      00000000 
 17431 5a40 00000000 		.quad	.LC0
 17431      00000000 
 17432 5a48 00000000 		.quad	0
 17432      00000000 
 17433 5a50 00000000 		.quad	0
 17433      00000000 
 17434 5a58 00000000 		.quad	0
 17434      00000000 
 17435 5a60 00000000 		.quad	.Lubsan_data643
 17435      00000000 
 17436 5a68 20000000 		.quad	32
 17436      00000000 
 17437 5a70 40000000 		.quad	64
 17437      00000000 
 17438 5a78 00000000 		.quad	.LC90
 17438      00000000 
 17439 5a80 00000000 		.quad	.LC0
 17439      00000000 
 17440 5a88 00000000 		.quad	0
 17440      00000000 
 17441 5a90 00000000 		.quad	0
 17441      00000000 
 17442 5a98 00000000 		.quad	0
 17442      00000000 
 17443 5aa0 00000000 		.quad	.Lubsan_data642
 17443      00000000 
 17444 5aa8 20000000 		.quad	32
 17444      00000000 
 17445 5ab0 40000000 		.quad	64
 17445      00000000 
 17446 5ab8 00000000 		.quad	.LC91
 17446      00000000 
 17447 5ac0 00000000 		.quad	.LC0
 17447      00000000 
 17448 5ac8 00000000 		.quad	0
 17448      00000000 
 17449 5ad0 00000000 		.quad	0
 17449      00000000 
 17450 5ad8 00000000 		.quad	0
 17450      00000000 
 17451 5ae0 00000000 		.quad	.Lubsan_data641
 17451      00000000 
 17452 5ae8 20000000 		.quad	32
 17452      00000000 
 17453 5af0 40000000 		.quad	64
 17453      00000000 
 17454 5af8 00000000 		.quad	.LC92
 17454      00000000 
 17455 5b00 00000000 		.quad	.LC0
 17455      00000000 
 17456 5b08 00000000 		.quad	0
 17456      00000000 
 17457 5b10 00000000 		.quad	0
 17457      00000000 
 17458 5b18 00000000 		.quad	0
 17458      00000000 
 17459 5b20 00000000 		.quad	.Lubsan_data640
 17459      00000000 
 17460 5b28 20000000 		.quad	32
 17460      00000000 
 17461 5b30 40000000 		.quad	64
 17461      00000000 
 17462 5b38 00000000 		.quad	.LC93
 17462      00000000 
 17463 5b40 00000000 		.quad	.LC0
 17463      00000000 
 17464 5b48 00000000 		.quad	0
 17464      00000000 
 17465 5b50 00000000 		.quad	0
 17465      00000000 
 17466 5b58 00000000 		.quad	0
 17466      00000000 
 17467 5b60 00000000 		.quad	.Lubsan_type49
 17467      00000000 
 17468 5b68 22000000 		.quad	34
 17468      00000000 
 17469 5b70 60000000 		.quad	96
 17469      00000000 
 17470 5b78 00000000 		.quad	.LC94
 17470      00000000 
 17471 5b80 00000000 		.quad	.LC0
 17471      00000000 
 17472 5b88 00000000 		.quad	0
 17472      00000000 
 17473 5b90 00000000 		.quad	0
 17473      00000000 
 17474 5b98 00000000 		.quad	0
 17474      00000000 
 17475 5ba0 00000000 		.quad	.Lubsan_data639
 17475      00000000 
 17476 5ba8 20000000 		.quad	32
 17476      00000000 
 17477 5bb0 40000000 		.quad	64
 17477      00000000 
 17478 5bb8 00000000 		.quad	.LC95
 17478      00000000 
 17479 5bc0 00000000 		.quad	.LC0
 17479      00000000 
 17480 5bc8 00000000 		.quad	0
 17480      00000000 
 17481 5bd0 00000000 		.quad	0
 17481      00000000 
 17482 5bd8 00000000 		.quad	0
 17482      00000000 
 17483 5be0 00000000 		.quad	.Lubsan_type48
 17483      00000000 
 17484 5be8 21000000 		.quad	33
 17484      00000000 
 17485 5bf0 60000000 		.quad	96
 17485      00000000 
 17486 5bf8 00000000 		.quad	.LC96
 17486      00000000 
 17487 5c00 00000000 		.quad	.LC0
 17487      00000000 
 17488 5c08 00000000 		.quad	0
 17488      00000000 
 17489 5c10 00000000 		.quad	0
 17489      00000000 
 17490 5c18 00000000 		.quad	0
 17490      00000000 
 17491 5c20 00000000 		.quad	.Lubsan_data638
 17491      00000000 
 17492 5c28 20000000 		.quad	32
 17492      00000000 
 17493 5c30 40000000 		.quad	64
 17493      00000000 
 17494 5c38 00000000 		.quad	.LC97
 17494      00000000 
 17495 5c40 00000000 		.quad	.LC0
 17495      00000000 
 17496 5c48 00000000 		.quad	0
 17496      00000000 
 17497 5c50 00000000 		.quad	0
 17497      00000000 
 17498 5c58 00000000 		.quad	0
 17498      00000000 
 17499 5c60 00000000 		.quad	.Lubsan_data637
 17499      00000000 
 17500 5c68 20000000 		.quad	32
 17500      00000000 
 17501 5c70 40000000 		.quad	64
 17501      00000000 
 17502 5c78 00000000 		.quad	.LC98
 17502      00000000 
 17503 5c80 00000000 		.quad	.LC0
 17503      00000000 
 17504 5c88 00000000 		.quad	0
 17504      00000000 
 17505 5c90 00000000 		.quad	0
 17505      00000000 
 17506 5c98 00000000 		.quad	0
 17506      00000000 
 17507 5ca0 00000000 		.quad	.Lubsan_data636
 17507      00000000 
 17508 5ca8 20000000 		.quad	32
 17508      00000000 
 17509 5cb0 40000000 		.quad	64
 17509      00000000 
 17510 5cb8 00000000 		.quad	.LC99
 17510      00000000 
 17511 5cc0 00000000 		.quad	.LC0
 17511      00000000 
 17512 5cc8 00000000 		.quad	0
 17512      00000000 
 17513 5cd0 00000000 		.quad	0
 17513      00000000 
 17514 5cd8 00000000 		.quad	0
 17514      00000000 
 17515 5ce0 00000000 		.quad	.Lubsan_data635
 17515      00000000 
 17516 5ce8 20000000 		.quad	32
 17516      00000000 
 17517 5cf0 40000000 		.quad	64
 17517      00000000 
 17518 5cf8 00000000 		.quad	.LC100
 17518      00000000 
 17519 5d00 00000000 		.quad	.LC0
 17519      00000000 
 17520 5d08 00000000 		.quad	0
 17520      00000000 
 17521 5d10 00000000 		.quad	0
 17521      00000000 
 17522 5d18 00000000 		.quad	0
 17522      00000000 
 17523 5d20 00000000 		.quad	.Lubsan_data634
 17523      00000000 
 17524 5d28 20000000 		.quad	32
 17524      00000000 
 17525 5d30 40000000 		.quad	64
 17525      00000000 
 17526 5d38 00000000 		.quad	.LC101
 17526      00000000 
 17527 5d40 00000000 		.quad	.LC0
 17527      00000000 
 17528 5d48 00000000 		.quad	0
 17528      00000000 
 17529 5d50 00000000 		.quad	0
 17529      00000000 
 17530 5d58 00000000 		.quad	0
 17530      00000000 
 17531 5d60 00000000 		.quad	.Lubsan_data633
 17531      00000000 
 17532 5d68 20000000 		.quad	32
 17532      00000000 
 17533 5d70 40000000 		.quad	64
 17533      00000000 
 17534 5d78 00000000 		.quad	.LC102
 17534      00000000 
 17535 5d80 00000000 		.quad	.LC0
 17535      00000000 
 17536 5d88 00000000 		.quad	0
 17536      00000000 
 17537 5d90 00000000 		.quad	0
 17537      00000000 
 17538 5d98 00000000 		.quad	0
 17538      00000000 
 17539 5da0 00000000 		.quad	.Lubsan_data632
 17539      00000000 
 17540 5da8 20000000 		.quad	32
 17540      00000000 
 17541 5db0 40000000 		.quad	64
 17541      00000000 
 17542 5db8 00000000 		.quad	.LC103
 17542      00000000 
 17543 5dc0 00000000 		.quad	.LC0
 17543      00000000 
 17544 5dc8 00000000 		.quad	0
 17544      00000000 
 17545 5dd0 00000000 		.quad	0
 17545      00000000 
 17546 5dd8 00000000 		.quad	0
 17546      00000000 
 17547 5de0 00000000 		.quad	.Lubsan_data631
 17547      00000000 
 17548 5de8 20000000 		.quad	32
 17548      00000000 
 17549 5df0 40000000 		.quad	64
 17549      00000000 
 17550 5df8 00000000 		.quad	.LC104
 17550      00000000 
 17551 5e00 00000000 		.quad	.LC0
 17551      00000000 
 17552 5e08 00000000 		.quad	0
 17552      00000000 
 17553 5e10 00000000 		.quad	0
 17553      00000000 
 17554 5e18 00000000 		.quad	0
 17554      00000000 
 17555 5e20 00000000 		.quad	.Lubsan_data630
 17555      00000000 
 17556 5e28 20000000 		.quad	32
 17556      00000000 
 17557 5e30 40000000 		.quad	64
 17557      00000000 
 17558 5e38 00000000 		.quad	.LC105
 17558      00000000 
 17559 5e40 00000000 		.quad	.LC0
 17559      00000000 
 17560 5e48 00000000 		.quad	0
 17560      00000000 
 17561 5e50 00000000 		.quad	0
 17561      00000000 
 17562 5e58 00000000 		.quad	0
 17562      00000000 
 17563 5e60 00000000 		.quad	.Lubsan_data629
 17563      00000000 
 17564 5e68 20000000 		.quad	32
 17564      00000000 
 17565 5e70 40000000 		.quad	64
 17565      00000000 
 17566 5e78 00000000 		.quad	.LC106
 17566      00000000 
 17567 5e80 00000000 		.quad	.LC0
 17567      00000000 
 17568 5e88 00000000 		.quad	0
 17568      00000000 
 17569 5e90 00000000 		.quad	0
 17569      00000000 
 17570 5e98 00000000 		.quad	0
 17570      00000000 
 17571 5ea0 00000000 		.quad	.Lubsan_data628
 17571      00000000 
 17572 5ea8 20000000 		.quad	32
 17572      00000000 
 17573 5eb0 40000000 		.quad	64
 17573      00000000 
 17574 5eb8 00000000 		.quad	.LC107
 17574      00000000 
 17575 5ec0 00000000 		.quad	.LC0
 17575      00000000 
 17576 5ec8 00000000 		.quad	0
 17576      00000000 
 17577 5ed0 00000000 		.quad	0
 17577      00000000 
 17578 5ed8 00000000 		.quad	0
 17578      00000000 
 17579 5ee0 00000000 		.quad	.Lubsan_data627
 17579      00000000 
 17580 5ee8 20000000 		.quad	32
 17580      00000000 
 17581 5ef0 40000000 		.quad	64
 17581      00000000 
 17582 5ef8 00000000 		.quad	.LC108
 17582      00000000 
 17583 5f00 00000000 		.quad	.LC0
 17583      00000000 
 17584 5f08 00000000 		.quad	0
 17584      00000000 
 17585 5f10 00000000 		.quad	0
 17585      00000000 
 17586 5f18 00000000 		.quad	0
 17586      00000000 
 17587 5f20 00000000 		.quad	.Lubsan_data626
 17587      00000000 
 17588 5f28 20000000 		.quad	32
 17588      00000000 
 17589 5f30 40000000 		.quad	64
 17589      00000000 
 17590 5f38 00000000 		.quad	.LC109
 17590      00000000 
 17591 5f40 00000000 		.quad	.LC0
 17591      00000000 
 17592 5f48 00000000 		.quad	0
 17592      00000000 
 17593 5f50 00000000 		.quad	0
 17593      00000000 
 17594 5f58 00000000 		.quad	0
 17594      00000000 
 17595 5f60 00000000 		.quad	.Lubsan_data625
 17595      00000000 
 17596 5f68 20000000 		.quad	32
 17596      00000000 
 17597 5f70 40000000 		.quad	64
 17597      00000000 
 17598 5f78 00000000 		.quad	.LC110
 17598      00000000 
 17599 5f80 00000000 		.quad	.LC0
 17599      00000000 
 17600 5f88 00000000 		.quad	0
 17600      00000000 
 17601 5f90 00000000 		.quad	0
 17601      00000000 
 17602 5f98 00000000 		.quad	0
 17602      00000000 
 17603 5fa0 00000000 		.quad	.Lubsan_data624
 17603      00000000 
 17604 5fa8 20000000 		.quad	32
 17604      00000000 
 17605 5fb0 40000000 		.quad	64
 17605      00000000 
 17606 5fb8 00000000 		.quad	.LC111
 17606      00000000 
 17607 5fc0 00000000 		.quad	.LC0
 17607      00000000 
 17608 5fc8 00000000 		.quad	0
 17608      00000000 
 17609 5fd0 00000000 		.quad	0
 17609      00000000 
 17610 5fd8 00000000 		.quad	0
 17610      00000000 
 17611 5fe0 00000000 		.quad	.Lubsan_data623
 17611      00000000 
 17612 5fe8 20000000 		.quad	32
 17612      00000000 
 17613 5ff0 40000000 		.quad	64
 17613      00000000 
 17614 5ff8 00000000 		.quad	.LC112
 17614      00000000 
 17615 6000 00000000 		.quad	.LC0
 17615      00000000 
 17616 6008 00000000 		.quad	0
 17616      00000000 
 17617 6010 00000000 		.quad	0
 17617      00000000 
 17618 6018 00000000 		.quad	0
 17618      00000000 
 17619 6020 00000000 		.quad	.Lubsan_data622
 17619      00000000 
 17620 6028 20000000 		.quad	32
 17620      00000000 
 17621 6030 40000000 		.quad	64
 17621      00000000 
 17622 6038 00000000 		.quad	.LC113
 17622      00000000 
 17623 6040 00000000 		.quad	.LC0
 17623      00000000 
 17624 6048 00000000 		.quad	0
 17624      00000000 
 17625 6050 00000000 		.quad	0
 17625      00000000 
 17626 6058 00000000 		.quad	0
 17626      00000000 
 17627 6060 00000000 		.quad	.Lubsan_data621
 17627      00000000 
 17628 6068 20000000 		.quad	32
 17628      00000000 
 17629 6070 40000000 		.quad	64
 17629      00000000 
 17630 6078 00000000 		.quad	.LC114
 17630      00000000 
 17631 6080 00000000 		.quad	.LC0
 17631      00000000 
 17632 6088 00000000 		.quad	0
 17632      00000000 
 17633 6090 00000000 		.quad	0
 17633      00000000 
 17634 6098 00000000 		.quad	0
 17634      00000000 
 17635 60a0 00000000 		.quad	.Lubsan_data620
 17635      00000000 
 17636 60a8 20000000 		.quad	32
 17636      00000000 
 17637 60b0 40000000 		.quad	64
 17637      00000000 
 17638 60b8 00000000 		.quad	.LC115
 17638      00000000 
 17639 60c0 00000000 		.quad	.LC0
 17639      00000000 
 17640 60c8 00000000 		.quad	0
 17640      00000000 
 17641 60d0 00000000 		.quad	0
 17641      00000000 
 17642 60d8 00000000 		.quad	0
 17642      00000000 
 17643 60e0 00000000 		.quad	.Lubsan_data619
 17643      00000000 
 17644 60e8 20000000 		.quad	32
 17644      00000000 
 17645 60f0 40000000 		.quad	64
 17645      00000000 
 17646 60f8 00000000 		.quad	.LC116
 17646      00000000 
 17647 6100 00000000 		.quad	.LC0
 17647      00000000 
 17648 6108 00000000 		.quad	0
 17648      00000000 
 17649 6110 00000000 		.quad	0
 17649      00000000 
 17650 6118 00000000 		.quad	0
 17650      00000000 
 17651 6120 00000000 		.quad	.Lubsan_data618
 17651      00000000 
 17652 6128 20000000 		.quad	32
 17652      00000000 
 17653 6130 40000000 		.quad	64
 17653      00000000 
 17654 6138 00000000 		.quad	.LC117
 17654      00000000 
 17655 6140 00000000 		.quad	.LC0
 17655      00000000 
 17656 6148 00000000 		.quad	0
 17656      00000000 
 17657 6150 00000000 		.quad	0
 17657      00000000 
 17658 6158 00000000 		.quad	0
 17658      00000000 
 17659 6160 00000000 		.quad	.Lubsan_data617
 17659      00000000 
 17660 6168 20000000 		.quad	32
 17660      00000000 
 17661 6170 40000000 		.quad	64
 17661      00000000 
 17662 6178 00000000 		.quad	.LC118
 17662      00000000 
 17663 6180 00000000 		.quad	.LC0
 17663      00000000 
 17664 6188 00000000 		.quad	0
 17664      00000000 
 17665 6190 00000000 		.quad	0
 17665      00000000 
 17666 6198 00000000 		.quad	0
 17666      00000000 
 17667 61a0 00000000 		.quad	.Lubsan_data616
 17667      00000000 
 17668 61a8 20000000 		.quad	32
 17668      00000000 
 17669 61b0 40000000 		.quad	64
 17669      00000000 
 17670 61b8 00000000 		.quad	.LC119
 17670      00000000 
 17671 61c0 00000000 		.quad	.LC0
 17671      00000000 
 17672 61c8 00000000 		.quad	0
 17672      00000000 
 17673 61d0 00000000 		.quad	0
 17673      00000000 
 17674 61d8 00000000 		.quad	0
 17674      00000000 
 17675 61e0 00000000 		.quad	.Lubsan_data615
 17675      00000000 
 17676 61e8 20000000 		.quad	32
 17676      00000000 
 17677 61f0 40000000 		.quad	64
 17677      00000000 
 17678 61f8 00000000 		.quad	.LC120
 17678      00000000 
 17679 6200 00000000 		.quad	.LC0
 17679      00000000 
 17680 6208 00000000 		.quad	0
 17680      00000000 
 17681 6210 00000000 		.quad	0
 17681      00000000 
 17682 6218 00000000 		.quad	0
 17682      00000000 
 17683 6220 00000000 		.quad	.Lubsan_data614
 17683      00000000 
 17684 6228 20000000 		.quad	32
 17684      00000000 
 17685 6230 40000000 		.quad	64
 17685      00000000 
 17686 6238 00000000 		.quad	.LC121
 17686      00000000 
 17687 6240 00000000 		.quad	.LC0
 17687      00000000 
 17688 6248 00000000 		.quad	0
 17688      00000000 
 17689 6250 00000000 		.quad	0
 17689      00000000 
 17690 6258 00000000 		.quad	0
 17690      00000000 
 17691 6260 00000000 		.quad	.Lubsan_data613
 17691      00000000 
 17692 6268 20000000 		.quad	32
 17692      00000000 
 17693 6270 40000000 		.quad	64
 17693      00000000 
 17694 6278 00000000 		.quad	.LC122
 17694      00000000 
 17695 6280 00000000 		.quad	.LC0
 17695      00000000 
 17696 6288 00000000 		.quad	0
 17696      00000000 
 17697 6290 00000000 		.quad	0
 17697      00000000 
 17698 6298 00000000 		.quad	0
 17698      00000000 
 17699 62a0 00000000 		.quad	.Lubsan_data612
 17699      00000000 
 17700 62a8 20000000 		.quad	32
 17700      00000000 
 17701 62b0 40000000 		.quad	64
 17701      00000000 
 17702 62b8 00000000 		.quad	.LC123
 17702      00000000 
 17703 62c0 00000000 		.quad	.LC0
 17703      00000000 
 17704 62c8 00000000 		.quad	0
 17704      00000000 
 17705 62d0 00000000 		.quad	0
 17705      00000000 
 17706 62d8 00000000 		.quad	0
 17706      00000000 
 17707 62e0 00000000 		.quad	.Lubsan_type47
 17707      00000000 
 17708 62e8 1E000000 		.quad	30
 17708      00000000 
 17709 62f0 40000000 		.quad	64
 17709      00000000 
 17710 62f8 00000000 		.quad	.LC124
 17710      00000000 
 17711 6300 00000000 		.quad	.LC0
 17711      00000000 
 17712 6308 00000000 		.quad	0
 17712      00000000 
 17713 6310 00000000 		.quad	0
 17713      00000000 
 17714 6318 00000000 		.quad	0
 17714      00000000 
 17715 6320 00000000 		.quad	.Lubsan_data611
 17715      00000000 
 17716 6328 20000000 		.quad	32
 17716      00000000 
 17717 6330 40000000 		.quad	64
 17717      00000000 
 17718 6338 00000000 		.quad	.LC125
 17718      00000000 
 17719 6340 00000000 		.quad	.LC0
 17719      00000000 
 17720 6348 00000000 		.quad	0
 17720      00000000 
 17721 6350 00000000 		.quad	0
 17721      00000000 
 17722 6358 00000000 		.quad	0
 17722      00000000 
 17723 6360 00000000 		.quad	.Lubsan_data610
 17723      00000000 
 17724 6368 20000000 		.quad	32
 17724      00000000 
 17725 6370 40000000 		.quad	64
 17725      00000000 
 17726 6378 00000000 		.quad	.LC126
 17726      00000000 
 17727 6380 00000000 		.quad	.LC0
 17727      00000000 
 17728 6388 00000000 		.quad	0
 17728      00000000 
 17729 6390 00000000 		.quad	0
 17729      00000000 
 17730 6398 00000000 		.quad	0
 17730      00000000 
 17731 63a0 00000000 		.quad	.Lubsan_data609
 17731      00000000 
 17732 63a8 20000000 		.quad	32
 17732      00000000 
 17733 63b0 40000000 		.quad	64
 17733      00000000 
 17734 63b8 00000000 		.quad	.LC127
 17734      00000000 
 17735 63c0 00000000 		.quad	.LC0
 17735      00000000 
 17736 63c8 00000000 		.quad	0
 17736      00000000 
 17737 63d0 00000000 		.quad	0
 17737      00000000 
 17738 63d8 00000000 		.quad	0
 17738      00000000 
 17739 63e0 00000000 		.quad	.Lubsan_data608
 17739      00000000 
 17740 63e8 20000000 		.quad	32
 17740      00000000 
 17741 63f0 40000000 		.quad	64
 17741      00000000 
 17742 63f8 00000000 		.quad	.LC128
 17742      00000000 
 17743 6400 00000000 		.quad	.LC0
 17743      00000000 
 17744 6408 00000000 		.quad	0
 17744      00000000 
 17745 6410 00000000 		.quad	0
 17745      00000000 
 17746 6418 00000000 		.quad	0
 17746      00000000 
 17747 6420 00000000 		.quad	.Lubsan_data607
 17747      00000000 
 17748 6428 20000000 		.quad	32
 17748      00000000 
 17749 6430 40000000 		.quad	64
 17749      00000000 
 17750 6438 00000000 		.quad	.LC129
 17750      00000000 
 17751 6440 00000000 		.quad	.LC0
 17751      00000000 
 17752 6448 00000000 		.quad	0
 17752      00000000 
 17753 6450 00000000 		.quad	0
 17753      00000000 
 17754 6458 00000000 		.quad	0
 17754      00000000 
 17755 6460 00000000 		.quad	.Lubsan_data606
 17755      00000000 
 17756 6468 20000000 		.quad	32
 17756      00000000 
 17757 6470 40000000 		.quad	64
 17757      00000000 
 17758 6478 00000000 		.quad	.LC130
 17758      00000000 
 17759 6480 00000000 		.quad	.LC0
 17759      00000000 
 17760 6488 00000000 		.quad	0
 17760      00000000 
 17761 6490 00000000 		.quad	0
 17761      00000000 
 17762 6498 00000000 		.quad	0
 17762      00000000 
 17763 64a0 00000000 		.quad	.Lubsan_data605
 17763      00000000 
 17764 64a8 20000000 		.quad	32
 17764      00000000 
 17765 64b0 40000000 		.quad	64
 17765      00000000 
 17766 64b8 00000000 		.quad	.LC131
 17766      00000000 
 17767 64c0 00000000 		.quad	.LC0
 17767      00000000 
 17768 64c8 00000000 		.quad	0
 17768      00000000 
 17769 64d0 00000000 		.quad	0
 17769      00000000 
 17770 64d8 00000000 		.quad	0
 17770      00000000 
 17771 64e0 00000000 		.quad	.Lubsan_data604
 17771      00000000 
 17772 64e8 20000000 		.quad	32
 17772      00000000 
 17773 64f0 40000000 		.quad	64
 17773      00000000 
 17774 64f8 00000000 		.quad	.LC132
 17774      00000000 
 17775 6500 00000000 		.quad	.LC0
 17775      00000000 
 17776 6508 00000000 		.quad	0
 17776      00000000 
 17777 6510 00000000 		.quad	0
 17777      00000000 
 17778 6518 00000000 		.quad	0
 17778      00000000 
 17779 6520 00000000 		.quad	.Lubsan_data603
 17779      00000000 
 17780 6528 20000000 		.quad	32
 17780      00000000 
 17781 6530 40000000 		.quad	64
 17781      00000000 
 17782 6538 00000000 		.quad	.LC133
 17782      00000000 
 17783 6540 00000000 		.quad	.LC0
 17783      00000000 
 17784 6548 00000000 		.quad	0
 17784      00000000 
 17785 6550 00000000 		.quad	0
 17785      00000000 
 17786 6558 00000000 		.quad	0
 17786      00000000 
 17787 6560 00000000 		.quad	.Lubsan_data602
 17787      00000000 
 17788 6568 20000000 		.quad	32
 17788      00000000 
 17789 6570 40000000 		.quad	64
 17789      00000000 
 17790 6578 00000000 		.quad	.LC134
 17790      00000000 
 17791 6580 00000000 		.quad	.LC0
 17791      00000000 
 17792 6588 00000000 		.quad	0
 17792      00000000 
 17793 6590 00000000 		.quad	0
 17793      00000000 
 17794 6598 00000000 		.quad	0
 17794      00000000 
 17795 65a0 00000000 		.quad	.Lubsan_data601
 17795      00000000 
 17796 65a8 20000000 		.quad	32
 17796      00000000 
 17797 65b0 40000000 		.quad	64
 17797      00000000 
 17798 65b8 00000000 		.quad	.LC135
 17798      00000000 
 17799 65c0 00000000 		.quad	.LC0
 17799      00000000 
 17800 65c8 00000000 		.quad	0
 17800      00000000 
 17801 65d0 00000000 		.quad	0
 17801      00000000 
 17802 65d8 00000000 		.quad	0
 17802      00000000 
 17803 65e0 00000000 		.quad	.Lubsan_data600
 17803      00000000 
 17804 65e8 10000000 		.quad	16
 17804      00000000 
 17805 65f0 40000000 		.quad	64
 17805      00000000 
 17806 65f8 00000000 		.quad	.LC136
 17806      00000000 
 17807 6600 00000000 		.quad	.LC0
 17807      00000000 
 17808 6608 00000000 		.quad	0
 17808      00000000 
 17809 6610 00000000 		.quad	0
 17809      00000000 
 17810 6618 00000000 		.quad	0
 17810      00000000 
 17811 6620 00000000 		.quad	.Lubsan_data599
 17811      00000000 
 17812 6628 20000000 		.quad	32
 17812      00000000 
 17813 6630 40000000 		.quad	64
 17813      00000000 
 17814 6638 00000000 		.quad	.LC137
 17814      00000000 
 17815 6640 00000000 		.quad	.LC0
 17815      00000000 
 17816 6648 00000000 		.quad	0
 17816      00000000 
 17817 6650 00000000 		.quad	0
 17817      00000000 
 17818 6658 00000000 		.quad	0
 17818      00000000 
 17819 6660 00000000 		.quad	.Lubsan_data598
 17819      00000000 
 17820 6668 20000000 		.quad	32
 17820      00000000 
 17821 6670 40000000 		.quad	64
 17821      00000000 
 17822 6678 00000000 		.quad	.LC138
 17822      00000000 
 17823 6680 00000000 		.quad	.LC0
 17823      00000000 
 17824 6688 00000000 		.quad	0
 17824      00000000 
 17825 6690 00000000 		.quad	0
 17825      00000000 
 17826 6698 00000000 		.quad	0
 17826      00000000 
 17827 66a0 00000000 		.quad	.Lubsan_data597
 17827      00000000 
 17828 66a8 20000000 		.quad	32
 17828      00000000 
 17829 66b0 40000000 		.quad	64
 17829      00000000 
 17830 66b8 00000000 		.quad	.LC139
 17830      00000000 
 17831 66c0 00000000 		.quad	.LC0
 17831      00000000 
 17832 66c8 00000000 		.quad	0
 17832      00000000 
 17833 66d0 00000000 		.quad	0
 17833      00000000 
 17834 66d8 00000000 		.quad	0
 17834      00000000 
 17835 66e0 00000000 		.quad	.Lubsan_data596
 17835      00000000 
 17836 66e8 20000000 		.quad	32
 17836      00000000 
 17837 66f0 40000000 		.quad	64
 17837      00000000 
 17838 66f8 00000000 		.quad	.LC140
 17838      00000000 
 17839 6700 00000000 		.quad	.LC0
 17839      00000000 
 17840 6708 00000000 		.quad	0
 17840      00000000 
 17841 6710 00000000 		.quad	0
 17841      00000000 
 17842 6718 00000000 		.quad	0
 17842      00000000 
 17843 6720 00000000 		.quad	.Lubsan_type46
 17843      00000000 
 17844 6728 1D000000 		.quad	29
 17844      00000000 
 17845 6730 40000000 		.quad	64
 17845      00000000 
 17846 6738 00000000 		.quad	.LC141
 17846      00000000 
 17847 6740 00000000 		.quad	.LC0
 17847      00000000 
 17848 6748 00000000 		.quad	0
 17848      00000000 
 17849 6750 00000000 		.quad	0
 17849      00000000 
 17850 6758 00000000 		.quad	0
 17850      00000000 
 17851 6760 00000000 		.quad	.Lubsan_data595
 17851      00000000 
 17852 6768 20000000 		.quad	32
 17852      00000000 
 17853 6770 40000000 		.quad	64
 17853      00000000 
 17854 6778 00000000 		.quad	.LC142
 17854      00000000 
 17855 6780 00000000 		.quad	.LC0
 17855      00000000 
 17856 6788 00000000 		.quad	0
 17856      00000000 
 17857 6790 00000000 		.quad	0
 17857      00000000 
 17858 6798 00000000 		.quad	0
 17858      00000000 
 17859 67a0 00000000 		.quad	.Lubsan_data594
 17859      00000000 
 17860 67a8 20000000 		.quad	32
 17860      00000000 
 17861 67b0 40000000 		.quad	64
 17861      00000000 
 17862 67b8 00000000 		.quad	.LC143
 17862      00000000 
 17863 67c0 00000000 		.quad	.LC0
 17863      00000000 
 17864 67c8 00000000 		.quad	0
 17864      00000000 
 17865 67d0 00000000 		.quad	0
 17865      00000000 
 17866 67d8 00000000 		.quad	0
 17866      00000000 
 17867 67e0 00000000 		.quad	.Lubsan_data593
 17867      00000000 
 17868 67e8 20000000 		.quad	32
 17868      00000000 
 17869 67f0 40000000 		.quad	64
 17869      00000000 
 17870 67f8 00000000 		.quad	.LC144
 17870      00000000 
 17871 6800 00000000 		.quad	.LC0
 17871      00000000 
 17872 6808 00000000 		.quad	0
 17872      00000000 
 17873 6810 00000000 		.quad	0
 17873      00000000 
 17874 6818 00000000 		.quad	0
 17874      00000000 
 17875 6820 00000000 		.quad	.Lubsan_data592
 17875      00000000 
 17876 6828 20000000 		.quad	32
 17876      00000000 
 17877 6830 40000000 		.quad	64
 17877      00000000 
 17878 6838 00000000 		.quad	.LC145
 17878      00000000 
 17879 6840 00000000 		.quad	.LC0
 17879      00000000 
 17880 6848 00000000 		.quad	0
 17880      00000000 
 17881 6850 00000000 		.quad	0
 17881      00000000 
 17882 6858 00000000 		.quad	0
 17882      00000000 
 17883 6860 00000000 		.quad	.Lubsan_data591
 17883      00000000 
 17884 6868 20000000 		.quad	32
 17884      00000000 
 17885 6870 40000000 		.quad	64
 17885      00000000 
 17886 6878 00000000 		.quad	.LC146
 17886      00000000 
 17887 6880 00000000 		.quad	.LC0
 17887      00000000 
 17888 6888 00000000 		.quad	0
 17888      00000000 
 17889 6890 00000000 		.quad	0
 17889      00000000 
 17890 6898 00000000 		.quad	0
 17890      00000000 
 17891 68a0 00000000 		.quad	.Lubsan_data590
 17891      00000000 
 17892 68a8 10000000 		.quad	16
 17892      00000000 
 17893 68b0 40000000 		.quad	64
 17893      00000000 
 17894 68b8 00000000 		.quad	.LC147
 17894      00000000 
 17895 68c0 00000000 		.quad	.LC0
 17895      00000000 
 17896 68c8 00000000 		.quad	0
 17896      00000000 
 17897 68d0 00000000 		.quad	0
 17897      00000000 
 17898 68d8 00000000 		.quad	0
 17898      00000000 
 17899 68e0 00000000 		.quad	.Lubsan_data589
 17899      00000000 
 17900 68e8 20000000 		.quad	32
 17900      00000000 
 17901 68f0 40000000 		.quad	64
 17901      00000000 
 17902 68f8 00000000 		.quad	.LC148
 17902      00000000 
 17903 6900 00000000 		.quad	.LC0
 17903      00000000 
 17904 6908 00000000 		.quad	0
 17904      00000000 
 17905 6910 00000000 		.quad	0
 17905      00000000 
 17906 6918 00000000 		.quad	0
 17906      00000000 
 17907 6920 00000000 		.quad	.Lubsan_data588
 17907      00000000 
 17908 6928 10000000 		.quad	16
 17908      00000000 
 17909 6930 40000000 		.quad	64
 17909      00000000 
 17910 6938 00000000 		.quad	.LC149
 17910      00000000 
 17911 6940 00000000 		.quad	.LC0
 17911      00000000 
 17912 6948 00000000 		.quad	0
 17912      00000000 
 17913 6950 00000000 		.quad	0
 17913      00000000 
 17914 6958 00000000 		.quad	0
 17914      00000000 
 17915 6960 00000000 		.quad	.Lubsan_data587
 17915      00000000 
 17916 6968 20000000 		.quad	32
 17916      00000000 
 17917 6970 40000000 		.quad	64
 17917      00000000 
 17918 6978 00000000 		.quad	.LC150
 17918      00000000 
 17919 6980 00000000 		.quad	.LC0
 17919      00000000 
 17920 6988 00000000 		.quad	0
 17920      00000000 
 17921 6990 00000000 		.quad	0
 17921      00000000 
 17922 6998 00000000 		.quad	0
 17922      00000000 
 17923 69a0 00000000 		.quad	.Lubsan_data586
 17923      00000000 
 17924 69a8 10000000 		.quad	16
 17924      00000000 
 17925 69b0 40000000 		.quad	64
 17925      00000000 
 17926 69b8 00000000 		.quad	.LC151
 17926      00000000 
 17927 69c0 00000000 		.quad	.LC0
 17927      00000000 
 17928 69c8 00000000 		.quad	0
 17928      00000000 
 17929 69d0 00000000 		.quad	0
 17929      00000000 
 17930 69d8 00000000 		.quad	0
 17930      00000000 
 17931 69e0 00000000 		.quad	.Lubsan_data585
 17931      00000000 
 17932 69e8 10000000 		.quad	16
 17932      00000000 
 17933 69f0 40000000 		.quad	64
 17933      00000000 
 17934 69f8 00000000 		.quad	.LC152
 17934      00000000 
 17935 6a00 00000000 		.quad	.LC0
 17935      00000000 
 17936 6a08 00000000 		.quad	0
 17936      00000000 
 17937 6a10 00000000 		.quad	0
 17937      00000000 
 17938 6a18 00000000 		.quad	0
 17938      00000000 
 17939 6a20 00000000 		.quad	.Lubsan_data584
 17939      00000000 
 17940 6a28 20000000 		.quad	32
 17940      00000000 
 17941 6a30 40000000 		.quad	64
 17941      00000000 
 17942 6a38 00000000 		.quad	.LC153
 17942      00000000 
 17943 6a40 00000000 		.quad	.LC0
 17943      00000000 
 17944 6a48 00000000 		.quad	0
 17944      00000000 
 17945 6a50 00000000 		.quad	0
 17945      00000000 
 17946 6a58 00000000 		.quad	0
 17946      00000000 
 17947 6a60 00000000 		.quad	.Lubsan_data583
 17947      00000000 
 17948 6a68 20000000 		.quad	32
 17948      00000000 
 17949 6a70 40000000 		.quad	64
 17949      00000000 
 17950 6a78 00000000 		.quad	.LC154
 17950      00000000 
 17951 6a80 00000000 		.quad	.LC0
 17951      00000000 
 17952 6a88 00000000 		.quad	0
 17952      00000000 
 17953 6a90 00000000 		.quad	0
 17953      00000000 
 17954 6a98 00000000 		.quad	0
 17954      00000000 
 17955 6aa0 00000000 		.quad	.Lubsan_data582
 17955      00000000 
 17956 6aa8 20000000 		.quad	32
 17956      00000000 
 17957 6ab0 40000000 		.quad	64
 17957      00000000 
 17958 6ab8 00000000 		.quad	.LC155
 17958      00000000 
 17959 6ac0 00000000 		.quad	.LC0
 17959      00000000 
 17960 6ac8 00000000 		.quad	0
 17960      00000000 
 17961 6ad0 00000000 		.quad	0
 17961      00000000 
 17962 6ad8 00000000 		.quad	0
 17962      00000000 
 17963 6ae0 00000000 		.quad	.Lubsan_data581
 17963      00000000 
 17964 6ae8 20000000 		.quad	32
 17964      00000000 
 17965 6af0 40000000 		.quad	64
 17965      00000000 
 17966 6af8 00000000 		.quad	.LC156
 17966      00000000 
 17967 6b00 00000000 		.quad	.LC0
 17967      00000000 
 17968 6b08 00000000 		.quad	0
 17968      00000000 
 17969 6b10 00000000 		.quad	0
 17969      00000000 
 17970 6b18 00000000 		.quad	0
 17970      00000000 
 17971 6b20 00000000 		.quad	.Lubsan_data580
 17971      00000000 
 17972 6b28 20000000 		.quad	32
 17972      00000000 
 17973 6b30 40000000 		.quad	64
 17973      00000000 
 17974 6b38 00000000 		.quad	.LC157
 17974      00000000 
 17975 6b40 00000000 		.quad	.LC0
 17975      00000000 
 17976 6b48 00000000 		.quad	0
 17976      00000000 
 17977 6b50 00000000 		.quad	0
 17977      00000000 
 17978 6b58 00000000 		.quad	0
 17978      00000000 
 17979 6b60 00000000 		.quad	.Lubsan_data579
 17979      00000000 
 17980 6b68 20000000 		.quad	32
 17980      00000000 
 17981 6b70 40000000 		.quad	64
 17981      00000000 
 17982 6b78 00000000 		.quad	.LC158
 17982      00000000 
 17983 6b80 00000000 		.quad	.LC0
 17983      00000000 
 17984 6b88 00000000 		.quad	0
 17984      00000000 
 17985 6b90 00000000 		.quad	0
 17985      00000000 
 17986 6b98 00000000 		.quad	0
 17986      00000000 
 17987 6ba0 00000000 		.quad	.Lubsan_data578
 17987      00000000 
 17988 6ba8 10000000 		.quad	16
 17988      00000000 
 17989 6bb0 40000000 		.quad	64
 17989      00000000 
 17990 6bb8 00000000 		.quad	.LC159
 17990      00000000 
 17991 6bc0 00000000 		.quad	.LC0
 17991      00000000 
 17992 6bc8 00000000 		.quad	0
 17992      00000000 
 17993 6bd0 00000000 		.quad	0
 17993      00000000 
 17994 6bd8 00000000 		.quad	0
 17994      00000000 
 17995 6be0 00000000 		.quad	.Lubsan_data577
 17995      00000000 
 17996 6be8 20000000 		.quad	32
 17996      00000000 
 17997 6bf0 40000000 		.quad	64
 17997      00000000 
 17998 6bf8 00000000 		.quad	.LC160
 17998      00000000 
 17999 6c00 00000000 		.quad	.LC0
 17999      00000000 
 18000 6c08 00000000 		.quad	0
 18000      00000000 
 18001 6c10 00000000 		.quad	0
 18001      00000000 
 18002 6c18 00000000 		.quad	0
 18002      00000000 
 18003 6c20 00000000 		.quad	.Lubsan_data576
 18003      00000000 
 18004 6c28 20000000 		.quad	32
 18004      00000000 
 18005 6c30 40000000 		.quad	64
 18005      00000000 
 18006 6c38 00000000 		.quad	.LC161
 18006      00000000 
 18007 6c40 00000000 		.quad	.LC0
 18007      00000000 
 18008 6c48 00000000 		.quad	0
 18008      00000000 
 18009 6c50 00000000 		.quad	0
 18009      00000000 
 18010 6c58 00000000 		.quad	0
 18010      00000000 
 18011 6c60 00000000 		.quad	.Lubsan_data575
 18011      00000000 
 18012 6c68 20000000 		.quad	32
 18012      00000000 
 18013 6c70 40000000 		.quad	64
 18013      00000000 
 18014 6c78 00000000 		.quad	.LC162
 18014      00000000 
 18015 6c80 00000000 		.quad	.LC0
 18015      00000000 
 18016 6c88 00000000 		.quad	0
 18016      00000000 
 18017 6c90 00000000 		.quad	0
 18017      00000000 
 18018 6c98 00000000 		.quad	0
 18018      00000000 
 18019 6ca0 00000000 		.quad	.Lubsan_data574
 18019      00000000 
 18020 6ca8 20000000 		.quad	32
 18020      00000000 
 18021 6cb0 40000000 		.quad	64
 18021      00000000 
 18022 6cb8 00000000 		.quad	.LC163
 18022      00000000 
 18023 6cc0 00000000 		.quad	.LC0
 18023      00000000 
 18024 6cc8 00000000 		.quad	0
 18024      00000000 
 18025 6cd0 00000000 		.quad	0
 18025      00000000 
 18026 6cd8 00000000 		.quad	0
 18026      00000000 
 18027 6ce0 00000000 		.quad	.Lubsan_data573
 18027      00000000 
 18028 6ce8 20000000 		.quad	32
 18028      00000000 
 18029 6cf0 40000000 		.quad	64
 18029      00000000 
 18030 6cf8 00000000 		.quad	.LC164
 18030      00000000 
 18031 6d00 00000000 		.quad	.LC0
 18031      00000000 
 18032 6d08 00000000 		.quad	0
 18032      00000000 
 18033 6d10 00000000 		.quad	0
 18033      00000000 
 18034 6d18 00000000 		.quad	0
 18034      00000000 
 18035 6d20 00000000 		.quad	.Lubsan_data572
 18035      00000000 
 18036 6d28 20000000 		.quad	32
 18036      00000000 
 18037 6d30 40000000 		.quad	64
 18037      00000000 
 18038 6d38 00000000 		.quad	.LC165
 18038      00000000 
 18039 6d40 00000000 		.quad	.LC0
 18039      00000000 
 18040 6d48 00000000 		.quad	0
 18040      00000000 
 18041 6d50 00000000 		.quad	0
 18041      00000000 
 18042 6d58 00000000 		.quad	0
 18042      00000000 
 18043 6d60 00000000 		.quad	.Lubsan_type45
 18043      00000000 
 18044 6d68 22000000 		.quad	34
 18044      00000000 
 18045 6d70 60000000 		.quad	96
 18045      00000000 
 18046 6d78 00000000 		.quad	.LC166
 18046      00000000 
 18047 6d80 00000000 		.quad	.LC0
 18047      00000000 
 18048 6d88 00000000 		.quad	0
 18048      00000000 
 18049 6d90 00000000 		.quad	0
 18049      00000000 
 18050 6d98 00000000 		.quad	0
 18050      00000000 
 18051 6da0 00000000 		.quad	.Lubsan_data571
 18051      00000000 
 18052 6da8 20000000 		.quad	32
 18052      00000000 
 18053 6db0 40000000 		.quad	64
 18053      00000000 
 18054 6db8 00000000 		.quad	.LC167
 18054      00000000 
 18055 6dc0 00000000 		.quad	.LC0
 18055      00000000 
 18056 6dc8 00000000 		.quad	0
 18056      00000000 
 18057 6dd0 00000000 		.quad	0
 18057      00000000 
 18058 6dd8 00000000 		.quad	0
 18058      00000000 
 18059 6de0 00000000 		.quad	.Lubsan_type44
 18059      00000000 
 18060 6de8 1A000000 		.quad	26
 18060      00000000 
 18061 6df0 40000000 		.quad	64
 18061      00000000 
 18062 6df8 00000000 		.quad	.LC168
 18062      00000000 
 18063 6e00 00000000 		.quad	.LC0
 18063      00000000 
 18064 6e08 00000000 		.quad	0
 18064      00000000 
 18065 6e10 00000000 		.quad	0
 18065      00000000 
 18066 6e18 00000000 		.quad	0
 18066      00000000 
 18067 6e20 00000000 		.quad	.Lubsan_data570
 18067      00000000 
 18068 6e28 20000000 		.quad	32
 18068      00000000 
 18069 6e30 40000000 		.quad	64
 18069      00000000 
 18070 6e38 00000000 		.quad	.LC169
 18070      00000000 
 18071 6e40 00000000 		.quad	.LC0
 18071      00000000 
 18072 6e48 00000000 		.quad	0
 18072      00000000 
 18073 6e50 00000000 		.quad	0
 18073      00000000 
 18074 6e58 00000000 		.quad	0
 18074      00000000 
 18075 6e60 00000000 		.quad	.Lubsan_data569
 18075      00000000 
 18076 6e68 20000000 		.quad	32
 18076      00000000 
 18077 6e70 40000000 		.quad	64
 18077      00000000 
 18078 6e78 00000000 		.quad	.LC170
 18078      00000000 
 18079 6e80 00000000 		.quad	.LC0
 18079      00000000 
 18080 6e88 00000000 		.quad	0
 18080      00000000 
 18081 6e90 00000000 		.quad	0
 18081      00000000 
 18082 6e98 00000000 		.quad	0
 18082      00000000 
 18083 6ea0 00000000 		.quad	.Lubsan_data568
 18083      00000000 
 18084 6ea8 20000000 		.quad	32
 18084      00000000 
 18085 6eb0 40000000 		.quad	64
 18085      00000000 
 18086 6eb8 00000000 		.quad	.LC171
 18086      00000000 
 18087 6ec0 00000000 		.quad	.LC0
 18087      00000000 
 18088 6ec8 00000000 		.quad	0
 18088      00000000 
 18089 6ed0 00000000 		.quad	0
 18089      00000000 
 18090 6ed8 00000000 		.quad	0
 18090      00000000 
 18091 6ee0 00000000 		.quad	.Lubsan_data567
 18091      00000000 
 18092 6ee8 20000000 		.quad	32
 18092      00000000 
 18093 6ef0 40000000 		.quad	64
 18093      00000000 
 18094 6ef8 00000000 		.quad	.LC172
 18094      00000000 
 18095 6f00 00000000 		.quad	.LC0
 18095      00000000 
 18096 6f08 00000000 		.quad	0
 18096      00000000 
 18097 6f10 00000000 		.quad	0
 18097      00000000 
 18098 6f18 00000000 		.quad	0
 18098      00000000 
 18099 6f20 00000000 		.quad	.Lubsan_type43
 18099      00000000 
 18100 6f28 1F000000 		.quad	31
 18100      00000000 
 18101 6f30 40000000 		.quad	64
 18101      00000000 
 18102 6f38 00000000 		.quad	.LC173
 18102      00000000 
 18103 6f40 00000000 		.quad	.LC0
 18103      00000000 
 18104 6f48 00000000 		.quad	0
 18104      00000000 
 18105 6f50 00000000 		.quad	0
 18105      00000000 
 18106 6f58 00000000 		.quad	0
 18106      00000000 
 18107 6f60 00000000 		.quad	.Lubsan_data566
 18107      00000000 
 18108 6f68 20000000 		.quad	32
 18108      00000000 
 18109 6f70 40000000 		.quad	64
 18109      00000000 
 18110 6f78 00000000 		.quad	.LC174
 18110      00000000 
 18111 6f80 00000000 		.quad	.LC0
 18111      00000000 
 18112 6f88 00000000 		.quad	0
 18112      00000000 
 18113 6f90 00000000 		.quad	0
 18113      00000000 
 18114 6f98 00000000 		.quad	0
 18114      00000000 
 18115 6fa0 00000000 		.quad	.Lubsan_data565
 18115      00000000 
 18116 6fa8 20000000 		.quad	32
 18116      00000000 
 18117 6fb0 40000000 		.quad	64
 18117      00000000 
 18118 6fb8 00000000 		.quad	.LC175
 18118      00000000 
 18119 6fc0 00000000 		.quad	.LC0
 18119      00000000 
 18120 6fc8 00000000 		.quad	0
 18120      00000000 
 18121 6fd0 00000000 		.quad	0
 18121      00000000 
 18122 6fd8 00000000 		.quad	0
 18122      00000000 
 18123 6fe0 00000000 		.quad	.Lubsan_type42
 18123      00000000 
 18124 6fe8 17000000 		.quad	23
 18124      00000000 
 18125 6ff0 40000000 		.quad	64
 18125      00000000 
 18126 6ff8 00000000 		.quad	.LC176
 18126      00000000 
 18127 7000 00000000 		.quad	.LC0
 18127      00000000 
 18128 7008 00000000 		.quad	0
 18128      00000000 
 18129 7010 00000000 		.quad	0
 18129      00000000 
 18130 7018 00000000 		.quad	0
 18130      00000000 
 18131 7020 00000000 		.quad	.Lubsan_data564
 18131      00000000 
 18132 7028 20000000 		.quad	32
 18132      00000000 
 18133 7030 40000000 		.quad	64
 18133      00000000 
 18134 7038 00000000 		.quad	.LC177
 18134      00000000 
 18135 7040 00000000 		.quad	.LC0
 18135      00000000 
 18136 7048 00000000 		.quad	0
 18136      00000000 
 18137 7050 00000000 		.quad	0
 18137      00000000 
 18138 7058 00000000 		.quad	0
 18138      00000000 
 18139 7060 00000000 		.quad	.Lubsan_data563
 18139      00000000 
 18140 7068 20000000 		.quad	32
 18140      00000000 
 18141 7070 40000000 		.quad	64
 18141      00000000 
 18142 7078 00000000 		.quad	.LC178
 18142      00000000 
 18143 7080 00000000 		.quad	.LC0
 18143      00000000 
 18144 7088 00000000 		.quad	0
 18144      00000000 
 18145 7090 00000000 		.quad	0
 18145      00000000 
 18146 7098 00000000 		.quad	0
 18146      00000000 
 18147 70a0 00000000 		.quad	.Lubsan_data562
 18147      00000000 
 18148 70a8 20000000 		.quad	32
 18148      00000000 
 18149 70b0 40000000 		.quad	64
 18149      00000000 
 18150 70b8 00000000 		.quad	.LC179
 18150      00000000 
 18151 70c0 00000000 		.quad	.LC0
 18151      00000000 
 18152 70c8 00000000 		.quad	0
 18152      00000000 
 18153 70d0 00000000 		.quad	0
 18153      00000000 
 18154 70d8 00000000 		.quad	0
 18154      00000000 
 18155 70e0 00000000 		.quad	.Lubsan_data561
 18155      00000000 
 18156 70e8 20000000 		.quad	32
 18156      00000000 
 18157 70f0 40000000 		.quad	64
 18157      00000000 
 18158 70f8 00000000 		.quad	.LC180
 18158      00000000 
 18159 7100 00000000 		.quad	.LC0
 18159      00000000 
 18160 7108 00000000 		.quad	0
 18160      00000000 
 18161 7110 00000000 		.quad	0
 18161      00000000 
 18162 7118 00000000 		.quad	0
 18162      00000000 
 18163 7120 00000000 		.quad	.Lubsan_data560
 18163      00000000 
 18164 7128 20000000 		.quad	32
 18164      00000000 
 18165 7130 40000000 		.quad	64
 18165      00000000 
 18166 7138 00000000 		.quad	.LC181
 18166      00000000 
 18167 7140 00000000 		.quad	.LC0
 18167      00000000 
 18168 7148 00000000 		.quad	0
 18168      00000000 
 18169 7150 00000000 		.quad	0
 18169      00000000 
 18170 7158 00000000 		.quad	0
 18170      00000000 
 18171 7160 00000000 		.quad	.Lubsan_data559
 18171      00000000 
 18172 7168 20000000 		.quad	32
 18172      00000000 
 18173 7170 40000000 		.quad	64
 18173      00000000 
 18174 7178 00000000 		.quad	.LC182
 18174      00000000 
 18175 7180 00000000 		.quad	.LC0
 18175      00000000 
 18176 7188 00000000 		.quad	0
 18176      00000000 
 18177 7190 00000000 		.quad	0
 18177      00000000 
 18178 7198 00000000 		.quad	0
 18178      00000000 
 18179 71a0 00000000 		.quad	.Lubsan_data558
 18179      00000000 
 18180 71a8 20000000 		.quad	32
 18180      00000000 
 18181 71b0 40000000 		.quad	64
 18181      00000000 
 18182 71b8 00000000 		.quad	.LC183
 18182      00000000 
 18183 71c0 00000000 		.quad	.LC0
 18183      00000000 
 18184 71c8 00000000 		.quad	0
 18184      00000000 
 18185 71d0 00000000 		.quad	0
 18185      00000000 
 18186 71d8 00000000 		.quad	0
 18186      00000000 
 18187 71e0 00000000 		.quad	.Lubsan_data557
 18187      00000000 
 18188 71e8 10000000 		.quad	16
 18188      00000000 
 18189 71f0 40000000 		.quad	64
 18189      00000000 
 18190 71f8 00000000 		.quad	.LC184
 18190      00000000 
 18191 7200 00000000 		.quad	.LC0
 18191      00000000 
 18192 7208 00000000 		.quad	0
 18192      00000000 
 18193 7210 00000000 		.quad	0
 18193      00000000 
 18194 7218 00000000 		.quad	0
 18194      00000000 
 18195 7220 00000000 		.quad	.Lubsan_data556
 18195      00000000 
 18196 7228 10000000 		.quad	16
 18196      00000000 
 18197 7230 40000000 		.quad	64
 18197      00000000 
 18198 7238 00000000 		.quad	.LC185
 18198      00000000 
 18199 7240 00000000 		.quad	.LC0
 18199      00000000 
 18200 7248 00000000 		.quad	0
 18200      00000000 
 18201 7250 00000000 		.quad	0
 18201      00000000 
 18202 7258 00000000 		.quad	0
 18202      00000000 
 18203 7260 00000000 		.quad	.Lubsan_data555
 18203      00000000 
 18204 7268 20000000 		.quad	32
 18204      00000000 
 18205 7270 40000000 		.quad	64
 18205      00000000 
 18206 7278 00000000 		.quad	.LC186
 18206      00000000 
 18207 7280 00000000 		.quad	.LC0
 18207      00000000 
 18208 7288 00000000 		.quad	0
 18208      00000000 
 18209 7290 00000000 		.quad	0
 18209      00000000 
 18210 7298 00000000 		.quad	0
 18210      00000000 
 18211 72a0 00000000 		.quad	.Lubsan_data554
 18211      00000000 
 18212 72a8 10000000 		.quad	16
 18212      00000000 
 18213 72b0 40000000 		.quad	64
 18213      00000000 
 18214 72b8 00000000 		.quad	.LC187
 18214      00000000 
 18215 72c0 00000000 		.quad	.LC0
 18215      00000000 
 18216 72c8 00000000 		.quad	0
 18216      00000000 
 18217 72d0 00000000 		.quad	0
 18217      00000000 
 18218 72d8 00000000 		.quad	0
 18218      00000000 
 18219 72e0 00000000 		.quad	.Lubsan_data553
 18219      00000000 
 18220 72e8 10000000 		.quad	16
 18220      00000000 
 18221 72f0 40000000 		.quad	64
 18221      00000000 
 18222 72f8 00000000 		.quad	.LC188
 18222      00000000 
 18223 7300 00000000 		.quad	.LC0
 18223      00000000 
 18224 7308 00000000 		.quad	0
 18224      00000000 
 18225 7310 00000000 		.quad	0
 18225      00000000 
 18226 7318 00000000 		.quad	0
 18226      00000000 
 18227 7320 00000000 		.quad	.Lubsan_data552
 18227      00000000 
 18228 7328 20000000 		.quad	32
 18228      00000000 
 18229 7330 40000000 		.quad	64
 18229      00000000 
 18230 7338 00000000 		.quad	.LC189
 18230      00000000 
 18231 7340 00000000 		.quad	.LC0
 18231      00000000 
 18232 7348 00000000 		.quad	0
 18232      00000000 
 18233 7350 00000000 		.quad	0
 18233      00000000 
 18234 7358 00000000 		.quad	0
 18234      00000000 
 18235 7360 00000000 		.quad	.Lubsan_data551
 18235      00000000 
 18236 7368 20000000 		.quad	32
 18236      00000000 
 18237 7370 40000000 		.quad	64
 18237      00000000 
 18238 7378 00000000 		.quad	.LC190
 18238      00000000 
 18239 7380 00000000 		.quad	.LC0
 18239      00000000 
 18240 7388 00000000 		.quad	0
 18240      00000000 
 18241 7390 00000000 		.quad	0
 18241      00000000 
 18242 7398 00000000 		.quad	0
 18242      00000000 
 18243 73a0 00000000 		.quad	.Lubsan_data550
 18243      00000000 
 18244 73a8 10000000 		.quad	16
 18244      00000000 
 18245 73b0 40000000 		.quad	64
 18245      00000000 
 18246 73b8 00000000 		.quad	.LC191
 18246      00000000 
 18247 73c0 00000000 		.quad	.LC0
 18247      00000000 
 18248 73c8 00000000 		.quad	0
 18248      00000000 
 18249 73d0 00000000 		.quad	0
 18249      00000000 
 18250 73d8 00000000 		.quad	0
 18250      00000000 
 18251 73e0 00000000 		.quad	.Lubsan_data549
 18251      00000000 
 18252 73e8 20000000 		.quad	32
 18252      00000000 
 18253 73f0 40000000 		.quad	64
 18253      00000000 
 18254 73f8 00000000 		.quad	.LC192
 18254      00000000 
 18255 7400 00000000 		.quad	.LC0
 18255      00000000 
 18256 7408 00000000 		.quad	0
 18256      00000000 
 18257 7410 00000000 		.quad	0
 18257      00000000 
 18258 7418 00000000 		.quad	0
 18258      00000000 
 18259 7420 00000000 		.quad	.Lubsan_data548
 18259      00000000 
 18260 7428 20000000 		.quad	32
 18260      00000000 
 18261 7430 40000000 		.quad	64
 18261      00000000 
 18262 7438 00000000 		.quad	.LC193
 18262      00000000 
 18263 7440 00000000 		.quad	.LC0
 18263      00000000 
 18264 7448 00000000 		.quad	0
 18264      00000000 
 18265 7450 00000000 		.quad	0
 18265      00000000 
 18266 7458 00000000 		.quad	0
 18266      00000000 
 18267 7460 00000000 		.quad	.Lubsan_data547
 18267      00000000 
 18268 7468 20000000 		.quad	32
 18268      00000000 
 18269 7470 40000000 		.quad	64
 18269      00000000 
 18270 7478 00000000 		.quad	.LC194
 18270      00000000 
 18271 7480 00000000 		.quad	.LC0
 18271      00000000 
 18272 7488 00000000 		.quad	0
 18272      00000000 
 18273 7490 00000000 		.quad	0
 18273      00000000 
 18274 7498 00000000 		.quad	0
 18274      00000000 
 18275 74a0 00000000 		.quad	.Lubsan_data546
 18275      00000000 
 18276 74a8 20000000 		.quad	32
 18276      00000000 
 18277 74b0 40000000 		.quad	64
 18277      00000000 
 18278 74b8 00000000 		.quad	.LC195
 18278      00000000 
 18279 74c0 00000000 		.quad	.LC0
 18279      00000000 
 18280 74c8 00000000 		.quad	0
 18280      00000000 
 18281 74d0 00000000 		.quad	0
 18281      00000000 
 18282 74d8 00000000 		.quad	0
 18282      00000000 
 18283 74e0 00000000 		.quad	.Lubsan_data545
 18283      00000000 
 18284 74e8 20000000 		.quad	32
 18284      00000000 
 18285 74f0 40000000 		.quad	64
 18285      00000000 
 18286 74f8 00000000 		.quad	.LC196
 18286      00000000 
 18287 7500 00000000 		.quad	.LC0
 18287      00000000 
 18288 7508 00000000 		.quad	0
 18288      00000000 
 18289 7510 00000000 		.quad	0
 18289      00000000 
 18290 7518 00000000 		.quad	0
 18290      00000000 
 18291 7520 00000000 		.quad	.Lubsan_data544
 18291      00000000 
 18292 7528 20000000 		.quad	32
 18292      00000000 
 18293 7530 40000000 		.quad	64
 18293      00000000 
 18294 7538 00000000 		.quad	.LC197
 18294      00000000 
 18295 7540 00000000 		.quad	.LC0
 18295      00000000 
 18296 7548 00000000 		.quad	0
 18296      00000000 
 18297 7550 00000000 		.quad	0
 18297      00000000 
 18298 7558 00000000 		.quad	0
 18298      00000000 
 18299 7560 00000000 		.quad	.Lubsan_data543
 18299      00000000 
 18300 7568 20000000 		.quad	32
 18300      00000000 
 18301 7570 40000000 		.quad	64
 18301      00000000 
 18302 7578 00000000 		.quad	.LC198
 18302      00000000 
 18303 7580 00000000 		.quad	.LC0
 18303      00000000 
 18304 7588 00000000 		.quad	0
 18304      00000000 
 18305 7590 00000000 		.quad	0
 18305      00000000 
 18306 7598 00000000 		.quad	0
 18306      00000000 
 18307 75a0 00000000 		.quad	.Lubsan_data542
 18307      00000000 
 18308 75a8 10000000 		.quad	16
 18308      00000000 
 18309 75b0 40000000 		.quad	64
 18309      00000000 
 18310 75b8 00000000 		.quad	.LC199
 18310      00000000 
 18311 75c0 00000000 		.quad	.LC0
 18311      00000000 
 18312 75c8 00000000 		.quad	0
 18312      00000000 
 18313 75d0 00000000 		.quad	0
 18313      00000000 
 18314 75d8 00000000 		.quad	0
 18314      00000000 
 18315 75e0 00000000 		.quad	.Lubsan_data541
 18315      00000000 
 18316 75e8 20000000 		.quad	32
 18316      00000000 
 18317 75f0 40000000 		.quad	64
 18317      00000000 
 18318 75f8 00000000 		.quad	.LC200
 18318      00000000 
 18319 7600 00000000 		.quad	.LC0
 18319      00000000 
 18320 7608 00000000 		.quad	0
 18320      00000000 
 18321 7610 00000000 		.quad	0
 18321      00000000 
 18322 7618 00000000 		.quad	0
 18322      00000000 
 18323 7620 00000000 		.quad	.Lubsan_data540
 18323      00000000 
 18324 7628 20000000 		.quad	32
 18324      00000000 
 18325 7630 40000000 		.quad	64
 18325      00000000 
 18326 7638 00000000 		.quad	.LC201
 18326      00000000 
 18327 7640 00000000 		.quad	.LC0
 18327      00000000 
 18328 7648 00000000 		.quad	0
 18328      00000000 
 18329 7650 00000000 		.quad	0
 18329      00000000 
 18330 7658 00000000 		.quad	0
 18330      00000000 
 18331 7660 00000000 		.quad	.Lubsan_type41
 18331      00000000 
 18332 7668 1C000000 		.quad	28
 18332      00000000 
 18333 7670 40000000 		.quad	64
 18333      00000000 
 18334 7678 00000000 		.quad	.LC202
 18334      00000000 
 18335 7680 00000000 		.quad	.LC0
 18335      00000000 
 18336 7688 00000000 		.quad	0
 18336      00000000 
 18337 7690 00000000 		.quad	0
 18337      00000000 
 18338 7698 00000000 		.quad	0
 18338      00000000 
 18339 76a0 00000000 		.quad	.Lubsan_data539
 18339      00000000 
 18340 76a8 20000000 		.quad	32
 18340      00000000 
 18341 76b0 40000000 		.quad	64
 18341      00000000 
 18342 76b8 00000000 		.quad	.LC203
 18342      00000000 
 18343 76c0 00000000 		.quad	.LC0
 18343      00000000 
 18344 76c8 00000000 		.quad	0
 18344      00000000 
 18345 76d0 00000000 		.quad	0
 18345      00000000 
 18346 76d8 00000000 		.quad	0
 18346      00000000 
 18347 76e0 00000000 		.quad	.Lubsan_data538
 18347      00000000 
 18348 76e8 20000000 		.quad	32
 18348      00000000 
 18349 76f0 40000000 		.quad	64
 18349      00000000 
 18350 76f8 00000000 		.quad	.LC204
 18350      00000000 
 18351 7700 00000000 		.quad	.LC0
 18351      00000000 
 18352 7708 00000000 		.quad	0
 18352      00000000 
 18353 7710 00000000 		.quad	0
 18353      00000000 
 18354 7718 00000000 		.quad	0
 18354      00000000 
 18355 7720 00000000 		.quad	.Lubsan_data537
 18355      00000000 
 18356 7728 20000000 		.quad	32
 18356      00000000 
 18357 7730 40000000 		.quad	64
 18357      00000000 
 18358 7738 00000000 		.quad	.LC205
 18358      00000000 
 18359 7740 00000000 		.quad	.LC0
 18359      00000000 
 18360 7748 00000000 		.quad	0
 18360      00000000 
 18361 7750 00000000 		.quad	0
 18361      00000000 
 18362 7758 00000000 		.quad	0
 18362      00000000 
 18363 7760 00000000 		.quad	.Lubsan_data536
 18363      00000000 
 18364 7768 20000000 		.quad	32
 18364      00000000 
 18365 7770 40000000 		.quad	64
 18365      00000000 
 18366 7778 00000000 		.quad	.LC206
 18366      00000000 
 18367 7780 00000000 		.quad	.LC0
 18367      00000000 
 18368 7788 00000000 		.quad	0
 18368      00000000 
 18369 7790 00000000 		.quad	0
 18369      00000000 
 18370 7798 00000000 		.quad	0
 18370      00000000 
 18371 77a0 00000000 		.quad	.Lubsan_data535
 18371      00000000 
 18372 77a8 10000000 		.quad	16
 18372      00000000 
 18373 77b0 40000000 		.quad	64
 18373      00000000 
 18374 77b8 00000000 		.quad	.LC207
 18374      00000000 
 18375 77c0 00000000 		.quad	.LC0
 18375      00000000 
 18376 77c8 00000000 		.quad	0
 18376      00000000 
 18377 77d0 00000000 		.quad	0
 18377      00000000 
 18378 77d8 00000000 		.quad	0
 18378      00000000 
 18379 77e0 00000000 		.quad	.Lubsan_data534
 18379      00000000 
 18380 77e8 20000000 		.quad	32
 18380      00000000 
 18381 77f0 40000000 		.quad	64
 18381      00000000 
 18382 77f8 00000000 		.quad	.LC208
 18382      00000000 
 18383 7800 00000000 		.quad	.LC0
 18383      00000000 
 18384 7808 00000000 		.quad	0
 18384      00000000 
 18385 7810 00000000 		.quad	0
 18385      00000000 
 18386 7818 00000000 		.quad	0
 18386      00000000 
 18387 7820 00000000 		.quad	.Lubsan_data533
 18387      00000000 
 18388 7828 20000000 		.quad	32
 18388      00000000 
 18389 7830 40000000 		.quad	64
 18389      00000000 
 18390 7838 00000000 		.quad	.LC209
 18390      00000000 
 18391 7840 00000000 		.quad	.LC0
 18391      00000000 
 18392 7848 00000000 		.quad	0
 18392      00000000 
 18393 7850 00000000 		.quad	0
 18393      00000000 
 18394 7858 00000000 		.quad	0
 18394      00000000 
 18395 7860 00000000 		.quad	.Lubsan_data532
 18395      00000000 
 18396 7868 20000000 		.quad	32
 18396      00000000 
 18397 7870 40000000 		.quad	64
 18397      00000000 
 18398 7878 00000000 		.quad	.LC210
 18398      00000000 
 18399 7880 00000000 		.quad	.LC0
 18399      00000000 
 18400 7888 00000000 		.quad	0
 18400      00000000 
 18401 7890 00000000 		.quad	0
 18401      00000000 
 18402 7898 00000000 		.quad	0
 18402      00000000 
 18403 78a0 00000000 		.quad	.Lubsan_data531
 18403      00000000 
 18404 78a8 20000000 		.quad	32
 18404      00000000 
 18405 78b0 40000000 		.quad	64
 18405      00000000 
 18406 78b8 00000000 		.quad	.LC211
 18406      00000000 
 18407 78c0 00000000 		.quad	.LC0
 18407      00000000 
 18408 78c8 00000000 		.quad	0
 18408      00000000 
 18409 78d0 00000000 		.quad	0
 18409      00000000 
 18410 78d8 00000000 		.quad	0
 18410      00000000 
 18411 78e0 00000000 		.quad	.Lubsan_data530
 18411      00000000 
 18412 78e8 20000000 		.quad	32
 18412      00000000 
 18413 78f0 40000000 		.quad	64
 18413      00000000 
 18414 78f8 00000000 		.quad	.LC212
 18414      00000000 
 18415 7900 00000000 		.quad	.LC0
 18415      00000000 
 18416 7908 00000000 		.quad	0
 18416      00000000 
 18417 7910 00000000 		.quad	0
 18417      00000000 
 18418 7918 00000000 		.quad	0
 18418      00000000 
 18419 7920 00000000 		.quad	.Lubsan_data529
 18419      00000000 
 18420 7928 10000000 		.quad	16
 18420      00000000 
 18421 7930 40000000 		.quad	64
 18421      00000000 
 18422 7938 00000000 		.quad	.LC213
 18422      00000000 
 18423 7940 00000000 		.quad	.LC0
 18423      00000000 
 18424 7948 00000000 		.quad	0
 18424      00000000 
 18425 7950 00000000 		.quad	0
 18425      00000000 
 18426 7958 00000000 		.quad	0
 18426      00000000 
 18427 7960 00000000 		.quad	.Lubsan_data528
 18427      00000000 
 18428 7968 20000000 		.quad	32
 18428      00000000 
 18429 7970 40000000 		.quad	64
 18429      00000000 
 18430 7978 00000000 		.quad	.LC214
 18430      00000000 
 18431 7980 00000000 		.quad	.LC0
 18431      00000000 
 18432 7988 00000000 		.quad	0
 18432      00000000 
 18433 7990 00000000 		.quad	0
 18433      00000000 
 18434 7998 00000000 		.quad	0
 18434      00000000 
 18435 79a0 00000000 		.quad	.Lubsan_data527
 18435      00000000 
 18436 79a8 20000000 		.quad	32
 18436      00000000 
 18437 79b0 40000000 		.quad	64
 18437      00000000 
 18438 79b8 00000000 		.quad	.LC215
 18438      00000000 
 18439 79c0 00000000 		.quad	.LC0
 18439      00000000 
 18440 79c8 00000000 		.quad	0
 18440      00000000 
 18441 79d0 00000000 		.quad	0
 18441      00000000 
 18442 79d8 00000000 		.quad	0
 18442      00000000 
 18443 79e0 00000000 		.quad	.Lubsan_data526
 18443      00000000 
 18444 79e8 20000000 		.quad	32
 18444      00000000 
 18445 79f0 40000000 		.quad	64
 18445      00000000 
 18446 79f8 00000000 		.quad	.LC216
 18446      00000000 
 18447 7a00 00000000 		.quad	.LC0
 18447      00000000 
 18448 7a08 00000000 		.quad	0
 18448      00000000 
 18449 7a10 00000000 		.quad	0
 18449      00000000 
 18450 7a18 00000000 		.quad	0
 18450      00000000 
 18451 7a20 00000000 		.quad	.Lubsan_data525
 18451      00000000 
 18452 7a28 20000000 		.quad	32
 18452      00000000 
 18453 7a30 40000000 		.quad	64
 18453      00000000 
 18454 7a38 00000000 		.quad	.LC217
 18454      00000000 
 18455 7a40 00000000 		.quad	.LC0
 18455      00000000 
 18456 7a48 00000000 		.quad	0
 18456      00000000 
 18457 7a50 00000000 		.quad	0
 18457      00000000 
 18458 7a58 00000000 		.quad	0
 18458      00000000 
 18459 7a60 00000000 		.quad	.Lubsan_data524
 18459      00000000 
 18460 7a68 10000000 		.quad	16
 18460      00000000 
 18461 7a70 40000000 		.quad	64
 18461      00000000 
 18462 7a78 00000000 		.quad	.LC218
 18462      00000000 
 18463 7a80 00000000 		.quad	.LC0
 18463      00000000 
 18464 7a88 00000000 		.quad	0
 18464      00000000 
 18465 7a90 00000000 		.quad	0
 18465      00000000 
 18466 7a98 00000000 		.quad	0
 18466      00000000 
 18467 7aa0 00000000 		.quad	.Lubsan_data523
 18467      00000000 
 18468 7aa8 20000000 		.quad	32
 18468      00000000 
 18469 7ab0 40000000 		.quad	64
 18469      00000000 
 18470 7ab8 00000000 		.quad	.LC219
 18470      00000000 
 18471 7ac0 00000000 		.quad	.LC0
 18471      00000000 
 18472 7ac8 00000000 		.quad	0
 18472      00000000 
 18473 7ad0 00000000 		.quad	0
 18473      00000000 
 18474 7ad8 00000000 		.quad	0
 18474      00000000 
 18475 7ae0 00000000 		.quad	.Lubsan_data522
 18475      00000000 
 18476 7ae8 20000000 		.quad	32
 18476      00000000 
 18477 7af0 40000000 		.quad	64
 18477      00000000 
 18478 7af8 00000000 		.quad	.LC220
 18478      00000000 
 18479 7b00 00000000 		.quad	.LC0
 18479      00000000 
 18480 7b08 00000000 		.quad	0
 18480      00000000 
 18481 7b10 00000000 		.quad	0
 18481      00000000 
 18482 7b18 00000000 		.quad	0
 18482      00000000 
 18483 7b20 00000000 		.quad	.Lubsan_type40
 18483      00000000 
 18484 7b28 18000000 		.quad	24
 18484      00000000 
 18485 7b30 40000000 		.quad	64
 18485      00000000 
 18486 7b38 00000000 		.quad	.LC221
 18486      00000000 
 18487 7b40 00000000 		.quad	.LC0
 18487      00000000 
 18488 7b48 00000000 		.quad	0
 18488      00000000 
 18489 7b50 00000000 		.quad	0
 18489      00000000 
 18490 7b58 00000000 		.quad	0
 18490      00000000 
 18491 7b60 00000000 		.quad	.Lubsan_data521
 18491      00000000 
 18492 7b68 20000000 		.quad	32
 18492      00000000 
 18493 7b70 40000000 		.quad	64
 18493      00000000 
 18494 7b78 00000000 		.quad	.LC222
 18494      00000000 
 18495 7b80 00000000 		.quad	.LC0
 18495      00000000 
 18496 7b88 00000000 		.quad	0
 18496      00000000 
 18497 7b90 00000000 		.quad	0
 18497      00000000 
 18498 7b98 00000000 		.quad	0
 18498      00000000 
 18499 7ba0 00000000 		.quad	.Lubsan_data520
 18499      00000000 
 18500 7ba8 20000000 		.quad	32
 18500      00000000 
 18501 7bb0 40000000 		.quad	64
 18501      00000000 
 18502 7bb8 00000000 		.quad	.LC223
 18502      00000000 
 18503 7bc0 00000000 		.quad	.LC0
 18503      00000000 
 18504 7bc8 00000000 		.quad	0
 18504      00000000 
 18505 7bd0 00000000 		.quad	0
 18505      00000000 
 18506 7bd8 00000000 		.quad	0
 18506      00000000 
 18507 7be0 00000000 		.quad	.Lubsan_data519
 18507      00000000 
 18508 7be8 20000000 		.quad	32
 18508      00000000 
 18509 7bf0 40000000 		.quad	64
 18509      00000000 
 18510 7bf8 00000000 		.quad	.LC224
 18510      00000000 
 18511 7c00 00000000 		.quad	.LC0
 18511      00000000 
 18512 7c08 00000000 		.quad	0
 18512      00000000 
 18513 7c10 00000000 		.quad	0
 18513      00000000 
 18514 7c18 00000000 		.quad	0
 18514      00000000 
 18515 7c20 00000000 		.quad	.Lubsan_data518
 18515      00000000 
 18516 7c28 10000000 		.quad	16
 18516      00000000 
 18517 7c30 40000000 		.quad	64
 18517      00000000 
 18518 7c38 00000000 		.quad	.LC225
 18518      00000000 
 18519 7c40 00000000 		.quad	.LC0
 18519      00000000 
 18520 7c48 00000000 		.quad	0
 18520      00000000 
 18521 7c50 00000000 		.quad	0
 18521      00000000 
 18522 7c58 00000000 		.quad	0
 18522      00000000 
 18523 7c60 00000000 		.quad	.Lubsan_data517
 18523      00000000 
 18524 7c68 20000000 		.quad	32
 18524      00000000 
 18525 7c70 40000000 		.quad	64
 18525      00000000 
 18526 7c78 00000000 		.quad	.LC226
 18526      00000000 
 18527 7c80 00000000 		.quad	.LC0
 18527      00000000 
 18528 7c88 00000000 		.quad	0
 18528      00000000 
 18529 7c90 00000000 		.quad	0
 18529      00000000 
 18530 7c98 00000000 		.quad	0
 18530      00000000 
 18531 7ca0 00000000 		.quad	.Lubsan_data516
 18531      00000000 
 18532 7ca8 10000000 		.quad	16
 18532      00000000 
 18533 7cb0 40000000 		.quad	64
 18533      00000000 
 18534 7cb8 00000000 		.quad	.LC227
 18534      00000000 
 18535 7cc0 00000000 		.quad	.LC0
 18535      00000000 
 18536 7cc8 00000000 		.quad	0
 18536      00000000 
 18537 7cd0 00000000 		.quad	0
 18537      00000000 
 18538 7cd8 00000000 		.quad	0
 18538      00000000 
 18539 7ce0 00000000 		.quad	.Lubsan_data515
 18539      00000000 
 18540 7ce8 20000000 		.quad	32
 18540      00000000 
 18541 7cf0 40000000 		.quad	64
 18541      00000000 
 18542 7cf8 00000000 		.quad	.LC228
 18542      00000000 
 18543 7d00 00000000 		.quad	.LC0
 18543      00000000 
 18544 7d08 00000000 		.quad	0
 18544      00000000 
 18545 7d10 00000000 		.quad	0
 18545      00000000 
 18546 7d18 00000000 		.quad	0
 18546      00000000 
 18547 7d20 00000000 		.quad	.Lubsan_data514
 18547      00000000 
 18548 7d28 20000000 		.quad	32
 18548      00000000 
 18549 7d30 40000000 		.quad	64
 18549      00000000 
 18550 7d38 00000000 		.quad	.LC229
 18550      00000000 
 18551 7d40 00000000 		.quad	.LC0
 18551      00000000 
 18552 7d48 00000000 		.quad	0
 18552      00000000 
 18553 7d50 00000000 		.quad	0
 18553      00000000 
 18554 7d58 00000000 		.quad	0
 18554      00000000 
 18555 7d60 00000000 		.quad	.Lubsan_data513
 18555      00000000 
 18556 7d68 20000000 		.quad	32
 18556      00000000 
 18557 7d70 40000000 		.quad	64
 18557      00000000 
 18558 7d78 00000000 		.quad	.LC230
 18558      00000000 
 18559 7d80 00000000 		.quad	.LC0
 18559      00000000 
 18560 7d88 00000000 		.quad	0
 18560      00000000 
 18561 7d90 00000000 		.quad	0
 18561      00000000 
 18562 7d98 00000000 		.quad	0
 18562      00000000 
 18563 7da0 00000000 		.quad	.Lubsan_type39
 18563      00000000 
 18564 7da8 17000000 		.quad	23
 18564      00000000 
 18565 7db0 40000000 		.quad	64
 18565      00000000 
 18566 7db8 00000000 		.quad	.LC231
 18566      00000000 
 18567 7dc0 00000000 		.quad	.LC0
 18567      00000000 
 18568 7dc8 00000000 		.quad	0
 18568      00000000 
 18569 7dd0 00000000 		.quad	0
 18569      00000000 
 18570 7dd8 00000000 		.quad	0
 18570      00000000 
 18571 7de0 00000000 		.quad	.Lubsan_data512
 18571      00000000 
 18572 7de8 20000000 		.quad	32
 18572      00000000 
 18573 7df0 40000000 		.quad	64
 18573      00000000 
 18574 7df8 00000000 		.quad	.LC232
 18574      00000000 
 18575 7e00 00000000 		.quad	.LC0
 18575      00000000 
 18576 7e08 00000000 		.quad	0
 18576      00000000 
 18577 7e10 00000000 		.quad	0
 18577      00000000 
 18578 7e18 00000000 		.quad	0
 18578      00000000 
 18579 7e20 00000000 		.quad	.Lubsan_type38
 18579      00000000 
 18580 7e28 1C000000 		.quad	28
 18580      00000000 
 18581 7e30 40000000 		.quad	64
 18581      00000000 
 18582 7e38 00000000 		.quad	.LC233
 18582      00000000 
 18583 7e40 00000000 		.quad	.LC0
 18583      00000000 
 18584 7e48 00000000 		.quad	0
 18584      00000000 
 18585 7e50 00000000 		.quad	0
 18585      00000000 
 18586 7e58 00000000 		.quad	0
 18586      00000000 
 18587 7e60 00000000 		.quad	.Lubsan_data511
 18587      00000000 
 18588 7e68 20000000 		.quad	32
 18588      00000000 
 18589 7e70 40000000 		.quad	64
 18589      00000000 
 18590 7e78 00000000 		.quad	.LC234
 18590      00000000 
 18591 7e80 00000000 		.quad	.LC0
 18591      00000000 
 18592 7e88 00000000 		.quad	0
 18592      00000000 
 18593 7e90 00000000 		.quad	0
 18593      00000000 
 18594 7e98 00000000 		.quad	0
 18594      00000000 
 18595 7ea0 00000000 		.quad	.Lubsan_data510
 18595      00000000 
 18596 7ea8 10000000 		.quad	16
 18596      00000000 
 18597 7eb0 40000000 		.quad	64
 18597      00000000 
 18598 7eb8 00000000 		.quad	.LC235
 18598      00000000 
 18599 7ec0 00000000 		.quad	.LC0
 18599      00000000 
 18600 7ec8 00000000 		.quad	0
 18600      00000000 
 18601 7ed0 00000000 		.quad	0
 18601      00000000 
 18602 7ed8 00000000 		.quad	0
 18602      00000000 
 18603 7ee0 00000000 		.quad	.Lubsan_data509
 18603      00000000 
 18604 7ee8 20000000 		.quad	32
 18604      00000000 
 18605 7ef0 40000000 		.quad	64
 18605      00000000 
 18606 7ef8 00000000 		.quad	.LC236
 18606      00000000 
 18607 7f00 00000000 		.quad	.LC0
 18607      00000000 
 18608 7f08 00000000 		.quad	0
 18608      00000000 
 18609 7f10 00000000 		.quad	0
 18609      00000000 
 18610 7f18 00000000 		.quad	0
 18610      00000000 
 18611 7f20 00000000 		.quad	.Lubsan_data508
 18611      00000000 
 18612 7f28 20000000 		.quad	32
 18612      00000000 
 18613 7f30 40000000 		.quad	64
 18613      00000000 
 18614 7f38 00000000 		.quad	.LC237
 18614      00000000 
 18615 7f40 00000000 		.quad	.LC0
 18615      00000000 
 18616 7f48 00000000 		.quad	0
 18616      00000000 
 18617 7f50 00000000 		.quad	0
 18617      00000000 
 18618 7f58 00000000 		.quad	0
 18618      00000000 
 18619 7f60 00000000 		.quad	.Lubsan_data507
 18619      00000000 
 18620 7f68 20000000 		.quad	32
 18620      00000000 
 18621 7f70 40000000 		.quad	64
 18621      00000000 
 18622 7f78 00000000 		.quad	.LC238
 18622      00000000 
 18623 7f80 00000000 		.quad	.LC0
 18623      00000000 
 18624 7f88 00000000 		.quad	0
 18624      00000000 
 18625 7f90 00000000 		.quad	0
 18625      00000000 
 18626 7f98 00000000 		.quad	0
 18626      00000000 
 18627 7fa0 00000000 		.quad	.Lubsan_data506
 18627      00000000 
 18628 7fa8 20000000 		.quad	32
 18628      00000000 
 18629 7fb0 40000000 		.quad	64
 18629      00000000 
 18630 7fb8 00000000 		.quad	.LC239
 18630      00000000 
 18631 7fc0 00000000 		.quad	.LC0
 18631      00000000 
 18632 7fc8 00000000 		.quad	0
 18632      00000000 
 18633 7fd0 00000000 		.quad	0
 18633      00000000 
 18634 7fd8 00000000 		.quad	0
 18634      00000000 
 18635 7fe0 00000000 		.quad	.Lubsan_data505
 18635      00000000 
 18636 7fe8 20000000 		.quad	32
 18636      00000000 
 18637 7ff0 40000000 		.quad	64
 18637      00000000 
 18638 7ff8 00000000 		.quad	.LC240
 18638      00000000 
 18639 8000 00000000 		.quad	.LC0
 18639      00000000 
 18640 8008 00000000 		.quad	0
 18640      00000000 
 18641 8010 00000000 		.quad	0
 18641      00000000 
 18642 8018 00000000 		.quad	0
 18642      00000000 
 18643 8020 00000000 		.quad	.Lubsan_data504
 18643      00000000 
 18644 8028 10000000 		.quad	16
 18644      00000000 
 18645 8030 40000000 		.quad	64
 18645      00000000 
 18646 8038 00000000 		.quad	.LC241
 18646      00000000 
 18647 8040 00000000 		.quad	.LC0
 18647      00000000 
 18648 8048 00000000 		.quad	0
 18648      00000000 
 18649 8050 00000000 		.quad	0
 18649      00000000 
 18650 8058 00000000 		.quad	0
 18650      00000000 
 18651 8060 00000000 		.quad	.Lubsan_data503
 18651      00000000 
 18652 8068 20000000 		.quad	32
 18652      00000000 
 18653 8070 40000000 		.quad	64
 18653      00000000 
 18654 8078 00000000 		.quad	.LC242
 18654      00000000 
 18655 8080 00000000 		.quad	.LC0
 18655      00000000 
 18656 8088 00000000 		.quad	0
 18656      00000000 
 18657 8090 00000000 		.quad	0
 18657      00000000 
 18658 8098 00000000 		.quad	0
 18658      00000000 
 18659 80a0 00000000 		.quad	.Lubsan_data502
 18659      00000000 
 18660 80a8 10000000 		.quad	16
 18660      00000000 
 18661 80b0 40000000 		.quad	64
 18661      00000000 
 18662 80b8 00000000 		.quad	.LC243
 18662      00000000 
 18663 80c0 00000000 		.quad	.LC0
 18663      00000000 
 18664 80c8 00000000 		.quad	0
 18664      00000000 
 18665 80d0 00000000 		.quad	0
 18665      00000000 
 18666 80d8 00000000 		.quad	0
 18666      00000000 
 18667 80e0 00000000 		.quad	.Lubsan_data501
 18667      00000000 
 18668 80e8 20000000 		.quad	32
 18668      00000000 
 18669 80f0 40000000 		.quad	64
 18669      00000000 
 18670 80f8 00000000 		.quad	.LC244
 18670      00000000 
 18671 8100 00000000 		.quad	.LC0
 18671      00000000 
 18672 8108 00000000 		.quad	0
 18672      00000000 
 18673 8110 00000000 		.quad	0
 18673      00000000 
 18674 8118 00000000 		.quad	0
 18674      00000000 
 18675 8120 00000000 		.quad	.Lubsan_data500
 18675      00000000 
 18676 8128 20000000 		.quad	32
 18676      00000000 
 18677 8130 40000000 		.quad	64
 18677      00000000 
 18678 8138 00000000 		.quad	.LC245
 18678      00000000 
 18679 8140 00000000 		.quad	.LC0
 18679      00000000 
 18680 8148 00000000 		.quad	0
 18680      00000000 
 18681 8150 00000000 		.quad	0
 18681      00000000 
 18682 8158 00000000 		.quad	0
 18682      00000000 
 18683 8160 00000000 		.quad	.Lubsan_data499
 18683      00000000 
 18684 8168 20000000 		.quad	32
 18684      00000000 
 18685 8170 40000000 		.quad	64
 18685      00000000 
 18686 8178 00000000 		.quad	.LC246
 18686      00000000 
 18687 8180 00000000 		.quad	.LC0
 18687      00000000 
 18688 8188 00000000 		.quad	0
 18688      00000000 
 18689 8190 00000000 		.quad	0
 18689      00000000 
 18690 8198 00000000 		.quad	0
 18690      00000000 
 18691 81a0 00000000 		.quad	.Lubsan_type37
 18691      00000000 
 18692 81a8 22000000 		.quad	34
 18692      00000000 
 18693 81b0 60000000 		.quad	96
 18693      00000000 
 18694 81b8 00000000 		.quad	.LC247
 18694      00000000 
 18695 81c0 00000000 		.quad	.LC0
 18695      00000000 
 18696 81c8 00000000 		.quad	0
 18696      00000000 
 18697 81d0 00000000 		.quad	0
 18697      00000000 
 18698 81d8 00000000 		.quad	0
 18698      00000000 
 18699 81e0 00000000 		.quad	.Lubsan_data498
 18699      00000000 
 18700 81e8 20000000 		.quad	32
 18700      00000000 
 18701 81f0 40000000 		.quad	64
 18701      00000000 
 18702 81f8 00000000 		.quad	.LC248
 18702      00000000 
 18703 8200 00000000 		.quad	.LC0
 18703      00000000 
 18704 8208 00000000 		.quad	0
 18704      00000000 
 18705 8210 00000000 		.quad	0
 18705      00000000 
 18706 8218 00000000 		.quad	0
 18706      00000000 
 18707 8220 00000000 		.quad	.Lubsan_data497
 18707      00000000 
 18708 8228 20000000 		.quad	32
 18708      00000000 
 18709 8230 40000000 		.quad	64
 18709      00000000 
 18710 8238 00000000 		.quad	.LC249
 18710      00000000 
 18711 8240 00000000 		.quad	.LC0
 18711      00000000 
 18712 8248 00000000 		.quad	0
 18712      00000000 
 18713 8250 00000000 		.quad	0
 18713      00000000 
 18714 8258 00000000 		.quad	0
 18714      00000000 
 18715 8260 00000000 		.quad	.Lubsan_data496
 18715      00000000 
 18716 8268 20000000 		.quad	32
 18716      00000000 
 18717 8270 40000000 		.quad	64
 18717      00000000 
 18718 8278 00000000 		.quad	.LC250
 18718      00000000 
 18719 8280 00000000 		.quad	.LC0
 18719      00000000 
 18720 8288 00000000 		.quad	0
 18720      00000000 
 18721 8290 00000000 		.quad	0
 18721      00000000 
 18722 8298 00000000 		.quad	0
 18722      00000000 
 18723 82a0 00000000 		.quad	.Lubsan_data495
 18723      00000000 
 18724 82a8 20000000 		.quad	32
 18724      00000000 
 18725 82b0 40000000 		.quad	64
 18725      00000000 
 18726 82b8 00000000 		.quad	.LC251
 18726      00000000 
 18727 82c0 00000000 		.quad	.LC0
 18727      00000000 
 18728 82c8 00000000 		.quad	0
 18728      00000000 
 18729 82d0 00000000 		.quad	0
 18729      00000000 
 18730 82d8 00000000 		.quad	0
 18730      00000000 
 18731 82e0 00000000 		.quad	.Lubsan_data494
 18731      00000000 
 18732 82e8 10000000 		.quad	16
 18732      00000000 
 18733 82f0 40000000 		.quad	64
 18733      00000000 
 18734 82f8 00000000 		.quad	.LC252
 18734      00000000 
 18735 8300 00000000 		.quad	.LC0
 18735      00000000 
 18736 8308 00000000 		.quad	0
 18736      00000000 
 18737 8310 00000000 		.quad	0
 18737      00000000 
 18738 8318 00000000 		.quad	0
 18738      00000000 
 18739 8320 00000000 		.quad	.Lubsan_data493
 18739      00000000 
 18740 8328 20000000 		.quad	32
 18740      00000000 
 18741 8330 40000000 		.quad	64
 18741      00000000 
 18742 8338 00000000 		.quad	.LC253
 18742      00000000 
 18743 8340 00000000 		.quad	.LC0
 18743      00000000 
 18744 8348 00000000 		.quad	0
 18744      00000000 
 18745 8350 00000000 		.quad	0
 18745      00000000 
 18746 8358 00000000 		.quad	0
 18746      00000000 
 18747 8360 00000000 		.quad	.Lubsan_data492
 18747      00000000 
 18748 8368 20000000 		.quad	32
 18748      00000000 
 18749 8370 40000000 		.quad	64
 18749      00000000 
 18750 8378 00000000 		.quad	.LC254
 18750      00000000 
 18751 8380 00000000 		.quad	.LC0
 18751      00000000 
 18752 8388 00000000 		.quad	0
 18752      00000000 
 18753 8390 00000000 		.quad	0
 18753      00000000 
 18754 8398 00000000 		.quad	0
 18754      00000000 
 18755 83a0 00000000 		.quad	.Lubsan_data491
 18755      00000000 
 18756 83a8 20000000 		.quad	32
 18756      00000000 
 18757 83b0 40000000 		.quad	64
 18757      00000000 
 18758 83b8 00000000 		.quad	.LC255
 18758      00000000 
 18759 83c0 00000000 		.quad	.LC0
 18759      00000000 
 18760 83c8 00000000 		.quad	0
 18760      00000000 
 18761 83d0 00000000 		.quad	0
 18761      00000000 
 18762 83d8 00000000 		.quad	0
 18762      00000000 
 18763 83e0 00000000 		.quad	.Lubsan_type36
 18763      00000000 
 18764 83e8 24000000 		.quad	36
 18764      00000000 
 18765 83f0 60000000 		.quad	96
 18765      00000000 
 18766 83f8 00000000 		.quad	.LC256
 18766      00000000 
 18767 8400 00000000 		.quad	.LC0
 18767      00000000 
 18768 8408 00000000 		.quad	0
 18768      00000000 
 18769 8410 00000000 		.quad	0
 18769      00000000 
 18770 8418 00000000 		.quad	0
 18770      00000000 
 18771 8420 00000000 		.quad	.Lubsan_data490
 18771      00000000 
 18772 8428 20000000 		.quad	32
 18772      00000000 
 18773 8430 40000000 		.quad	64
 18773      00000000 
 18774 8438 00000000 		.quad	.LC257
 18774      00000000 
 18775 8440 00000000 		.quad	.LC0
 18775      00000000 
 18776 8448 00000000 		.quad	0
 18776      00000000 
 18777 8450 00000000 		.quad	0
 18777      00000000 
 18778 8458 00000000 		.quad	0
 18778      00000000 
 18779 8460 00000000 		.quad	.Lubsan_type35
 18779      00000000 
 18780 8468 22000000 		.quad	34
 18780      00000000 
 18781 8470 60000000 		.quad	96
 18781      00000000 
 18782 8478 00000000 		.quad	.LC258
 18782      00000000 
 18783 8480 00000000 		.quad	.LC0
 18783      00000000 
 18784 8488 00000000 		.quad	0
 18784      00000000 
 18785 8490 00000000 		.quad	0
 18785      00000000 
 18786 8498 00000000 		.quad	0
 18786      00000000 
 18787 84a0 00000000 		.quad	.Lubsan_data489
 18787      00000000 
 18788 84a8 20000000 		.quad	32
 18788      00000000 
 18789 84b0 40000000 		.quad	64
 18789      00000000 
 18790 84b8 00000000 		.quad	.LC259
 18790      00000000 
 18791 84c0 00000000 		.quad	.LC0
 18791      00000000 
 18792 84c8 00000000 		.quad	0
 18792      00000000 
 18793 84d0 00000000 		.quad	0
 18793      00000000 
 18794 84d8 00000000 		.quad	0
 18794      00000000 
 18795 84e0 00000000 		.quad	.Lubsan_data488
 18795      00000000 
 18796 84e8 20000000 		.quad	32
 18796      00000000 
 18797 84f0 40000000 		.quad	64
 18797      00000000 
 18798 84f8 00000000 		.quad	.LC260
 18798      00000000 
 18799 8500 00000000 		.quad	.LC0
 18799      00000000 
 18800 8508 00000000 		.quad	0
 18800      00000000 
 18801 8510 00000000 		.quad	0
 18801      00000000 
 18802 8518 00000000 		.quad	0
 18802      00000000 
 18803 8520 00000000 		.quad	.Lubsan_data487
 18803      00000000 
 18804 8528 20000000 		.quad	32
 18804      00000000 
 18805 8530 40000000 		.quad	64
 18805      00000000 
 18806 8538 00000000 		.quad	.LC261
 18806      00000000 
 18807 8540 00000000 		.quad	.LC0
 18807      00000000 
 18808 8548 00000000 		.quad	0
 18808      00000000 
 18809 8550 00000000 		.quad	0
 18809      00000000 
 18810 8558 00000000 		.quad	0
 18810      00000000 
 18811 8560 00000000 		.quad	.Lubsan_data486
 18811      00000000 
 18812 8568 20000000 		.quad	32
 18812      00000000 
 18813 8570 40000000 		.quad	64
 18813      00000000 
 18814 8578 00000000 		.quad	.LC262
 18814      00000000 
 18815 8580 00000000 		.quad	.LC0
 18815      00000000 
 18816 8588 00000000 		.quad	0
 18816      00000000 
 18817 8590 00000000 		.quad	0
 18817      00000000 
 18818 8598 00000000 		.quad	0
 18818      00000000 
 18819 85a0 00000000 		.quad	.Lubsan_type34
 18819      00000000 
 18820 85a8 12000000 		.quad	18
 18820      00000000 
 18821 85b0 40000000 		.quad	64
 18821      00000000 
 18822 85b8 00000000 		.quad	.LC263
 18822      00000000 
 18823 85c0 00000000 		.quad	.LC0
 18823      00000000 
 18824 85c8 00000000 		.quad	0
 18824      00000000 
 18825 85d0 00000000 		.quad	0
 18825      00000000 
 18826 85d8 00000000 		.quad	0
 18826      00000000 
 18827 85e0 00000000 		.quad	.Lubsan_data485
 18827      00000000 
 18828 85e8 20000000 		.quad	32
 18828      00000000 
 18829 85f0 40000000 		.quad	64
 18829      00000000 
 18830 85f8 00000000 		.quad	.LC264
 18830      00000000 
 18831 8600 00000000 		.quad	.LC0
 18831      00000000 
 18832 8608 00000000 		.quad	0
 18832      00000000 
 18833 8610 00000000 		.quad	0
 18833      00000000 
 18834 8618 00000000 		.quad	0
 18834      00000000 
 18835 8620 00000000 		.quad	.Lubsan_data484
 18835      00000000 
 18836 8628 20000000 		.quad	32
 18836      00000000 
 18837 8630 40000000 		.quad	64
 18837      00000000 
 18838 8638 00000000 		.quad	.LC265
 18838      00000000 
 18839 8640 00000000 		.quad	.LC0
 18839      00000000 
 18840 8648 00000000 		.quad	0
 18840      00000000 
 18841 8650 00000000 		.quad	0
 18841      00000000 
 18842 8658 00000000 		.quad	0
 18842      00000000 
 18843 8660 00000000 		.quad	.Lubsan_type33
 18843      00000000 
 18844 8668 16000000 		.quad	22
 18844      00000000 
 18845 8670 40000000 		.quad	64
 18845      00000000 
 18846 8678 00000000 		.quad	.LC266
 18846      00000000 
 18847 8680 00000000 		.quad	.LC0
 18847      00000000 
 18848 8688 00000000 		.quad	0
 18848      00000000 
 18849 8690 00000000 		.quad	0
 18849      00000000 
 18850 8698 00000000 		.quad	0
 18850      00000000 
 18851 86a0 00000000 		.quad	.Lubsan_data483
 18851      00000000 
 18852 86a8 20000000 		.quad	32
 18852      00000000 
 18853 86b0 40000000 		.quad	64
 18853      00000000 
 18854 86b8 00000000 		.quad	.LC267
 18854      00000000 
 18855 86c0 00000000 		.quad	.LC0
 18855      00000000 
 18856 86c8 00000000 		.quad	0
 18856      00000000 
 18857 86d0 00000000 		.quad	0
 18857      00000000 
 18858 86d8 00000000 		.quad	0
 18858      00000000 
 18859 86e0 00000000 		.quad	.Lubsan_data482
 18859      00000000 
 18860 86e8 20000000 		.quad	32
 18860      00000000 
 18861 86f0 40000000 		.quad	64
 18861      00000000 
 18862 86f8 00000000 		.quad	.LC268
 18862      00000000 
 18863 8700 00000000 		.quad	.LC0
 18863      00000000 
 18864 8708 00000000 		.quad	0
 18864      00000000 
 18865 8710 00000000 		.quad	0
 18865      00000000 
 18866 8718 00000000 		.quad	0
 18866      00000000 
 18867 8720 00000000 		.quad	.Lubsan_type32
 18867      00000000 
 18868 8728 25000000 		.quad	37
 18868      00000000 
 18869 8730 60000000 		.quad	96
 18869      00000000 
 18870 8738 00000000 		.quad	.LC269
 18870      00000000 
 18871 8740 00000000 		.quad	.LC0
 18871      00000000 
 18872 8748 00000000 		.quad	0
 18872      00000000 
 18873 8750 00000000 		.quad	0
 18873      00000000 
 18874 8758 00000000 		.quad	0
 18874      00000000 
 18875 8760 00000000 		.quad	.Lubsan_data481
 18875      00000000 
 18876 8768 20000000 		.quad	32
 18876      00000000 
 18877 8770 40000000 		.quad	64
 18877      00000000 
 18878 8778 00000000 		.quad	.LC270
 18878      00000000 
 18879 8780 00000000 		.quad	.LC0
 18879      00000000 
 18880 8788 00000000 		.quad	0
 18880      00000000 
 18881 8790 00000000 		.quad	0
 18881      00000000 
 18882 8798 00000000 		.quad	0
 18882      00000000 
 18883 87a0 00000000 		.quad	.Lubsan_data480
 18883      00000000 
 18884 87a8 20000000 		.quad	32
 18884      00000000 
 18885 87b0 40000000 		.quad	64
 18885      00000000 
 18886 87b8 00000000 		.quad	.LC271
 18886      00000000 
 18887 87c0 00000000 		.quad	.LC0
 18887      00000000 
 18888 87c8 00000000 		.quad	0
 18888      00000000 
 18889 87d0 00000000 		.quad	0
 18889      00000000 
 18890 87d8 00000000 		.quad	0
 18890      00000000 
 18891 87e0 00000000 		.quad	.Lubsan_data479
 18891      00000000 
 18892 87e8 20000000 		.quad	32
 18892      00000000 
 18893 87f0 40000000 		.quad	64
 18893      00000000 
 18894 87f8 00000000 		.quad	.LC272
 18894      00000000 
 18895 8800 00000000 		.quad	.LC0
 18895      00000000 
 18896 8808 00000000 		.quad	0
 18896      00000000 
 18897 8810 00000000 		.quad	0
 18897      00000000 
 18898 8818 00000000 		.quad	0
 18898      00000000 
 18899 8820 00000000 		.quad	.Lubsan_type31
 18899      00000000 
 18900 8828 1F000000 		.quad	31
 18900      00000000 
 18901 8830 40000000 		.quad	64
 18901      00000000 
 18902 8838 00000000 		.quad	.LC273
 18902      00000000 
 18903 8840 00000000 		.quad	.LC0
 18903      00000000 
 18904 8848 00000000 		.quad	0
 18904      00000000 
 18905 8850 00000000 		.quad	0
 18905      00000000 
 18906 8858 00000000 		.quad	0
 18906      00000000 
 18907 8860 00000000 		.quad	.Lubsan_data478
 18907      00000000 
 18908 8868 20000000 		.quad	32
 18908      00000000 
 18909 8870 40000000 		.quad	64
 18909      00000000 
 18910 8878 00000000 		.quad	.LC274
 18910      00000000 
 18911 8880 00000000 		.quad	.LC0
 18911      00000000 
 18912 8888 00000000 		.quad	0
 18912      00000000 
 18913 8890 00000000 		.quad	0
 18913      00000000 
 18914 8898 00000000 		.quad	0
 18914      00000000 
 18915 88a0 00000000 		.quad	.Lubsan_data477
 18915      00000000 
 18916 88a8 20000000 		.quad	32
 18916      00000000 
 18917 88b0 40000000 		.quad	64
 18917      00000000 
 18918 88b8 00000000 		.quad	.LC275
 18918      00000000 
 18919 88c0 00000000 		.quad	.LC0
 18919      00000000 
 18920 88c8 00000000 		.quad	0
 18920      00000000 
 18921 88d0 00000000 		.quad	0
 18921      00000000 
 18922 88d8 00000000 		.quad	0
 18922      00000000 
 18923 88e0 00000000 		.quad	.Lubsan_data476
 18923      00000000 
 18924 88e8 20000000 		.quad	32
 18924      00000000 
 18925 88f0 40000000 		.quad	64
 18925      00000000 
 18926 88f8 00000000 		.quad	.LC276
 18926      00000000 
 18927 8900 00000000 		.quad	.LC0
 18927      00000000 
 18928 8908 00000000 		.quad	0
 18928      00000000 
 18929 8910 00000000 		.quad	0
 18929      00000000 
 18930 8918 00000000 		.quad	0
 18930      00000000 
 18931 8920 00000000 		.quad	.Lubsan_type30
 18931      00000000 
 18932 8928 17000000 		.quad	23
 18932      00000000 
 18933 8930 40000000 		.quad	64
 18933      00000000 
 18934 8938 00000000 		.quad	.LC277
 18934      00000000 
 18935 8940 00000000 		.quad	.LC0
 18935      00000000 
 18936 8948 00000000 		.quad	0
 18936      00000000 
 18937 8950 00000000 		.quad	0
 18937      00000000 
 18938 8958 00000000 		.quad	0
 18938      00000000 
 18939 8960 00000000 		.quad	.Lubsan_data475
 18939      00000000 
 18940 8968 20000000 		.quad	32
 18940      00000000 
 18941 8970 40000000 		.quad	64
 18941      00000000 
 18942 8978 00000000 		.quad	.LC278
 18942      00000000 
 18943 8980 00000000 		.quad	.LC0
 18943      00000000 
 18944 8988 00000000 		.quad	0
 18944      00000000 
 18945 8990 00000000 		.quad	0
 18945      00000000 
 18946 8998 00000000 		.quad	0
 18946      00000000 
 18947 89a0 00000000 		.quad	.Lubsan_type29
 18947      00000000 
 18948 89a8 1C000000 		.quad	28
 18948      00000000 
 18949 89b0 40000000 		.quad	64
 18949      00000000 
 18950 89b8 00000000 		.quad	.LC279
 18950      00000000 
 18951 89c0 00000000 		.quad	.LC0
 18951      00000000 
 18952 89c8 00000000 		.quad	0
 18952      00000000 
 18953 89d0 00000000 		.quad	0
 18953      00000000 
 18954 89d8 00000000 		.quad	0
 18954      00000000 
 18955 89e0 00000000 		.quad	.Lubsan_data474
 18955      00000000 
 18956 89e8 20000000 		.quad	32
 18956      00000000 
 18957 89f0 40000000 		.quad	64
 18957      00000000 
 18958 89f8 00000000 		.quad	.LC280
 18958      00000000 
 18959 8a00 00000000 		.quad	.LC0
 18959      00000000 
 18960 8a08 00000000 		.quad	0
 18960      00000000 
 18961 8a10 00000000 		.quad	0
 18961      00000000 
 18962 8a18 00000000 		.quad	0
 18962      00000000 
 18963 8a20 00000000 		.quad	.Lubsan_data473
 18963      00000000 
 18964 8a28 20000000 		.quad	32
 18964      00000000 
 18965 8a30 40000000 		.quad	64
 18965      00000000 
 18966 8a38 00000000 		.quad	.LC281
 18966      00000000 
 18967 8a40 00000000 		.quad	.LC0
 18967      00000000 
 18968 8a48 00000000 		.quad	0
 18968      00000000 
 18969 8a50 00000000 		.quad	0
 18969      00000000 
 18970 8a58 00000000 		.quad	0
 18970      00000000 
 18971 8a60 00000000 		.quad	.Lubsan_data472
 18971      00000000 
 18972 8a68 20000000 		.quad	32
 18972      00000000 
 18973 8a70 40000000 		.quad	64
 18973      00000000 
 18974 8a78 00000000 		.quad	.LC282
 18974      00000000 
 18975 8a80 00000000 		.quad	.LC0
 18975      00000000 
 18976 8a88 00000000 		.quad	0
 18976      00000000 
 18977 8a90 00000000 		.quad	0
 18977      00000000 
 18978 8a98 00000000 		.quad	0
 18978      00000000 
 18979 8aa0 00000000 		.quad	.Lubsan_data471
 18979      00000000 
 18980 8aa8 20000000 		.quad	32
 18980      00000000 
 18981 8ab0 40000000 		.quad	64
 18981      00000000 
 18982 8ab8 00000000 		.quad	.LC283
 18982      00000000 
 18983 8ac0 00000000 		.quad	.LC0
 18983      00000000 
 18984 8ac8 00000000 		.quad	0
 18984      00000000 
 18985 8ad0 00000000 		.quad	0
 18985      00000000 
 18986 8ad8 00000000 		.quad	0
 18986      00000000 
 18987 8ae0 00000000 		.quad	.Lubsan_data470
 18987      00000000 
 18988 8ae8 10000000 		.quad	16
 18988      00000000 
 18989 8af0 40000000 		.quad	64
 18989      00000000 
 18990 8af8 00000000 		.quad	.LC284
 18990      00000000 
 18991 8b00 00000000 		.quad	.LC0
 18991      00000000 
 18992 8b08 00000000 		.quad	0
 18992      00000000 
 18993 8b10 00000000 		.quad	0
 18993      00000000 
 18994 8b18 00000000 		.quad	0
 18994      00000000 
 18995 8b20 00000000 		.quad	.Lubsan_data469
 18995      00000000 
 18996 8b28 20000000 		.quad	32
 18996      00000000 
 18997 8b30 40000000 		.quad	64
 18997      00000000 
 18998 8b38 00000000 		.quad	.LC285
 18998      00000000 
 18999 8b40 00000000 		.quad	.LC0
 18999      00000000 
 19000 8b48 00000000 		.quad	0
 19000      00000000 
 19001 8b50 00000000 		.quad	0
 19001      00000000 
 19002 8b58 00000000 		.quad	0
 19002      00000000 
 19003 8b60 00000000 		.quad	.Lubsan_data468
 19003      00000000 
 19004 8b68 10000000 		.quad	16
 19004      00000000 
 19005 8b70 40000000 		.quad	64
 19005      00000000 
 19006 8b78 00000000 		.quad	.LC286
 19006      00000000 
 19007 8b80 00000000 		.quad	.LC0
 19007      00000000 
 19008 8b88 00000000 		.quad	0
 19008      00000000 
 19009 8b90 00000000 		.quad	0
 19009      00000000 
 19010 8b98 00000000 		.quad	0
 19010      00000000 
 19011 8ba0 00000000 		.quad	.Lubsan_data467
 19011      00000000 
 19012 8ba8 10000000 		.quad	16
 19012      00000000 
 19013 8bb0 40000000 		.quad	64
 19013      00000000 
 19014 8bb8 00000000 		.quad	.LC287
 19014      00000000 
 19015 8bc0 00000000 		.quad	.LC0
 19015      00000000 
 19016 8bc8 00000000 		.quad	0
 19016      00000000 
 19017 8bd0 00000000 		.quad	0
 19017      00000000 
 19018 8bd8 00000000 		.quad	0
 19018      00000000 
 19019 8be0 00000000 		.quad	.Lubsan_data466
 19019      00000000 
 19020 8be8 20000000 		.quad	32
 19020      00000000 
 19021 8bf0 40000000 		.quad	64
 19021      00000000 
 19022 8bf8 00000000 		.quad	.LC288
 19022      00000000 
 19023 8c00 00000000 		.quad	.LC0
 19023      00000000 
 19024 8c08 00000000 		.quad	0
 19024      00000000 
 19025 8c10 00000000 		.quad	0
 19025      00000000 
 19026 8c18 00000000 		.quad	0
 19026      00000000 
 19027 8c20 00000000 		.quad	.Lubsan_data465
 19027      00000000 
 19028 8c28 20000000 		.quad	32
 19028      00000000 
 19029 8c30 40000000 		.quad	64
 19029      00000000 
 19030 8c38 00000000 		.quad	.LC289
 19030      00000000 
 19031 8c40 00000000 		.quad	.LC0
 19031      00000000 
 19032 8c48 00000000 		.quad	0
 19032      00000000 
 19033 8c50 00000000 		.quad	0
 19033      00000000 
 19034 8c58 00000000 		.quad	0
 19034      00000000 
 19035 8c60 00000000 		.quad	.Lubsan_type28
 19035      00000000 
 19036 8c68 1C000000 		.quad	28
 19036      00000000 
 19037 8c70 40000000 		.quad	64
 19037      00000000 
 19038 8c78 00000000 		.quad	.LC290
 19038      00000000 
 19039 8c80 00000000 		.quad	.LC0
 19039      00000000 
 19040 8c88 00000000 		.quad	0
 19040      00000000 
 19041 8c90 00000000 		.quad	0
 19041      00000000 
 19042 8c98 00000000 		.quad	0
 19042      00000000 
 19043 8ca0 00000000 		.quad	.Lubsan_data464
 19043      00000000 
 19044 8ca8 20000000 		.quad	32
 19044      00000000 
 19045 8cb0 40000000 		.quad	64
 19045      00000000 
 19046 8cb8 00000000 		.quad	.LC291
 19046      00000000 
 19047 8cc0 00000000 		.quad	.LC0
 19047      00000000 
 19048 8cc8 00000000 		.quad	0
 19048      00000000 
 19049 8cd0 00000000 		.quad	0
 19049      00000000 
 19050 8cd8 00000000 		.quad	0
 19050      00000000 
 19051 8ce0 00000000 		.quad	.Lubsan_data463
 19051      00000000 
 19052 8ce8 10000000 		.quad	16
 19052      00000000 
 19053 8cf0 40000000 		.quad	64
 19053      00000000 
 19054 8cf8 00000000 		.quad	.LC292
 19054      00000000 
 19055 8d00 00000000 		.quad	.LC0
 19055      00000000 
 19056 8d08 00000000 		.quad	0
 19056      00000000 
 19057 8d10 00000000 		.quad	0
 19057      00000000 
 19058 8d18 00000000 		.quad	0
 19058      00000000 
 19059 8d20 00000000 		.quad	.Lubsan_data462
 19059      00000000 
 19060 8d28 20000000 		.quad	32
 19060      00000000 
 19061 8d30 40000000 		.quad	64
 19061      00000000 
 19062 8d38 00000000 		.quad	.LC293
 19062      00000000 
 19063 8d40 00000000 		.quad	.LC0
 19063      00000000 
 19064 8d48 00000000 		.quad	0
 19064      00000000 
 19065 8d50 00000000 		.quad	0
 19065      00000000 
 19066 8d58 00000000 		.quad	0
 19066      00000000 
 19067 8d60 00000000 		.quad	.Lubsan_data461
 19067      00000000 
 19068 8d68 20000000 		.quad	32
 19068      00000000 
 19069 8d70 40000000 		.quad	64
 19069      00000000 
 19070 8d78 00000000 		.quad	.LC294
 19070      00000000 
 19071 8d80 00000000 		.quad	.LC0
 19071      00000000 
 19072 8d88 00000000 		.quad	0
 19072      00000000 
 19073 8d90 00000000 		.quad	0
 19073      00000000 
 19074 8d98 00000000 		.quad	0
 19074      00000000 
 19075 8da0 00000000 		.quad	.Lubsan_data460
 19075      00000000 
 19076 8da8 10000000 		.quad	16
 19076      00000000 
 19077 8db0 40000000 		.quad	64
 19077      00000000 
 19078 8db8 00000000 		.quad	.LC295
 19078      00000000 
 19079 8dc0 00000000 		.quad	.LC0
 19079      00000000 
 19080 8dc8 00000000 		.quad	0
 19080      00000000 
 19081 8dd0 00000000 		.quad	0
 19081      00000000 
 19082 8dd8 00000000 		.quad	0
 19082      00000000 
 19083 8de0 00000000 		.quad	.Lubsan_data459
 19083      00000000 
 19084 8de8 20000000 		.quad	32
 19084      00000000 
 19085 8df0 40000000 		.quad	64
 19085      00000000 
 19086 8df8 00000000 		.quad	.LC296
 19086      00000000 
 19087 8e00 00000000 		.quad	.LC0
 19087      00000000 
 19088 8e08 00000000 		.quad	0
 19088      00000000 
 19089 8e10 00000000 		.quad	0
 19089      00000000 
 19090 8e18 00000000 		.quad	0
 19090      00000000 
 19091 8e20 00000000 		.quad	.Lubsan_data458
 19091      00000000 
 19092 8e28 10000000 		.quad	16
 19092      00000000 
 19093 8e30 40000000 		.quad	64
 19093      00000000 
 19094 8e38 00000000 		.quad	.LC297
 19094      00000000 
 19095 8e40 00000000 		.quad	.LC0
 19095      00000000 
 19096 8e48 00000000 		.quad	0
 19096      00000000 
 19097 8e50 00000000 		.quad	0
 19097      00000000 
 19098 8e58 00000000 		.quad	0
 19098      00000000 
 19099 8e60 00000000 		.quad	.Lubsan_data457
 19099      00000000 
 19100 8e68 20000000 		.quad	32
 19100      00000000 
 19101 8e70 40000000 		.quad	64
 19101      00000000 
 19102 8e78 00000000 		.quad	.LC298
 19102      00000000 
 19103 8e80 00000000 		.quad	.LC0
 19103      00000000 
 19104 8e88 00000000 		.quad	0
 19104      00000000 
 19105 8e90 00000000 		.quad	0
 19105      00000000 
 19106 8e98 00000000 		.quad	0
 19106      00000000 
 19107 8ea0 00000000 		.quad	.Lubsan_data456
 19107      00000000 
 19108 8ea8 20000000 		.quad	32
 19108      00000000 
 19109 8eb0 40000000 		.quad	64
 19109      00000000 
 19110 8eb8 00000000 		.quad	.LC299
 19110      00000000 
 19111 8ec0 00000000 		.quad	.LC0
 19111      00000000 
 19112 8ec8 00000000 		.quad	0
 19112      00000000 
 19113 8ed0 00000000 		.quad	0
 19113      00000000 
 19114 8ed8 00000000 		.quad	0
 19114      00000000 
 19115 8ee0 00000000 		.quad	.Lubsan_type27
 19115      00000000 
 19116 8ee8 18000000 		.quad	24
 19116      00000000 
 19117 8ef0 40000000 		.quad	64
 19117      00000000 
 19118 8ef8 00000000 		.quad	.LC300
 19118      00000000 
 19119 8f00 00000000 		.quad	.LC0
 19119      00000000 
 19120 8f08 00000000 		.quad	0
 19120      00000000 
 19121 8f10 00000000 		.quad	0
 19121      00000000 
 19122 8f18 00000000 		.quad	0
 19122      00000000 
 19123 8f20 00000000 		.quad	.Lubsan_data455
 19123      00000000 
 19124 8f28 10000000 		.quad	16
 19124      00000000 
 19125 8f30 40000000 		.quad	64
 19125      00000000 
 19126 8f38 00000000 		.quad	.LC301
 19126      00000000 
 19127 8f40 00000000 		.quad	.LC0
 19127      00000000 
 19128 8f48 00000000 		.quad	0
 19128      00000000 
 19129 8f50 00000000 		.quad	0
 19129      00000000 
 19130 8f58 00000000 		.quad	0
 19130      00000000 
 19131 8f60 00000000 		.quad	.Lubsan_data454
 19131      00000000 
 19132 8f68 20000000 		.quad	32
 19132      00000000 
 19133 8f70 40000000 		.quad	64
 19133      00000000 
 19134 8f78 00000000 		.quad	.LC302
 19134      00000000 
 19135 8f80 00000000 		.quad	.LC0
 19135      00000000 
 19136 8f88 00000000 		.quad	0
 19136      00000000 
 19137 8f90 00000000 		.quad	0
 19137      00000000 
 19138 8f98 00000000 		.quad	0
 19138      00000000 
 19139 8fa0 00000000 		.quad	.Lubsan_data453
 19139      00000000 
 19140 8fa8 20000000 		.quad	32
 19140      00000000 
 19141 8fb0 40000000 		.quad	64
 19141      00000000 
 19142 8fb8 00000000 		.quad	.LC303
 19142      00000000 
 19143 8fc0 00000000 		.quad	.LC0
 19143      00000000 
 19144 8fc8 00000000 		.quad	0
 19144      00000000 
 19145 8fd0 00000000 		.quad	0
 19145      00000000 
 19146 8fd8 00000000 		.quad	0
 19146      00000000 
 19147 8fe0 00000000 		.quad	.Lubsan_type26
 19147      00000000 
 19148 8fe8 17000000 		.quad	23
 19148      00000000 
 19149 8ff0 40000000 		.quad	64
 19149      00000000 
 19150 8ff8 00000000 		.quad	.LC304
 19150      00000000 
 19151 9000 00000000 		.quad	.LC0
 19151      00000000 
 19152 9008 00000000 		.quad	0
 19152      00000000 
 19153 9010 00000000 		.quad	0
 19153      00000000 
 19154 9018 00000000 		.quad	0
 19154      00000000 
 19155 9020 00000000 		.quad	.Lubsan_data452
 19155      00000000 
 19156 9028 20000000 		.quad	32
 19156      00000000 
 19157 9030 40000000 		.quad	64
 19157      00000000 
 19158 9038 00000000 		.quad	.LC305
 19158      00000000 
 19159 9040 00000000 		.quad	.LC0
 19159      00000000 
 19160 9048 00000000 		.quad	0
 19160      00000000 
 19161 9050 00000000 		.quad	0
 19161      00000000 
 19162 9058 00000000 		.quad	0
 19162      00000000 
 19163 9060 00000000 		.quad	.Lubsan_data451
 19163      00000000 
 19164 9068 20000000 		.quad	32
 19164      00000000 
 19165 9070 40000000 		.quad	64
 19165      00000000 
 19166 9078 00000000 		.quad	.LC306
 19166      00000000 
 19167 9080 00000000 		.quad	.LC0
 19167      00000000 
 19168 9088 00000000 		.quad	0
 19168      00000000 
 19169 9090 00000000 		.quad	0
 19169      00000000 
 19170 9098 00000000 		.quad	0
 19170      00000000 
 19171 90a0 00000000 		.quad	.Lubsan_data450
 19171      00000000 
 19172 90a8 20000000 		.quad	32
 19172      00000000 
 19173 90b0 40000000 		.quad	64
 19173      00000000 
 19174 90b8 00000000 		.quad	.LC307
 19174      00000000 
 19175 90c0 00000000 		.quad	.LC0
 19175      00000000 
 19176 90c8 00000000 		.quad	0
 19176      00000000 
 19177 90d0 00000000 		.quad	0
 19177      00000000 
 19178 90d8 00000000 		.quad	0
 19178      00000000 
 19179 90e0 00000000 		.quad	.Lubsan_data449
 19179      00000000 
 19180 90e8 20000000 		.quad	32
 19180      00000000 
 19181 90f0 40000000 		.quad	64
 19181      00000000 
 19182 90f8 00000000 		.quad	.LC308
 19182      00000000 
 19183 9100 00000000 		.quad	.LC0
 19183      00000000 
 19184 9108 00000000 		.quad	0
 19184      00000000 
 19185 9110 00000000 		.quad	0
 19185      00000000 
 19186 9118 00000000 		.quad	0
 19186      00000000 
 19187 9120 00000000 		.quad	.Lubsan_data448
 19187      00000000 
 19188 9128 10000000 		.quad	16
 19188      00000000 
 19189 9130 40000000 		.quad	64
 19189      00000000 
 19190 9138 00000000 		.quad	.LC309
 19190      00000000 
 19191 9140 00000000 		.quad	.LC0
 19191      00000000 
 19192 9148 00000000 		.quad	0
 19192      00000000 
 19193 9150 00000000 		.quad	0
 19193      00000000 
 19194 9158 00000000 		.quad	0
 19194      00000000 
 19195 9160 00000000 		.quad	.Lubsan_data447
 19195      00000000 
 19196 9168 20000000 		.quad	32
 19196      00000000 
 19197 9170 40000000 		.quad	64
 19197      00000000 
 19198 9178 00000000 		.quad	.LC310
 19198      00000000 
 19199 9180 00000000 		.quad	.LC0
 19199      00000000 
 19200 9188 00000000 		.quad	0
 19200      00000000 
 19201 9190 00000000 		.quad	0
 19201      00000000 
 19202 9198 00000000 		.quad	0
 19202      00000000 
 19203 91a0 00000000 		.quad	.Lubsan_data446
 19203      00000000 
 19204 91a8 20000000 		.quad	32
 19204      00000000 
 19205 91b0 40000000 		.quad	64
 19205      00000000 
 19206 91b8 00000000 		.quad	.LC311
 19206      00000000 
 19207 91c0 00000000 		.quad	.LC0
 19207      00000000 
 19208 91c8 00000000 		.quad	0
 19208      00000000 
 19209 91d0 00000000 		.quad	0
 19209      00000000 
 19210 91d8 00000000 		.quad	0
 19210      00000000 
 19211 91e0 00000000 		.quad	.Lubsan_data445
 19211      00000000 
 19212 91e8 20000000 		.quad	32
 19212      00000000 
 19213 91f0 40000000 		.quad	64
 19213      00000000 
 19214 91f8 00000000 		.quad	.LC312
 19214      00000000 
 19215 9200 00000000 		.quad	.LC0
 19215      00000000 
 19216 9208 00000000 		.quad	0
 19216      00000000 
 19217 9210 00000000 		.quad	0
 19217      00000000 
 19218 9218 00000000 		.quad	0
 19218      00000000 
 19219 9220 00000000 		.quad	.Lubsan_type25
 19219      00000000 
 19220 9228 1F000000 		.quad	31
 19220      00000000 
 19221 9230 40000000 		.quad	64
 19221      00000000 
 19222 9238 00000000 		.quad	.LC313
 19222      00000000 
 19223 9240 00000000 		.quad	.LC0
 19223      00000000 
 19224 9248 00000000 		.quad	0
 19224      00000000 
 19225 9250 00000000 		.quad	0
 19225      00000000 
 19226 9258 00000000 		.quad	0
 19226      00000000 
 19227 9260 00000000 		.quad	.Lubsan_data444
 19227      00000000 
 19228 9268 20000000 		.quad	32
 19228      00000000 
 19229 9270 40000000 		.quad	64
 19229      00000000 
 19230 9278 00000000 		.quad	.LC314
 19230      00000000 
 19231 9280 00000000 		.quad	.LC0
 19231      00000000 
 19232 9288 00000000 		.quad	0
 19232      00000000 
 19233 9290 00000000 		.quad	0
 19233      00000000 
 19234 9298 00000000 		.quad	0
 19234      00000000 
 19235 92a0 00000000 		.quad	.Lubsan_data443
 19235      00000000 
 19236 92a8 20000000 		.quad	32
 19236      00000000 
 19237 92b0 40000000 		.quad	64
 19237      00000000 
 19238 92b8 00000000 		.quad	.LC315
 19238      00000000 
 19239 92c0 00000000 		.quad	.LC0
 19239      00000000 
 19240 92c8 00000000 		.quad	0
 19240      00000000 
 19241 92d0 00000000 		.quad	0
 19241      00000000 
 19242 92d8 00000000 		.quad	0
 19242      00000000 
 19243 92e0 00000000 		.quad	.Lubsan_data442
 19243      00000000 
 19244 92e8 20000000 		.quad	32
 19244      00000000 
 19245 92f0 40000000 		.quad	64
 19245      00000000 
 19246 92f8 00000000 		.quad	.LC316
 19246      00000000 
 19247 9300 00000000 		.quad	.LC0
 19247      00000000 
 19248 9308 00000000 		.quad	0
 19248      00000000 
 19249 9310 00000000 		.quad	0
 19249      00000000 
 19250 9318 00000000 		.quad	0
 19250      00000000 
 19251 9320 00000000 		.quad	.Lubsan_data441
 19251      00000000 
 19252 9328 20000000 		.quad	32
 19252      00000000 
 19253 9330 40000000 		.quad	64
 19253      00000000 
 19254 9338 00000000 		.quad	.LC317
 19254      00000000 
 19255 9340 00000000 		.quad	.LC0
 19255      00000000 
 19256 9348 00000000 		.quad	0
 19256      00000000 
 19257 9350 00000000 		.quad	0
 19257      00000000 
 19258 9358 00000000 		.quad	0
 19258      00000000 
 19259 9360 00000000 		.quad	.Lubsan_data440
 19259      00000000 
 19260 9368 20000000 		.quad	32
 19260      00000000 
 19261 9370 40000000 		.quad	64
 19261      00000000 
 19262 9378 00000000 		.quad	.LC318
 19262      00000000 
 19263 9380 00000000 		.quad	.LC0
 19263      00000000 
 19264 9388 00000000 		.quad	0
 19264      00000000 
 19265 9390 00000000 		.quad	0
 19265      00000000 
 19266 9398 00000000 		.quad	0
 19266      00000000 
 19267 93a0 00000000 		.quad	.Lubsan_data439
 19267      00000000 
 19268 93a8 20000000 		.quad	32
 19268      00000000 
 19269 93b0 40000000 		.quad	64
 19269      00000000 
 19270 93b8 00000000 		.quad	.LC319
 19270      00000000 
 19271 93c0 00000000 		.quad	.LC0
 19271      00000000 
 19272 93c8 00000000 		.quad	0
 19272      00000000 
 19273 93d0 00000000 		.quad	0
 19273      00000000 
 19274 93d8 00000000 		.quad	0
 19274      00000000 
 19275 93e0 00000000 		.quad	.Lubsan_data438
 19275      00000000 
 19276 93e8 20000000 		.quad	32
 19276      00000000 
 19277 93f0 40000000 		.quad	64
 19277      00000000 
 19278 93f8 00000000 		.quad	.LC320
 19278      00000000 
 19279 9400 00000000 		.quad	.LC0
 19279      00000000 
 19280 9408 00000000 		.quad	0
 19280      00000000 
 19281 9410 00000000 		.quad	0
 19281      00000000 
 19282 9418 00000000 		.quad	0
 19282      00000000 
 19283 9420 00000000 		.quad	.Lubsan_data437
 19283      00000000 
 19284 9428 10000000 		.quad	16
 19284      00000000 
 19285 9430 40000000 		.quad	64
 19285      00000000 
 19286 9438 00000000 		.quad	.LC321
 19286      00000000 
 19287 9440 00000000 		.quad	.LC0
 19287      00000000 
 19288 9448 00000000 		.quad	0
 19288      00000000 
 19289 9450 00000000 		.quad	0
 19289      00000000 
 19290 9458 00000000 		.quad	0
 19290      00000000 
 19291 9460 00000000 		.quad	.Lubsan_data436
 19291      00000000 
 19292 9468 20000000 		.quad	32
 19292      00000000 
 19293 9470 40000000 		.quad	64
 19293      00000000 
 19294 9478 00000000 		.quad	.LC322
 19294      00000000 
 19295 9480 00000000 		.quad	.LC0
 19295      00000000 
 19296 9488 00000000 		.quad	0
 19296      00000000 
 19297 9490 00000000 		.quad	0
 19297      00000000 
 19298 9498 00000000 		.quad	0
 19298      00000000 
 19299 94a0 00000000 		.quad	.Lubsan_data435
 19299      00000000 
 19300 94a8 20000000 		.quad	32
 19300      00000000 
 19301 94b0 40000000 		.quad	64
 19301      00000000 
 19302 94b8 00000000 		.quad	.LC323
 19302      00000000 
 19303 94c0 00000000 		.quad	.LC0
 19303      00000000 
 19304 94c8 00000000 		.quad	0
 19304      00000000 
 19305 94d0 00000000 		.quad	0
 19305      00000000 
 19306 94d8 00000000 		.quad	0
 19306      00000000 
 19307 94e0 00000000 		.quad	.Lubsan_data434
 19307      00000000 
 19308 94e8 20000000 		.quad	32
 19308      00000000 
 19309 94f0 40000000 		.quad	64
 19309      00000000 
 19310 94f8 00000000 		.quad	.LC324
 19310      00000000 
 19311 9500 00000000 		.quad	.LC0
 19311      00000000 
 19312 9508 00000000 		.quad	0
 19312      00000000 
 19313 9510 00000000 		.quad	0
 19313      00000000 
 19314 9518 00000000 		.quad	0
 19314      00000000 
 19315 9520 00000000 		.quad	.Lubsan_data433
 19315      00000000 
 19316 9528 20000000 		.quad	32
 19316      00000000 
 19317 9530 40000000 		.quad	64
 19317      00000000 
 19318 9538 00000000 		.quad	.LC325
 19318      00000000 
 19319 9540 00000000 		.quad	.LC0
 19319      00000000 
 19320 9548 00000000 		.quad	0
 19320      00000000 
 19321 9550 00000000 		.quad	0
 19321      00000000 
 19322 9558 00000000 		.quad	0
 19322      00000000 
 19323 9560 00000000 		.quad	.Lubsan_data432
 19323      00000000 
 19324 9568 20000000 		.quad	32
 19324      00000000 
 19325 9570 40000000 		.quad	64
 19325      00000000 
 19326 9578 00000000 		.quad	.LC326
 19326      00000000 
 19327 9580 00000000 		.quad	.LC0
 19327      00000000 
 19328 9588 00000000 		.quad	0
 19328      00000000 
 19329 9590 00000000 		.quad	0
 19329      00000000 
 19330 9598 00000000 		.quad	0
 19330      00000000 
 19331 95a0 00000000 		.quad	.Lubsan_data431
 19331      00000000 
 19332 95a8 20000000 		.quad	32
 19332      00000000 
 19333 95b0 40000000 		.quad	64
 19333      00000000 
 19334 95b8 00000000 		.quad	.LC327
 19334      00000000 
 19335 95c0 00000000 		.quad	.LC0
 19335      00000000 
 19336 95c8 00000000 		.quad	0
 19336      00000000 
 19337 95d0 00000000 		.quad	0
 19337      00000000 
 19338 95d8 00000000 		.quad	0
 19338      00000000 
 19339 95e0 00000000 		.quad	.Lubsan_data430
 19339      00000000 
 19340 95e8 20000000 		.quad	32
 19340      00000000 
 19341 95f0 40000000 		.quad	64
 19341      00000000 
 19342 95f8 00000000 		.quad	.LC328
 19342      00000000 
 19343 9600 00000000 		.quad	.LC0
 19343      00000000 
 19344 9608 00000000 		.quad	0
 19344      00000000 
 19345 9610 00000000 		.quad	0
 19345      00000000 
 19346 9618 00000000 		.quad	0
 19346      00000000 
 19347 9620 00000000 		.quad	.Lubsan_data429
 19347      00000000 
 19348 9628 20000000 		.quad	32
 19348      00000000 
 19349 9630 40000000 		.quad	64
 19349      00000000 
 19350 9638 00000000 		.quad	.LC329
 19350      00000000 
 19351 9640 00000000 		.quad	.LC0
 19351      00000000 
 19352 9648 00000000 		.quad	0
 19352      00000000 
 19353 9650 00000000 		.quad	0
 19353      00000000 
 19354 9658 00000000 		.quad	0
 19354      00000000 
 19355 9660 00000000 		.quad	.Lubsan_type24
 19355      00000000 
 19356 9668 22000000 		.quad	34
 19356      00000000 
 19357 9670 60000000 		.quad	96
 19357      00000000 
 19358 9678 00000000 		.quad	.LC330
 19358      00000000 
 19359 9680 00000000 		.quad	.LC0
 19359      00000000 
 19360 9688 00000000 		.quad	0
 19360      00000000 
 19361 9690 00000000 		.quad	0
 19361      00000000 
 19362 9698 00000000 		.quad	0
 19362      00000000 
 19363 96a0 00000000 		.quad	.Lubsan_data428
 19363      00000000 
 19364 96a8 20000000 		.quad	32
 19364      00000000 
 19365 96b0 40000000 		.quad	64
 19365      00000000 
 19366 96b8 00000000 		.quad	.LC331
 19366      00000000 
 19367 96c0 00000000 		.quad	.LC0
 19367      00000000 
 19368 96c8 00000000 		.quad	0
 19368      00000000 
 19369 96d0 00000000 		.quad	0
 19369      00000000 
 19370 96d8 00000000 		.quad	0
 19370      00000000 
 19371 96e0 00000000 		.quad	.Lubsan_data427
 19371      00000000 
 19372 96e8 20000000 		.quad	32
 19372      00000000 
 19373 96f0 40000000 		.quad	64
 19373      00000000 
 19374 96f8 00000000 		.quad	.LC332
 19374      00000000 
 19375 9700 00000000 		.quad	.LC0
 19375      00000000 
 19376 9708 00000000 		.quad	0
 19376      00000000 
 19377 9710 00000000 		.quad	0
 19377      00000000 
 19378 9718 00000000 		.quad	0
 19378      00000000 
 19379 9720 00000000 		.quad	.Lubsan_data426
 19379      00000000 
 19380 9728 20000000 		.quad	32
 19380      00000000 
 19381 9730 40000000 		.quad	64
 19381      00000000 
 19382 9738 00000000 		.quad	.LC333
 19382      00000000 
 19383 9740 00000000 		.quad	.LC0
 19383      00000000 
 19384 9748 00000000 		.quad	0
 19384      00000000 
 19385 9750 00000000 		.quad	0
 19385      00000000 
 19386 9758 00000000 		.quad	0
 19386      00000000 
 19387 9760 00000000 		.quad	.Lubsan_type23
 19387      00000000 
 19388 9768 17000000 		.quad	23
 19388      00000000 
 19389 9770 40000000 		.quad	64
 19389      00000000 
 19390 9778 00000000 		.quad	.LC334
 19390      00000000 
 19391 9780 00000000 		.quad	.LC0
 19391      00000000 
 19392 9788 00000000 		.quad	0
 19392      00000000 
 19393 9790 00000000 		.quad	0
 19393      00000000 
 19394 9798 00000000 		.quad	0
 19394      00000000 
 19395 97a0 00000000 		.quad	.Lubsan_data425
 19395      00000000 
 19396 97a8 20000000 		.quad	32
 19396      00000000 
 19397 97b0 40000000 		.quad	64
 19397      00000000 
 19398 97b8 00000000 		.quad	.LC335
 19398      00000000 
 19399 97c0 00000000 		.quad	.LC0
 19399      00000000 
 19400 97c8 00000000 		.quad	0
 19400      00000000 
 19401 97d0 00000000 		.quad	0
 19401      00000000 
 19402 97d8 00000000 		.quad	0
 19402      00000000 
 19403 97e0 00000000 		.quad	.Lubsan_data424
 19403      00000000 
 19404 97e8 20000000 		.quad	32
 19404      00000000 
 19405 97f0 40000000 		.quad	64
 19405      00000000 
 19406 97f8 00000000 		.quad	.LC336
 19406      00000000 
 19407 9800 00000000 		.quad	.LC0
 19407      00000000 
 19408 9808 00000000 		.quad	0
 19408      00000000 
 19409 9810 00000000 		.quad	0
 19409      00000000 
 19410 9818 00000000 		.quad	0
 19410      00000000 
 19411 9820 00000000 		.quad	.Lubsan_type22
 19411      00000000 
 19412 9828 1B000000 		.quad	27
 19412      00000000 
 19413 9830 40000000 		.quad	64
 19413      00000000 
 19414 9838 00000000 		.quad	.LC337
 19414      00000000 
 19415 9840 00000000 		.quad	.LC0
 19415      00000000 
 19416 9848 00000000 		.quad	0
 19416      00000000 
 19417 9850 00000000 		.quad	0
 19417      00000000 
 19418 9858 00000000 		.quad	0
 19418      00000000 
 19419 9860 00000000 		.quad	.Lubsan_data423
 19419      00000000 
 19420 9868 20000000 		.quad	32
 19420      00000000 
 19421 9870 40000000 		.quad	64
 19421      00000000 
 19422 9878 00000000 		.quad	.LC338
 19422      00000000 
 19423 9880 00000000 		.quad	.LC0
 19423      00000000 
 19424 9888 00000000 		.quad	0
 19424      00000000 
 19425 9890 00000000 		.quad	0
 19425      00000000 
 19426 9898 00000000 		.quad	0
 19426      00000000 
 19427 98a0 00000000 		.quad	.Lubsan_data422
 19427      00000000 
 19428 98a8 20000000 		.quad	32
 19428      00000000 
 19429 98b0 40000000 		.quad	64
 19429      00000000 
 19430 98b8 00000000 		.quad	.LC339
 19430      00000000 
 19431 98c0 00000000 		.quad	.LC0
 19431      00000000 
 19432 98c8 00000000 		.quad	0
 19432      00000000 
 19433 98d0 00000000 		.quad	0
 19433      00000000 
 19434 98d8 00000000 		.quad	0
 19434      00000000 
 19435 98e0 00000000 		.quad	.Lubsan_data421
 19435      00000000 
 19436 98e8 10000000 		.quad	16
 19436      00000000 
 19437 98f0 40000000 		.quad	64
 19437      00000000 
 19438 98f8 00000000 		.quad	.LC340
 19438      00000000 
 19439 9900 00000000 		.quad	.LC0
 19439      00000000 
 19440 9908 00000000 		.quad	0
 19440      00000000 
 19441 9910 00000000 		.quad	0
 19441      00000000 
 19442 9918 00000000 		.quad	0
 19442      00000000 
 19443 9920 00000000 		.quad	.Lubsan_data420
 19443      00000000 
 19444 9928 10000000 		.quad	16
 19444      00000000 
 19445 9930 40000000 		.quad	64
 19445      00000000 
 19446 9938 00000000 		.quad	.LC341
 19446      00000000 
 19447 9940 00000000 		.quad	.LC0
 19447      00000000 
 19448 9948 00000000 		.quad	0
 19448      00000000 
 19449 9950 00000000 		.quad	0
 19449      00000000 
 19450 9958 00000000 		.quad	0
 19450      00000000 
 19451 9960 00000000 		.quad	.Lubsan_data419
 19451      00000000 
 19452 9968 20000000 		.quad	32
 19452      00000000 
 19453 9970 40000000 		.quad	64
 19453      00000000 
 19454 9978 00000000 		.quad	.LC342
 19454      00000000 
 19455 9980 00000000 		.quad	.LC0
 19455      00000000 
 19456 9988 00000000 		.quad	0
 19456      00000000 
 19457 9990 00000000 		.quad	0
 19457      00000000 
 19458 9998 00000000 		.quad	0
 19458      00000000 
 19459 99a0 00000000 		.quad	.Lubsan_data418
 19459      00000000 
 19460 99a8 20000000 		.quad	32
 19460      00000000 
 19461 99b0 40000000 		.quad	64
 19461      00000000 
 19462 99b8 00000000 		.quad	.LC343
 19462      00000000 
 19463 99c0 00000000 		.quad	.LC0
 19463      00000000 
 19464 99c8 00000000 		.quad	0
 19464      00000000 
 19465 99d0 00000000 		.quad	0
 19465      00000000 
 19466 99d8 00000000 		.quad	0
 19466      00000000 
 19467 99e0 00000000 		.quad	.Lubsan_data417
 19467      00000000 
 19468 99e8 20000000 		.quad	32
 19468      00000000 
 19469 99f0 40000000 		.quad	64
 19469      00000000 
 19470 99f8 00000000 		.quad	.LC344
 19470      00000000 
 19471 9a00 00000000 		.quad	.LC0
 19471      00000000 
 19472 9a08 00000000 		.quad	0
 19472      00000000 
 19473 9a10 00000000 		.quad	0
 19473      00000000 
 19474 9a18 00000000 		.quad	0
 19474      00000000 
 19475 9a20 00000000 		.quad	.Lubsan_type21
 19475      00000000 
 19476 9a28 1A000000 		.quad	26
 19476      00000000 
 19477 9a30 40000000 		.quad	64
 19477      00000000 
 19478 9a38 00000000 		.quad	.LC345
 19478      00000000 
 19479 9a40 00000000 		.quad	.LC0
 19479      00000000 
 19480 9a48 00000000 		.quad	0
 19480      00000000 
 19481 9a50 00000000 		.quad	0
 19481      00000000 
 19482 9a58 00000000 		.quad	0
 19482      00000000 
 19483 9a60 00000000 		.quad	.Lubsan_data416
 19483      00000000 
 19484 9a68 20000000 		.quad	32
 19484      00000000 
 19485 9a70 40000000 		.quad	64
 19485      00000000 
 19486 9a78 00000000 		.quad	.LC346
 19486      00000000 
 19487 9a80 00000000 		.quad	.LC0
 19487      00000000 
 19488 9a88 00000000 		.quad	0
 19488      00000000 
 19489 9a90 00000000 		.quad	0
 19489      00000000 
 19490 9a98 00000000 		.quad	0
 19490      00000000 
 19491 9aa0 00000000 		.quad	.Lubsan_data415
 19491      00000000 
 19492 9aa8 20000000 		.quad	32
 19492      00000000 
 19493 9ab0 40000000 		.quad	64
 19493      00000000 
 19494 9ab8 00000000 		.quad	.LC347
 19494      00000000 
 19495 9ac0 00000000 		.quad	.LC0
 19495      00000000 
 19496 9ac8 00000000 		.quad	0
 19496      00000000 
 19497 9ad0 00000000 		.quad	0
 19497      00000000 
 19498 9ad8 00000000 		.quad	0
 19498      00000000 
 19499 9ae0 00000000 		.quad	.Lubsan_type20
 19499      00000000 
 19500 9ae8 17000000 		.quad	23
 19500      00000000 
 19501 9af0 40000000 		.quad	64
 19501      00000000 
 19502 9af8 00000000 		.quad	.LC348
 19502      00000000 
 19503 9b00 00000000 		.quad	.LC0
 19503      00000000 
 19504 9b08 00000000 		.quad	0
 19504      00000000 
 19505 9b10 00000000 		.quad	0
 19505      00000000 
 19506 9b18 00000000 		.quad	0
 19506      00000000 
 19507 9b20 00000000 		.quad	.Lubsan_data414
 19507      00000000 
 19508 9b28 20000000 		.quad	32
 19508      00000000 
 19509 9b30 40000000 		.quad	64
 19509      00000000 
 19510 9b38 00000000 		.quad	.LC349
 19510      00000000 
 19511 9b40 00000000 		.quad	.LC0
 19511      00000000 
 19512 9b48 00000000 		.quad	0
 19512      00000000 
 19513 9b50 00000000 		.quad	0
 19513      00000000 
 19514 9b58 00000000 		.quad	0
 19514      00000000 
 19515 9b60 00000000 		.quad	.Lubsan_type19
 19515      00000000 
 19516 9b68 17000000 		.quad	23
 19516      00000000 
 19517 9b70 40000000 		.quad	64
 19517      00000000 
 19518 9b78 00000000 		.quad	.LC350
 19518      00000000 
 19519 9b80 00000000 		.quad	.LC0
 19519      00000000 
 19520 9b88 00000000 		.quad	0
 19520      00000000 
 19521 9b90 00000000 		.quad	0
 19521      00000000 
 19522 9b98 00000000 		.quad	0
 19522      00000000 
 19523 9ba0 00000000 		.quad	.Lubsan_data413
 19523      00000000 
 19524 9ba8 20000000 		.quad	32
 19524      00000000 
 19525 9bb0 40000000 		.quad	64
 19525      00000000 
 19526 9bb8 00000000 		.quad	.LC351
 19526      00000000 
 19527 9bc0 00000000 		.quad	.LC0
 19527      00000000 
 19528 9bc8 00000000 		.quad	0
 19528      00000000 
 19529 9bd0 00000000 		.quad	0
 19529      00000000 
 19530 9bd8 00000000 		.quad	0
 19530      00000000 
 19531 9be0 00000000 		.quad	.Lubsan_type18
 19531      00000000 
 19532 9be8 17000000 		.quad	23
 19532      00000000 
 19533 9bf0 40000000 		.quad	64
 19533      00000000 
 19534 9bf8 00000000 		.quad	.LC352
 19534      00000000 
 19535 9c00 00000000 		.quad	.LC0
 19535      00000000 
 19536 9c08 00000000 		.quad	0
 19536      00000000 
 19537 9c10 00000000 		.quad	0
 19537      00000000 
 19538 9c18 00000000 		.quad	0
 19538      00000000 
 19539 9c20 00000000 		.quad	.Lubsan_data412
 19539      00000000 
 19540 9c28 20000000 		.quad	32
 19540      00000000 
 19541 9c30 40000000 		.quad	64
 19541      00000000 
 19542 9c38 00000000 		.quad	.LC353
 19542      00000000 
 19543 9c40 00000000 		.quad	.LC0
 19543      00000000 
 19544 9c48 00000000 		.quad	0
 19544      00000000 
 19545 9c50 00000000 		.quad	0
 19545      00000000 
 19546 9c58 00000000 		.quad	0
 19546      00000000 
 19547 9c60 00000000 		.quad	.Lubsan_data411
 19547      00000000 
 19548 9c68 10000000 		.quad	16
 19548      00000000 
 19549 9c70 40000000 		.quad	64
 19549      00000000 
 19550 9c78 00000000 		.quad	.LC354
 19550      00000000 
 19551 9c80 00000000 		.quad	.LC0
 19551      00000000 
 19552 9c88 00000000 		.quad	0
 19552      00000000 
 19553 9c90 00000000 		.quad	0
 19553      00000000 
 19554 9c98 00000000 		.quad	0
 19554      00000000 
 19555 9ca0 00000000 		.quad	.Lubsan_data410
 19555      00000000 
 19556 9ca8 20000000 		.quad	32
 19556      00000000 
 19557 9cb0 40000000 		.quad	64
 19557      00000000 
 19558 9cb8 00000000 		.quad	.LC355
 19558      00000000 
 19559 9cc0 00000000 		.quad	.LC0
 19559      00000000 
 19560 9cc8 00000000 		.quad	0
 19560      00000000 
 19561 9cd0 00000000 		.quad	0
 19561      00000000 
 19562 9cd8 00000000 		.quad	0
 19562      00000000 
 19563 9ce0 00000000 		.quad	.Lubsan_data409
 19563      00000000 
 19564 9ce8 20000000 		.quad	32
 19564      00000000 
 19565 9cf0 40000000 		.quad	64
 19565      00000000 
 19566 9cf8 00000000 		.quad	.LC356
 19566      00000000 
 19567 9d00 00000000 		.quad	.LC0
 19567      00000000 
 19568 9d08 00000000 		.quad	0
 19568      00000000 
 19569 9d10 00000000 		.quad	0
 19569      00000000 
 19570 9d18 00000000 		.quad	0
 19570      00000000 
 19571 9d20 00000000 		.quad	.Lubsan_type17
 19571      00000000 
 19572 9d28 16000000 		.quad	22
 19572      00000000 
 19573 9d30 40000000 		.quad	64
 19573      00000000 
 19574 9d38 00000000 		.quad	.LC357
 19574      00000000 
 19575 9d40 00000000 		.quad	.LC0
 19575      00000000 
 19576 9d48 00000000 		.quad	0
 19576      00000000 
 19577 9d50 00000000 		.quad	0
 19577      00000000 
 19578 9d58 00000000 		.quad	0
 19578      00000000 
 19579 9d60 00000000 		.quad	.Lubsan_data408
 19579      00000000 
 19580 9d68 28000000 		.quad	40
 19580      00000000 
 19581 9d70 60000000 		.quad	96
 19581      00000000 
 19582 9d78 00000000 		.quad	.LC358
 19582      00000000 
 19583 9d80 00000000 		.quad	.LC0
 19583      00000000 
 19584 9d88 00000000 		.quad	0
 19584      00000000 
 19585 9d90 00000000 		.quad	0
 19585      00000000 
 19586 9d98 00000000 		.quad	0
 19586      00000000 
 19587 9da0 00000000 		.quad	.Lubsan_data407
 19587      00000000 
 19588 9da8 28000000 		.quad	40
 19588      00000000 
 19589 9db0 60000000 		.quad	96
 19589      00000000 
 19590 9db8 00000000 		.quad	.LC359
 19590      00000000 
 19591 9dc0 00000000 		.quad	.LC0
 19591      00000000 
 19592 9dc8 00000000 		.quad	0
 19592      00000000 
 19593 9dd0 00000000 		.quad	0
 19593      00000000 
 19594 9dd8 00000000 		.quad	0
 19594      00000000 
 19595 9de0 00000000 		.quad	.Lubsan_data406
 19595      00000000 
 19596 9de8 28000000 		.quad	40
 19596      00000000 
 19597 9df0 60000000 		.quad	96
 19597      00000000 
 19598 9df8 00000000 		.quad	.LC360
 19598      00000000 
 19599 9e00 00000000 		.quad	.LC0
 19599      00000000 
 19600 9e08 00000000 		.quad	0
 19600      00000000 
 19601 9e10 00000000 		.quad	0
 19601      00000000 
 19602 9e18 00000000 		.quad	0
 19602      00000000 
 19603 9e20 00000000 		.quad	.Lubsan_data405
 19603      00000000 
 19604 9e28 28000000 		.quad	40
 19604      00000000 
 19605 9e30 60000000 		.quad	96
 19605      00000000 
 19606 9e38 00000000 		.quad	.LC361
 19606      00000000 
 19607 9e40 00000000 		.quad	.LC0
 19607      00000000 
 19608 9e48 00000000 		.quad	0
 19608      00000000 
 19609 9e50 00000000 		.quad	0
 19609      00000000 
 19610 9e58 00000000 		.quad	0
 19610      00000000 
 19611 9e60 00000000 		.quad	.Lubsan_data404
 19611      00000000 
 19612 9e68 28000000 		.quad	40
 19612      00000000 
 19613 9e70 60000000 		.quad	96
 19613      00000000 
 19614 9e78 00000000 		.quad	.LC362
 19614      00000000 
 19615 9e80 00000000 		.quad	.LC0
 19615      00000000 
 19616 9e88 00000000 		.quad	0
 19616      00000000 
 19617 9e90 00000000 		.quad	0
 19617      00000000 
 19618 9e98 00000000 		.quad	0
 19618      00000000 
 19619 9ea0 00000000 		.quad	.Lubsan_data403
 19619      00000000 
 19620 9ea8 20000000 		.quad	32
 19620      00000000 
 19621 9eb0 40000000 		.quad	64
 19621      00000000 
 19622 9eb8 00000000 		.quad	.LC363
 19622      00000000 
 19623 9ec0 00000000 		.quad	.LC0
 19623      00000000 
 19624 9ec8 00000000 		.quad	0
 19624      00000000 
 19625 9ed0 00000000 		.quad	0
 19625      00000000 
 19626 9ed8 00000000 		.quad	0
 19626      00000000 
 19627 9ee0 00000000 		.quad	.Lubsan_type16
 19627      00000000 
 19628 9ee8 25000000 		.quad	37
 19628      00000000 
 19629 9ef0 60000000 		.quad	96
 19629      00000000 
 19630 9ef8 00000000 		.quad	.LC364
 19630      00000000 
 19631 9f00 00000000 		.quad	.LC0
 19631      00000000 
 19632 9f08 00000000 		.quad	0
 19632      00000000 
 19633 9f10 00000000 		.quad	0
 19633      00000000 
 19634 9f18 00000000 		.quad	0
 19634      00000000 
 19635 9f20 00000000 		.quad	.Lubsan_data402
 19635      00000000 
 19636 9f28 20000000 		.quad	32
 19636      00000000 
 19637 9f30 40000000 		.quad	64
 19637      00000000 
 19638 9f38 00000000 		.quad	.LC365
 19638      00000000 
 19639 9f40 00000000 		.quad	.LC0
 19639      00000000 
 19640 9f48 00000000 		.quad	0
 19640      00000000 
 19641 9f50 00000000 		.quad	0
 19641      00000000 
 19642 9f58 00000000 		.quad	0
 19642      00000000 
 19643 9f60 00000000 		.quad	.Lubsan_data401
 19643      00000000 
 19644 9f68 20000000 		.quad	32
 19644      00000000 
 19645 9f70 40000000 		.quad	64
 19645      00000000 
 19646 9f78 00000000 		.quad	.LC366
 19646      00000000 
 19647 9f80 00000000 		.quad	.LC0
 19647      00000000 
 19648 9f88 00000000 		.quad	0
 19648      00000000 
 19649 9f90 00000000 		.quad	0
 19649      00000000 
 19650 9f98 00000000 		.quad	0
 19650      00000000 
 19651 9fa0 00000000 		.quad	.Lubsan_data400
 19651      00000000 
 19652 9fa8 20000000 		.quad	32
 19652      00000000 
 19653 9fb0 40000000 		.quad	64
 19653      00000000 
 19654 9fb8 00000000 		.quad	.LC367
 19654      00000000 
 19655 9fc0 00000000 		.quad	.LC0
 19655      00000000 
 19656 9fc8 00000000 		.quad	0
 19656      00000000 
 19657 9fd0 00000000 		.quad	0
 19657      00000000 
 19658 9fd8 00000000 		.quad	0
 19658      00000000 
 19659 9fe0 00000000 		.quad	.Lubsan_type15
 19659      00000000 
 19660 9fe8 20000000 		.quad	32
 19660      00000000 
 19661 9ff0 40000000 		.quad	64
 19661      00000000 
 19662 9ff8 00000000 		.quad	.LC368
 19662      00000000 
 19663 a000 00000000 		.quad	.LC0
 19663      00000000 
 19664 a008 00000000 		.quad	0
 19664      00000000 
 19665 a010 00000000 		.quad	0
 19665      00000000 
 19666 a018 00000000 		.quad	0
 19666      00000000 
 19667 a020 00000000 		.quad	.Lubsan_data399
 19667      00000000 
 19668 a028 20000000 		.quad	32
 19668      00000000 
 19669 a030 40000000 		.quad	64
 19669      00000000 
 19670 a038 00000000 		.quad	.LC369
 19670      00000000 
 19671 a040 00000000 		.quad	.LC0
 19671      00000000 
 19672 a048 00000000 		.quad	0
 19672      00000000 
 19673 a050 00000000 		.quad	0
 19673      00000000 
 19674 a058 00000000 		.quad	0
 19674      00000000 
 19675 a060 00000000 		.quad	.Lubsan_data398
 19675      00000000 
 19676 a068 20000000 		.quad	32
 19676      00000000 
 19677 a070 40000000 		.quad	64
 19677      00000000 
 19678 a078 00000000 		.quad	.LC370
 19678      00000000 
 19679 a080 00000000 		.quad	.LC0
 19679      00000000 
 19680 a088 00000000 		.quad	0
 19680      00000000 
 19681 a090 00000000 		.quad	0
 19681      00000000 
 19682 a098 00000000 		.quad	0
 19682      00000000 
 19683 a0a0 00000000 		.quad	.Lubsan_data397
 19683      00000000 
 19684 a0a8 20000000 		.quad	32
 19684      00000000 
 19685 a0b0 40000000 		.quad	64
 19685      00000000 
 19686 a0b8 00000000 		.quad	.LC371
 19686      00000000 
 19687 a0c0 00000000 		.quad	.LC0
 19687      00000000 
 19688 a0c8 00000000 		.quad	0
 19688      00000000 
 19689 a0d0 00000000 		.quad	0
 19689      00000000 
 19690 a0d8 00000000 		.quad	0
 19690      00000000 
 19691 a0e0 00000000 		.quad	.Lubsan_type14
 19691      00000000 
 19692 a0e8 1E000000 		.quad	30
 19692      00000000 
 19693 a0f0 40000000 		.quad	64
 19693      00000000 
 19694 a0f8 00000000 		.quad	.LC372
 19694      00000000 
 19695 a100 00000000 		.quad	.LC0
 19695      00000000 
 19696 a108 00000000 		.quad	0
 19696      00000000 
 19697 a110 00000000 		.quad	0
 19697      00000000 
 19698 a118 00000000 		.quad	0
 19698      00000000 
 19699 a120 00000000 		.quad	.Lubsan_data396
 19699      00000000 
 19700 a128 20000000 		.quad	32
 19700      00000000 
 19701 a130 40000000 		.quad	64
 19701      00000000 
 19702 a138 00000000 		.quad	.LC373
 19702      00000000 
 19703 a140 00000000 		.quad	.LC0
 19703      00000000 
 19704 a148 00000000 		.quad	0
 19704      00000000 
 19705 a150 00000000 		.quad	0
 19705      00000000 
 19706 a158 00000000 		.quad	0
 19706      00000000 
 19707 a160 00000000 		.quad	.Lubsan_data395
 19707      00000000 
 19708 a168 28000000 		.quad	40
 19708      00000000 
 19709 a170 60000000 		.quad	96
 19709      00000000 
 19710 a178 00000000 		.quad	.LC374
 19710      00000000 
 19711 a180 00000000 		.quad	.LC0
 19711      00000000 
 19712 a188 00000000 		.quad	0
 19712      00000000 
 19713 a190 00000000 		.quad	0
 19713      00000000 
 19714 a198 00000000 		.quad	0
 19714      00000000 
 19715 a1a0 00000000 		.quad	.Lubsan_type13
 19715      00000000 
 19716 a1a8 10000000 		.quad	16
 19716      00000000 
 19717 a1b0 40000000 		.quad	64
 19717      00000000 
 19718 a1b8 00000000 		.quad	.LC375
 19718      00000000 
 19719 a1c0 00000000 		.quad	.LC0
 19719      00000000 
 19720 a1c8 00000000 		.quad	0
 19720      00000000 
 19721 a1d0 00000000 		.quad	0
 19721      00000000 
 19722 a1d8 00000000 		.quad	0
 19722      00000000 
 19723 a1e0 00000000 		.quad	.Lubsan_data394
 19723      00000000 
 19724 a1e8 28000000 		.quad	40
 19724      00000000 
 19725 a1f0 60000000 		.quad	96
 19725      00000000 
 19726 a1f8 00000000 		.quad	.LC376
 19726      00000000 
 19727 a200 00000000 		.quad	.LC0
 19727      00000000 
 19728 a208 00000000 		.quad	0
 19728      00000000 
 19729 a210 00000000 		.quad	0
 19729      00000000 
 19730 a218 00000000 		.quad	0
 19730      00000000 
 19731 a220 00000000 		.quad	.Lubsan_type12
 19731      00000000 
 19732 a228 15000000 		.quad	21
 19732      00000000 
 19733 a230 40000000 		.quad	64
 19733      00000000 
 19734 a238 00000000 		.quad	.LC377
 19734      00000000 
 19735 a240 00000000 		.quad	.LC0
 19735      00000000 
 19736 a248 00000000 		.quad	0
 19736      00000000 
 19737 a250 00000000 		.quad	0
 19737      00000000 
 19738 a258 00000000 		.quad	0
 19738      00000000 
 19739 a260 00000000 		.quad	.Lubsan_data393
 19739      00000000 
 19740 a268 28000000 		.quad	40
 19740      00000000 
 19741 a270 60000000 		.quad	96
 19741      00000000 
 19742 a278 00000000 		.quad	.LC378
 19742      00000000 
 19743 a280 00000000 		.quad	.LC0
 19743      00000000 
 19744 a288 00000000 		.quad	0
 19744      00000000 
 19745 a290 00000000 		.quad	0
 19745      00000000 
 19746 a298 00000000 		.quad	0
 19746      00000000 
 19747 a2a0 00000000 		.quad	.Lubsan_type11
 19747      00000000 
 19748 a2a8 15000000 		.quad	21
 19748      00000000 
 19749 a2b0 40000000 		.quad	64
 19749      00000000 
 19750 a2b8 00000000 		.quad	.LC379
 19750      00000000 
 19751 a2c0 00000000 		.quad	.LC0
 19751      00000000 
 19752 a2c8 00000000 		.quad	0
 19752      00000000 
 19753 a2d0 00000000 		.quad	0
 19753      00000000 
 19754 a2d8 00000000 		.quad	0
 19754      00000000 
 19755 a2e0 00000000 		.quad	.Lubsan_data392
 19755      00000000 
 19756 a2e8 20000000 		.quad	32
 19756      00000000 
 19757 a2f0 40000000 		.quad	64
 19757      00000000 
 19758 a2f8 00000000 		.quad	.LC380
 19758      00000000 
 19759 a300 00000000 		.quad	.LC0
 19759      00000000 
 19760 a308 00000000 		.quad	0
 19760      00000000 
 19761 a310 00000000 		.quad	0
 19761      00000000 
 19762 a318 00000000 		.quad	0
 19762      00000000 
 19763 a320 00000000 		.quad	.Lubsan_data391
 19763      00000000 
 19764 a328 20000000 		.quad	32
 19764      00000000 
 19765 a330 40000000 		.quad	64
 19765      00000000 
 19766 a338 00000000 		.quad	.LC381
 19766      00000000 
 19767 a340 00000000 		.quad	.LC0
 19767      00000000 
 19768 a348 00000000 		.quad	0
 19768      00000000 
 19769 a350 00000000 		.quad	0
 19769      00000000 
 19770 a358 00000000 		.quad	0
 19770      00000000 
 19771 a360 00000000 		.quad	.Lubsan_type10
 19771      00000000 
 19772 a368 14000000 		.quad	20
 19772      00000000 
 19773 a370 40000000 		.quad	64
 19773      00000000 
 19774 a378 00000000 		.quad	.LC382
 19774      00000000 
 19775 a380 00000000 		.quad	.LC0
 19775      00000000 
 19776 a388 00000000 		.quad	0
 19776      00000000 
 19777 a390 00000000 		.quad	0
 19777      00000000 
 19778 a398 00000000 		.quad	0
 19778      00000000 
 19779 a3a0 00000000 		.quad	.Lubsan_data390
 19779      00000000 
 19780 a3a8 20000000 		.quad	32
 19780      00000000 
 19781 a3b0 40000000 		.quad	64
 19781      00000000 
 19782 a3b8 00000000 		.quad	.LC383
 19782      00000000 
 19783 a3c0 00000000 		.quad	.LC0
 19783      00000000 
 19784 a3c8 00000000 		.quad	0
 19784      00000000 
 19785 a3d0 00000000 		.quad	0
 19785      00000000 
 19786 a3d8 00000000 		.quad	0
 19786      00000000 
 19787 a3e0 00000000 		.quad	.Lubsan_type9
 19787      00000000 
 19788 a3e8 1A000000 		.quad	26
 19788      00000000 
 19789 a3f0 40000000 		.quad	64
 19789      00000000 
 19790 a3f8 00000000 		.quad	.LC384
 19790      00000000 
 19791 a400 00000000 		.quad	.LC0
 19791      00000000 
 19792 a408 00000000 		.quad	0
 19792      00000000 
 19793 a410 00000000 		.quad	0
 19793      00000000 
 19794 a418 00000000 		.quad	0
 19794      00000000 
 19795 a420 00000000 		.quad	.Lubsan_data389
 19795      00000000 
 19796 a428 20000000 		.quad	32
 19796      00000000 
 19797 a430 40000000 		.quad	64
 19797      00000000 
 19798 a438 00000000 		.quad	.LC385
 19798      00000000 
 19799 a440 00000000 		.quad	.LC0
 19799      00000000 
 19800 a448 00000000 		.quad	0
 19800      00000000 
 19801 a450 00000000 		.quad	0
 19801      00000000 
 19802 a458 00000000 		.quad	0
 19802      00000000 
 19803 a460 00000000 		.quad	.Lubsan_type8
 19803      00000000 
 19804 a468 1A000000 		.quad	26
 19804      00000000 
 19805 a470 40000000 		.quad	64
 19805      00000000 
 19806 a478 00000000 		.quad	.LC386
 19806      00000000 
 19807 a480 00000000 		.quad	.LC0
 19807      00000000 
 19808 a488 00000000 		.quad	0
 19808      00000000 
 19809 a490 00000000 		.quad	0
 19809      00000000 
 19810 a498 00000000 		.quad	0
 19810      00000000 
 19811 a4a0 00000000 		.quad	.Lubsan_data388
 19811      00000000 
 19812 a4a8 20000000 		.quad	32
 19812      00000000 
 19813 a4b0 40000000 		.quad	64
 19813      00000000 
 19814 a4b8 00000000 		.quad	.LC387
 19814      00000000 
 19815 a4c0 00000000 		.quad	.LC0
 19815      00000000 
 19816 a4c8 00000000 		.quad	0
 19816      00000000 
 19817 a4d0 00000000 		.quad	0
 19817      00000000 
 19818 a4d8 00000000 		.quad	0
 19818      00000000 
 19819 a4e0 00000000 		.quad	.Lubsan_type7
 19819      00000000 
 19820 a4e8 17000000 		.quad	23
 19820      00000000 
 19821 a4f0 40000000 		.quad	64
 19821      00000000 
 19822 a4f8 00000000 		.quad	.LC388
 19822      00000000 
 19823 a500 00000000 		.quad	.LC0
 19823      00000000 
 19824 a508 00000000 		.quad	0
 19824      00000000 
 19825 a510 00000000 		.quad	0
 19825      00000000 
 19826 a518 00000000 		.quad	0
 19826      00000000 
 19827 a520 00000000 		.quad	.Lubsan_data387
 19827      00000000 
 19828 a528 20000000 		.quad	32
 19828      00000000 
 19829 a530 40000000 		.quad	64
 19829      00000000 
 19830 a538 00000000 		.quad	.LC389
 19830      00000000 
 19831 a540 00000000 		.quad	.LC0
 19831      00000000 
 19832 a548 00000000 		.quad	0
 19832      00000000 
 19833 a550 00000000 		.quad	0
 19833      00000000 
 19834 a558 00000000 		.quad	0
 19834      00000000 
 19835 a560 00000000 		.quad	.Lubsan_type6
 19835      00000000 
 19836 a568 17000000 		.quad	23
 19836      00000000 
 19837 a570 40000000 		.quad	64
 19837      00000000 
 19838 a578 00000000 		.quad	.LC390
 19838      00000000 
 19839 a580 00000000 		.quad	.LC0
 19839      00000000 
 19840 a588 00000000 		.quad	0
 19840      00000000 
 19841 a590 00000000 		.quad	0
 19841      00000000 
 19842 a598 00000000 		.quad	0
 19842      00000000 
 19843 a5a0 00000000 		.quad	.Lubsan_data386
 19843      00000000 
 19844 a5a8 20000000 		.quad	32
 19844      00000000 
 19845 a5b0 40000000 		.quad	64
 19845      00000000 
 19846 a5b8 00000000 		.quad	.LC391
 19846      00000000 
 19847 a5c0 00000000 		.quad	.LC0
 19847      00000000 
 19848 a5c8 00000000 		.quad	0
 19848      00000000 
 19849 a5d0 00000000 		.quad	0
 19849      00000000 
 19850 a5d8 00000000 		.quad	0
 19850      00000000 
 19851 a5e0 00000000 		.quad	.Lubsan_data385
 19851      00000000 
 19852 a5e8 10000000 		.quad	16
 19852      00000000 
 19853 a5f0 40000000 		.quad	64
 19853      00000000 
 19854 a5f8 00000000 		.quad	.LC392
 19854      00000000 
 19855 a600 00000000 		.quad	.LC0
 19855      00000000 
 19856 a608 00000000 		.quad	0
 19856      00000000 
 19857 a610 00000000 		.quad	0
 19857      00000000 
 19858 a618 00000000 		.quad	0
 19858      00000000 
 19859 a620 00000000 		.quad	.Lubsan_data384
 19859      00000000 
 19860 a628 10000000 		.quad	16
 19860      00000000 
 19861 a630 40000000 		.quad	64
 19861      00000000 
 19862 a638 00000000 		.quad	.LC393
 19862      00000000 
 19863 a640 00000000 		.quad	.LC0
 19863      00000000 
 19864 a648 00000000 		.quad	0
 19864      00000000 
 19865 a650 00000000 		.quad	0
 19865      00000000 
 19866 a658 00000000 		.quad	0
 19866      00000000 
 19867 a660 00000000 		.quad	.Lubsan_data383
 19867      00000000 
 19868 a668 20000000 		.quad	32
 19868      00000000 
 19869 a670 40000000 		.quad	64
 19869      00000000 
 19870 a678 00000000 		.quad	.LC394
 19870      00000000 
 19871 a680 00000000 		.quad	.LC0
 19871      00000000 
 19872 a688 00000000 		.quad	0
 19872      00000000 
 19873 a690 00000000 		.quad	0
 19873      00000000 
 19874 a698 00000000 		.quad	0
 19874      00000000 
 19875 a6a0 00000000 		.quad	.Lubsan_data382
 19875      00000000 
 19876 a6a8 10000000 		.quad	16
 19876      00000000 
 19877 a6b0 40000000 		.quad	64
 19877      00000000 
 19878 a6b8 00000000 		.quad	.LC395
 19878      00000000 
 19879 a6c0 00000000 		.quad	.LC0
 19879      00000000 
 19880 a6c8 00000000 		.quad	0
 19880      00000000 
 19881 a6d0 00000000 		.quad	0
 19881      00000000 
 19882 a6d8 00000000 		.quad	0
 19882      00000000 
 19883 a6e0 00000000 		.quad	.Lubsan_data381
 19883      00000000 
 19884 a6e8 10000000 		.quad	16
 19884      00000000 
 19885 a6f0 40000000 		.quad	64
 19885      00000000 
 19886 a6f8 00000000 		.quad	.LC396
 19886      00000000 
 19887 a700 00000000 		.quad	.LC0
 19887      00000000 
 19888 a708 00000000 		.quad	0
 19888      00000000 
 19889 a710 00000000 		.quad	0
 19889      00000000 
 19890 a718 00000000 		.quad	0
 19890      00000000 
 19891 a720 00000000 		.quad	.Lubsan_data380
 19891      00000000 
 19892 a728 20000000 		.quad	32
 19892      00000000 
 19893 a730 40000000 		.quad	64
 19893      00000000 
 19894 a738 00000000 		.quad	.LC397
 19894      00000000 
 19895 a740 00000000 		.quad	.LC0
 19895      00000000 
 19896 a748 00000000 		.quad	0
 19896      00000000 
 19897 a750 00000000 		.quad	0
 19897      00000000 
 19898 a758 00000000 		.quad	0
 19898      00000000 
 19899 a760 00000000 		.quad	.Lubsan_data379
 19899      00000000 
 19900 a768 10000000 		.quad	16
 19900      00000000 
 19901 a770 40000000 		.quad	64
 19901      00000000 
 19902 a778 00000000 		.quad	.LC398
 19902      00000000 
 19903 a780 00000000 		.quad	.LC0
 19903      00000000 
 19904 a788 00000000 		.quad	0
 19904      00000000 
 19905 a790 00000000 		.quad	0
 19905      00000000 
 19906 a798 00000000 		.quad	0
 19906      00000000 
 19907 a7a0 00000000 		.quad	.Lubsan_data378
 19907      00000000 
 19908 a7a8 10000000 		.quad	16
 19908      00000000 
 19909 a7b0 40000000 		.quad	64
 19909      00000000 
 19910 a7b8 00000000 		.quad	.LC399
 19910      00000000 
 19911 a7c0 00000000 		.quad	.LC0
 19911      00000000 
 19912 a7c8 00000000 		.quad	0
 19912      00000000 
 19913 a7d0 00000000 		.quad	0
 19913      00000000 
 19914 a7d8 00000000 		.quad	0
 19914      00000000 
 19915 a7e0 00000000 		.quad	.Lubsan_data377
 19915      00000000 
 19916 a7e8 20000000 		.quad	32
 19916      00000000 
 19917 a7f0 40000000 		.quad	64
 19917      00000000 
 19918 a7f8 00000000 		.quad	.LC400
 19918      00000000 
 19919 a800 00000000 		.quad	.LC0
 19919      00000000 
 19920 a808 00000000 		.quad	0
 19920      00000000 
 19921 a810 00000000 		.quad	0
 19921      00000000 
 19922 a818 00000000 		.quad	0
 19922      00000000 
 19923 a820 00000000 		.quad	.Lubsan_type5
 19923      00000000 
 19924 a828 1A000000 		.quad	26
 19924      00000000 
 19925 a830 40000000 		.quad	64
 19925      00000000 
 19926 a838 00000000 		.quad	.LC401
 19926      00000000 
 19927 a840 00000000 		.quad	.LC0
 19927      00000000 
 19928 a848 00000000 		.quad	0
 19928      00000000 
 19929 a850 00000000 		.quad	0
 19929      00000000 
 19930 a858 00000000 		.quad	0
 19930      00000000 
 19931 a860 00000000 		.quad	.Lubsan_data376
 19931      00000000 
 19932 a868 10000000 		.quad	16
 19932      00000000 
 19933 a870 40000000 		.quad	64
 19933      00000000 
 19934 a878 00000000 		.quad	.LC402
 19934      00000000 
 19935 a880 00000000 		.quad	.LC0
 19935      00000000 
 19936 a888 00000000 		.quad	0
 19936      00000000 
 19937 a890 00000000 		.quad	0
 19937      00000000 
 19938 a898 00000000 		.quad	0
 19938      00000000 
 19939 a8a0 00000000 		.quad	.Lubsan_data375
 19939      00000000 
 19940 a8a8 10000000 		.quad	16
 19940      00000000 
 19941 a8b0 40000000 		.quad	64
 19941      00000000 
 19942 a8b8 00000000 		.quad	.LC403
 19942      00000000 
 19943 a8c0 00000000 		.quad	.LC0
 19943      00000000 
 19944 a8c8 00000000 		.quad	0
 19944      00000000 
 19945 a8d0 00000000 		.quad	0
 19945      00000000 
 19946 a8d8 00000000 		.quad	0
 19946      00000000 
 19947 a8e0 00000000 		.quad	.Lubsan_data374
 19947      00000000 
 19948 a8e8 20000000 		.quad	32
 19948      00000000 
 19949 a8f0 40000000 		.quad	64
 19949      00000000 
 19950 a8f8 00000000 		.quad	.LC404
 19950      00000000 
 19951 a900 00000000 		.quad	.LC0
 19951      00000000 
 19952 a908 00000000 		.quad	0
 19952      00000000 
 19953 a910 00000000 		.quad	0
 19953      00000000 
 19954 a918 00000000 		.quad	0
 19954      00000000 
 19955 a920 00000000 		.quad	.Lubsan_type4
 19955      00000000 
 19956 a928 11000000 		.quad	17
 19956      00000000 
 19957 a930 40000000 		.quad	64
 19957      00000000 
 19958 a938 00000000 		.quad	.LC405
 19958      00000000 
 19959 a940 00000000 		.quad	.LC0
 19959      00000000 
 19960 a948 00000000 		.quad	0
 19960      00000000 
 19961 a950 00000000 		.quad	0
 19961      00000000 
 19962 a958 00000000 		.quad	0
 19962      00000000 
 19963 a960 00000000 		.quad	.Lubsan_data373
 19963      00000000 
 19964 a968 28000000 		.quad	40
 19964      00000000 
 19965 a970 60000000 		.quad	96
 19965      00000000 
 19966 a978 00000000 		.quad	.LC406
 19966      00000000 
 19967 a980 00000000 		.quad	.LC0
 19967      00000000 
 19968 a988 00000000 		.quad	0
 19968      00000000 
 19969 a990 00000000 		.quad	0
 19969      00000000 
 19970 a998 00000000 		.quad	0
 19970      00000000 
 19971 a9a0 00000000 		.quad	.LC5
 19971      00000000 
 19972 a9a8 0C000000 		.quad	12
 19972      00000000 
 19973 a9b0 40000000 		.quad	64
 19973      00000000 
 19974 a9b8 00000000 		.quad	.LC407
 19974      00000000 
 19975 a9c0 00000000 		.quad	.LC0
 19975      00000000 
 19976 a9c8 00000000 		.quad	0
 19976      00000000 
 19977 a9d0 00000000 		.quad	0
 19977      00000000 
 19978 a9d8 00000000 		.quad	0
 19978      00000000 
 19979 a9e0 00000000 		.quad	.LC25
 19979      00000000 
 19980 a9e8 27000000 		.quad	39
 19980      00000000 
 19981 a9f0 60000000 		.quad	96
 19981      00000000 
 19982 a9f8 00000000 		.quad	.LC408
 19982      00000000 
 19983 aa00 00000000 		.quad	.LC0
 19983      00000000 
 19984 aa08 00000000 		.quad	0
 19984      00000000 
 19985 aa10 00000000 		.quad	0
 19985      00000000 
 19986 aa18 00000000 		.quad	0
 19986      00000000 
 19987 aa20 00000000 		.quad	.LC13
 19987      00000000 
 19988 aa28 27000000 		.quad	39
 19988      00000000 
 19989 aa30 60000000 		.quad	96
 19989      00000000 
 19990 aa38 00000000 		.quad	.LC409
 19990      00000000 
 19991 aa40 00000000 		.quad	.LC0
 19991      00000000 
 19992 aa48 00000000 		.quad	0
 19992      00000000 
 19993 aa50 00000000 		.quad	0
 19993      00000000 
 19994 aa58 00000000 		.quad	0
 19994      00000000 
 19995 aa60 00000000 		.quad	.LC3
 19995      00000000 
 19996 aa68 25000000 		.quad	37
 19996      00000000 
 19997 aa70 60000000 		.quad	96
 19997      00000000 
 19998 aa78 00000000 		.quad	.LC410
 19998      00000000 
 19999 aa80 00000000 		.quad	.LC0
 19999      00000000 
 20000 aa88 00000000 		.quad	0
 20000      00000000 
 20001 aa90 00000000 		.quad	0
 20001      00000000 
 20002 aa98 00000000 		.quad	0
 20002      00000000 
 20003 aaa0 00000000 		.quad	.LC7
 20003      00000000 
 20004 aaa8 26000000 		.quad	38
 20004      00000000 
 20005 aab0 60000000 		.quad	96
 20005      00000000 
 20006 aab8 00000000 		.quad	.LC411
 20006      00000000 
 20007 aac0 00000000 		.quad	.LC0
 20007      00000000 
 20008 aac8 00000000 		.quad	0
 20008      00000000 
 20009 aad0 00000000 		.quad	0
 20009      00000000 
 20010 aad8 00000000 		.quad	0
 20010      00000000 
 20011 aae0 00000000 		.quad	.LC9
 20011      00000000 
 20012 aae8 27000000 		.quad	39
 20012      00000000 
 20013 aaf0 60000000 		.quad	96
 20013      00000000 
 20014 aaf8 00000000 		.quad	.LC412
 20014      00000000 
 20015 ab00 00000000 		.quad	.LC0
 20015      00000000 
 20016 ab08 00000000 		.quad	0
 20016      00000000 
 20017 ab10 00000000 		.quad	0
 20017      00000000 
 20018 ab18 00000000 		.quad	0
 20018      00000000 
 20019 ab20 00000000 		.quad	.LC21
 20019      00000000 
 20020 ab28 1A000000 		.quad	26
 20020      00000000 
 20021 ab30 40000000 		.quad	64
 20021      00000000 
 20022 ab38 00000000 		.quad	.LC413
 20022      00000000 
 20023 ab40 00000000 		.quad	.LC0
 20023      00000000 
 20024 ab48 00000000 		.quad	0
 20024      00000000 
 20025 ab50 00000000 		.quad	0
 20025      00000000 
 20026 ab58 00000000 		.quad	0
 20026      00000000 
 20027 ab60 00000000 		.quad	.LC16
 20027      00000000 
 20028 ab68 24000000 		.quad	36
 20028      00000000 
 20029 ab70 60000000 		.quad	96
 20029      00000000 
 20030 ab78 00000000 		.quad	.LC414
 20030      00000000 
 20031 ab80 00000000 		.quad	.LC0
 20031      00000000 
 20032 ab88 00000000 		.quad	0
 20032      00000000 
 20033 ab90 00000000 		.quad	0
 20033      00000000 
 20034 ab98 00000000 		.quad	0
 20034      00000000 
 20035 aba0 00000000 		.quad	.LC19
 20035      00000000 
 20036 aba8 23000000 		.quad	35
 20036      00000000 
 20037 abb0 60000000 		.quad	96
 20037      00000000 
 20038 abb8 00000000 		.quad	.LC415
 20038      00000000 
 20039 abc0 00000000 		.quad	.LC0
 20039      00000000 
 20040 abc8 00000000 		.quad	0
 20040      00000000 
 20041 abd0 00000000 		.quad	0
 20041      00000000 
 20042 abd8 00000000 		.quad	0
 20042      00000000 
 20043 abe0 00000000 		.quad	.LC15
 20043      00000000 
 20044 abe8 1F000000 		.quad	31
 20044      00000000 
 20045 abf0 40000000 		.quad	64
 20045      00000000 
 20046 abf8 00000000 		.quad	.LC416
 20046      00000000 
 20047 ac00 00000000 		.quad	.LC0
 20047      00000000 
 20048 ac08 00000000 		.quad	0
 20048      00000000 
 20049 ac10 00000000 		.quad	0
 20049      00000000 
 20050 ac18 00000000 		.quad	0
 20050      00000000 
 20051 ac20 00000000 		.quad	.LC28
 20051      00000000 
 20052 ac28 29000000 		.quad	41
 20052      00000000 
 20053 ac30 60000000 		.quad	96
 20053      00000000 
 20054 ac38 00000000 		.quad	.LC417
 20054      00000000 
 20055 ac40 00000000 		.quad	.LC0
 20055      00000000 
 20056 ac48 00000000 		.quad	0
 20056      00000000 
 20057 ac50 00000000 		.quad	0
 20057      00000000 
 20058 ac58 00000000 		.quad	0
 20058      00000000 
 20059 ac60 00000000 		.quad	.LC30
 20059      00000000 
 20060 ac68 2A000000 		.quad	42
 20060      00000000 
 20061 ac70 60000000 		.quad	96
 20061      00000000 
 20062 ac78 00000000 		.quad	.LC418
 20062      00000000 
 20063 ac80 00000000 		.quad	.LC0
 20063      00000000 
 20064 ac88 00000000 		.quad	0
 20064      00000000 
 20065 ac90 00000000 		.quad	0
 20065      00000000 
 20066 ac98 00000000 		.quad	0
 20066      00000000 
 20067 aca0 00000000 		.quad	.LC33
 20067      00000000 
 20068 aca8 27000000 		.quad	39
 20068      00000000 
 20069 acb0 60000000 		.quad	96
 20069      00000000 
 20070 acb8 00000000 		.quad	.LC419
 20070      00000000 
 20071 acc0 00000000 		.quad	.LC0
 20071      00000000 
 20072 acc8 00000000 		.quad	0
 20072      00000000 
 20073 acd0 00000000 		.quad	0
 20073      00000000 
 20074 acd8 00000000 		.quad	0
 20074      00000000 
 20075 ace0 00000000 		.quad	.LC10
 20075      00000000 
 20076 ace8 24000000 		.quad	36
 20076      00000000 
 20077 acf0 60000000 		.quad	96
 20077      00000000 
 20078 acf8 00000000 		.quad	.LC420
 20078      00000000 
 20079 ad00 00000000 		.quad	.LC0
 20079      00000000 
 20080 ad08 00000000 		.quad	0
 20080      00000000 
 20081 ad10 00000000 		.quad	0
 20081      00000000 
 20082 ad18 00000000 		.quad	0
 20082      00000000 
 20083 ad20 00000000 		.quad	.LC2
 20083      00000000 
 20084 ad28 01000000 		.quad	1
 20084      00000000 
 20085 ad30 40000000 		.quad	64
 20085      00000000 
 20086 ad38 00000000 		.quad	.LC421
 20086      00000000 
 20087 ad40 00000000 		.quad	.LC0
 20087      00000000 
 20088 ad48 00000000 		.quad	0
 20088      00000000 
 20089 ad50 00000000 		.quad	0
 20089      00000000 
 20090 ad58 00000000 		.quad	0
 20090      00000000 
 20091 ad60 00000000 		.quad	.LC32
 20091      00000000 
 20092 ad68 28000000 		.quad	40
 20092      00000000 
 20093 ad70 60000000 		.quad	96
 20093      00000000 
 20094 ad78 00000000 		.quad	.LC422
 20094      00000000 
 20095 ad80 00000000 		.quad	.LC0
 20095      00000000 
 20096 ad88 00000000 		.quad	0
 20096      00000000 
 20097 ad90 00000000 		.quad	0
 20097      00000000 
 20098 ad98 00000000 		.quad	0
 20098      00000000 
 20099 ada0 00000000 		.quad	.LC24
 20099      00000000 
 20100 ada8 31000000 		.quad	49
 20100      00000000 
 20101 adb0 60000000 		.quad	96
 20101      00000000 
 20102 adb8 00000000 		.quad	.LC423
 20102      00000000 
 20103 adc0 00000000 		.quad	.LC0
 20103      00000000 
 20104 adc8 00000000 		.quad	0
 20104      00000000 
 20105 add0 00000000 		.quad	0
 20105      00000000 
 20106 add8 00000000 		.quad	0
 20106      00000000 
 20107 ade0 00000000 		.quad	.LC36
 20107      00000000 
 20108 ade8 2C000000 		.quad	44
 20108      00000000 
 20109 adf0 60000000 		.quad	96
 20109      00000000 
 20110 adf8 00000000 		.quad	.LC424
 20110      00000000 
 20111 ae00 00000000 		.quad	.LC0
 20111      00000000 
 20112 ae08 00000000 		.quad	0
 20112      00000000 
 20113 ae10 00000000 		.quad	0
 20113      00000000 
 20114 ae18 00000000 		.quad	0
 20114      00000000 
 20115 ae20 00000000 		.quad	.LC0
 20115      00000000 
 20116 ae28 32000000 		.quad	50
 20116      00000000 
 20117 ae30 60000000 		.quad	96
 20117      00000000 
 20118 ae38 00000000 		.quad	.LC425
 20118      00000000 
 20119 ae40 00000000 		.quad	.LC0
 20119      00000000 
 20120 ae48 00000000 		.quad	0
 20120      00000000 
 20121 ae50 00000000 		.quad	0
 20121      00000000 
 20122 ae58 00000000 		.quad	0
 20122      00000000 
 20123 ae60 00000000 		.quad	.LC6
 20123      00000000 
 20124 ae68 0E000000 		.quad	14
 20124      00000000 
 20125 ae70 40000000 		.quad	64
 20125      00000000 
 20126 ae78 00000000 		.quad	.LC426
 20126      00000000 
 20127 ae80 00000000 		.quad	.LC0
 20127      00000000 
 20128 ae88 00000000 		.quad	0
 20128      00000000 
 20129 ae90 00000000 		.quad	0
 20129      00000000 
 20130 ae98 00000000 		.quad	0
 20130      00000000 
 20131 aea0 00000000 		.quad	.LC18
 20131      00000000 
 20132 aea8 27000000 		.quad	39
 20132      00000000 
 20133 aeb0 60000000 		.quad	96
 20133      00000000 
 20134 aeb8 00000000 		.quad	.LC427
 20134      00000000 
 20135 aec0 00000000 		.quad	.LC0
 20135      00000000 
 20136 aec8 00000000 		.quad	0
 20136      00000000 
 20137 aed0 00000000 		.quad	0
 20137      00000000 
 20138 aed8 00000000 		.quad	0
 20138      00000000 
 20139              		.text
 20141              	_sub_D_00099_0:
 20142              	.LFB3054:
 20143              		.cfi_startproc
 20144 1a3c F30F1EFA 		endbr64
 20145 1a40 55       		pushq	%rbp
 20146              		.cfi_def_cfa_offset 16
 20147              		.cfi_offset 6, -16
 20148 1a41 4889E5   		movq	%rsp, %rbp
 20149              		.cfi_def_cfa_register 6
 20150 1a44 BE850100 		movl	$389, %esi
 20150      00
 20151 1a49 488D3D00 		leaq	.LASAN0(%rip), %rdi
 20151      000000
 20152 1a50 E8000000 		call	__asan_unregister_globals@PLT
 20152      00
 20153 1a55 5D       		popq	%rbp
 20154              		.cfi_def_cfa 7, 8
 20155 1a56 C3       		ret
 20156              		.cfi_endproc
 20157              	.LFE3054:
 20159              		.section	.fini_array.00099,"aw"
 20160              		.align 8
 20161 0000 00000000 		.quad	_sub_D_00099_0
 20161      00000000 
 20162              		.text
 20164              	_sub_I_00099_1:
 20165              	.LFB3055:
 20166              		.cfi_startproc
 20167 1a57 F30F1EFA 		endbr64
 20168 1a5b 55       		pushq	%rbp
 20169              		.cfi_def_cfa_offset 16
 20170              		.cfi_offset 6, -16
 20171 1a5c 4889E5   		movq	%rsp, %rbp
 20172              		.cfi_def_cfa_register 6
 20173 1a5f E8000000 		call	__asan_init@PLT
 20173      00
 20174 1a64 E8000000 		call	__asan_version_mismatch_check_v8@PLT
 20174      00
 20175 1a69 BE850100 		movl	$389, %esi
 20175      00
 20176 1a6e 488D3D00 		leaq	.LASAN0(%rip), %rdi
 20176      000000
 20177 1a75 E8000000 		call	__asan_register_globals@PLT
 20177      00
 20178 1a7a 5D       		popq	%rbp
 20179              		.cfi_def_cfa 7, 8
 20180 1a7b C3       		ret
 20181              		.cfi_endproc
 20182              	.LFE3055:
 20184              		.section	.init_array.00099,"aw"
 20185              		.align 8
 20186 0000 00000000 		.quad	_sub_I_00099_1
 20186      00000000 
 20187              		.text
 20188              	.Letext0:
 20189              		.file 21 "/usr/include/c++/9/cwchar"
 20190              		.file 22 "/usr/include/c++/9/bits/exception_ptr.h"
 20191              		.file 23 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h"
 20192              		.file 24 "/usr/include/c++/9/type_traits"
 20193              		.file 25 "/usr/include/c++/9/bits/stl_pair.h"
 20194              		.file 26 "/usr/include/c++/9/debug/debug.h"
 20195              		.file 27 "/usr/include/c++/9/cstdint"
 20196              		.file 28 "/usr/include/c++/9/clocale"
 20197              		.file 29 "/usr/include/c++/9/limits"
 20198              		.file 30 "/usr/include/c++/9/string_view"
 20199              		.file 31 "/usr/include/c++/9/cstdlib"
 20200              		.file 32 "/usr/include/c++/9/cstdio"
 20201              		.file 33 "/usr/include/c++/9/bits/stringfwd.h"
 20202              		.file 34 "/usr/include/c++/9/system_error"
 20203              		.file 35 "/usr/include/c++/9/cwctype"
 20204              		.file 36 "/usr/include/c++/9/istream"
 20205              		.file 37 "/usr/include/c++/9/utility"
 20206              		.file 38 "/usr/include/c++/9/ostream"
 20207              		.file 39 "/usr/include/c++/9/iosfwd"
 20208              		.file 40 "/usr/include/c++/9/bits/predefined_ops.h"
 20209              		.file 41 "/usr/include/c++/9/ext/numeric_traits.h"
 20210              		.file 42 "/usr/include/c++/9/ext/alloc_traits.h"
 20211              		.file 43 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 20212              		.file 44 "<built-in>"
 20213              		.file 45 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 20214              		.file 46 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 20215              		.file 47 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 20216              		.file 48 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 20217              		.file 49 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 20218              		.file 50 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 20219              		.file 51 "/usr/include/wchar.h"
 20220              		.file 52 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 20221              		.file 53 "/usr/include/x86_64-linux-gnu/bits/types.h"
 20222              		.file 54 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h"
 20223              		.file 55 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 20224              		.file 56 "/usr/include/stdint.h"
 20225              		.file 57 "/usr/include/locale.h"
 20226              		.file 58 "/usr/include/time.h"
 20227              		.file 59 "/usr/include/stdlib.h"
 20228              		.file 60 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h"
 20229              		.file 61 "/usr/include/stdio.h"
 20230              		.file 62 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 20231              		.file 63 "/usr/include/errno.h"
 20232              		.file 64 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h"
 20233              		.file 65 "/usr/include/wctype.h"
 57143              		.align 8
 57146              	DW.ref.__gxx_personality_v0:
 57147 0000 00000000 		.quad	__gxx_personality_v0
 57147      00000000 
 57148              		.ident	"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0"
 57149              		.section	.note.GNU-stack,"",@progbits
 57150              		.section	.note.gnu.property,"a"
 57151              		.align 8
 57152 0000 04000000 		.long	 1f - 0f
 57153 0004 10000000 		.long	 4f - 1f
 57154 0008 05000000 		.long	 5
 57155              	0:
 57156 000c 474E5500 		.string	 "GNU"
 57157              	1:
 57158              		.align 8
 57159 0010 020000C0 		.long	 0xc0000002
 57160 0014 04000000 		.long	 3f - 2f
 57161              	2:
 57162 0018 03000000 		.long	 0x3
 57163              	3:
 57164 001c 00000000 		.align 8
 57165              	4:
